[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vulnhunter-v5"
version = "5.0.0"
description = "Advanced Hybrid Static-Dynamic Vulnerability Detection"
authors = [
    {name = "VulnHunter Research Team", email = "research@vulnhunter.ai"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = [
    "vulnerability detection",
    "static analysis",
    "dynamic analysis",
    "smart contracts",
    "machine learning",
    "security"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Topic :: Security",
    "Topic :: Software Development :: Quality Assurance",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "torch>=2.0.0",
    "torch-geometric>=2.4.0",
    "transformers>=4.30.0",
    "azureml-sdk>=1.52.0",
    "networkx>=3.1",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "imbalanced-learn>=0.11.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "structlog>=23.1.0",
    "shap>=0.42.0",
    "requests>=2.31.0",
    "pydantic>=2.0.0",
    "ray[tune]>=2.6.0",
    "click>=8.1.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
fuzzing = [
    "atheris>=2.3.0",
]

[project.scripts]
vulnhunter = "src.deploy.cli:cli"

[project.urls]
Homepage = "https://github.com/Rudra2018/VulnHunter"
Documentation = "https://vulnhunter.readthedocs.io/"
Repository = "https://github.com/Rudra2018/VulnHunter"
"Bug Tracker" = "https://github.com/Rudra2018/VulnHunter/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["src"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torch_geometric.*",
    "transformers.*",
    "azureml.*",
    "networkx.*",
    "sklearn.*",
    "imblearn.*",
    "shap.*",
    "ray.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["src/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]