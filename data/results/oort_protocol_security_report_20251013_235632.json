{
  "metadata": {
    "target": "Oort Protocol Olympus",
    "analysis_date": "2025-10-13T23:56:31.480780",
    "analyzer_version": "VulnHunter AI v2.0 - Blockchain Security Suite"
  },
  "attack_surface": {
    "core_components": {
      "evm_implementation": {
        "path": "libevm/",
        "files": [],
        "risk_level": "critical",
        "description": "EVM implementation - core execution environment",
        "file_counts": {
          "cpp": 0,
          "solidity": 0,
          "javascript": 0,
          "total": 0
        }
      },
      "vm_interpreter": {
        "path": "libinterpreter/",
        "files": [
          "/tmp/oort_olympus/libinterpreter/CMakeLists.txt",
          "/tmp/oort_olympus/libinterpreter/VMConfig.h",
          "/tmp/oort_olympus/libinterpreter/VMCalls.cpp",
          "/tmp/oort_olympus/libinterpreter/interpreter.h",
          "/tmp/oort_olympus/libinterpreter/VMOpt.cpp",
          "/tmp/oort_olympus/libinterpreter/VM.cpp",
          "/tmp/oort_olympus/libinterpreter/VM.h"
        ],
        "risk_level": "critical",
        "description": "Virtual machine interpreter - execution engine",
        "file_counts": {
          "cpp": 6,
          "solidity": 0,
          "javascript": 0,
          "total": 7
        }
      },
      "consensus_layer": {
        "path": "mcp/consensus/",
        "files": [
          "/tmp/oort_olympus/mcp/consensus/validation.cpp",
          "/tmp/oort_olympus/mcp/consensus/ledger.cpp",
          "/tmp/oort_olympus/mcp/consensus/validation.hpp",
          "/tmp/oort_olympus/mcp/consensus/ledger.hpp"
        ],
        "risk_level": "critical",
        "description": "Consensus mechanism implementation",
        "file_counts": {
          "cpp": 4,
          "solidity": 0,
          "javascript": 0,
          "total": 4
        }
      },
      "p2p_network": {
        "path": "mcp/p2p/",
        "files": [
          "/tmp/oort_olympus/mcp/p2p/node_table.cpp",
          "/tmp/oort_olympus/mcp/p2p/discover_packet.cpp",
          "/tmp/oort_olympus/mcp/p2p/common.cpp",
          "/tmp/oort_olympus/mcp/p2p/frame_coder.cpp",
          "/tmp/oort_olympus/mcp/p2p/peer.hpp",
          "/tmp/oort_olympus/mcp/p2p/host.hpp",
          "/tmp/oort_olympus/mcp/p2p/peer_manager.hpp",
          "/tmp/oort_olympus/mcp/p2p/upnp.hpp",
          "/tmp/oort_olympus/mcp/p2p/capability.cpp",
          "/tmp/oort_olympus/mcp/p2p/node_entry.cpp",
          "/tmp/oort_olympus/mcp/p2p/peer_store.hpp",
          "/tmp/oort_olympus/mcp/p2p/handshake.cpp",
          "/tmp/oort_olympus/mcp/p2p/peer_manager.cpp",
          "/tmp/oort_olympus/mcp/p2p/capability.hpp",
          "/tmp/oort_olympus/mcp/p2p/upnp.cpp",
          "/tmp/oort_olympus/mcp/p2p/peer_store.cpp",
          "/tmp/oort_olympus/mcp/p2p/node_entry.hpp",
          "/tmp/oort_olympus/mcp/p2p/handshake.hpp",
          "/tmp/oort_olympus/mcp/p2p/node_table.hpp",
          "/tmp/oort_olympus/mcp/p2p/discover_packet.hpp",
          "/tmp/oort_olympus/mcp/p2p/common.hpp",
          "/tmp/oort_olympus/mcp/p2p/peer.cpp",
          "/tmp/oort_olympus/mcp/p2p/frame_coder.hpp",
          "/tmp/oort_olympus/mcp/p2p/host.cpp"
        ],
        "risk_level": "high",
        "description": "Peer-to-peer networking layer",
        "file_counts": {
          "cpp": 24,
          "solidity": 0,
          "javascript": 0,
          "total": 24
        }
      },
      "storage_layer": {
        "path": "mcp/db/",
        "files": [
          "/tmp/oort_olympus/mcp/db/db_transaction.cpp",
          "/tmp/oort_olympus/mcp/db/db_iterator.hpp",
          "/tmp/oort_olympus/mcp/db/column.cpp",
          "/tmp/oort_olympus/mcp/db/write_batch.hpp",
          "/tmp/oort_olympus/mcp/db/counter.hpp",
          "/tmp/oort_olympus/mcp/db/database.hpp",
          "/tmp/oort_olympus/mcp/db/counter.cpp",
          "/tmp/oort_olympus/mcp/db/database.cpp",
          "/tmp/oort_olympus/mcp/db/db_transaction.hpp",
          "/tmp/oort_olympus/mcp/db/db_iterator.cpp",
          "/tmp/oort_olympus/mcp/db/write_batch.cpp",
          "/tmp/oort_olympus/mcp/db/column.hpp"
        ],
        "risk_level": "high",
        "description": "Database and storage implementation",
        "file_counts": {
          "cpp": 12,
          "solidity": 0,
          "javascript": 0,
          "total": 12
        }
      },
      "rpc_interface": {
        "path": "mcp/rpc/",
        "files": [
          "/tmp/oort_olympus/mcp/rpc/rpc.cpp",
          "/tmp/oort_olympus/mcp/rpc/connection.hpp",
          "/tmp/oort_olympus/mcp/rpc/handler.hpp",
          "/tmp/oort_olympus/mcp/rpc/rpc_ws.hpp",
          "/tmp/oort_olympus/mcp/rpc/jsonHelper.hpp",
          "/tmp/oort_olympus/mcp/rpc/json.hpp",
          "/tmp/oort_olympus/mcp/rpc/LogFilter.hpp",
          "/tmp/oort_olympus/mcp/rpc/config.hpp",
          "/tmp/oort_olympus/mcp/rpc/config.cpp",
          "/tmp/oort_olympus/mcp/rpc/exceptions.hpp",
          "/tmp/oort_olympus/mcp/rpc/rpc.hpp",
          "/tmp/oort_olympus/mcp/rpc/connection.cpp",
          "/tmp/oort_olympus/mcp/rpc/handler.cpp",
          "/tmp/oort_olympus/mcp/rpc/rpc_ws.cpp",
          "/tmp/oort_olympus/mcp/rpc/json.cpp",
          "/tmp/oort_olympus/mcp/rpc/jsonHelper.cpp",
          "/tmp/oort_olympus/mcp/rpc/LogFilter.cpp"
        ],
        "risk_level": "medium",
        "description": "RPC API interface",
        "file_counts": {
          "cpp": 17,
          "solidity": 0,
          "javascript": 0,
          "total": 17
        }
      },
      "smart_contracts": {
        "path": "test/contracts/",
        "files": [
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/SoloMargin.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/State.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/Permission.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/Getters.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/Operation.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestSimpleCallee.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestAutoTrader.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/ErroringOmiseToken.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestLib.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestMakerOracle.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TokenB.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestCurve.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TokenC.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestUniswapV2Pair2.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestSoloMargin.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TokenA.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestCallee.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestInterestSetter.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestCounter.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestUniswapV2Pair.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/ErroringToken.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestPriceOracle.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestPolynomialInterestSetter.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/OmiseToken.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestToken.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/testing/TestDoubleExponentInterestSetter.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/oracles/UsdcPriceOracle.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/oracles/WethPriceOracle.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/traders/Refunder.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/traders/CanonicalOrders.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/traders/StopLimitOrders.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/traders/LimitOrders.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/traders/DaiMigrator.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/traders/Expiry.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/traders/ExpiryV2.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/traders/FinalSettlement.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/multisig/MultiSig.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/multisig/PartiallyDelayedMultiSig.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/multisig/DelayedMultiSig.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/lib/TypedSignature.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/interestsetters/DoubleExponentInterestSetter.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/interestsetters/PolynomialInterestSetter.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/proxies/SignedOperationProxy.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/proxies/LiquidatorProxyV1ForSoloMargin.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/proxies/PayableProxyForSoloMargin.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/helpers/OnlySolo.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/interfaces/IMakerOracle.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/interfaces/IUniswapV2Pair.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/external/interfaces/ICurve.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/impl/OperationImpl.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/lib/Actions.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/lib/Time.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/lib/Token.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/lib/Exchange.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/lib/Account.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/lib/Events.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/lib/Require.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/lib/Interest.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/lib/Cache.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/lib/Storage.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/lib/Math.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/lib/Monetary.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/lib/Decimal.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/lib/Types.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/interfaces/IErc20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/interfaces/ICallee.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/interfaces/IPriceOracle.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/interfaces/IExchangeWrapper.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/interfaces/IAutoTrader.sol",
          "/tmp/oort_olympus/test/contracts/mcp-dydx/contracts/protocol/interfaces/IInterestSetter.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/farm/LotteryRewardPool.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/farm/CakeToken.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/farm/SousChef.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/farm/BnbStaking.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/farm/Timelock.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/farm/MasterChef.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/farm/SyrupBar.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/core/PancakeFactory.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/core/PancakePair.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/core/Migration.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/core/PancakeERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/PancakeRouter01.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/Migrations.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/PancakeRouter.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/PancakeMigrator.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/test/WETH9.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/test/DeflatingERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/test/RouterEventEmitter.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/libraries/PancakeLibrary.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/libraries/PancakeOracleLibrary.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/libraries/SafeMath.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/interfaces/IERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/interfaces/IPancakeRouter01.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/interfaces/IPancakeRouter02.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/interfaces/IWETH.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/interfaces/IPancakeMigrator.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/interfaces/V1/IUniswapV1Factory.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/periphery/interfaces/V1/IUniswapV1Exchange.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/core/test/ERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/core/libraries/SafeMath.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/core/libraries/UQ112x112.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/core/libraries/Math.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/core/interfaces/IERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/core/interfaces/IPancakeFactory.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/core/interfaces/IPancakeCallee.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/core/interfaces/IPancakePair.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/core/interfaces/IPancakeERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Migrations.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Multicall.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/farm/libs/PancakeVoteProxy.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/farm/libs/MockBEP20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-pancakeswap-test/contracts/farm/libs/WBNB.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/EIP20NonStandardInterface.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/ComptrollerInterface.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/Comptroller.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/CErc20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/Exponential.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/ERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/PriceOracle.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/LegacyInterestRateModel.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/CToken.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/LegacyJumpRateModelV2.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/CErc20Delegator.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/CErc20Delegate.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/ExponentialNoError.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/MultiSigWallet.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/SafeMath.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/ErrorReporter.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/Unitroller.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/CarefulMath.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/JumpRateModel.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/Timelock.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/MIEther.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/EIP20Interface.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/Multicall.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/InterestRateModel.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/JumpRateModelV2.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/ComptrollerStorage.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/WhitePaperInterestRateModel.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/Reservoir.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/CCompLikeDelegate.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/CErc20Immutable.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/PriceOracleAdapter.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/Maximillion.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/BaseJumpRateModelV2.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/CTokenInterfaces.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/mocks/MockPriceProviderMoC.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/mocks/SimplePriceOracle.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/Lens/MarketIndicatorLens.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/Governance/GovernorAlpha.sol",
          "/tmp/oort_olympus/test/contracts/mcp-compound/contracts/Governance/RLEN.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/PancakeFactory.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/OpenDiamond.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/AccesRegistry.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/PancakeRouter.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/Faucet.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/facets/OracleOpen.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/facets/DiamondCutFacet.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/facets/Liquidator.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/facets/DiamondInit.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/facets/TokenList.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/facets/DiamondLoupeFacet.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/facets/Loan2.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/facets/DynamicInterest.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/facets/Loan1.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/facets/Reserve.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/facets/Loan.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/util/IERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/util/Pausable.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/util/Address.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/util/Context.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/util/IBEP20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/libraries/LibComptroller.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/libraries/AppStorageOpen.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/libraries/LibReserve.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/libraries/LibCommon.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/libraries/LibDiamond.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/libraries/LibDeposit.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/libraries/LibSwap.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/libraries/LibOracle.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/libraries/LibDynamicInterest.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/libraries/LibLiquidation.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/libraries/LibLoan2.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/libraries/LibLoan1.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/mockup/IMockBep20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/mockup/MockBep20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/mockup/BEP20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/ITokenList.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/IAccessRegistry.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/ILoan.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/IUniswapV2Router02.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/IDiamondCut.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/IPancakeRouter01.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/AggregatorV3Interface.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/IDeposit.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/IComptroller.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/IDynamicInterest.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/ILoan2.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/ILoan1.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/IReserve.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/IAugustusSwapper.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/IDiamondLoupe.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/IOracleOpen.sol",
          "/tmp/oort_olympus/test/contracts/mcp-diamond-test/contracts/interfaces/ILiquidator.sol",
          "/tmp/oort_olympus/test/contracts/mcp-multisig/contracts/MultiSigWalletWithDailyLimit.sol",
          "/tmp/oort_olympus/test/contracts/mcp-multisig/contracts/Factory.sol",
          "/tmp/oort_olympus/test/contracts/mcp-multisig/contracts/MultiSigWalletWithDailyLimitFactory.sol",
          "/tmp/oort_olympus/test/contracts/mcp-multisig/contracts/MultiSigWallet.sol",
          "/tmp/oort_olympus/test/contracts/mcp-multisig/contracts/MultiSigWalletFactory.sol",
          "/tmp/oort_olympus/test/contracts/mcp-multisig/contracts/TestCalls.sol",
          "/tmp/oort_olympus/test/contracts/mcp-multisig/contracts/TestToken.sol",
          "/tmp/oort_olympus/test/contracts/mcp-upgradable-test/contracts/BridgeContract.sol",
          "/tmp/oort_olympus/test/contracts/mcp-upgradable-test/contracts/TestAdmin.sol",
          "/tmp/oort_olympus/test/contracts/mcp-upgradable-test/contracts/FundContract.sol",
          "/tmp/oort_olympus/test/contracts/mcp-upgradable-test/contracts/UCCN.sol",
          "/tmp/oort_olympus/test/contracts/mcp-upgradable-test/contracts/TestImpl.sol",
          "/tmp/oort_olympus/test/contracts/mcp-upgradable-test/contracts/DWDN.sol",
          "/tmp/oort_olympus/test/contracts/mcp-upgradable-test/contracts/EarlyBirdCollateral.sol",
          "/tmp/oort_olympus/test/contracts/mcp-upgradable-test/contracts/BridgeContract2.sol",
          "/tmp/oort_olympus/test/contracts/mcp-upgradable-test/contracts/Test.sol",
          "/tmp/oort_olympus/test/contracts/mcp-upgradable-test/contracts/usdm.sol",
          "/tmp/oort_olympus/test/contracts/mcp-upgradable-test/contracts/TestToken.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/UniswapV2Migrator.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/UniswapV2Router01.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/UniswapV2Router02.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/test/WETH9.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/test/ERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/test/DeflatingERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/test/RouterEventEmitter.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/libraries/UniswapV2Library.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/libraries/SafeMath.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/libraries/UniswapV2LiquidityMathLibrary.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleComputeLiquidityValue.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleFlashSwap.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleOracleSimple.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSwapToPrice.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/interfaces/IERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/interfaces/IUniswapV2Router01.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/interfaces/IUniswapV2Router02.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/interfaces/IWETH.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/interfaces/IUniswapV2Migrator.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/interfaces/V1/IUniswapV1Factory.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-periphery/contracts/interfaces/V1/IUniswapV1Exchange.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-core/contracts/UniswapV2Factory.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-core/contracts/UniswapV2ERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-core/contracts/UniswapV2Pair.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-core/contracts/test/ERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-core/contracts/libraries/SafeMath.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-core/contracts/libraries/UQ112x112.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-core/contracts/libraries/Math.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-core/contracts/interfaces/IERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-core/contracts/interfaces/IUniswapV2ERC20.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-core/contracts/interfaces/IUniswapV2Factory.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-core/contracts/interfaces/IUniswapV2Pair.sol",
          "/tmp/oort_olympus/test/contracts/mcp-uniswapv2-core/contracts/interfaces/IUniswapV2Callee.sol"
        ],
        "risk_level": "high",
        "description": "Smart contract implementations (primarily test contracts)",
        "file_counts": {
          "cpp": 0,
          "solidity": 272,
          "javascript": 0,
          "total": 272
        }
      }
    }
  },
  "vulnerabilities": {
    "critical": [],
    "high": [
      {
        "name": "Unvalidated Network Input",
        "severity": "high",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/handshake.hpp",
        "line": 137,
        "code_snippet": "std::mutex _mutex; ///socket close not thread safe.",
        "description": "Network input without proper validation",
        "match": "socket close not thread",
        "confidence": 0.7
      },
      {
        "name": "Unvalidated Network Input",
        "severity": "high",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/peer.cpp",
        "line": 106,
        "code_snippet": "ba::async_read(*socket, boost::asio::buffer(read_header_buffer, read_header_buffer.size()), [this, this_l](boost::system::error_code ec, std::size_t size)",
        "description": "Network input without proper validation",
        "match": "socket, boost::asio::buffer(read_header_buffer, read",
        "confidence": 0.7
      },
      {
        "name": "Unvalidated Network Input",
        "severity": "high",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/peer.cpp",
        "line": 140,
        "code_snippet": "ba::async_read(*socket, boost::asio::buffer(read_buffer, packet_size), [this, this_l, packet_size, hLength](boost::system::error_code ec, std::size_t size)",
        "description": "Network input without proper validation",
        "match": "socket, boost::asio::buffer(read",
        "confidence": 0.7
      },
      {
        "name": "Weak Random Number Generation",
        "severity": "high",
        "category": "cryptographic",
        "component": "rpc_interface",
        "file": "mcp/rpc/rpc_ws.cpp",
        "line": 420,
        "code_snippet": "ws(boost::asio::make_strand(sock.get_executor())),",
        "description": "Weak random number generation for cryptographic purposes",
        "match": "rand(",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Getters.sol",
        "line": 24,
        "code_snippet": "import { IPriceOracle } from \"./interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"./interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Getters.sol",
        "line": 221,
        "code_snippet": "* Get the price oracle address for a market.",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Getters.sol",
        "line": 224,
        "code_snippet": "* @return           The price oracle address",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Getters.sol",
        "line": 226,
        "code_snippet": "function getMarketPriceOracle(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Getters.sol",
        "line": 231,
        "code_snippet": "returns (IPriceOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Getters.sol",
        "line": 234,
        "code_snippet": "return g_state.markets[marketId].priceOracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 27,
        "code_snippet": "import { IPriceOracle } from \"./interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"./interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 95,
        "code_snippet": "IPriceOracle priceOracle,",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 107,
        "code_snippet": "priceOracle,",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 134,
        "code_snippet": "* Set the price oracle for a market.",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 136,
        "code_snippet": "function ownerSetPriceOracle(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 138,
        "code_snippet": "IPriceOracle priceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 144,
        "code_snippet": "AdminImpl.ownerSetPriceOracle(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 147,
        "code_snippet": "priceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/testing/TestPriceOracle.sol",
        "line": 22,
        "code_snippet": "import { IPriceOracle } from \"../protocol/interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"../protocol/interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/testing/TestPriceOracle.sol",
        "line": 27,
        "code_snippet": "* @title TestPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/testing/TestPriceOracle.sol",
        "line": 32,
        "code_snippet": "contract TestPriceOracle is IPriceOracle {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle is IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 25,
        "code_snippet": "import { IPriceOracle } from \"../../protocol/interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"../../protocol/interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 35,
        "code_snippet": "* @title DaiPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 38,
        "code_snippet": "* PriceOracle that gives the price of Dai in USDC.",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 40,
        "code_snippet": "contract DaiPriceOracle is",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 42,
        "code_snippet": "IPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 48,
        "code_snippet": "bytes32 constant FILE = \"DaiPriceOracle\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 180,
        "code_snippet": "// ============ IPriceOracle Functions ============",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/UsdcPriceOracle.sol",
        "line": 22,
        "code_snippet": "import { IPriceOracle } from \"../../protocol/interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"../../protocol/interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/UsdcPriceOracle.sol",
        "line": 27,
        "code_snippet": "* @title UsdcPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/UsdcPriceOracle.sol",
        "line": 30,
        "code_snippet": "* PriceOracle that returns the price of USDC in USD",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/UsdcPriceOracle.sol",
        "line": 32,
        "code_snippet": "contract UsdcPriceOracle is",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/UsdcPriceOracle.sol",
        "line": 33,
        "code_snippet": "IPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/UsdcPriceOracle.sol",
        "line": 41,
        "code_snippet": "// ============ IPriceOracle Functions =============",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/WethPriceOracle.sol",
        "line": 22,
        "code_snippet": "import { IPriceOracle } from \"../../protocol//interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"../../protocol//interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/WethPriceOracle.sol",
        "line": 28,
        "code_snippet": "* @title WethPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/WethPriceOracle.sol",
        "line": 31,
        "code_snippet": "* PriceOracle that returns the price of Wei in USD",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/WethPriceOracle.sol",
        "line": 33,
        "code_snippet": "contract WethPriceOracle is",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/WethPriceOracle.sol",
        "line": 34,
        "code_snippet": "IPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/WethPriceOracle.sol",
        "line": 50,
        "code_snippet": "// ============ IPriceOracle Functions =============",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/interfaces/IMakerOracle.sol",
        "line": 27,
        "code_snippet": "* Interface for the price oracles run by MakerDao",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 23,
        "code_snippet": "import { IPriceOracle } from \"../interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"../interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 65,
        "code_snippet": "event LogSetPriceOracle(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 67,
        "code_snippet": "address priceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 162,
        "code_snippet": "IPriceOracle priceOracle,",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 179,
        "code_snippet": "_setPriceOracle(state, marketId, priceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(state, marketId, priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 197,
        "code_snippet": "function ownerSetPriceOracle(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 200,
        "code_snippet": "IPriceOracle priceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 205,
        "code_snippet": "_setPriceOracle(state, marketId, priceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(state, marketId, priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 329,
        "code_snippet": "function _setPriceOracle(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 332,
        "code_snippet": "IPriceOracle priceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 340,
        "code_snippet": "priceOracle.getPrice(token).value != 0,",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 345,
        "code_snippet": "state.markets[marketId].priceOracle = priceOracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceOracle = priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 347,
        "code_snippet": "emit LogSetPriceOracle(marketId, address(priceOracle));",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(marketId, address(priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Actions.sol",
        "line": 168,
        "code_snippet": "* by the price ratio (given by the oracles) plus a spread (specified globally). Liquidating an",
        "description": "Price oracle manipulation vulnerability",
        "match": "price ratio (given by the oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Storage.sol",
        "line": 34,
        "code_snippet": "import { IPriceOracle } from \"../interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"../interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Storage.sol",
        "line": 68,
        "code_snippet": "// Contract address of the price oracle for this market",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Storage.sol",
        "line": 69,
        "code_snippet": "IPriceOracle priceOracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Storage.sol",
        "line": 306,
        "code_snippet": "IPriceOracle oracle = IPriceOracle(state.markets[marketId].priceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oracle = IPriceOracle(state.markets[marketId].priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Storage.sol",
        "line": 307,
        "code_snippet": "Monetary.Price memory price = oracle.getPrice(state.getToken(marketId));",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price memory price = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/interfaces/IPriceOracle.sol",
        "line": 26,
        "code_snippet": "* @title IPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/interfaces/IPriceOracle.sol",
        "line": 29,
        "code_snippet": "* Interface that Price Oracles for Solo must implement in order to report prices.",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price Oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/interfaces/IPriceOracle.sol",
        "line": 31,
        "code_snippet": "contract IPriceOracle {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "tx.origin Authentication",
        "severity": "high",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 986,
        "code_snippet": "tx.origin == admin",
        "description": "Use of tx.origin for authentication (phishing vulnerability)",
        "match": "tx.origin ==",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 6,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 79,
        "code_snippet": "* @notice Emitted when price oracle is changed",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 81,
        "code_snippet": "event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 670,
        "code_snippet": "vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 674,
        "code_snippet": "vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: vars.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 730,
        "code_snippet": "uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceBorrowedMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 731,
        "code_snippet": "uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceCollateralMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 775,
        "code_snippet": "* @notice Sets a new price oracle for the comptroller",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 776,
        "code_snippet": "* @dev Admin function to set a new price oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 779,
        "code_snippet": "function _setPriceOracle(PriceOracle newOracle) public returns (uint) {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 782,
        "code_snippet": "return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 786,
        "code_snippet": "PriceOracle oldOracle = oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oldOracle = oracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 788,
        "code_snippet": "// Ensure invoke newOracle.isPriceOracle() returns true",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 789,
        "code_snippet": "// require(newOracle.isPriceOracle(), \"oracle method isPriceOracle returned false\");",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(), \"oracle method isPriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 794,
        "code_snippet": "// Emit NewPriceOracle(oldOracle, newOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 795,
        "code_snippet": "emit NewPriceOracle(oldOracle, newOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 950,
        "code_snippet": "function _become(Unitroller unitroller, PriceOracle _oracle, uint _closeFactorMantissa, uint _maxAssets, bool reinitializing) public {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle _oracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 959,
        "code_snippet": "// Ensure invoke _setPriceOracle() = 0",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 960,
        "code_snippet": "uint err = freshBrainedComptroller._setPriceOracle(_oracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(_oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 961,
        "code_snippet": "require (err == uint(Error.NO_ERROR), \"set price oracle error\");",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 6,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 38,
        "code_snippet": "/// @notice Emitted when price oracle is changed",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 39,
        "code_snippet": "event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 737,
        "code_snippet": "vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 741,
        "code_snippet": "vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: vars.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 797,
        "code_snippet": "uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceBorrowedMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 798,
        "code_snippet": "uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceCollateralMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 842,
        "code_snippet": "* @notice Sets a new price oracle for the comptroller",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 843,
        "code_snippet": "* @dev Admin function to set a new price oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 846,
        "code_snippet": "function _setPriceOracle(PriceOracle newOracle) public returns (uint) {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 849,
        "code_snippet": "return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 853,
        "code_snippet": "PriceOracle oldOracle = oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oldOracle = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 858,
        "code_snippet": "// Emit NewPriceOracle(oldOracle, newOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 859,
        "code_snippet": "emit NewPriceOracle(oldOracle, newOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 1133,
        "code_snippet": "Exp memory assetPrice = Exp({mantissa: oracle.getUnderlyingPrice(cToken)});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 5,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 34,
        "code_snippet": "/// @notice Emitted when price oracle is changed",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 35,
        "code_snippet": "event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 666,
        "code_snippet": "vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 670,
        "code_snippet": "vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: vars.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 711,
        "code_snippet": "uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceBorrowedMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 712,
        "code_snippet": "uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceCollateralMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 741,
        "code_snippet": "* @notice Sets a new price oracle for the comptroller",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 742,
        "code_snippet": "* @dev Admin function to set a new price oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 745,
        "code_snippet": "function _setPriceOracle(PriceOracle newOracle) public returns (uint) {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 748,
        "code_snippet": "return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 752,
        "code_snippet": "PriceOracle oldOracle = oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oldOracle = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 757,
        "code_snippet": "// Emit NewPriceOracle(oldOracle, newOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 758,
        "code_snippet": "emit NewPriceOracle(oldOracle, newOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 6,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 52,
        "code_snippet": "* @notice Emitted when price oracle is changed",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 54,
        "code_snippet": "event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 718,
        "code_snippet": "vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 722,
        "code_snippet": "vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: vars.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 778,
        "code_snippet": "uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceBorrowedMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 779,
        "code_snippet": "uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceCollateralMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 823,
        "code_snippet": "* @notice Sets a new price oracle for the comptroller",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 824,
        "code_snippet": "* @dev Admin function to set a new price oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 827,
        "code_snippet": "function _setPriceOracle(PriceOracle newOracle) public returns (uint) {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 830,
        "code_snippet": "return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 834,
        "code_snippet": "PriceOracle oldOracle = oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oldOracle = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 839,
        "code_snippet": "// Emit NewPriceOracle(oldOracle, newOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 840,
        "code_snippet": "emit NewPriceOracle(oldOracle, newOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "tx.origin Authentication",
        "severity": "high",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 1068,
        "code_snippet": "require(msg.sender == tx.origin, \"only externally owned accounts may refresh speeds\");",
        "description": "Use of tx.origin for authentication (phishing vulnerability)",
        "match": "require(msg.sender == tx.origin",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 5,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 34,
        "code_snippet": "/// @notice Emitted when price oracle is changed",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 35,
        "code_snippet": "event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 739,
        "code_snippet": "vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 743,
        "code_snippet": "vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: vars.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 784,
        "code_snippet": "uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceBorrowedMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 785,
        "code_snippet": "uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceCollateralMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 814,
        "code_snippet": "* @notice Sets a new price oracle for the comptroller",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 815,
        "code_snippet": "* @dev Admin function to set a new price oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 818,
        "code_snippet": "function _setPriceOracle(PriceOracle newOracle) public returns (uint) {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 821,
        "code_snippet": "return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 825,
        "code_snippet": "PriceOracle oldOracle = oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oldOracle = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 830,
        "code_snippet": "// Emit NewPriceOracle(oldOracle, newOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 831,
        "code_snippet": "emit NewPriceOracle(oldOracle, newOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 1087,
        "code_snippet": "Exp memory assetPrice = Exp({mantissa: oracle.getUnderlyingPrice(cToken)});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracle.sol",
        "line": 5,
        "code_snippet": "contract PriceOracle {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracle.sol",
        "line": 6,
        "code_snippet": "/// @notice Indicator that this is a PriceOracle contract (for inspection)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracle.sol",
        "line": 7,
        "code_snippet": "bool public constant isPriceOracle = true;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "tx.origin Authentication",
        "severity": "high",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 1156,
        "code_snippet": "require(msg.sender == tx.origin, \"only externally owned accounts may refresh speeds\");",
        "description": "Use of tx.origin for authentication (phishing vulnerability)",
        "match": "require(msg.sender == tx.origin",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 6,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 38,
        "code_snippet": "/// @notice Emitted when price oracle is changed",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 39,
        "code_snippet": "event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 753,
        "code_snippet": "vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 757,
        "code_snippet": "vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: vars.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 813,
        "code_snippet": "uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceBorrowedMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 814,
        "code_snippet": "uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceCollateralMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 858,
        "code_snippet": "* @notice Sets a new price oracle for the comptroller",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 859,
        "code_snippet": "* @dev Admin function to set a new price oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 862,
        "code_snippet": "function _setPriceOracle(PriceOracle newOracle) public returns (uint) {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 865,
        "code_snippet": "return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 869,
        "code_snippet": "PriceOracle oldOracle = oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oldOracle = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 874,
        "code_snippet": "// Emit NewPriceOracle(oldOracle, newOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 875,
        "code_snippet": "emit NewPriceOracle(oldOracle, newOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 1175,
        "code_snippet": "Exp memory assetPrice = Exp({mantissa: oracle.getUnderlyingPrice(cToken)});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: oracle",
        "confidence": 0.7
      },
      {
        "name": "tx.origin Authentication",
        "severity": "high",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 1102,
        "code_snippet": "require(msg.sender == tx.origin, \"only externally owned accounts may refresh speeds\");",
        "description": "Use of tx.origin for authentication (phishing vulnerability)",
        "match": "require(msg.sender == tx.origin",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 6,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 38,
        "code_snippet": "/// @notice Emitted when price oracle is changed",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 39,
        "code_snippet": "event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 737,
        "code_snippet": "vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 741,
        "code_snippet": "vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: vars.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 797,
        "code_snippet": "uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceBorrowedMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 798,
        "code_snippet": "uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceCollateralMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 842,
        "code_snippet": "* @notice Sets a new price oracle for the comptroller",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 843,
        "code_snippet": "* @dev Admin function to set a new price oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 846,
        "code_snippet": "function _setPriceOracle(PriceOracle newOracle) public returns (uint) {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 849,
        "code_snippet": "return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 853,
        "code_snippet": "PriceOracle oldOracle = oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oldOracle = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 858,
        "code_snippet": "// Emit NewPriceOracle(oldOracle, newOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 859,
        "code_snippet": "emit NewPriceOracle(oldOracle, newOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 1121,
        "code_snippet": "Exp memory assetPrice = Exp({mantissa: oracle.getUnderlyingPrice(cToken)});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 3,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 4,
        "code_snippet": "import \"./PriceOracleAdapter.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 6,
        "code_snippet": "contract PriceOracleProxy is PriceOracle {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracleProxy is PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 53,
        "code_snippet": "// return PriceOracleAdapter(oracleAdapter).assetPrices(address(cToken));",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracleAdapter(oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 68,
        "code_snippet": "\"PriceOracleProxy: only guardian may set the address\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 72,
        "code_snippet": "\"PriceOracleProxy: address token can not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 76,
        "code_snippet": "\"PriceOracleProxy: address adapter can not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 99,
        "code_snippet": "\"PriceOracleProxy: only guardian may set the address\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 103,
        "code_snippet": "\"PriceOracleProxy: address admin can not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 118,
        "code_snippet": "\"PriceOracleProxy: only guardian may set the address\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 122,
        "code_snippet": "\"PriceOracleProxy: sender can not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ErrorReporter.sol",
        "line": 42,
        "code_snippet": "SET_PRICE_ORACLE_OWNER_CHECK,",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 3,
        "code_snippet": "import \"./PriceOracleAdapter.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 29,
        "code_snippet": "contract PriceOracleAdapterMoc is PriceOracleAdapter {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracleAdapterMoc is PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 32,
        "code_snippet": "/// @notice The MoC price oracle, which will continue to serve prices",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 48,
        "code_snippet": "* @notice Construct a PriceOracleAdapter for a MoC oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracleAdapter for a MoC oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 55,
        "code_snippet": "\"PriceOracleAdapterMoc: guardian could not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 59,
        "code_snippet": "\"PriceOracleAdapterMoc: priceProvider could not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 85,
        "code_snippet": "// require(has, \"PriceOracleAdapterMoc: Oracle have no Price\");",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracleAdapterMoc: Oracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 111,
        "code_snippet": "\"PriceOracleAdapterMoc: only guardian may set the address\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 115,
        "code_snippet": "\"PriceOracleAdapterMoc: address could not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 122,
        "code_snippet": "emit PriceOracleAdapterUpdated(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 135,
        "code_snippet": "\"PriceOracleAdapterMoc: only guardian\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 139,
        "code_snippet": "\"PriceOracleAdapterMoc: guardin address can not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerStorage.sol",
        "line": 4,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerStorage.sol",
        "line": 33,
        "code_snippet": "PriceOracle public oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle public oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapter.sol",
        "line": 3,
        "code_snippet": "contract PriceOracleAdapter {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapter.sol",
        "line": 5,
        "code_snippet": "event PriceOracleAdapterUpdated(address oldAddress, address newAddress);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 3,
        "code_snippet": "import \"../PriceOracleAdapter.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 6,
        "code_snippet": "interface V1PriceOracleInterface {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 10,
        "code_snippet": "contract PriceOracleAdapterCompound is PriceOracleAdapter {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracleAdapterCompound is PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 14,
        "code_snippet": "event PriceOracleKeyUpdated(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 19,
        "code_snippet": "/// @notice The price oracle, which will continue to serve prices of compound",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 20,
        "code_snippet": "V1PriceOracleInterface public priceProviderInterface;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 52,
        "code_snippet": "\"PriceOracleAdapterCompound: only guardian may set the address\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 56,
        "code_snippet": "\"PriceOracleAdapterCompound: address could not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 61,
        "code_snippet": "priceProviderInterface = V1PriceOracleInterface(priceProviderAddress);",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceProviderInterface = V1PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 63,
        "code_snippet": "emit PriceOracleAdapterUpdated(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 77,
        "code_snippet": "\"PriceOracleAdapterCompound: only guardian may set the address\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 81,
        "code_snippet": "\"PriceOracleAdapterCompound: cTokenAddress could not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 85,
        "code_snippet": "\"PriceOracleAdapterCompound: keyOracle could not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracleAdapterCompound: keyOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 94,
        "code_snippet": "emit PriceOracleKeyUpdated(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/SimplePriceOracle.sol",
        "line": 3,
        "code_snippet": "import \"../PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/SimplePriceOracle.sol",
        "line": 11,
        "code_snippet": "contract SimplePriceOracle is PriceOracle {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle is PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/SimplePriceOracle.sol",
        "line": 34,
        "code_snippet": "// v1 price oracle interface for use as backing of proxy",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Lens/MarketIndicatorLens.sol",
        "line": 6,
        "code_snippet": "import \"../PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Lens/MarketIndicatorLens.sol",
        "line": 13,
        "code_snippet": "function oracle() external view returns (PriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Lens/MarketIndicatorLens.sol",
        "line": 138,
        "code_snippet": "PriceOracle priceOracle = comptroller.oracle();",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle priceOracle = comptroller.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Lens/MarketIndicatorLens.sol",
        "line": 142,
        "code_snippet": "underlyingPrice: priceOracle.getUnderlyingPrice(cToken)",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price: priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLiquidation.sol",
        "line": 29,
        "code_snippet": "uint256 loanMarketPrice = LibOracle._getQuote(loan.market);",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = LibOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLiquidation.sol",
        "line": 34,
        "code_snippet": "collateralMarketPrice = LibOracle._getQuote(collateral.market);",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = LibOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 84,
        "code_snippet": "(uint price0Cumulative, uint price1Cumulative,) = UniswapV2OracleLibrary.currentCumulativePrices(pair);",
        "description": "Price oracle manipulation vulnerability",
        "match": "price0Cumulative, uint price1Cumulative,) = UniswapV2Oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 116,
        "code_snippet": "(uint price0Cumulative, uint price1Cumulative,) = UniswapV2OracleLibrary.currentCumulativePrices(pair);",
        "description": "Price oracle manipulation vulnerability",
        "match": "price0Cumulative, uint price1Cumulative,) = UniswapV2Oracle",
        "confidence": 0.7
      }
    ],
    "medium": [
      {
        "name": "MEV (Maximal Extractable Value) Exploit",
        "severity": "medium",
        "category": "economic",
        "component": "vm_interpreter",
        "file": "libinterpreter/VM.cpp",
        "line": 360,
        "code_snippet": "fromEvmC(m_host->get_balance(m_context, &m_message->recipient)) > 0)",
        "description": "MEV extraction vulnerability",
        "match": "mEv",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "p2p_network",
        "file": "mcp/p2p/node_table.cpp",
        "line": 304,
        "code_snippet": "if ((now - it->second) < req_timeout)",
        "description": "Consensus logic dependent on block timestamp",
        "match": "now -",
        "confidence": 0.7
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/peer.cpp",
        "line": 282,
        "code_snippet": "LOG(m_log.warning) << \"Error while peer convert data to RLP, buffer size:\" << buffer.size() << \", buffer:\" << dev::toHex(bytesConstRef(&buffer)) << \", message:\" << ex.what();",
        "description": "Potential DoS through resource exhaustion",
        "match": "while peer convert data to RLP, buffer size:\" << buffer.size() << \", buffer:\" << dev::toHex(bytesConstRef(&buffer)) << \", message",
        "confidence": 0.7
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/peer.cpp",
        "line": 286,
        "code_snippet": "LOG(m_log.warning) << \"Error while peer convert data to RLP, buffer size:\" << buffer.size() << \", message:\" << ex.what();",
        "description": "Potential DoS through resource exhaustion",
        "match": "while peer convert data to RLP, buffer size:\" << buffer.size() << \", message",
        "confidence": 0.7
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/peer.cpp",
        "line": 378,
        "code_snippet": "LOG(m_log.warning) << boost::str(boost::format(\"Error while reading packet, packet type: %1% , rlp: %2%, message: %3%\") % (unsigned)type % *r %e.what());",
        "description": "Potential DoS through resource exhaustion",
        "match": "while reading packet, packet type: %1% , rlp: %2%, message",
        "confidence": 0.7
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/peer.cpp",
        "line": 514,
        "code_snippet": "LOG(m_log.warning) << \"Error while peer sending, message:\" << ec.message() << \"@\" << socket->remote_endpoint(ec);",
        "description": "Potential DoS through resource exhaustion",
        "match": "while peer sending, message:\" << ec.message",
        "confidence": 0.7
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/host.cpp",
        "line": 182,
        "code_snippet": "LOG(m_log.error) << boost::str(boost::format(\"Error while acceptor listen on %1%:%2%, message: %3%\")",
        "description": "Potential DoS through resource exhaustion",
        "match": "while acceptor listen on %1%:%2%, message",
        "confidence": 0.39999999999999997
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/host.cpp",
        "line": 200,
        "code_snippet": "//LOG(this_l->m_log.debug) << boost::str(boost::format(\"Error while accepting connections: %1%\") % ec.message());",
        "description": "Potential DoS through resource exhaustion",
        "match": "while accepting connections: %1%\") % ec.message",
        "confidence": 0.39999999999999997
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/host.cpp",
        "line": 614,
        "code_snippet": "LOG(m_log.warning) << boost::str(boost::format(\"Error while starting Peer %1% : %2%, message: %3%\")",
        "description": "Potential DoS through resource exhaustion",
        "match": "while starting Peer %1% : %2%, message",
        "confidence": 0.39999999999999997
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "rpc_interface",
        "file": "mcp/rpc/rpc.cpp",
        "line": 32,
        "code_snippet": "LOG(m_log.error) << boost::str(boost::format(\"Error while binding for HTTP RPC on port %1%: %2%\") % endpoint.port() % ec.message());",
        "description": "Potential DoS through resource exhaustion",
        "match": "while binding for HTTP RPC on port %1%: %2%\") % endpoint.port() % ec.message",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/LogFilter.hpp",
        "line": 22,
        "code_snippet": "dev::h256 blockHash() const { return m_blockHash; }",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/LogFilter.hpp",
        "line": 30,
        "code_snippet": "LogFilter withBlockHash(dev::h256 const& _h) { m_blockHash = _h; return *this; }",
        "description": "Potential block hash manipulation vulnerability",
        "match": "BlockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/handler.cpp",
        "line": 1152,
        "code_snippet": "if (filter.blockHash())",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/handler.cpp",
        "line": 1154,
        "code_snippet": "auto state = m_cache->block_state_get(transaction, filter.blockHash());",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/handler.cpp",
        "line": 1157,
        "code_snippet": "auto _block = m_cache->block_get(transaction, filter.blockHash());",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockHash(",
        "confidence": 0.7
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "rpc_interface",
        "file": "mcp/rpc/rpc_ws.cpp",
        "line": 330,
        "code_snippet": "LOG(m_log.error) << boost::str(boost::format(\"Error while binding for WebSocket RPC on port %1%: %2%\") % endpoint.port() % ec.message());",
        "description": "Potential DoS through resource exhaustion",
        "match": "while binding for WebSocket RPC on port %1%: %2%\") % endpoint.port() % ec.message",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/jsonHelper.cpp",
        "line": 99,
        "code_snippet": "filter.withBlockHash(jsToHash(_json[\"blockhash\"]));",
        "description": "Potential block hash manipulation vulnerability",
        "match": "BlockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/jsonHelper.cpp",
        "line": 224,
        "code_snippet": "if (_t.blockHash() == mcp::block_hash(0)) {",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/jsonHelper.cpp",
        "line": 230,
        "code_snippet": "res[\"blockHash\"] = toJS(_t.blockHash());",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/jsonHelper.cpp",
        "line": 246,
        "code_snippet": "res[\"blockHash\"] = toJS(_t.blockHash());",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockHash(",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 121,
        "code_snippet": "lastUpdate: uint32(block.timestamp),",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/traders/CanonicalOrders.sol",
        "line": 611,
        "code_snippet": "orderInfo.order.expiration == 0 || orderInfo.order.expiration >= block.timestamp,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/traders/StopLimitOrders.sol",
        "line": 481,
        "code_snippet": "orderInfo.order.expiration == 0 || orderInfo.order.expiration >= block.timestamp,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/traders/LimitOrders.sol",
        "line": 447,
        "code_snippet": "orderInfo.order.expiration == 0 || orderInfo.order.expiration >= block.timestamp,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/multisig/PartiallyDelayedMultiSig.sol",
        "line": 55,
        "code_snippet": "block.timestamp >= confirmationTimes[transactionId] + secondsTimeLocked",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/multisig/DelayedMultiSig.sol",
        "line": 77,
        "code_snippet": "block.timestamp >= confirmationTimes[transactionId] + secondsTimeLocked,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/multisig/DelayedMultiSig.sol",
        "line": 142,
        "code_snippet": "setConfirmationTime(transactionId, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/proxies/SignedOperationProxy.sol",
        "line": 285,
        "code_snippet": "auth.header.expiration == 0 || auth.header.expiration >= block.timestamp,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Time.sol",
        "line": 40,
        "code_snippet": "return Math.to32(block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/Timelock.sol",
        "line": 130,
        "code_snippet": "return block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/core/PancakePair.sol",
        "line": 45,
        "code_snippet": "(bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));",
        "description": "External call without proper error handling",
        "match": ".call(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/core/PancakePair.sol",
        "line": 75,
        "code_snippet": "uint32 blockTimestamp = uint32(block.timestamp % 2**32);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/core/PancakeERC20.sol",
        "line": 82,
        "code_snippet": "require(deadline >= block.timestamp, 'Pancake: EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/PancakeRouter01.sol",
        "line": 16,
        "code_snippet": "require(deadline >= block.timestamp, 'PancakeRouter: EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/PancakeRouter.sol",
        "line": 19,
        "code_snippet": "require(deadline >= block.timestamp, 'PancakeRouter: EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/DeflatingERC20.sol",
        "line": 85,
        "code_snippet": "require(deadline >= block.timestamp, 'EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/RouterEventEmitter.sol",
        "line": 18,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/RouterEventEmitter.sol",
        "line": 33,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/RouterEventEmitter.sol",
        "line": 47,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/RouterEventEmitter.sol",
        "line": 62,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/RouterEventEmitter.sol",
        "line": 77,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/RouterEventEmitter.sol",
        "line": 91,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/libraries/PancakeOracleLibrary.sol",
        "line": 12,
        "code_snippet": "return uint32(block.timestamp % 2 ** 32);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Multicall.sol",
        "line": 18,
        "code_snippet": "(bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);",
        "description": "External call without proper error handling",
        "match": ".call(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Multicall.sol",
        "line": 34,
        "code_snippet": "timestamp = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Multicall.sol",
        "line": 27,
        "code_snippet": "function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {",
        "description": "Potential block hash manipulation vulnerability",
        "match": "BlockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Multicall.sol",
        "line": 28,
        "code_snippet": "blockHash = blockhash(blockNumber);",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockhash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Multicall.sol",
        "line": 30,
        "code_snippet": "function getLastBlockHash() public view returns (bytes32 blockHash) {",
        "description": "Potential block hash manipulation vulnerability",
        "match": "BlockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Multicall.sol",
        "line": 31,
        "code_snippet": "blockHash = blockhash(block.number - 1);",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockhash(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/CErc20Delegator.sol",
        "line": 421,
        "code_snippet": "(bool success, bytes memory returnData) = callee.delegatecall(data);",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/CErc20Delegator.sol",
        "line": 448,
        "code_snippet": "(bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));",
        "description": "External call without proper error handling",
        "match": ".staticcall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/CErc20Delegator.sol",
        "line": 465,
        "code_snippet": "(bool success, ) = implementation.delegatecall(msg.data);",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Unitroller.sol",
        "line": 137,
        "code_snippet": "(bool success, ) = comptrollerImplementation.delegatecall(msg.data);",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Timelock.sol",
        "line": 109,
        "code_snippet": "return block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Multicall.sol",
        "line": 23,
        "code_snippet": "(bool success, bytes memory ret) = calls[i].target.staticcall(calls[i].callData);",
        "description": "External call without proper error handling",
        "match": ".staticcall(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Multicall.sol",
        "line": 40,
        "code_snippet": "timestamp = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Multicall.sol",
        "line": 33,
        "code_snippet": "function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash) {",
        "description": "Potential block hash manipulation vulnerability",
        "match": "BlockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Multicall.sol",
        "line": 34,
        "code_snippet": "blockHash = blockhash(blockNumber);",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockhash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Multicall.sol",
        "line": 36,
        "code_snippet": "function getLastBlockHash() external view returns (bytes32 blockHash) {",
        "description": "Potential block hash manipulation vulnerability",
        "match": "BlockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Multicall.sol",
        "line": 37,
        "code_snippet": "blockHash = blockhash(block.number - 1);",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockhash(",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Governance/GovernorAlpha.sol",
        "line": 184,
        "code_snippet": "uint eta = add256(block.timestamp, timelock.delay());",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Governance/GovernorAlpha.sol",
        "line": 246,
        "code_snippet": "} else if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeFactory.sol",
        "line": 411,
        "code_snippet": "(bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));",
        "description": "External call without proper error handling",
        "match": ".call(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeFactory.sol",
        "line": 277,
        "code_snippet": "require(deadline >= block.timestamp, \"Pancake: EXPIRED\");",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeFactory.sol",
        "line": 446,
        "code_snippet": "uint32 blockTimestamp = uint32(block.timestamp % 2**32);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeRouter.sol",
        "line": 36,
        "code_snippet": "(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));",
        "description": "External call without proper error handling",
        "match": ".call(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeRouter.sol",
        "line": 49,
        "code_snippet": "(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));",
        "description": "External call without proper error handling",
        "match": ".call(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeRouter.sol",
        "line": 63,
        "code_snippet": "(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));",
        "description": "External call without proper error handling",
        "match": ".call(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeRouter.sol",
        "line": 541,
        "code_snippet": "require(deadline >= block.timestamp, 'PancakeRouter: EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/Faucet.sol",
        "line": 50,
        "code_snippet": "emit TokenSupportAdded(td.token, td.amount, td.balance, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/Faucet.sol",
        "line": 62,
        "code_snippet": "require(airdropRecords[msg.sender][td.token] <= block.timestamp, \"ERROR: Active timelock\");",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/Faucet.sol",
        "line": 67,
        "code_snippet": "airdropRecords[msg.sender][td.token] = block.timestamp + waitTime;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/Faucet.sol",
        "line": 69,
        "code_snippet": "emit TokensIssued(td.token, msg.sender, td.amount, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Liquidator.sol",
        "line": 32,
        "code_snippet": "emit Liquidation(account, _market, _commitment, amount, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 164,
        "code_snippet": "emit CommitmentAdded(msg.sender, _commitment, _days, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 169,
        "code_snippet": "emit CommitmentAdded(msg.sender, _commitment, _days, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 175,
        "code_snippet": "emit TimelockValidityDeposit(msg.sender, oldTime, ds.timelockValidity, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 187,
        "code_snippet": "emit LoanIssuanceFeesUpdated(msg.sender, oldFees, ds.loanIssuanceFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 200,
        "code_snippet": "emit LoanClosureFeesUpdated(msg.sender, oldFees, ds.loanClosureFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 213,
        "code_snippet": "emit LoanPreClosureFeesUpdated(msg.sender, oldFees, ds.loanPreClosureFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 228,
        "code_snippet": "emit CollateralPreClosureFeesUpdated(msg.sender, oldFees, ds.loanPreClosureFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 245,
        "code_snippet": "emit DepositPreClosureFeesUpdated(msg.sender, oldFees, ds.depositPreClosureFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 258,
        "code_snippet": "emit DepositWithdrawalFeesUpdated(msg.sender, oldFees, ds.depositWithdrawalFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 271,
        "code_snippet": "emit CollateralReleaseFeesUpdated(msg.sender, oldFees, ds.collateralReleaseFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 280,
        "code_snippet": "emit YieldConversionFeesUpdated(msg.sender, oldFees, ds.yieldConversionFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 289,
        "code_snippet": "emit MarketSwapFeesUpdated(msg.sender, oldFees, ds.marketSwapFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 304,
        "code_snippet": "emit ReserveFactorUpdated(msg.sender, oldReserveFactor, ds.reserveFactor, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 329,
        "code_snippet": "block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 348,
        "code_snippet": "emit APRupdated(msg.sender, _apr, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 357,
        "code_snippet": "emit APYupdated(msg.sender, _apy, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 122,
        "code_snippet": "block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 147,
        "code_snippet": "// Convert commitment days into seconds for block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 160,
        "code_snippet": "// deposit.createdAt = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 161,
        "code_snippet": "deposit.activationTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 164,
        "code_snippet": "savingsAccount.deposits[deposit.id - 1].activationTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 165,
        "code_snippet": "savingsAccount.deposits[deposit.id - 1].createdAt = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 169,
        "code_snippet": "if (deposit.createdAt + commitmentTimelock >= block.timestamp) {",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 173,
        "code_snippet": "// console.log(\"block.timestamp : \",block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 173,
        "code_snippet": "// console.log(\"block.timestamp : \",block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 175,
        "code_snippet": "//     deposit.activationTime + deposit.timelockValidity <= block.timestamp,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 189,
        "code_snippet": "deposit.activationTime + deposit.timelockValidity <= block.timestamp,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 207,
        "code_snippet": "emit DepositWithdrawal(msg.sender, deposit.id, _amount, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 229,
        "code_snippet": "emit NewDeposit(_sender, _market, _commitment, _amount, deposit.id, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 256,
        "code_snippet": "deposit.createdAt = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 262,
        "code_snippet": "yield.oldTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 273,
        "code_snippet": "yield.oldTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 338,
        "code_snippet": "deposit.createdAt = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 339,
        "code_snippet": "deposit.activationTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 343,
        "code_snippet": "savingsAccount.deposits[num].createdAt = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/TokenList.sol",
        "line": 79,
        "code_snippet": "emit MarketSupportAdded(_market, _decimals, tokenAddress_, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/TokenList.sol",
        "line": 105,
        "code_snippet": "emit MarketSupportRemoved(_market, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/TokenList.sol",
        "line": 126,
        "code_snippet": "emit MarketSupportUpdated(_market, _decimals, tokenAddress_, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/TokenList.sol",
        "line": 160,
        "code_snippet": "emit Market2Added(_market, _decimals, tokenAddress_, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/TokenList.sol",
        "line": 179,
        "code_snippet": "emit Market2Removed(_market, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/TokenList.sol",
        "line": 196,
        "code_snippet": "emit Market2Updated(_market, _decimals, tokenAddress_, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan2.sol",
        "line": 35,
        "code_snippet": "emit LoanRepaid(msg.sender, loan.id, loan.market, repaymentAmount, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/DynamicInterest.sol",
        "line": 32,
        "code_snippet": "return uint256(keccak256(abi.encodePacked(block.timestamp, block.timestamp, msg.sender)));",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/DynamicInterest.sol",
        "line": 32,
        "code_snippet": "return uint256(keccak256(abi.encodePacked(block.timestamp, block.timestamp, msg.sender)));",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/DynamicInterest.sol",
        "line": 56,
        "code_snippet": "emit DepositInterestUpdated(msg.sender, minDepositInterest, maxDepositInterest, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/DynamicInterest.sol",
        "line": 67,
        "code_snippet": "emit BorrowInterestUpdated(msg.sender, minBorrowInterest, maxBorrowInterest, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/DynamicInterest.sol",
        "line": 78,
        "code_snippet": "emit InterestFactorsUpdated(msg.sender, offset, correlationFactor, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/DynamicInterest.sol",
        "line": 85,
        "code_snippet": "emit InterestsUpdated(msg.sender, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan1.sol",
        "line": 102,
        "code_snippet": "block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan.sol",
        "line": 58,
        "code_snippet": "block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan.sol",
        "line": 83,
        "code_snippet": "block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan.sol",
        "line": 95,
        "code_snippet": "emit WithdrawCollateral(msg.sender, collateralMarket, collateralAmount, loan.id, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan.sol",
        "line": 143,
        "code_snippet": "emit AddCollateral(msg.sender, loan.id, _collateralAmount, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan.sol",
        "line": 168,
        "code_snippet": "emit WithdrawPartialLoan(msg.sender, loan.id, _amount, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan.sol",
        "line": 169,
        "code_snippet": "// emit WithdrawPartialLoan(msg.sender, loan.id, _amount, loan.market, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/util/Address.sol",
        "line": 44,
        "code_snippet": "* https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].",
        "description": "Consensus logic dependent on block timestamp",
        "match": "now/",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibComptroller.sol",
        "line": 109,
        "code_snippet": "apyUpdate.time.push(block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibComptroller.sol",
        "line": 120,
        "code_snippet": "aprUpdate.time.push(block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/AppStorageOpen.sol",
        "line": 27,
        "code_snippet": "uint256[] aprChanges; // Per block.timestamp APR is tabulated in here.",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/AppStorageOpen.sol",
        "line": 47,
        "code_snippet": "uint256 activationTime; // block.timestamp(isTimelockActivated) + timelockValidity.",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/AppStorageOpen.sol",
        "line": 86,
        "code_snippet": "uint256 createdAt; // block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/AppStorageOpen.sol",
        "line": 88,
        "code_snippet": "uint256 activationTime; // block.timestamp when yield withdrawal request was placed.",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibDiamond.sol",
        "line": 169,
        "code_snippet": "(bool success, bytes memory error) = _init.delegatecall(_calldata);",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 182,
        "code_snippet": "// Convert commitment days into seconds for block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 187,
        "code_snippet": "// require((collateral.timelockValidity + commitmentTimelock) < block.timestamp, \"ERROR: Active Timelock\");",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 200,
        "code_snippet": "collateral.activationTime + collateral.timelockValidity <= block.timestamp,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 216,
        "code_snippet": "// emit WithdrawCollateral(_sender, collateralMarket, collateralAmount, loan.id, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 337,
        "code_snippet": "uint256 timeDiff = block.timestamp - apr.time[apr.time.length - 1];",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 350,
        "code_snippet": "} else if (apr.time.length == oldLengthAccruedYield && block.timestamp > time) {",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 352,
        "code_snippet": "uint256 timeDiff = (block.timestamp - time);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 383,
        "code_snippet": "oldTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibDeposit.sol",
        "line": 27,
        "code_snippet": "savingsAccount.accOpenTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibDeposit.sol",
        "line": 49,
        "code_snippet": "uint256 timeDiff = block.timestamp - apy.time[apy.time.length - 1];",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibDeposit.sol",
        "line": 62,
        "code_snippet": "} else if (apy.time.length == oldLengthAccruedYield && block.timestamp > time) {",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibDeposit.sol",
        "line": 64,
        "code_snippet": "uint256 timeDiff = block.timestamp - time;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibDeposit.sol",
        "line": 95,
        "code_snippet": "oldTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibSwap.sol",
        "line": 69,
        "code_snippet": "block.timestamp + 15",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan2.sol",
        "line": 87,
        "code_snippet": "collateral.activationTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan2.sol",
        "line": 99,
        "code_snippet": "loanAccount.collaterals[loan.id - 1].activationTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan2.sol",
        "line": 117,
        "code_snippet": "emit LibLoan.WithdrawCollateral(_sender, collateral.market, collateral.amount, loan.id, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan2.sol",
        "line": 236,
        "code_snippet": "loanAccount.collaterals[num].activationTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan1.sol",
        "line": 56,
        "code_snippet": "loan.createdAt = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan1.sol",
        "line": 81,
        "code_snippet": "deductibleInterest.oldTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan1.sol",
        "line": 139,
        "code_snippet": "loanAccount.accOpenTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-upgradable-test/contracts/TestAdmin.sol",
        "line": 46,
        "code_snippet": "(bool success, ) = a.delegatecall(payload);",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/UniswapV2Router01.sol",
        "line": 16,
        "code_snippet": "require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/UniswapV2Router02.sol",
        "line": 19,
        "code_snippet": "require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/ERC20.sol",
        "line": 82,
        "code_snippet": "require(deadline >= block.timestamp, 'EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/DeflatingERC20.sol",
        "line": 85,
        "code_snippet": "require(deadline >= block.timestamp, 'EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/RouterEventEmitter.sol",
        "line": 18,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/RouterEventEmitter.sol",
        "line": 33,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/RouterEventEmitter.sol",
        "line": 47,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/RouterEventEmitter.sol",
        "line": 62,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/RouterEventEmitter.sol",
        "line": 77,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/RouterEventEmitter.sol",
        "line": 91,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol",
        "line": 12,
        "code_snippet": "return uint32(block.timestamp % 2 ** 32);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "MEV (Maximal Extractable Value) Exploit",
        "severity": "medium",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/libraries/UniswapV2LiquidityMathLibrary.sol",
        "line": 98,
        "code_snippet": "// **note this is subject to manipulation, e.g. sandwich attacks**. prefer passing a manipulation resistant price to",
        "description": "MEV extraction vulnerability",
        "match": "sandwich attack",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 34,
        "code_snippet": "//   [now - [22 hours, 24 hours], now]",
        "description": "Consensus logic dependent on block timestamp",
        "match": "now -",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 61,
        "code_snippet": "uint8 observationIndex = observationIndexOf(block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 78,
        "code_snippet": "uint8 observationIndex = observationIndexOf(block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 82,
        "code_snippet": "uint timeElapsed = block.timestamp - observation.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 85,
        "code_snippet": "observation.timestamp = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 105,
        "code_snippet": "// range [now - [windowSize, windowSize - periodSize * 2], now]",
        "description": "Consensus logic dependent on block timestamp",
        "match": "now -",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 106,
        "code_snippet": "// update must have been called for the bucket corresponding to timestamp `now - windowSize`",
        "description": "Consensus logic dependent on block timestamp",
        "match": "now -",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 111,
        "code_snippet": "uint timeElapsed = block.timestamp - firstObservation.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-core/contracts/UniswapV2ERC20.sol",
        "line": 82,
        "code_snippet": "require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-core/contracts/UniswapV2Pair.sol",
        "line": 45,
        "code_snippet": "(bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));",
        "description": "External call without proper error handling",
        "match": ".call(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-core/contracts/UniswapV2Pair.sol",
        "line": 75,
        "code_snippet": "uint32 blockTimestamp = uint32(block.timestamp % 2**32);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      }
    ],
    "low": [],
    "info": []
  },
  "blockchain_specific": {
    "smart_contracts": [
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/core/PancakePair.sol",
        "line": 45,
        "code_snippet": "(bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));",
        "description": "External call without proper error handling",
        "match": ".call(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/RouterEventEmitter.sol",
        "line": 18,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/RouterEventEmitter.sol",
        "line": 33,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/RouterEventEmitter.sol",
        "line": 47,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/RouterEventEmitter.sol",
        "line": 62,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/RouterEventEmitter.sol",
        "line": 77,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/RouterEventEmitter.sol",
        "line": 91,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Multicall.sol",
        "line": 18,
        "code_snippet": "(bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);",
        "description": "External call without proper error handling",
        "match": ".call(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "tx.origin Authentication",
        "severity": "high",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 986,
        "code_snippet": "tx.origin == admin",
        "description": "Use of tx.origin for authentication (phishing vulnerability)",
        "match": "tx.origin ==",
        "confidence": 0.7
      },
      {
        "name": "tx.origin Authentication",
        "severity": "high",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 1068,
        "code_snippet": "require(msg.sender == tx.origin, \"only externally owned accounts may refresh speeds\");",
        "description": "Use of tx.origin for authentication (phishing vulnerability)",
        "match": "require(msg.sender == tx.origin",
        "confidence": 0.39999999999999997
      },
      {
        "name": "tx.origin Authentication",
        "severity": "high",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 1156,
        "code_snippet": "require(msg.sender == tx.origin, \"only externally owned accounts may refresh speeds\");",
        "description": "Use of tx.origin for authentication (phishing vulnerability)",
        "match": "require(msg.sender == tx.origin",
        "confidence": 0.39999999999999997
      },
      {
        "name": "tx.origin Authentication",
        "severity": "high",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 1102,
        "code_snippet": "require(msg.sender == tx.origin, \"only externally owned accounts may refresh speeds\");",
        "description": "Use of tx.origin for authentication (phishing vulnerability)",
        "match": "require(msg.sender == tx.origin",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/CErc20Delegator.sol",
        "line": 421,
        "code_snippet": "(bool success, bytes memory returnData) = callee.delegatecall(data);",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/CErc20Delegator.sol",
        "line": 448,
        "code_snippet": "(bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));",
        "description": "External call without proper error handling",
        "match": ".staticcall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/CErc20Delegator.sol",
        "line": 465,
        "code_snippet": "(bool success, ) = implementation.delegatecall(msg.data);",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Unitroller.sol",
        "line": 137,
        "code_snippet": "(bool success, ) = comptrollerImplementation.delegatecall(msg.data);",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Multicall.sol",
        "line": 23,
        "code_snippet": "(bool success, bytes memory ret) = calls[i].target.staticcall(calls[i].callData);",
        "description": "External call without proper error handling",
        "match": ".staticcall(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeFactory.sol",
        "line": 411,
        "code_snippet": "(bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));",
        "description": "External call without proper error handling",
        "match": ".call(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeRouter.sol",
        "line": 36,
        "code_snippet": "(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));",
        "description": "External call without proper error handling",
        "match": ".call(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeRouter.sol",
        "line": 49,
        "code_snippet": "(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));",
        "description": "External call without proper error handling",
        "match": ".call(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeRouter.sol",
        "line": 63,
        "code_snippet": "(bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));",
        "description": "External call without proper error handling",
        "match": ".call(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibDiamond.sol",
        "line": 169,
        "code_snippet": "(bool success, bytes memory error) = _init.delegatecall(_calldata);",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-upgradable-test/contracts/TestAdmin.sol",
        "line": 46,
        "code_snippet": "(bool success, ) = a.delegatecall(payload);",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/RouterEventEmitter.sol",
        "line": 18,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/RouterEventEmitter.sol",
        "line": 33,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/RouterEventEmitter.sol",
        "line": 47,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/RouterEventEmitter.sol",
        "line": 62,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/RouterEventEmitter.sol",
        "line": 77,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/RouterEventEmitter.sol",
        "line": 91,
        "code_snippet": "(bool success, bytes memory returnData) = router.delegatecall(abi.encodeWithSelector(",
        "description": "External call without proper error handling",
        "match": ".delegatecall(",
        "confidence": 0.7
      },
      {
        "name": "Unsafe External Call",
        "severity": "medium",
        "category": "smart_contracts",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-core/contracts/UniswapV2Pair.sol",
        "line": 45,
        "code_snippet": "(bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));",
        "description": "External call without proper error handling",
        "match": ".call(",
        "confidence": 0.39999999999999997
      }
    ],
    "consensus": [
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "p2p_network",
        "file": "mcp/p2p/node_table.cpp",
        "line": 304,
        "code_snippet": "if ((now - it->second) < req_timeout)",
        "description": "Consensus logic dependent on block timestamp",
        "match": "now -",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/LogFilter.hpp",
        "line": 22,
        "code_snippet": "dev::h256 blockHash() const { return m_blockHash; }",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/LogFilter.hpp",
        "line": 30,
        "code_snippet": "LogFilter withBlockHash(dev::h256 const& _h) { m_blockHash = _h; return *this; }",
        "description": "Potential block hash manipulation vulnerability",
        "match": "BlockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/handler.cpp",
        "line": 1152,
        "code_snippet": "if (filter.blockHash())",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/handler.cpp",
        "line": 1154,
        "code_snippet": "auto state = m_cache->block_state_get(transaction, filter.blockHash());",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/handler.cpp",
        "line": 1157,
        "code_snippet": "auto _block = m_cache->block_get(transaction, filter.blockHash());",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/jsonHelper.cpp",
        "line": 99,
        "code_snippet": "filter.withBlockHash(jsToHash(_json[\"blockhash\"]));",
        "description": "Potential block hash manipulation vulnerability",
        "match": "BlockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/jsonHelper.cpp",
        "line": 224,
        "code_snippet": "if (_t.blockHash() == mcp::block_hash(0)) {",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/jsonHelper.cpp",
        "line": 230,
        "code_snippet": "res[\"blockHash\"] = toJS(_t.blockHash());",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "rpc_interface",
        "file": "mcp/rpc/jsonHelper.cpp",
        "line": 246,
        "code_snippet": "res[\"blockHash\"] = toJS(_t.blockHash());",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockHash(",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 121,
        "code_snippet": "lastUpdate: uint32(block.timestamp),",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/traders/CanonicalOrders.sol",
        "line": 611,
        "code_snippet": "orderInfo.order.expiration == 0 || orderInfo.order.expiration >= block.timestamp,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/traders/StopLimitOrders.sol",
        "line": 481,
        "code_snippet": "orderInfo.order.expiration == 0 || orderInfo.order.expiration >= block.timestamp,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/traders/LimitOrders.sol",
        "line": 447,
        "code_snippet": "orderInfo.order.expiration == 0 || orderInfo.order.expiration >= block.timestamp,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/multisig/PartiallyDelayedMultiSig.sol",
        "line": 55,
        "code_snippet": "block.timestamp >= confirmationTimes[transactionId] + secondsTimeLocked",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/multisig/DelayedMultiSig.sol",
        "line": 77,
        "code_snippet": "block.timestamp >= confirmationTimes[transactionId] + secondsTimeLocked,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/multisig/DelayedMultiSig.sol",
        "line": 142,
        "code_snippet": "setConfirmationTime(transactionId, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/proxies/SignedOperationProxy.sol",
        "line": 285,
        "code_snippet": "auth.header.expiration == 0 || auth.header.expiration >= block.timestamp,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Time.sol",
        "line": 40,
        "code_snippet": "return Math.to32(block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/Timelock.sol",
        "line": 130,
        "code_snippet": "return block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/core/PancakePair.sol",
        "line": 75,
        "code_snippet": "uint32 blockTimestamp = uint32(block.timestamp % 2**32);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/core/PancakeERC20.sol",
        "line": 82,
        "code_snippet": "require(deadline >= block.timestamp, 'Pancake: EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/PancakeRouter01.sol",
        "line": 16,
        "code_snippet": "require(deadline >= block.timestamp, 'PancakeRouter: EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/PancakeRouter.sol",
        "line": 19,
        "code_snippet": "require(deadline >= block.timestamp, 'PancakeRouter: EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/DeflatingERC20.sol",
        "line": 85,
        "code_snippet": "require(deadline >= block.timestamp, 'EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/libraries/PancakeOracleLibrary.sol",
        "line": 12,
        "code_snippet": "return uint32(block.timestamp % 2 ** 32);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Multicall.sol",
        "line": 34,
        "code_snippet": "timestamp = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Multicall.sol",
        "line": 27,
        "code_snippet": "function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {",
        "description": "Potential block hash manipulation vulnerability",
        "match": "BlockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Multicall.sol",
        "line": 28,
        "code_snippet": "blockHash = blockhash(blockNumber);",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockhash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Multicall.sol",
        "line": 30,
        "code_snippet": "function getLastBlockHash() public view returns (bytes32 blockHash) {",
        "description": "Potential block hash manipulation vulnerability",
        "match": "BlockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Multicall.sol",
        "line": 31,
        "code_snippet": "blockHash = blockhash(block.number - 1);",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockhash(",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Timelock.sol",
        "line": 109,
        "code_snippet": "return block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Multicall.sol",
        "line": 40,
        "code_snippet": "timestamp = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Multicall.sol",
        "line": 33,
        "code_snippet": "function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash) {",
        "description": "Potential block hash manipulation vulnerability",
        "match": "BlockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Multicall.sol",
        "line": 34,
        "code_snippet": "blockHash = blockhash(blockNumber);",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockhash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Multicall.sol",
        "line": 36,
        "code_snippet": "function getLastBlockHash() external view returns (bytes32 blockHash) {",
        "description": "Potential block hash manipulation vulnerability",
        "match": "BlockHash(",
        "confidence": 0.7
      },
      {
        "name": "Block Hash Manipulation",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Multicall.sol",
        "line": 37,
        "code_snippet": "blockHash = blockhash(block.number - 1);",
        "description": "Potential block hash manipulation vulnerability",
        "match": "blockhash(",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Governance/GovernorAlpha.sol",
        "line": 184,
        "code_snippet": "uint eta = add256(block.timestamp, timelock.delay());",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Governance/GovernorAlpha.sol",
        "line": 246,
        "code_snippet": "} else if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeFactory.sol",
        "line": 277,
        "code_snippet": "require(deadline >= block.timestamp, \"Pancake: EXPIRED\");",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeFactory.sol",
        "line": 446,
        "code_snippet": "uint32 blockTimestamp = uint32(block.timestamp % 2**32);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeRouter.sol",
        "line": 541,
        "code_snippet": "require(deadline >= block.timestamp, 'PancakeRouter: EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/Faucet.sol",
        "line": 50,
        "code_snippet": "emit TokenSupportAdded(td.token, td.amount, td.balance, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/Faucet.sol",
        "line": 62,
        "code_snippet": "require(airdropRecords[msg.sender][td.token] <= block.timestamp, \"ERROR: Active timelock\");",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/Faucet.sol",
        "line": 67,
        "code_snippet": "airdropRecords[msg.sender][td.token] = block.timestamp + waitTime;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/Faucet.sol",
        "line": 69,
        "code_snippet": "emit TokensIssued(td.token, msg.sender, td.amount, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Liquidator.sol",
        "line": 32,
        "code_snippet": "emit Liquidation(account, _market, _commitment, amount, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 164,
        "code_snippet": "emit CommitmentAdded(msg.sender, _commitment, _days, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 169,
        "code_snippet": "emit CommitmentAdded(msg.sender, _commitment, _days, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 175,
        "code_snippet": "emit TimelockValidityDeposit(msg.sender, oldTime, ds.timelockValidity, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 187,
        "code_snippet": "emit LoanIssuanceFeesUpdated(msg.sender, oldFees, ds.loanIssuanceFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 200,
        "code_snippet": "emit LoanClosureFeesUpdated(msg.sender, oldFees, ds.loanClosureFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 213,
        "code_snippet": "emit LoanPreClosureFeesUpdated(msg.sender, oldFees, ds.loanPreClosureFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 228,
        "code_snippet": "emit CollateralPreClosureFeesUpdated(msg.sender, oldFees, ds.loanPreClosureFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 245,
        "code_snippet": "emit DepositPreClosureFeesUpdated(msg.sender, oldFees, ds.depositPreClosureFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 258,
        "code_snippet": "emit DepositWithdrawalFeesUpdated(msg.sender, oldFees, ds.depositWithdrawalFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 271,
        "code_snippet": "emit CollateralReleaseFeesUpdated(msg.sender, oldFees, ds.collateralReleaseFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 280,
        "code_snippet": "emit YieldConversionFeesUpdated(msg.sender, oldFees, ds.yieldConversionFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 289,
        "code_snippet": "emit MarketSwapFeesUpdated(msg.sender, oldFees, ds.marketSwapFees, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 304,
        "code_snippet": "emit ReserveFactorUpdated(msg.sender, oldReserveFactor, ds.reserveFactor, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 329,
        "code_snippet": "block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 348,
        "code_snippet": "emit APRupdated(msg.sender, _apr, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "line": 357,
        "code_snippet": "emit APYupdated(msg.sender, _apy, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 122,
        "code_snippet": "block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 147,
        "code_snippet": "// Convert commitment days into seconds for block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 160,
        "code_snippet": "// deposit.createdAt = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 161,
        "code_snippet": "deposit.activationTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 164,
        "code_snippet": "savingsAccount.deposits[deposit.id - 1].activationTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 165,
        "code_snippet": "savingsAccount.deposits[deposit.id - 1].createdAt = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 169,
        "code_snippet": "if (deposit.createdAt + commitmentTimelock >= block.timestamp) {",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 173,
        "code_snippet": "// console.log(\"block.timestamp : \",block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 173,
        "code_snippet": "// console.log(\"block.timestamp : \",block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 175,
        "code_snippet": "//     deposit.activationTime + deposit.timelockValidity <= block.timestamp,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 189,
        "code_snippet": "deposit.activationTime + deposit.timelockValidity <= block.timestamp,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 207,
        "code_snippet": "emit DepositWithdrawal(msg.sender, deposit.id, _amount, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 229,
        "code_snippet": "emit NewDeposit(_sender, _market, _commitment, _amount, deposit.id, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 256,
        "code_snippet": "deposit.createdAt = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 262,
        "code_snippet": "yield.oldTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 273,
        "code_snippet": "yield.oldTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 338,
        "code_snippet": "deposit.createdAt = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 339,
        "code_snippet": "deposit.activationTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "line": 343,
        "code_snippet": "savingsAccount.deposits[num].createdAt = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/TokenList.sol",
        "line": 79,
        "code_snippet": "emit MarketSupportAdded(_market, _decimals, tokenAddress_, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/TokenList.sol",
        "line": 105,
        "code_snippet": "emit MarketSupportRemoved(_market, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/TokenList.sol",
        "line": 126,
        "code_snippet": "emit MarketSupportUpdated(_market, _decimals, tokenAddress_, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/TokenList.sol",
        "line": 160,
        "code_snippet": "emit Market2Added(_market, _decimals, tokenAddress_, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/TokenList.sol",
        "line": 179,
        "code_snippet": "emit Market2Removed(_market, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/TokenList.sol",
        "line": 196,
        "code_snippet": "emit Market2Updated(_market, _decimals, tokenAddress_, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan2.sol",
        "line": 35,
        "code_snippet": "emit LoanRepaid(msg.sender, loan.id, loan.market, repaymentAmount, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/DynamicInterest.sol",
        "line": 32,
        "code_snippet": "return uint256(keccak256(abi.encodePacked(block.timestamp, block.timestamp, msg.sender)));",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/DynamicInterest.sol",
        "line": 32,
        "code_snippet": "return uint256(keccak256(abi.encodePacked(block.timestamp, block.timestamp, msg.sender)));",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/DynamicInterest.sol",
        "line": 56,
        "code_snippet": "emit DepositInterestUpdated(msg.sender, minDepositInterest, maxDepositInterest, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/DynamicInterest.sol",
        "line": 67,
        "code_snippet": "emit BorrowInterestUpdated(msg.sender, minBorrowInterest, maxBorrowInterest, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/DynamicInterest.sol",
        "line": 78,
        "code_snippet": "emit InterestFactorsUpdated(msg.sender, offset, correlationFactor, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/DynamicInterest.sol",
        "line": 85,
        "code_snippet": "emit InterestsUpdated(msg.sender, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan1.sol",
        "line": 102,
        "code_snippet": "block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan.sol",
        "line": 58,
        "code_snippet": "block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan.sol",
        "line": 83,
        "code_snippet": "block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan.sol",
        "line": 95,
        "code_snippet": "emit WithdrawCollateral(msg.sender, collateralMarket, collateralAmount, loan.id, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan.sol",
        "line": 143,
        "code_snippet": "emit AddCollateral(msg.sender, loan.id, _collateralAmount, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan.sol",
        "line": 168,
        "code_snippet": "emit WithdrawPartialLoan(msg.sender, loan.id, _amount, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan.sol",
        "line": 169,
        "code_snippet": "// emit WithdrawPartialLoan(msg.sender, loan.id, _amount, loan.market, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/util/Address.sol",
        "line": 44,
        "code_snippet": "* https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].",
        "description": "Consensus logic dependent on block timestamp",
        "match": "now/",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibComptroller.sol",
        "line": 109,
        "code_snippet": "apyUpdate.time.push(block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibComptroller.sol",
        "line": 120,
        "code_snippet": "aprUpdate.time.push(block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/AppStorageOpen.sol",
        "line": 27,
        "code_snippet": "uint256[] aprChanges; // Per block.timestamp APR is tabulated in here.",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/AppStorageOpen.sol",
        "line": 47,
        "code_snippet": "uint256 activationTime; // block.timestamp(isTimelockActivated) + timelockValidity.",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/AppStorageOpen.sol",
        "line": 86,
        "code_snippet": "uint256 createdAt; // block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/AppStorageOpen.sol",
        "line": 88,
        "code_snippet": "uint256 activationTime; // block.timestamp when yield withdrawal request was placed.",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 182,
        "code_snippet": "// Convert commitment days into seconds for block.timestamp",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 187,
        "code_snippet": "// require((collateral.timelockValidity + commitmentTimelock) < block.timestamp, \"ERROR: Active Timelock\");",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 200,
        "code_snippet": "collateral.activationTime + collateral.timelockValidity <= block.timestamp,",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 216,
        "code_snippet": "// emit WithdrawCollateral(_sender, collateralMarket, collateralAmount, loan.id, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 337,
        "code_snippet": "uint256 timeDiff = block.timestamp - apr.time[apr.time.length - 1];",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 350,
        "code_snippet": "} else if (apr.time.length == oldLengthAccruedYield && block.timestamp > time) {",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 352,
        "code_snippet": "uint256 timeDiff = (block.timestamp - time);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "line": 383,
        "code_snippet": "oldTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibDeposit.sol",
        "line": 27,
        "code_snippet": "savingsAccount.accOpenTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibDeposit.sol",
        "line": 49,
        "code_snippet": "uint256 timeDiff = block.timestamp - apy.time[apy.time.length - 1];",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibDeposit.sol",
        "line": 62,
        "code_snippet": "} else if (apy.time.length == oldLengthAccruedYield && block.timestamp > time) {",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibDeposit.sol",
        "line": 64,
        "code_snippet": "uint256 timeDiff = block.timestamp - time;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibDeposit.sol",
        "line": 95,
        "code_snippet": "oldTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibSwap.sol",
        "line": 69,
        "code_snippet": "block.timestamp + 15",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan2.sol",
        "line": 87,
        "code_snippet": "collateral.activationTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan2.sol",
        "line": 99,
        "code_snippet": "loanAccount.collaterals[loan.id - 1].activationTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan2.sol",
        "line": 117,
        "code_snippet": "emit LibLoan.WithdrawCollateral(_sender, collateral.market, collateral.amount, loan.id, block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan2.sol",
        "line": 236,
        "code_snippet": "loanAccount.collaterals[num].activationTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan1.sol",
        "line": 56,
        "code_snippet": "loan.createdAt = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan1.sol",
        "line": 81,
        "code_snippet": "deductibleInterest.oldTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan1.sol",
        "line": 139,
        "code_snippet": "loanAccount.accOpenTime = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/UniswapV2Router01.sol",
        "line": 16,
        "code_snippet": "require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/UniswapV2Router02.sol",
        "line": 19,
        "code_snippet": "require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/ERC20.sol",
        "line": 82,
        "code_snippet": "require(deadline >= block.timestamp, 'EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/DeflatingERC20.sol",
        "line": 85,
        "code_snippet": "require(deadline >= block.timestamp, 'EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol",
        "line": 12,
        "code_snippet": "return uint32(block.timestamp % 2 ** 32);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 34,
        "code_snippet": "//   [now - [22 hours, 24 hours], now]",
        "description": "Consensus logic dependent on block timestamp",
        "match": "now -",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 61,
        "code_snippet": "uint8 observationIndex = observationIndexOf(block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 78,
        "code_snippet": "uint8 observationIndex = observationIndexOf(block.timestamp);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 82,
        "code_snippet": "uint timeElapsed = block.timestamp - observation.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 85,
        "code_snippet": "observation.timestamp = block.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 105,
        "code_snippet": "// range [now - [windowSize, windowSize - periodSize * 2], now]",
        "description": "Consensus logic dependent on block timestamp",
        "match": "now -",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 106,
        "code_snippet": "// update must have been called for the bucket corresponding to timestamp `now - windowSize`",
        "description": "Consensus logic dependent on block timestamp",
        "match": "now -",
        "confidence": 0.7
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 111,
        "code_snippet": "uint timeElapsed = block.timestamp - firstObservation.timestamp;",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-core/contracts/UniswapV2ERC20.sol",
        "line": 82,
        "code_snippet": "require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Timestamp Dependency",
        "severity": "medium",
        "category": "consensus",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-core/contracts/UniswapV2Pair.sol",
        "line": 75,
        "code_snippet": "uint32 blockTimestamp = uint32(block.timestamp % 2**32);",
        "description": "Consensus logic dependent on block timestamp",
        "match": "block.timestamp",
        "confidence": 0.7
      }
    ],
    "p2p_network": [],
    "cryptographic": [
      {
        "name": "Weak Random Number Generation",
        "severity": "high",
        "category": "cryptographic",
        "component": "rpc_interface",
        "file": "mcp/rpc/rpc_ws.cpp",
        "line": 420,
        "code_snippet": "ws(boost::asio::make_strand(sock.get_executor())),",
        "description": "Weak random number generation for cryptographic purposes",
        "match": "rand(",
        "confidence": 0.7
      }
    ],
    "economic": [
      {
        "name": "MEV (Maximal Extractable Value) Exploit",
        "severity": "medium",
        "category": "economic",
        "component": "vm_interpreter",
        "file": "libinterpreter/VM.cpp",
        "line": 360,
        "code_snippet": "fromEvmC(m_host->get_balance(m_context, &m_message->recipient)) > 0)",
        "description": "MEV extraction vulnerability",
        "match": "mEv",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Getters.sol",
        "line": 24,
        "code_snippet": "import { IPriceOracle } from \"./interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"./interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Getters.sol",
        "line": 221,
        "code_snippet": "* Get the price oracle address for a market.",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Getters.sol",
        "line": 224,
        "code_snippet": "* @return           The price oracle address",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Getters.sol",
        "line": 226,
        "code_snippet": "function getMarketPriceOracle(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Getters.sol",
        "line": 231,
        "code_snippet": "returns (IPriceOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Getters.sol",
        "line": 234,
        "code_snippet": "return g_state.markets[marketId].priceOracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 27,
        "code_snippet": "import { IPriceOracle } from \"./interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"./interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 95,
        "code_snippet": "IPriceOracle priceOracle,",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 107,
        "code_snippet": "priceOracle,",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 134,
        "code_snippet": "* Set the price oracle for a market.",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 136,
        "code_snippet": "function ownerSetPriceOracle(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 138,
        "code_snippet": "IPriceOracle priceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 144,
        "code_snippet": "AdminImpl.ownerSetPriceOracle(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/Admin.sol",
        "line": 147,
        "code_snippet": "priceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/testing/TestPriceOracle.sol",
        "line": 22,
        "code_snippet": "import { IPriceOracle } from \"../protocol/interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"../protocol/interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/testing/TestPriceOracle.sol",
        "line": 27,
        "code_snippet": "* @title TestPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/testing/TestPriceOracle.sol",
        "line": 32,
        "code_snippet": "contract TestPriceOracle is IPriceOracle {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle is IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 25,
        "code_snippet": "import { IPriceOracle } from \"../../protocol/interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"../../protocol/interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 35,
        "code_snippet": "* @title DaiPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 38,
        "code_snippet": "* PriceOracle that gives the price of Dai in USDC.",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 40,
        "code_snippet": "contract DaiPriceOracle is",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 42,
        "code_snippet": "IPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 48,
        "code_snippet": "bytes32 constant FILE = \"DaiPriceOracle\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/DaiPriceOracle.sol",
        "line": 180,
        "code_snippet": "// ============ IPriceOracle Functions ============",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/UsdcPriceOracle.sol",
        "line": 22,
        "code_snippet": "import { IPriceOracle } from \"../../protocol/interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"../../protocol/interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/UsdcPriceOracle.sol",
        "line": 27,
        "code_snippet": "* @title UsdcPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/UsdcPriceOracle.sol",
        "line": 30,
        "code_snippet": "* PriceOracle that returns the price of USDC in USD",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/UsdcPriceOracle.sol",
        "line": 32,
        "code_snippet": "contract UsdcPriceOracle is",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/UsdcPriceOracle.sol",
        "line": 33,
        "code_snippet": "IPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/UsdcPriceOracle.sol",
        "line": 41,
        "code_snippet": "// ============ IPriceOracle Functions =============",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/WethPriceOracle.sol",
        "line": 22,
        "code_snippet": "import { IPriceOracle } from \"../../protocol//interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"../../protocol//interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/WethPriceOracle.sol",
        "line": 28,
        "code_snippet": "* @title WethPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/WethPriceOracle.sol",
        "line": 31,
        "code_snippet": "* PriceOracle that returns the price of Wei in USD",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/WethPriceOracle.sol",
        "line": 33,
        "code_snippet": "contract WethPriceOracle is",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/WethPriceOracle.sol",
        "line": 34,
        "code_snippet": "IPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/oracles/WethPriceOracle.sol",
        "line": 50,
        "code_snippet": "// ============ IPriceOracle Functions =============",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/external/interfaces/IMakerOracle.sol",
        "line": 27,
        "code_snippet": "* Interface for the price oracles run by MakerDao",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 23,
        "code_snippet": "import { IPriceOracle } from \"../interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"../interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 65,
        "code_snippet": "event LogSetPriceOracle(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 67,
        "code_snippet": "address priceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 162,
        "code_snippet": "IPriceOracle priceOracle,",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 179,
        "code_snippet": "_setPriceOracle(state, marketId, priceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(state, marketId, priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 197,
        "code_snippet": "function ownerSetPriceOracle(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 200,
        "code_snippet": "IPriceOracle priceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 205,
        "code_snippet": "_setPriceOracle(state, marketId, priceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(state, marketId, priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 329,
        "code_snippet": "function _setPriceOracle(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 332,
        "code_snippet": "IPriceOracle priceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 340,
        "code_snippet": "priceOracle.getPrice(token).value != 0,",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 345,
        "code_snippet": "state.markets[marketId].priceOracle = priceOracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceOracle = priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/impl/AdminImpl.sol",
        "line": 347,
        "code_snippet": "emit LogSetPriceOracle(marketId, address(priceOracle));",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(marketId, address(priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Actions.sol",
        "line": 168,
        "code_snippet": "* by the price ratio (given by the oracles) plus a spread (specified globally). Liquidating an",
        "description": "Price oracle manipulation vulnerability",
        "match": "price ratio (given by the oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Storage.sol",
        "line": 34,
        "code_snippet": "import { IPriceOracle } from \"../interfaces/IPriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle } from \"../interfaces/IPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Storage.sol",
        "line": 68,
        "code_snippet": "// Contract address of the price oracle for this market",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Storage.sol",
        "line": 69,
        "code_snippet": "IPriceOracle priceOracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Storage.sol",
        "line": 306,
        "code_snippet": "IPriceOracle oracle = IPriceOracle(state.markets[marketId].priceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oracle = IPriceOracle(state.markets[marketId].priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Storage.sol",
        "line": 307,
        "code_snippet": "Monetary.Price memory price = oracle.getPrice(state.getToken(marketId));",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price memory price = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/interfaces/IPriceOracle.sol",
        "line": 26,
        "code_snippet": "* @title IPriceOracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/interfaces/IPriceOracle.sol",
        "line": 29,
        "code_snippet": "* Interface that Price Oracles for Solo must implement in order to report prices.",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price Oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-dydx/contracts/protocol/interfaces/IPriceOracle.sol",
        "line": 31,
        "code_snippet": "contract IPriceOracle {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 6,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 79,
        "code_snippet": "* @notice Emitted when price oracle is changed",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 81,
        "code_snippet": "event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 670,
        "code_snippet": "vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 674,
        "code_snippet": "vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: vars.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 730,
        "code_snippet": "uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceBorrowedMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 731,
        "code_snippet": "uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceCollateralMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 775,
        "code_snippet": "* @notice Sets a new price oracle for the comptroller",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 776,
        "code_snippet": "* @dev Admin function to set a new price oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 779,
        "code_snippet": "function _setPriceOracle(PriceOracle newOracle) public returns (uint) {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 782,
        "code_snippet": "return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 786,
        "code_snippet": "PriceOracle oldOracle = oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oldOracle = oracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 788,
        "code_snippet": "// Ensure invoke newOracle.isPriceOracle() returns true",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 789,
        "code_snippet": "// require(newOracle.isPriceOracle(), \"oracle method isPriceOracle returned false\");",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(), \"oracle method isPriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 794,
        "code_snippet": "// Emit NewPriceOracle(oldOracle, newOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 795,
        "code_snippet": "emit NewPriceOracle(oldOracle, newOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 950,
        "code_snippet": "function _become(Unitroller unitroller, PriceOracle _oracle, uint _closeFactorMantissa, uint _maxAssets, bool reinitializing) public {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle _oracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 959,
        "code_snippet": "// Ensure invoke _setPriceOracle() = 0",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 960,
        "code_snippet": "uint err = freshBrainedComptroller._setPriceOracle(_oracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(_oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "line": 961,
        "code_snippet": "require (err == uint(Error.NO_ERROR), \"set price oracle error\");",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 6,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 38,
        "code_snippet": "/// @notice Emitted when price oracle is changed",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 39,
        "code_snippet": "event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 737,
        "code_snippet": "vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 741,
        "code_snippet": "vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: vars.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 797,
        "code_snippet": "uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceBorrowedMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 798,
        "code_snippet": "uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceCollateralMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 842,
        "code_snippet": "* @notice Sets a new price oracle for the comptroller",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 843,
        "code_snippet": "* @dev Admin function to set a new price oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 846,
        "code_snippet": "function _setPriceOracle(PriceOracle newOracle) public returns (uint) {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 849,
        "code_snippet": "return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 853,
        "code_snippet": "PriceOracle oldOracle = oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oldOracle = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 858,
        "code_snippet": "// Emit NewPriceOracle(oldOracle, newOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 859,
        "code_snippet": "emit NewPriceOracle(oldOracle, newOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "line": 1133,
        "code_snippet": "Exp memory assetPrice = Exp({mantissa: oracle.getUnderlyingPrice(cToken)});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 5,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 34,
        "code_snippet": "/// @notice Emitted when price oracle is changed",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 35,
        "code_snippet": "event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 666,
        "code_snippet": "vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 670,
        "code_snippet": "vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: vars.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 711,
        "code_snippet": "uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceBorrowedMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 712,
        "code_snippet": "uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceCollateralMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 741,
        "code_snippet": "* @notice Sets a new price oracle for the comptroller",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 742,
        "code_snippet": "* @dev Admin function to set a new price oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 745,
        "code_snippet": "function _setPriceOracle(PriceOracle newOracle) public returns (uint) {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 748,
        "code_snippet": "return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 752,
        "code_snippet": "PriceOracle oldOracle = oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oldOracle = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 757,
        "code_snippet": "// Emit NewPriceOracle(oldOracle, newOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "line": 758,
        "code_snippet": "emit NewPriceOracle(oldOracle, newOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 6,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 52,
        "code_snippet": "* @notice Emitted when price oracle is changed",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 54,
        "code_snippet": "event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 718,
        "code_snippet": "vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 722,
        "code_snippet": "vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: vars.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 778,
        "code_snippet": "uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceBorrowedMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 779,
        "code_snippet": "uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceCollateralMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 823,
        "code_snippet": "* @notice Sets a new price oracle for the comptroller",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 824,
        "code_snippet": "* @dev Admin function to set a new price oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 827,
        "code_snippet": "function _setPriceOracle(PriceOracle newOracle) public returns (uint) {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 830,
        "code_snippet": "return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 834,
        "code_snippet": "PriceOracle oldOracle = oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oldOracle = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 839,
        "code_snippet": "// Emit NewPriceOracle(oldOracle, newOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "line": 840,
        "code_snippet": "emit NewPriceOracle(oldOracle, newOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 5,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 34,
        "code_snippet": "/// @notice Emitted when price oracle is changed",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 35,
        "code_snippet": "event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 739,
        "code_snippet": "vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 743,
        "code_snippet": "vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: vars.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 784,
        "code_snippet": "uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceBorrowedMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 785,
        "code_snippet": "uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceCollateralMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 814,
        "code_snippet": "* @notice Sets a new price oracle for the comptroller",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 815,
        "code_snippet": "* @dev Admin function to set a new price oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 818,
        "code_snippet": "function _setPriceOracle(PriceOracle newOracle) public returns (uint) {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 821,
        "code_snippet": "return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 825,
        "code_snippet": "PriceOracle oldOracle = oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oldOracle = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 830,
        "code_snippet": "// Emit NewPriceOracle(oldOracle, newOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 831,
        "code_snippet": "emit NewPriceOracle(oldOracle, newOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "line": 1087,
        "code_snippet": "Exp memory assetPrice = Exp({mantissa: oracle.getUnderlyingPrice(cToken)});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracle.sol",
        "line": 5,
        "code_snippet": "contract PriceOracle {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracle.sol",
        "line": 6,
        "code_snippet": "/// @notice Indicator that this is a PriceOracle contract (for inspection)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracle.sol",
        "line": 7,
        "code_snippet": "bool public constant isPriceOracle = true;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 6,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 38,
        "code_snippet": "/// @notice Emitted when price oracle is changed",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 39,
        "code_snippet": "event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 753,
        "code_snippet": "vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 757,
        "code_snippet": "vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: vars.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 813,
        "code_snippet": "uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceBorrowedMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 814,
        "code_snippet": "uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceCollateralMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 858,
        "code_snippet": "* @notice Sets a new price oracle for the comptroller",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 859,
        "code_snippet": "* @dev Admin function to set a new price oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 862,
        "code_snippet": "function _setPriceOracle(PriceOracle newOracle) public returns (uint) {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 865,
        "code_snippet": "return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 869,
        "code_snippet": "PriceOracle oldOracle = oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oldOracle = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 874,
        "code_snippet": "// Emit NewPriceOracle(oldOracle, newOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 875,
        "code_snippet": "emit NewPriceOracle(oldOracle, newOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "line": 1175,
        "code_snippet": "Exp memory assetPrice = Exp({mantissa: oracle.getUnderlyingPrice(cToken)});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 6,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 38,
        "code_snippet": "/// @notice Emitted when price oracle is changed",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 39,
        "code_snippet": "event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 737,
        "code_snippet": "vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 741,
        "code_snippet": "vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: vars.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 797,
        "code_snippet": "uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceBorrowedMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 798,
        "code_snippet": "uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceCollateralMantissa = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 842,
        "code_snippet": "* @notice Sets a new price oracle for the comptroller",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 843,
        "code_snippet": "* @dev Admin function to set a new price oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 846,
        "code_snippet": "function _setPriceOracle(PriceOracle newOracle) public returns (uint) {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(PriceOracle newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 849,
        "code_snippet": "return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 853,
        "code_snippet": "PriceOracle oldOracle = oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle oldOracle = oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 858,
        "code_snippet": "// Emit NewPriceOracle(oldOracle, newOracle)",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 859,
        "code_snippet": "emit NewPriceOracle(oldOracle, newOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle(oldOracle, newOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "line": 1121,
        "code_snippet": "Exp memory assetPrice = Exp({mantissa: oracle.getUnderlyingPrice(cToken)});",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = Exp({mantissa: oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 3,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 4,
        "code_snippet": "import \"./PriceOracleAdapter.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 6,
        "code_snippet": "contract PriceOracleProxy is PriceOracle {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracleProxy is PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 53,
        "code_snippet": "// return PriceOracleAdapter(oracleAdapter).assetPrices(address(cToken));",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracleAdapter(oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 68,
        "code_snippet": "\"PriceOracleProxy: only guardian may set the address\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 72,
        "code_snippet": "\"PriceOracleProxy: address token can not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 76,
        "code_snippet": "\"PriceOracleProxy: address adapter can not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 99,
        "code_snippet": "\"PriceOracleProxy: only guardian may set the address\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 103,
        "code_snippet": "\"PriceOracleProxy: address admin can not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 118,
        "code_snippet": "\"PriceOracleProxy: only guardian may set the address\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "line": 122,
        "code_snippet": "\"PriceOracleProxy: sender can not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ErrorReporter.sol",
        "line": 42,
        "code_snippet": "SET_PRICE_ORACLE_OWNER_CHECK,",
        "description": "Price oracle manipulation vulnerability",
        "match": "PRICE_ORACLE",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 3,
        "code_snippet": "import \"./PriceOracleAdapter.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 29,
        "code_snippet": "contract PriceOracleAdapterMoc is PriceOracleAdapter {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracleAdapterMoc is PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 32,
        "code_snippet": "/// @notice The MoC price oracle, which will continue to serve prices",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 48,
        "code_snippet": "* @notice Construct a PriceOracleAdapter for a MoC oracle",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracleAdapter for a MoC oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 55,
        "code_snippet": "\"PriceOracleAdapterMoc: guardian could not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 59,
        "code_snippet": "\"PriceOracleAdapterMoc: priceProvider could not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 85,
        "code_snippet": "// require(has, \"PriceOracleAdapterMoc: Oracle have no Price\");",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracleAdapterMoc: Oracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 111,
        "code_snippet": "\"PriceOracleAdapterMoc: only guardian may set the address\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 115,
        "code_snippet": "\"PriceOracleAdapterMoc: address could not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 122,
        "code_snippet": "emit PriceOracleAdapterUpdated(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 135,
        "code_snippet": "\"PriceOracleAdapterMoc: only guardian\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "line": 139,
        "code_snippet": "\"PriceOracleAdapterMoc: guardin address can not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerStorage.sol",
        "line": 4,
        "code_snippet": "import \"./PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/ComptrollerStorage.sol",
        "line": 33,
        "code_snippet": "PriceOracle public oracle;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle public oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapter.sol",
        "line": 3,
        "code_snippet": "contract PriceOracleAdapter {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapter.sol",
        "line": 5,
        "code_snippet": "event PriceOracleAdapterUpdated(address oldAddress, address newAddress);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 3,
        "code_snippet": "import \"../PriceOracleAdapter.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 6,
        "code_snippet": "interface V1PriceOracleInterface {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 10,
        "code_snippet": "contract PriceOracleAdapterCompound is PriceOracleAdapter {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracleAdapterCompound is PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 14,
        "code_snippet": "event PriceOracleKeyUpdated(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 19,
        "code_snippet": "/// @notice The price oracle, which will continue to serve prices of compound",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 20,
        "code_snippet": "V1PriceOracleInterface public priceProviderInterface;",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 52,
        "code_snippet": "\"PriceOracleAdapterCompound: only guardian may set the address\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 56,
        "code_snippet": "\"PriceOracleAdapterCompound: address could not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 61,
        "code_snippet": "priceProviderInterface = V1PriceOracleInterface(priceProviderAddress);",
        "description": "Price oracle manipulation vulnerability",
        "match": "priceProviderInterface = V1PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 63,
        "code_snippet": "emit PriceOracleAdapterUpdated(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 77,
        "code_snippet": "\"PriceOracleAdapterCompound: only guardian may set the address\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 81,
        "code_snippet": "\"PriceOracleAdapterCompound: cTokenAddress could not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 85,
        "code_snippet": "\"PriceOracleAdapterCompound: keyOracle could not be 0\"",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracleAdapterCompound: keyOracle",
        "confidence": 0.39999999999999997
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "line": 94,
        "code_snippet": "emit PriceOracleKeyUpdated(",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/SimplePriceOracle.sol",
        "line": 3,
        "code_snippet": "import \"../PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/SimplePriceOracle.sol",
        "line": 11,
        "code_snippet": "contract SimplePriceOracle is PriceOracle {",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle is PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/mocks/SimplePriceOracle.sol",
        "line": 34,
        "code_snippet": "// v1 price oracle interface for use as backing of proxy",
        "description": "Price oracle manipulation vulnerability",
        "match": "price oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Lens/MarketIndicatorLens.sol",
        "line": 6,
        "code_snippet": "import \"../PriceOracle.sol\";",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Lens/MarketIndicatorLens.sol",
        "line": 13,
        "code_snippet": "function oracle() external view returns (PriceOracle);",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Lens/MarketIndicatorLens.sol",
        "line": 138,
        "code_snippet": "PriceOracle priceOracle = comptroller.oracle();",
        "description": "Price oracle manipulation vulnerability",
        "match": "PriceOracle priceOracle = comptroller.oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-compound/contracts/Lens/MarketIndicatorLens.sol",
        "line": 142,
        "code_snippet": "underlyingPrice: priceOracle.getUnderlyingPrice(cToken)",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price: priceOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLiquidation.sol",
        "line": 29,
        "code_snippet": "uint256 loanMarketPrice = LibOracle._getQuote(loan.market);",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = LibOracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLiquidation.sol",
        "line": 34,
        "code_snippet": "collateralMarketPrice = LibOracle._getQuote(collateral.market);",
        "description": "Price oracle manipulation vulnerability",
        "match": "Price = LibOracle",
        "confidence": 0.7
      },
      {
        "name": "MEV (Maximal Extractable Value) Exploit",
        "severity": "medium",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/libraries/UniswapV2LiquidityMathLibrary.sol",
        "line": 98,
        "code_snippet": "// **note this is subject to manipulation, e.g. sandwich attacks**. prefer passing a manipulation resistant price to",
        "description": "MEV extraction vulnerability",
        "match": "sandwich attack",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 84,
        "code_snippet": "(uint price0Cumulative, uint price1Cumulative,) = UniswapV2OracleLibrary.currentCumulativePrices(pair);",
        "description": "Price oracle manipulation vulnerability",
        "match": "price0Cumulative, uint price1Cumulative,) = UniswapV2Oracle",
        "confidence": 0.7
      },
      {
        "name": "Price Oracle Manipulation",
        "severity": "high",
        "category": "economic",
        "component": "smart_contracts",
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "line": 116,
        "code_snippet": "(uint price0Cumulative, uint price1Cumulative,) = UniswapV2OracleLibrary.currentCumulativePrices(pair);",
        "description": "Price oracle manipulation vulnerability",
        "match": "price0Cumulative, uint price1Cumulative,) = UniswapV2Oracle",
        "confidence": 0.7
      }
    ],
    "p2pnetwork": [
      {
        "name": "Unvalidated Network Input",
        "severity": "high",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/handshake.hpp",
        "line": 137,
        "code_snippet": "std::mutex _mutex; ///socket close not thread safe.",
        "description": "Network input without proper validation",
        "match": "socket close not thread",
        "confidence": 0.7
      },
      {
        "name": "Unvalidated Network Input",
        "severity": "high",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/peer.cpp",
        "line": 106,
        "code_snippet": "ba::async_read(*socket, boost::asio::buffer(read_header_buffer, read_header_buffer.size()), [this, this_l](boost::system::error_code ec, std::size_t size)",
        "description": "Network input without proper validation",
        "match": "socket, boost::asio::buffer(read_header_buffer, read",
        "confidence": 0.7
      },
      {
        "name": "Unvalidated Network Input",
        "severity": "high",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/peer.cpp",
        "line": 140,
        "code_snippet": "ba::async_read(*socket, boost::asio::buffer(read_buffer, packet_size), [this, this_l, packet_size, hLength](boost::system::error_code ec, std::size_t size)",
        "description": "Network input without proper validation",
        "match": "socket, boost::asio::buffer(read",
        "confidence": 0.7
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/peer.cpp",
        "line": 282,
        "code_snippet": "LOG(m_log.warning) << \"Error while peer convert data to RLP, buffer size:\" << buffer.size() << \", buffer:\" << dev::toHex(bytesConstRef(&buffer)) << \", message:\" << ex.what();",
        "description": "Potential DoS through resource exhaustion",
        "match": "while peer convert data to RLP, buffer size:\" << buffer.size() << \", buffer:\" << dev::toHex(bytesConstRef(&buffer)) << \", message",
        "confidence": 0.7
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/peer.cpp",
        "line": 286,
        "code_snippet": "LOG(m_log.warning) << \"Error while peer convert data to RLP, buffer size:\" << buffer.size() << \", message:\" << ex.what();",
        "description": "Potential DoS through resource exhaustion",
        "match": "while peer convert data to RLP, buffer size:\" << buffer.size() << \", message",
        "confidence": 0.7
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/peer.cpp",
        "line": 378,
        "code_snippet": "LOG(m_log.warning) << boost::str(boost::format(\"Error while reading packet, packet type: %1% , rlp: %2%, message: %3%\") % (unsigned)type % *r %e.what());",
        "description": "Potential DoS through resource exhaustion",
        "match": "while reading packet, packet type: %1% , rlp: %2%, message",
        "confidence": 0.7
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/peer.cpp",
        "line": 514,
        "code_snippet": "LOG(m_log.warning) << \"Error while peer sending, message:\" << ec.message() << \"@\" << socket->remote_endpoint(ec);",
        "description": "Potential DoS through resource exhaustion",
        "match": "while peer sending, message:\" << ec.message",
        "confidence": 0.7
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/host.cpp",
        "line": 182,
        "code_snippet": "LOG(m_log.error) << boost::str(boost::format(\"Error while acceptor listen on %1%:%2%, message: %3%\")",
        "description": "Potential DoS through resource exhaustion",
        "match": "while acceptor listen on %1%:%2%, message",
        "confidence": 0.39999999999999997
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/host.cpp",
        "line": 200,
        "code_snippet": "//LOG(this_l->m_log.debug) << boost::str(boost::format(\"Error while accepting connections: %1%\") % ec.message());",
        "description": "Potential DoS through resource exhaustion",
        "match": "while accepting connections: %1%\") % ec.message",
        "confidence": 0.39999999999999997
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "p2p_network",
        "file": "mcp/p2p/host.cpp",
        "line": 614,
        "code_snippet": "LOG(m_log.warning) << boost::str(boost::format(\"Error while starting Peer %1% : %2%, message: %3%\")",
        "description": "Potential DoS through resource exhaustion",
        "match": "while starting Peer %1% : %2%, message",
        "confidence": 0.39999999999999997
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "rpc_interface",
        "file": "mcp/rpc/rpc.cpp",
        "line": 32,
        "code_snippet": "LOG(m_log.error) << boost::str(boost::format(\"Error while binding for HTTP RPC on port %1%: %2%\") % endpoint.port() % ec.message());",
        "description": "Potential DoS through resource exhaustion",
        "match": "while binding for HTTP RPC on port %1%: %2%\") % endpoint.port() % ec.message",
        "confidence": 0.7
      },
      {
        "name": "DoS Vector in Message Processing",
        "severity": "medium",
        "category": "p2pnetwork",
        "component": "rpc_interface",
        "file": "mcp/rpc/rpc_ws.cpp",
        "line": 330,
        "code_snippet": "LOG(m_log.error) << boost::str(boost::format(\"Error while binding for WebSocket RPC on port %1%: %2%\") % endpoint.port() % ec.message());",
        "description": "Potential DoS through resource exhaustion",
        "match": "while binding for WebSocket RPC on port %1%: %2%\") % endpoint.port() % ec.message",
        "confidence": 0.7
      }
    ]
  },
  "statistics": {
    "total_vulnerabilities": 413,
    "critical_severity": 0,
    "high_severity": 231,
    "medium_severity": 182,
    "low_severity": 0,
    "files_analyzed": 336,
    "attack_surface_components": 7
  },
  "smart_contract_analysis": {
    "total_contracts": 272,
    "high_risk_contracts": [
      {
        "file": "test/contracts/mcp-compound/contracts/CErc20Delegator.sol",
        "risk_score": 3,
        "indicators": [
          "delegatecall",
          "assembly",
          "msg.value"
        ]
      }
    ],
    "vulnerability_summary": {},
    "gas_optimization_issues": [],
    "access_control_issues": [
      {
        "file": "test/contracts/mcp-dydx/contracts/testing/ErroringOmiseToken.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-dydx/contracts/testing/TestMakerOracle.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-dydx/contracts/testing/OmiseToken.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-dydx/contracts/external/multisig/MultiSig.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-dydx/contracts/external/multisig/PartiallyDelayedMultiSig.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-dydx/contracts/external/multisig/DelayedMultiSig.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-dydx/contracts/external/interestsetters/DoubleExponentInterestSetter.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-dydx/contracts/external/interestsetters/PolynomialInterestSetter.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-dydx/contracts/external/proxies/PayableProxyForSoloMargin.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-dydx/contracts/protocol/lib/Require.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/SousChef.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/Timelock.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/core/PancakeFactory.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/core/PancakePair.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/core/PancakeERC20.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/PancakeRouter01.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/PancakeRouter.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/PancakeMigrator.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/WETH9.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/test/DeflatingERC20.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/libraries/PancakeLibrary.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/periphery/libraries/SafeMath.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/core/libraries/SafeMath.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/libs/Multicall.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-pancakeswap-test/contracts/farm/libs/WBNB.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG1.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG3.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/Comptroller.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/CErc20.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG2.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG6.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/CToken.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG5.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/ComptrollerG4.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/CErc20Delegator.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/CErc20Delegate.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/ExponentialNoError.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/PriceOracleProxy.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/MultiSigWallet.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/SafeMath.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/PriceOracleAdapterMoc.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/Timelock.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/MIEther.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/Multicall.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/Reservoir.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/CCompLikeDelegate.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/BaseJumpRateModelV2.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/mocks/PriceOracleAdapterCompound.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/mocks/MockPriceProviderMoC.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/Lens/MarketIndicatorLens.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/Governance/GovernorAlpha.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-compound/contracts/Governance/RLEN.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeFactory.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/OpenDiamond.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/AccesRegistry.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/PancakeRouter.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/Faucet.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/facets/OracleOpen.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Liquidator.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Comptroller.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Deposit.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/facets/TokenList.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/facets/DiamondLoupeFacet.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan2.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/facets/DynamicInterest.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan1.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Reserve.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/facets/Loan.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/util/Pausable.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/util/Address.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibReserve.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibCommon.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibDiamond.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibDeposit.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibSwap.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibOracle.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLiquidation.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan2.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/libraries/LibLoan1.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-diamond-test/contracts/mockup/MockBep20.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-multisig/contracts/MultiSigWallet.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-multisig/contracts/TestToken.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-upgradable-test/contracts/TestAdmin.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-upgradable-test/contracts/Test.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/UniswapV2Migrator.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/UniswapV2Router01.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/UniswapV2Router02.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/WETH9.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/ERC20.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/test/DeflatingERC20.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/libraries/UniswapV2Library.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/libraries/SafeMath.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/libraries/UniswapV2LiquidityMathLibrary.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleOracleSimple.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSwapToPrice.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-periphery/contracts/examples/ExampleSlidingWindowOracle.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-core/contracts/UniswapV2Factory.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-core/contracts/UniswapV2ERC20.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-core/contracts/UniswapV2Pair.sol",
        "issue": "Missing proper access control modifiers"
      },
      {
        "file": "test/contracts/mcp-uniswapv2-core/contracts/libraries/SafeMath.sol",
        "issue": "Missing proper access control modifiers"
      }
    ]
  },
  "consensus_analysis": {
    "consensus_type": "Unknown",
    "potential_issues": [],
    "timestamp_dependencies": [],
    "difficulty_adjustments": [],
    "fork_choice_rules": []
  },
  "p2p_analysis": {
    "network_protocols": [
      "udp",
      "tcp"
    ],
    "message_handling": [],
    "dos_vectors": [],
    "eclipse_attack_resistance": "Unknown",
    "sybil_protection": "Unknown"
  }
}