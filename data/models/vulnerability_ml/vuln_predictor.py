#!/usr/bin/env python3
"""
Improved Vulnerability Severity Predictor
Deployment Version - Based on Data Analysis
"""

import re
import json
from typing import Dict, List, Any

class DeployedVulnPredictor:
    """Production-ready vulnerability predictor."""
    
    def __init__(self, config_path: str = None):
        if config_path:
            self.load_config(config_path)
        else:
            self.load_default_config()
    
    def load_default_config(self):
        """Load the default configuration."""
        self.rules = [
            {
                'name': 'cvss_score',
                'threshold': 7.0,
                'operator': '>=', 
                'description': 'CVSS score >= 7.0',
                'weight': 1.0
            },
            {
                'name': 'privilege_keywords',
                'threshold': 1,
                'operator': '>=',
                'description': 'Privilege-related keywords present', 
                'weight': 1.0
            },
            {
                'name': 'execution_keywords',
                'threshold': 1,
                'operator': '>=',
                'description': 'Code execution keywords present',
                'weight': 1.0
            },
            {
                'name': 'buffer_overflow', 
                'threshold': 1,
                'operator': '>=',
                'description': 'Buffer overflow mentioned',
                'weight': 0.8
            }
        ]
        
        self.privilege_keywords = [
            'gain privileges', 'root access', 'privilege escalation',
            'elevate privileges', 'administrator access', 'root privileges'
        ]
        
        self.execution_keywords = [
            'remote code execution', 'arbitrary code', 'execute commands',
            'command execution', 'arbitrary commands', 'code execution'
        ]
        
        self.buffer_overflow_terms = [
            'buffer overflow', 'stack overflow', 'heap overflow'
        ]
    
    def load_config(self, config_path: str):
        """Load configuration from JSON file."""
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        self.rules = config.get('rules', [])
        keywords = config.get('keywords', {})
        self.privilege_keywords = keywords.get('privilege', [])
        self.execution_keywords = keywords.get('execution', [])
        self.buffer_overflow_terms = keywords.get('buffer_overflow', [])
    
    def extract_features(self, description: str) -> Dict[str, Any]:
        """Extract features from vulnerability description."""
        features = {}
        desc_lower = description.lower()
        
        # Basic text features
        features['desc_length'] = len(description)
        features['word_count'] = len(description.split())
        
        # Keyword-based features
        features['privilege_keywords'] = sum(1 for kw in self.privilege_keywords if kw in desc_lower)
        features['execution_keywords'] = sum(1 for kw in self.execution_keywords if kw in desc_lower)
        features['buffer_overflow'] = 1 if any(term in desc_lower for term in self.buffer_overflow_terms) else 0
        
        # CVSS estimation
        features['cvss_score'] = self.estimate_cvss_score(description)
        
        return features
    
    def estimate_cvss_score(self, description: str) -> float:
        """Estimate CVSS score based on description content."""
        desc_lower = description.lower()
        score = 5.0  # Base score
        
        # High-impact indicators
        if any(kw in desc_lower for kw in self.execution_keywords):
            score += 3.0
        if any(kw in desc_lower for kw in self.privilege_keywords):
            score += 2.5
        if any(term in desc_lower for term in self.buffer_overflow_terms):
            score += 2.0
        
        # Network context
        if 'remote' in desc_lower and any(kw in desc_lower for kw in self.execution_keywords):
            score += 1.0
        
        return min(score, 10.0)
    
    def predict(self, description: str) -> Dict[str, Any]:
        """Predict vulnerability severity."""
        try:
            features = self.extract_features(description)
            
            score = 0.0
            max_score = sum(rule['weight'] for rule in self.rules)
            explanations = []
            triggered_rules = []
            
            for rule in self.rules:
                rule_name = rule['name']
                threshold = rule['threshold']
                weight = rule['weight']
                
                if rule_name in features:
                    value = features[rule_name]
                    
                    if rule['operator'] == '>=' and value >= threshold:
                        score += weight
                        explanations.append(f"âœ“ {rule['description']} (value: {value})")
                        triggered_rules.append(rule['name'])
                    else:
                        explanations.append(f"âœ— {rule['description']} (value: {value})")
                else:
                    explanations.append(f"? {rule['description']} (data missing)")
            
            confidence = score / max_score if max_score > 0 else 0.0
            is_high_severity = confidence >= 0.6
            
            # Determine risk level
            if confidence >= 0.8:
                risk_level = "CRITICAL"
            elif confidence >= 0.6:
                risk_level = "HIGH" 
            elif confidence >= 0.4:
                risk_level = "MEDIUM"
            else:
                risk_level = "LOW"
            
            return {
                "severity": "High/Critical" if is_high_severity else "Low/Medium",
                "confidence": round(confidence, 3),
                "risk_level": risk_level,
                "score": f"{score:.1f}/{max_score:.1f}",
                "triggered_rules": triggered_rules,
                "explanations": explanations,
                "estimated_cvss": features.get('cvss_score', 0),
                "features": features
            }
            
        except Exception as e:
            return {
                "error": str(e),
                "severity": "Unknown",
                "confidence": 0.0
            }
    
    def batch_predict(self, descriptions: List[str]) -> List[Dict[str, Any]]:
        """Predict severity for multiple descriptions."""
        return [self.predict(desc) for desc in descriptions]

# Example usage
if __name__ == "__main__":
    # Initialize predictor
    predictor = DeployedVulnPredictor()
    
    # Test cases
    test_descriptions = [
        "Remote code execution vulnerability allowing arbitrary code execution with high impact",
        "Cross-site scripting in comment section with limited impact",
        "Buffer overflow in network service leading to denial of service",
        "Local user gains root privileges via buffer overflow in system service"
    ]
    
    print("ðŸ”’ VULNERABILITY SEVERITY PREDICTOR")
    print("=" * 50)
    
    for i, desc in enumerate(test_descriptions, 1):
        result = predictor.predict(desc)
        
        print(f"\n{i}. {desc[:80]}...")
        print(f"   Severity: {result['severity']}")
        print(f"   Risk Level: {result['risk_level']}")
        print(f"   Confidence: {result['confidence']}")
        print(f"   Score: {result['score']}")
        print(f"   Estimated CVSS: {result['estimated_cvss']:.1f}")
        print("   Rules:")
        for explanation in result['explanations']:
            print(f"     {explanation}")
