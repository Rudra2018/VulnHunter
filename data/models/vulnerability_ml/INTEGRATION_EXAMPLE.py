
# INTEGRATION EXAMPLE - How to use in your existing code

# Option 1: Direct import
from production_predictor import ProductionVulnPredictor

# Initialize predictor (assumes model files are in same directory)
predictor = ProductionVulnPredictor()

# Predict a vulnerability
result = predictor.predict("Remote code execution vulnerability in web server")
print(f"Severity: {result['severity']}")
print(f"Bounty: {result['estimated_bounty']} {result['bounty_currency']}")

# Option 2: Integration with custom path
predictor = ProductionVulnPredictor("/path/to/your/model/files")

# Option 3: Batch processing
vulnerabilities = ["vuln1", "vuln2", "vuln3"]
results = [predictor.predict(vuln) for vuln in vulnerabilities]

# Option 4: As a service
def assess_vulnerability(description):
    """Integrate this function into your existing workflow."""
    predictor = ProductionVulnPredictor()
    return predictor.predict(description)

# Usage in your existing code:
# vulnerability_data = get_vulnerability_from_database()
# assessment = assess_vulnerability(vulnerability_data.description)
# save_assessment_to_database(assessment)
