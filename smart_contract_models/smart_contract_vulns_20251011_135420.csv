id,vulnerability_type,severity_level,protocol,contract_type,code_snippet,bounty_amount,line_count,complexity_score,severity_score,function_count,modifier_count,external_calls,state_variables,description,cve_equivalent,gas_complexity,audit_status
sc_1,reentrancy,Critical,dYdX,Governor,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",92853.46,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in dYdX Governor contract,9.5,0.7218105175064373,unaudited
sc_2,timestamp_dependence,Medium,Balancer,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",14228.3,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Balancer Router contract,4.1,0.6440866640040724,unaudited
sc_3,front_running,Medium,Synthetix,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64948.81,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Synthetix Staking contract,6.8,0.31527972295973805,audited
sc_4,delegatecall_injection,Critical,Curve,Bridge,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",91776.54,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Curve Bridge contract,9.8,0.7859511491126937,audited
sc_5,front_running,Medium,Frax,ERC20,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18776.36,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax ERC20 contract,5.3,0.5410880135655469,unaudited
sc_6,uninitialized_storage,High,MakerDAO,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",179726.48,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO Staking contract,8.4,0.8357478148649593,audited
sc_7,short_address,Medium,Aave,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",238432.68,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Aave ERC1155 contract,4.4,0.1388580628346216,audited
sc_8,reentrancy,Critical,Frax,Vault,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",78800.01,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Frax Vault contract,9.1,0.5040628128986523,audited
sc_9,dos_gas_limit,Medium,Aave,Bridge,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",253375.3,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Aave Bridge contract,5.7,0.7819639835837511,audited
sc_10,dos_gas_limit,Medium,dYdX,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31034.04,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in dYdX Governor contract,6.7,0.8444165664825061,audited
sc_11,timestamp_dependence,Medium,Euler,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",38880.74,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Euler Lending contract,4.7,0.30384088040854096,unaudited
sc_12,unchecked_call,Medium,Uniswap,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",272199.35,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Uniswap ERC721 contract,6.2,0.6635993696717682,audited
sc_13,tx_origin,Medium,Convex,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33793.61,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex Lending contract,4.5,0.38691130738758217,audited
sc_14,uninitialized_storage,High,SushiSwap,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",37699.92,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in SushiSwap Farming contract,7.9,0.9517258237138967,audited
sc_15,reentrancy,Critical,Compound,Farming,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",403548.9,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Compound Farming contract,9.4,0.9844529773779082,audited
sc_16,front_running,Medium,Aave,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",94782.37,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Aave Farming contract,5.7,0.5314051239743712,audited
sc_17,random_weakness,High,Balancer,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",86470.0,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Router contract,7.0,0.8573496860067761,unaudited
sc_18,timestamp_dependence,Medium,Curve,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",69743.55,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Curve Governor contract,6.3,0.7613481680618764,audited
sc_19,reentrancy,Critical,Aave,Factory,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",351685.93,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Factory contract,9.8,0.42187760709288924,audited
sc_20,reentrancy,Critical,MakerDAO,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",291268.59,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO ERC721 contract,9.5,0.9378860452516744,audited
sc_21,random_weakness,High,Synthetix,Proxy,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",137629.2,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Synthetix Proxy contract,8.1,0.44747733102721543,unaudited
sc_22,timestamp_dependence,Medium,Liquity,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",36554.6,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity Oracle contract,5.2,0.7188339649002407,audited
sc_23,dos_gas_limit,Medium,SushiSwap,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35195.14,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in SushiSwap Governor contract,5.1,0.7955692014453147,audited
sc_24,random_weakness,High,1inch,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",18016.06,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in 1inch Factory contract,7.5,0.2531564179493875,audited
sc_25,front_running,Medium,1inch,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45088.23,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in 1inch Strategy contract,4.0,0.74460346048314,audited
sc_26,access_control,High,SushiSwap,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",158816.47,13,0.26,0.8,2,0,1,1,High access_control vulnerability in SushiSwap Farming contract,8.2,0.14578456908556975,unaudited
sc_27,front_running,Medium,Balancer,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18841.29,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer Bridge contract,5.6,0.3276280850369826,unaudited
sc_28,front_running,Medium,SushiSwap,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",83068.18,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in SushiSwap ERC20 contract,5.0,0.18725058729582394,audited
sc_29,delegatecall_injection,Critical,Aave,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",103285.61,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Aave DEX contract,9.8,0.5635302511089436,audited
sc_30,tx_origin,Medium,Aave,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",80192.82,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Aave DEX contract,5.6,0.9416320523511198,unaudited
sc_31,reentrancy,Critical,Aave,Vault,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",206040.47,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Vault contract,9.9,0.647893928466271,audited
sc_32,uninitialized_storage,High,Euler,Staking,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",57572.71,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Euler Staking contract,8.6,0.33889596811828554,unaudited
sc_33,random_weakness,High,MakerDAO,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",95474.4,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in MakerDAO Farming contract,7.2,0.26895413024721676,audited
sc_34,uninitialized_storage,High,Compound,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",279227.02,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Compound DEX contract,7.7,0.18620052848647384,audited
sc_35,reentrancy,Critical,Rari,Staking,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",35539.78,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Rari Staking contract,9.5,0.38098678948692677,audited
sc_36,integer_overflow,High,Liquity,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",18079.62,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Liquity Staking contract,8.2,0.652399440106516,audited
sc_37,reentrancy,Critical,1inch,Bridge,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",74937.72,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch Bridge contract,9.8,0.6449196257815933,audited
sc_38,timestamp_dependence,Medium,1inch,Timelock,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",60228.65,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in 1inch Timelock contract,6.0,0.6225084946492604,audited
sc_39,unchecked_call,Medium,Aave,Bridge,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",132170.34,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Aave Bridge contract,5.6,0.6419072905740044,unaudited
sc_40,front_running,Medium,Synthetix,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54298.0,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Synthetix ERC1155 contract,5.9,0.25877154301511873,audited
sc_41,access_control,High,Yearn,Factory,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",165037.06,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Yearn Factory contract,8.2,0.6185987963703563,audited
sc_42,uninitialized_storage,High,Rari,Timelock,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",56883.66,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Rari Timelock contract,8.1,0.9250102382066074,audited
sc_43,delegatecall_injection,Critical,Euler,Timelock,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",23668.83,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler Timelock contract,9.7,0.2657390728147332,unaudited
sc_44,tx_origin,Medium,Alpha Homora,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52312.43,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora Router contract,4.7,0.38370322122045497,audited
sc_45,short_address,Medium,Synthetix,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",134486.99,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix ERC1155 contract,5.8,0.24324290644317428,audited
sc_46,timestamp_dependence,Medium,Yearn,Timelock,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",84408.09,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn Timelock contract,4.0,0.5376688511631276,unaudited
sc_47,access_control,High,Frax,AMM,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",62228.0,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Frax AMM contract,8.5,0.6883051616851077,unaudited
sc_48,front_running,Medium,Uniswap,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",294668.92,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Uniswap ERC1155 contract,6.1,0.11822431383001866,audited
sc_49,dos_gas_limit,Medium,PancakeSwap,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51512.0,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap Lending contract,4.3,0.7905761165487809,audited
sc_50,reentrancy,Critical,1inch,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",68049.81,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch Proxy contract,9.7,0.48163876671605255,unaudited
sc_51,front_running,Medium,Alpha Homora,DEX,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19924.19,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Alpha Homora DEX contract,6.5,0.5782083394216375,audited
sc_52,access_control,High,Aave,Governor,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",164882.79,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Governor contract,7.4,0.4219759559802516,audited
sc_53,timestamp_dependence,Medium,Aave,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",274742.47,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Aave Pool contract,5.1,0.8914348422595568,audited
sc_54,integer_overflow,High,Balancer,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",28917.64,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Balancer Bridge contract,7.7,0.31277344300999804,audited
sc_55,uninitialized_storage,High,Convex,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",24201.92,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Convex Bridge contract,8.3,0.3328060020141779,unaudited
sc_56,unchecked_call,Medium,1inch,ERC721,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",7768.18,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch ERC721 contract,4.6,0.9439413355606763,unaudited
sc_57,reentrancy,Critical,Liquity,Pool,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",17200.04,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Liquity Pool contract,9.4,0.663170342772608,audited
sc_58,timestamp_dependence,Medium,Euler,ERC1155,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",51332.6,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Euler ERC1155 contract,6.0,0.23693572761119452,unaudited
sc_59,tx_origin,Medium,1inch,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36033.12,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch ERC1155 contract,6.1,0.17319765550794752,unaudited
sc_60,reentrancy,Critical,Curve,DEX,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",68863.37,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Curve DEX contract,9.1,0.1758094965196817,audited
sc_61,timestamp_dependence,Medium,Compound,Timelock,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",154600.12,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Compound Timelock contract,5.4,0.9877863983060993,unaudited
sc_62,unchecked_call,Medium,1inch,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",34049.39,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Proxy contract,4.6,0.3433192647241463,audited
sc_63,tx_origin,Medium,Synthetix,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",168079.61,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix Farming contract,5.2,0.4277273347647669,audited
sc_64,unchecked_call,Medium,Liquity,ERC721,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",35820.1,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity ERC721 contract,4.7,0.7313123047944017,audited
sc_65,reentrancy,Critical,Compound,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",248545.47,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Compound Pool contract,9.4,0.8309986106383112,audited
sc_66,dos_gas_limit,Medium,Compound,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",100197.29,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound DEX contract,5.6,0.6524304647648502,audited
sc_67,reentrancy,Critical,Aave,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",546899.96,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Timelock contract,10.0,0.9683601796355353,audited
sc_68,short_address,Medium,1inch,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40636.45,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch Proxy contract,5.9,0.49559229880001965,unaudited
sc_69,short_address,Medium,1inch,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",59927.38,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in 1inch ERC1155 contract,6.1,0.7829536420787195,audited
sc_70,random_weakness,High,Alpha Homora,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",24268.34,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Alpha Homora Strategy contract,7.6,0.9703376536541882,unaudited
sc_71,timestamp_dependence,Medium,Euler,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",32737.49,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Euler Proxy contract,6.4,0.17770010749203952,audited
sc_72,uninitialized_storage,High,PancakeSwap,Pool,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",58224.39,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in PancakeSwap Pool contract,7.2,0.7085791030424464,unaudited
sc_73,reentrancy,Critical,Uniswap,DEX,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",416559.0,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Uniswap DEX contract,9.6,0.9443088729747436,unaudited
sc_74,timestamp_dependence,Medium,Euler,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",50697.41,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Euler Factory contract,6.5,0.2455164218557745,audited
sc_75,random_weakness,High,Compound,Pool,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",330480.49,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Compound Pool contract,7.1,0.8538819410165196,unaudited
sc_76,unchecked_call,Medium,Uniswap,AMM,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",259080.89,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Uniswap AMM contract,4.1,0.8249764328934249,audited
sc_77,integer_overflow,High,1inch,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",66443.61,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in 1inch Farming contract,8.2,0.6809094181999301,audited
sc_78,unchecked_call,Medium,1inch,Pool,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",53954.89,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Pool contract,6.0,0.4411166078100245,audited
sc_79,timestamp_dependence,Medium,Compound,Proxy,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",204247.61,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Compound Proxy contract,5.4,0.7441835835357186,unaudited
sc_80,dos_gas_limit,Medium,SushiSwap,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",180629.83,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in SushiSwap Oracle contract,4.5,0.23959382910185092,audited
sc_81,dos_gas_limit,Medium,Uniswap,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",239819.81,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Uniswap DEX contract,6.0,0.840145362238584,audited
sc_82,short_address,Medium,Uniswap,Timelock,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",167879.37,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Uniswap Timelock contract,6.6,0.9296831884986824,audited
sc_83,unchecked_call,Medium,Yearn,Lending,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",39749.98,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn Lending contract,4.5,0.9960576534076321,audited
sc_84,front_running,Medium,Euler,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33111.34,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Euler Oracle contract,6.1,0.4440315117759003,audited
sc_85,reentrancy,Critical,Aave,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",299313.96,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Aave Timelock contract,9.0,0.3042663802405696,unaudited
sc_86,integer_overflow,High,PancakeSwap,Strategy,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",67308.47,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap Strategy contract,7.3,0.5448737429152326,audited
sc_87,unchecked_call,Medium,Curve,Oracle,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",87323.85,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Oracle contract,6.3,0.1096478060179942,audited
sc_88,integer_overflow,High,Synthetix,Vault,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",150554.3,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Vault contract,8.5,0.5423476002157852,unaudited
sc_89,integer_overflow,High,1inch,Proxy,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",34876.02,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in 1inch Proxy contract,8.8,0.6410047706401953,unaudited
sc_90,front_running,Medium,Synthetix,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21196.08,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Synthetix Oracle contract,6.6,0.8644365475635609,unaudited
sc_91,dos_gas_limit,Medium,Euler,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50951.12,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Euler ERC721 contract,5.6,0.8240696331769475,audited
sc_92,uninitialized_storage,High,Convex,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",69362.65,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Convex Bridge contract,8.4,0.6177648978203614,unaudited
sc_93,front_running,Medium,Convex,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",65666.12,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Convex Farming contract,6.5,0.750879347081826,audited
sc_94,timestamp_dependence,Medium,dYdX,Oracle,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",17521.92,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Oracle contract,5.3,0.33142815878529086,unaudited
sc_95,unchecked_call,Medium,Uniswap,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",125377.7,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Uniswap AMM contract,6.0,0.23148840896737397,audited
sc_96,reentrancy,Critical,Yearn,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",20376.6,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Yearn Lending contract,9.3,0.5836589724998761,audited
sc_97,front_running,Medium,Uniswap,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",118507.8,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Uniswap Timelock contract,6.9,0.8314877486533735,audited
sc_98,unchecked_call,Medium,Rari,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",45202.46,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari Router contract,5.5,0.6022239052686469,unaudited
sc_99,front_running,Medium,Convex,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8232.83,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Convex ERC1155 contract,4.3,0.874875662372,unaudited
sc_100,integer_overflow,High,PancakeSwap,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",31779.9,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap ERC721 contract,8.4,0.3280981685599658,unaudited
sc_101,access_control,High,MakerDAO,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",240236.05,13,0.26,0.8,2,0,1,1,High access_control vulnerability in MakerDAO Vault contract,8.4,0.481475879425315,audited
sc_102,access_control,High,Uniswap,ERC721,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",357820.13,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap ERC721 contract,8.7,0.36681049051971515,audited
sc_103,unchecked_call,Medium,1inch,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",7506.71,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Pool contract,4.4,0.7267034050180681,audited
sc_104,access_control,High,PancakeSwap,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",21804.82,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap DEX contract,7.2,0.611350953867914,audited
sc_105,uninitialized_storage,High,Synthetix,ERC721,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",29973.26,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Synthetix ERC721 contract,8.1,0.5846345866463067,audited
sc_106,random_weakness,High,1inch,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",40836.05,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in 1inch Staking contract,7.5,0.7604263351719855,unaudited
sc_107,uninitialized_storage,High,Convex,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",50696.17,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Convex Farming contract,7.3,0.49761146400748957,audited
sc_108,integer_overflow,High,Synthetix,Vault,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",95987.38,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Vault contract,7.2,0.210999841954072,audited
sc_109,tx_origin,Medium,Liquity,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25334.61,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity Oracle contract,5.2,0.18668372027102526,audited
sc_110,delegatecall_injection,Critical,MakerDAO,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",328427.25,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in MakerDAO Router contract,9.4,0.9568818202447513,audited
sc_111,integer_overflow,High,Balancer,Bridge,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",85386.74,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Balancer Bridge contract,8.7,0.33350276952828034,audited
sc_112,reentrancy,Critical,Compound,Governor,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",355330.68,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Compound Governor contract,9.1,0.7999717361205273,audited
sc_113,timestamp_dependence,Medium,dYdX,Proxy,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",42510.38,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Proxy contract,6.2,0.12073426365054744,unaudited
sc_114,tx_origin,Medium,Convex,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",26870.62,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Convex ERC1155 contract,5.1,0.8910080165687486,audited
sc_115,integer_overflow,High,Synthetix,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",190737.89,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix ERC721 contract,7.8,0.235094024185932,unaudited
sc_116,uninitialized_storage,High,Frax,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",76926.04,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax Bridge contract,7.8,0.8902306452752141,unaudited
sc_117,access_control,High,Yearn,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",38827.87,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Yearn ERC1155 contract,7.8,0.7409307028536856,audited
sc_118,timestamp_dependence,Medium,Euler,Factory,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",22670.94,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Euler Factory contract,4.2,0.7249493100611049,audited
sc_119,integer_overflow,High,MakerDAO,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",224014.19,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in MakerDAO Farming contract,8.4,0.941367303237245,audited
sc_120,front_running,Medium,SushiSwap,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",124058.0,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in SushiSwap Staking contract,4.7,0.28514446073911986,audited
sc_121,uninitialized_storage,High,Euler,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",60053.13,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Euler AMM contract,8.2,0.46523368270120147,audited
sc_122,timestamp_dependence,Medium,Yearn,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",69489.04,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn Farming contract,6.3,0.9416932972867514,audited
sc_123,random_weakness,High,SushiSwap,Bridge,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",40202.67,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in SushiSwap Bridge contract,7.6,0.18988061224826597,audited
sc_124,reentrancy,Critical,PancakeSwap,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",75811.22,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap DEX contract,9.1,0.22222658208338167,audited
sc_125,unchecked_call,Medium,PancakeSwap,ERC20,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",9048.28,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in PancakeSwap ERC20 contract,5.6,0.7674944468895606,audited
sc_126,dos_gas_limit,Medium,Compound,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",175502.2,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Lending contract,5.7,0.7030810320111549,unaudited
sc_127,short_address,Medium,1inch,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56918.86,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch Timelock contract,4.5,0.7151111506040955,audited
sc_128,access_control,High,PancakeSwap,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",75051.92,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap Strategy contract,7.4,0.7698100583839902,unaudited
sc_129,timestamp_dependence,Medium,Aave,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",140603.95,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave Strategy contract,6.8,0.36380370774291637,audited
sc_130,uninitialized_storage,High,Frax,Router,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",20150.63,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax Router contract,8.5,0.11022514617699845,unaudited
sc_131,timestamp_dependence,Medium,Yearn,Staking,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",16229.84,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn Staking contract,5.6,0.9005598572970839,audited
sc_132,delegatecall_injection,Critical,Liquity,Lending,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",72149.33,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity Lending contract,9.5,0.9641739135128622,audited
sc_133,front_running,Medium,Euler,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46197.22,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Euler Router contract,6.1,0.16974351376997332,audited
sc_134,unchecked_call,Medium,dYdX,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",11103.58,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in dYdX Proxy contract,5.3,0.543535683553092,audited
sc_135,uninitialized_storage,High,Balancer,Vault,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",29520.59,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Balancer Vault contract,8.7,0.36666476441112705,unaudited
sc_136,integer_overflow,High,1inch,ERC1155,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",56143.07,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in 1inch ERC1155 contract,8.9,0.6227786924103887,unaudited
sc_137,tx_origin,Medium,SushiSwap,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54369.35,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in SushiSwap ERC1155 contract,5.8,0.12319571625357113,audited
sc_138,integer_overflow,High,PancakeSwap,Governor,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",31443.69,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap Governor contract,7.1,0.5840250365489014,audited
sc_139,access_control,High,Alpha Homora,ERC721,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",16890.14,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Alpha Homora ERC721 contract,7.7,0.5165534379233127,audited
sc_140,short_address,Medium,PancakeSwap,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",60701.14,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in PancakeSwap ERC721 contract,4.7,0.8967425107378503,audited
sc_141,delegatecall_injection,Critical,Uniswap,AMM,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",208816.05,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Uniswap AMM contract,9.4,0.7748817061169346,unaudited
sc_142,uninitialized_storage,High,Curve,Governor,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",103252.04,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve Governor contract,8.9,0.6155279875531078,audited
sc_143,integer_overflow,High,Curve,Bridge,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",145745.58,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Curve Bridge contract,7.9,0.7374949901711755,audited
sc_144,reentrancy,Critical,Balancer,Proxy,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",22624.67,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Proxy contract,9.0,0.3174489555306833,audited
sc_145,access_control,High,Convex,Pool,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",22240.72,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Convex Pool contract,8.5,0.7905000331269755,audited
sc_146,timestamp_dependence,Medium,Uniswap,Farming,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",111634.02,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Uniswap Farming contract,5.3,0.3645652561659134,audited
sc_147,short_address,Medium,Curve,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",89013.94,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve Factory contract,4.4,0.6651294122946065,unaudited
sc_148,front_running,Medium,Yearn,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",99231.5,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Yearn Farming contract,6.3,0.1735915991726466,audited
sc_149,unchecked_call,Medium,Alpha Homora,ERC20,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",44454.8,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora ERC20 contract,6.5,0.5828365886531855,audited
sc_150,dos_gas_limit,Medium,Balancer,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51918.44,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Balancer Vault contract,4.6,0.9063021727377936,unaudited
sc_151,front_running,Medium,PancakeSwap,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",62455.03,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in PancakeSwap Factory contract,6.0,0.6732995606770098,audited
sc_152,short_address,Medium,Liquity,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8767.01,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Liquity Strategy contract,6.6,0.6637713831670938,unaudited
sc_153,delegatecall_injection,Critical,Liquity,Bridge,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",13702.49,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity Bridge contract,9.9,0.7927144888649769,unaudited
sc_154,uninitialized_storage,High,Liquity,Farming,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",62873.98,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Liquity Farming contract,8.3,0.571201887912103,audited
sc_155,timestamp_dependence,Medium,SushiSwap,Router,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",92775.1,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap Router contract,5.2,0.38144992838678793,unaudited
sc_156,tx_origin,Medium,Compound,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",159724.26,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Compound ERC20 contract,6.4,0.6446014014913481,audited
sc_157,reentrancy,Critical,Frax,ERC20,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",66498.15,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Frax ERC20 contract,9.6,0.6485805395046483,audited
sc_158,short_address,Medium,Compound,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",210620.29,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Compound Bridge contract,6.2,0.8470856231463164,audited
sc_159,reentrancy,Critical,Convex,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",67180.31,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex ERC1155 contract,9.4,0.17712960520221305,unaudited
sc_160,random_weakness,High,1inch,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",27806.81,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in 1inch AMM contract,7.6,0.7548819667192963,audited
sc_161,access_control,High,SushiSwap,Bridge,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",213302.17,13,0.26,0.8,2,0,1,1,High access_control vulnerability in SushiSwap Bridge contract,8.5,0.12582375218832065,unaudited
sc_162,front_running,Medium,MakerDAO,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",374010.74,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in MakerDAO Vault contract,5.7,0.44108272183907027,audited
sc_163,unchecked_call,Medium,Uniswap,ERC1155,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",55517.49,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Uniswap ERC1155 contract,5.7,0.9032946051371936,audited
sc_164,uninitialized_storage,High,Uniswap,Oracle,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",115373.43,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Uniswap Oracle contract,8.5,0.245928900237657,audited
sc_165,dos_gas_limit,Medium,Rari,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10909.01,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Rari Pool contract,5.4,0.2861789560978152,audited
sc_166,front_running,Medium,Compound,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",158769.56,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Compound Timelock contract,4.5,0.16080118216784994,audited
sc_167,short_address,Medium,Euler,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51061.1,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Euler Oracle contract,6.5,0.22919449272311068,audited
sc_168,short_address,Medium,Aave,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",153391.18,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Aave Strategy contract,5.9,0.7901720561316671,audited
sc_169,front_running,Medium,dYdX,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22635.8,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in dYdX AMM contract,4.3,0.3159974037781656,unaudited
sc_170,front_running,Medium,SushiSwap,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",68984.65,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in SushiSwap Router contract,4.4,0.20506160644851512,audited
sc_171,tx_origin,Medium,Aave,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",131790.03,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave Router contract,4.9,0.7740666592804453,unaudited
sc_172,integer_overflow,High,PancakeSwap,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",57010.31,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in PancakeSwap Timelock contract,8.8,0.8192243419990971,unaudited
sc_173,tx_origin,Medium,Convex,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36481.18,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex AMM contract,6.4,0.480358766131762,unaudited
sc_174,reentrancy,Critical,SushiSwap,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",222903.27,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in SushiSwap Proxy contract,9.2,0.9098763899044833,audited
sc_175,integer_overflow,High,Curve,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",152227.35,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Curve Lending contract,8.7,0.43697506226467253,audited
sc_176,short_address,Medium,SushiSwap,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56444.98,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in SushiSwap Staking contract,4.9,0.4232000791121969,audited
sc_177,timestamp_dependence,Medium,Aave,ERC721,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",110930.78,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave ERC721 contract,4.7,0.44848255377431356,audited
sc_178,integer_overflow,High,Alpha Homora,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",72366.83,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora Farming contract,8.5,0.2616851503065771,audited
sc_179,reentrancy,Critical,PancakeSwap,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",58640.53,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap Staking contract,9.8,0.7406772729234665,audited
sc_180,unchecked_call,Medium,Rari,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",40949.99,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Rari ERC721 contract,4.0,0.7793873575752747,audited
sc_181,tx_origin,Medium,Aave,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42602.87,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave Lending contract,4.1,0.6296207500760868,unaudited
sc_182,uninitialized_storage,High,Yearn,Pool,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",123003.93,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Yearn Pool contract,7.6,0.6217523010687503,unaudited
sc_183,integer_overflow,High,Balancer,Strategy,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",8589.25,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Balancer Strategy contract,8.1,0.5576013007464553,audited
sc_184,timestamp_dependence,Medium,dYdX,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",32815.48,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in dYdX Bridge contract,4.2,0.9026324177513084,audited
sc_185,front_running,Medium,Liquity,Timelock,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21072.99,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Liquity Timelock contract,5.2,0.8907967511092041,audited
sc_186,reentrancy,Critical,Synthetix,Pool,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",34764.03,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Synthetix Pool contract,9.4,0.10698478781860216,audited
sc_187,random_weakness,High,PancakeSwap,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",74602.19,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap Timelock contract,7.3,0.22228220197227183,unaudited
sc_188,delegatecall_injection,Critical,Compound,DEX,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",485394.04,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Compound DEX contract,9.9,0.264882344928128,unaudited
sc_189,reentrancy,Critical,Liquity,Farming,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",97196.07,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Liquity Farming contract,9.5,0.19626525760646862,audited
sc_190,integer_overflow,High,1inch,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",45245.07,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in 1inch ERC1155 contract,8.9,0.7473904973049288,unaudited
sc_191,short_address,Medium,PancakeSwap,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39150.66,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in PancakeSwap AMM contract,5.6,0.13113440526714668,audited
sc_192,reentrancy,Critical,dYdX,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",71452.69,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in dYdX Router contract,9.7,0.5776946593747887,audited
sc_193,reentrancy,Critical,Uniswap,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",341440.47,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Uniswap Router contract,9.6,0.9802050313194087,audited
sc_194,access_control,High,Rari,Strategy,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",70048.16,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari Strategy contract,7.3,0.5279367826457605,audited
sc_195,short_address,Medium,Synthetix,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",151062.14,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Lending contract,6.5,0.13761408403390316,audited
sc_196,access_control,High,Frax,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",30073.48,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Frax DEX contract,7.4,0.10712585908241812,unaudited
sc_197,tx_origin,Medium,Synthetix,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",80621.24,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Synthetix Factory contract,4.1,0.6511020618023476,audited
sc_198,integer_overflow,High,Synthetix,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",104048.54,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Governor contract,7.2,0.2236021020789612,audited
sc_199,short_address,Medium,Balancer,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",43878.2,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Balancer Timelock contract,4.8,0.3961623947867776,audited
sc_200,access_control,High,Compound,Proxy,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",284793.66,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound Proxy contract,8.5,0.6488794261980154,audited
sc_201,reentrancy,Critical,1inch,AMM,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",112375.0,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch AMM contract,9.1,0.3886195978819784,unaudited
sc_202,reentrancy,Critical,Rari,Strategy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",11654.86,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Rari Strategy contract,9.3,0.3632375304792702,audited
sc_203,uninitialized_storage,High,Uniswap,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",149845.52,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Uniswap AMM contract,8.0,0.9679661454304405,unaudited
sc_204,unchecked_call,Medium,SushiSwap,AMM,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",24280.56,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in SushiSwap AMM contract,6.4,0.311327873587872,audited
sc_205,timestamp_dependence,Medium,MakerDAO,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",181962.61,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Lending contract,4.9,0.3322167165040526,unaudited
sc_206,random_weakness,High,Liquity,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",80105.96,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Liquity Lending contract,7.7,0.9862088000568032,audited
sc_207,uninitialized_storage,High,Yearn,Staking,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",63132.67,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Yearn Staking contract,8.7,0.8939975688463241,unaudited
sc_208,integer_overflow,High,Aave,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",124473.44,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Aave ERC721 contract,8.0,0.21663746754626084,audited
sc_209,unchecked_call,Medium,dYdX,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",36005.99,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in dYdX Router contract,5.1,0.9650906222861354,unaudited
sc_210,random_weakness,High,dYdX,ERC1155,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",57582.72,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX ERC1155 contract,8.4,0.49155394511785366,audited
sc_211,reentrancy,Critical,PancakeSwap,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",57110.67,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap Timelock contract,9.3,0.6695973631707063,unaudited
sc_212,uninitialized_storage,High,dYdX,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",84874.86,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in dYdX Vault contract,7.9,0.9558688722016742,audited
sc_213,random_weakness,High,Uniswap,DEX,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",239885.0,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Uniswap DEX contract,7.8,0.2779177074629865,audited
sc_214,random_weakness,High,Aave,Farming,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",303062.29,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Aave Farming contract,8.8,0.5109184547004207,audited
sc_215,random_weakness,High,MakerDAO,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",136069.85,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO ERC1155 contract,7.9,0.9696276605963968,audited
sc_216,reentrancy,Critical,Uniswap,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",104121.88,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Uniswap Pool contract,9.7,0.6470533449666465,unaudited
sc_217,access_control,High,Synthetix,Oracle,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",169017.74,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Synthetix Oracle contract,8.6,0.7899816660150557,audited
sc_218,tx_origin,Medium,Convex,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44277.05,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex DEX contract,4.7,0.7407298701031487,audited
sc_219,tx_origin,Medium,PancakeSwap,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",68840.27,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in PancakeSwap Vault contract,5.6,0.6794427512270359,audited
sc_220,unchecked_call,Medium,Aave,ERC721,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",219995.11,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Aave ERC721 contract,5.8,0.5170878387648391,audited
sc_221,timestamp_dependence,Medium,PancakeSwap,Timelock,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",43220.07,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in PancakeSwap Timelock contract,6.2,0.8750221548127487,audited
sc_222,short_address,Medium,1inch,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46433.81,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch Timelock contract,4.1,0.6637599795595719,audited
sc_223,delegatecall_injection,Critical,1inch,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",14132.54,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch Staking contract,9.6,0.40896896847845265,audited
sc_224,unchecked_call,Medium,Rari,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",43242.43,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Rari Bridge contract,6.8,0.2234313460807663,unaudited
sc_225,tx_origin,Medium,1inch,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24839.14,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in 1inch Timelock contract,4.5,0.5013157667210205,audited
sc_226,tx_origin,Medium,Curve,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",43473.58,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Curve Staking contract,6.8,0.593320985860145,unaudited
sc_227,tx_origin,Medium,Convex,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55137.32,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Convex Pool contract,5.6,0.2250757313929219,audited
sc_228,tx_origin,Medium,Compound,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",201929.12,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Compound ERC1155 contract,5.2,0.3519029690025278,audited
sc_229,reentrancy,Critical,Frax,Oracle,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",28254.65,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Frax Oracle contract,9.5,0.768555345661517,unaudited
sc_230,dos_gas_limit,Medium,Liquity,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15494.45,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Liquity Proxy contract,4.7,0.7270786236916387,audited
sc_231,random_weakness,High,PancakeSwap,Lending,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",30128.09,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap Lending contract,8.4,0.156943438978773,unaudited
sc_232,dos_gas_limit,Medium,PancakeSwap,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30156.97,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap Router contract,5.2,0.25166555318417183,audited
sc_233,front_running,Medium,PancakeSwap,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12505.24,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in PancakeSwap Farming contract,5.7,0.1202562651130824,unaudited
sc_234,reentrancy,Critical,Liquity,Factory,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",33086.62,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Liquity Factory contract,9.6,0.5337421393476386,audited
sc_235,uninitialized_storage,High,Liquity,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",58708.96,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Liquity Strategy contract,7.7,0.40990078580943556,unaudited
sc_236,unchecked_call,Medium,MakerDAO,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",146977.38,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in MakerDAO Staking contract,4.3,0.9197472634308779,audited
sc_237,timestamp_dependence,Medium,dYdX,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",28622.58,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Oracle contract,6.3,0.7175288434280735,unaudited
sc_238,dos_gas_limit,Medium,Liquity,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45322.26,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Liquity Lending contract,4.3,0.8268052221454875,audited
sc_239,front_running,Medium,Frax,ERC20,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7622.85,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax ERC20 contract,6.2,0.7280572303647127,audited
sc_240,uninitialized_storage,High,PancakeSwap,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",32186.25,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in PancakeSwap Oracle contract,7.7,0.5993939808495304,audited
sc_241,short_address,Medium,Euler,Governor,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",41523.08,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Euler Governor contract,4.9,0.279047934602277,unaudited
sc_242,random_weakness,High,Compound,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",157998.58,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Staking contract,7.1,0.46273220107390955,audited
sc_243,unchecked_call,Medium,PancakeSwap,Staking,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",30292.85,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in PancakeSwap Staking contract,6.5,0.5725512127149193,unaudited
sc_244,timestamp_dependence,Medium,Compound,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",100361.43,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Compound DEX contract,6.1,0.9257387223313371,unaudited
sc_245,tx_origin,Medium,Aave,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",234837.21,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Aave Oracle contract,6.4,0.8125258383676678,unaudited
sc_246,short_address,Medium,Liquity,Proxy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48234.49,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Liquity Proxy contract,4.2,0.41975645481350643,audited
sc_247,reentrancy,Critical,Synthetix,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",59698.19,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Synthetix DEX contract,9.8,0.9090316985565187,unaudited
sc_248,integer_overflow,High,Frax,AMM,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",51867.18,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Frax AMM contract,8.8,0.8346609402749197,unaudited
sc_249,unchecked_call,Medium,Curve,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",13099.61,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Bridge contract,4.8,0.6602414989917174,audited
sc_250,delegatecall_injection,Critical,Euler,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",45373.88,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler Vault contract,9.2,0.27889709965038856,audited
sc_251,tx_origin,Medium,Yearn,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35212.11,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn DEX contract,6.4,0.26701916468098474,audited
sc_252,delegatecall_injection,Critical,Yearn,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",174779.67,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Yearn Router contract,9.2,0.9000147641832767,audited
sc_253,short_address,Medium,Euler,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50936.43,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Euler Proxy contract,5.4,0.3582879150675736,audited
sc_254,front_running,Medium,dYdX,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10840.79,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in dYdX Farming contract,4.0,0.7963100389015084,audited
sc_255,access_control,High,SushiSwap,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",174747.74,13,0.26,0.8,2,1,1,1,High access_control vulnerability in SushiSwap Proxy contract,8.5,0.9044954220236344,audited
sc_256,random_weakness,High,Liquity,Proxy,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",19881.51,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity Proxy contract,7.3,0.40669096509407454,unaudited
sc_257,unchecked_call,Medium,Aave,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",186402.46,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Aave Lending contract,5.9,0.2180367041281399,audited
sc_258,random_weakness,High,SushiSwap,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",114926.25,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in SushiSwap Timelock contract,8.8,0.274687789072605,audited
sc_259,unchecked_call,Medium,Balancer,Lending,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",6848.92,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer Lending contract,5.6,0.7790618972207498,audited
sc_260,delegatecall_injection,Critical,Balancer,ERC721,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",63126.72,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Balancer ERC721 contract,10.0,0.7098222740225864,audited
sc_261,access_control,High,Convex,Vault,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",36238.56,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Convex Vault contract,8.6,0.4878488392153154,audited
sc_262,front_running,Medium,Curve,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",142290.71,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve ERC1155 contract,6.0,0.777795210220173,audited
sc_263,tx_origin,Medium,MakerDAO,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",242876.86,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in MakerDAO Bridge contract,5.3,0.5919834713557516,unaudited
sc_264,uninitialized_storage,High,MakerDAO,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",202894.76,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO Staking contract,8.6,0.9852004021173358,audited
sc_265,timestamp_dependence,Medium,Yearn,AMM,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",135262.76,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn AMM contract,6.3,0.9033708366721791,audited
sc_266,tx_origin,Medium,Yearn,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",188933.3,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Staking contract,4.8,0.9001650401099789,audited
sc_267,short_address,Medium,Balancer,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",9235.06,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Balancer Vault contract,4.6,0.8913156121966456,audited
sc_268,front_running,Medium,Frax,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",75669.57,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax ERC20 contract,6.5,0.6038953992367665,audited
sc_269,reentrancy,Critical,MakerDAO,ERC1155,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",130970.85,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO ERC1155 contract,9.5,0.2441828099613833,audited
sc_270,uninitialized_storage,High,Balancer,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",79302.9,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Balancer Oracle contract,7.5,0.4184001805343964,unaudited
sc_271,timestamp_dependence,Medium,1inch,Governor,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",57354.87,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in 1inch Governor contract,5.9,0.26125700526117607,audited
sc_272,integer_overflow,High,Uniswap,Timelock,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",54082.01,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Uniswap Timelock contract,8.7,0.8149028819339474,audited
sc_273,timestamp_dependence,Medium,Frax,Pool,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",38734.91,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax Pool contract,5.6,0.5661155539104485,unaudited
sc_274,integer_overflow,High,Uniswap,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",154349.2,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Uniswap ERC1155 contract,7.3,0.2180168034436028,audited
sc_275,tx_origin,Medium,MakerDAO,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",176451.16,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in MakerDAO Factory contract,5.9,0.5838927443941504,audited
sc_276,timestamp_dependence,Medium,dYdX,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",28446.04,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in dYdX ERC1155 contract,4.1,0.32816683225109977,unaudited
sc_277,random_weakness,High,Liquity,Pool,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",20425.06,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Liquity Pool contract,8.2,0.10398175562238048,audited
sc_278,front_running,Medium,Compound,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",303342.75,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound Farming contract,6.7,0.343788116823353,audited
sc_279,delegatecall_injection,Critical,PancakeSwap,Staking,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",70045.38,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Staking contract,9.6,0.7540567134062597,audited
sc_280,reentrancy,Critical,Balancer,ERC20,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",30779.59,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Balancer ERC20 contract,9.5,0.9715148190148984,audited
sc_281,integer_overflow,High,dYdX,Router,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",81871.17,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in dYdX Router contract,8.5,0.18697929848598,audited
sc_282,access_control,High,MakerDAO,Lending,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",209004.55,13,0.26,0.8,2,0,1,1,High access_control vulnerability in MakerDAO Lending contract,8.7,0.6231901729395426,unaudited
sc_283,delegatecall_injection,Critical,dYdX,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",67057.71,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in dYdX Governor contract,9.7,0.7982145981965514,audited
sc_284,uninitialized_storage,High,dYdX,Governor,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",53162.92,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX Governor contract,8.1,0.8035331809584771,audited
sc_285,random_weakness,High,MakerDAO,Farming,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",357018.69,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Farming contract,8.2,0.18187719981689077,audited
sc_286,tx_origin,Medium,Yearn,Pool,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19830.27,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Pool contract,4.3,0.27458529468041204,audited
sc_287,tx_origin,Medium,Liquity,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49842.73,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity Bridge contract,6.5,0.6674751280700235,audited
sc_288,short_address,Medium,Rari,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34178.37,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Rari Timelock contract,4.2,0.5487270005823293,unaudited
sc_289,front_running,Medium,PancakeSwap,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",27327.61,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in PancakeSwap Factory contract,4.5,0.8135381546087632,unaudited
sc_290,front_running,Medium,Alpha Homora,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",74444.26,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Alpha Homora Timelock contract,6.6,0.424539900343074,audited
sc_291,front_running,Medium,SushiSwap,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35097.63,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in SushiSwap Strategy contract,5.8,0.901894596425383,audited
sc_292,reentrancy,Critical,Synthetix,Pool,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",234283.85,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Synthetix Pool contract,9.6,0.1584836814482401,audited
sc_293,timestamp_dependence,Medium,Rari,AMM,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",33596.71,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Rari AMM contract,4.0,0.5443636698390009,audited
sc_294,timestamp_dependence,Medium,Rari,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",19446.43,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Rari Staking contract,6.6,0.530488754028708,audited
sc_295,short_address,Medium,Liquity,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54063.02,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Liquity Strategy contract,5.7,0.263344315175817,audited
sc_296,tx_origin,Medium,Aave,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",175693.64,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave ERC1155 contract,6.2,0.4536238712943266,audited
sc_297,tx_origin,Medium,Frax,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35876.78,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Farming contract,4.5,0.7953800742284455,audited
sc_298,short_address,Medium,Yearn,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23670.99,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn ERC20 contract,6.6,0.8015204259000046,audited
sc_299,access_control,High,Curve,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",182637.34,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Curve Proxy contract,7.9,0.4480140830205206,unaudited
sc_300,tx_origin,Medium,Uniswap,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",86484.06,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Proxy contract,4.6,0.6557169229094857,unaudited
sc_301,access_control,High,Liquity,Strategy,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",30602.66,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Liquity Strategy contract,7.9,0.57398247939868,audited
sc_302,delegatecall_injection,Critical,Convex,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",64872.97,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex DEX contract,9.3,0.24577340272658374,audited
sc_303,delegatecall_injection,Critical,MakerDAO,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",431273.02,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in MakerDAO Lending contract,9.1,0.7361376386431548,audited
sc_304,random_weakness,High,Curve,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",154469.89,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Curve Pool contract,7.5,0.7179409404330245,audited
sc_305,delegatecall_injection,Critical,Balancer,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",71099.96,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Balancer AMM contract,9.0,0.17140794848099722,audited
sc_306,tx_origin,Medium,Rari,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",68395.17,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Rari ERC1155 contract,6.4,0.787530689829435,audited
sc_307,uninitialized_storage,High,Rari,Oracle,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",43941.68,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Rari Oracle contract,7.0,0.19679577655981778,audited
sc_308,short_address,Medium,Liquity,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21867.12,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity Staking contract,5.3,0.7209137663355317,audited
sc_309,reentrancy,Critical,MakerDAO,DEX,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",546143.45,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in MakerDAO DEX contract,9.7,0.7710347202748151,audited
sc_310,tx_origin,Medium,Synthetix,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",65680.95,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix Vault contract,4.6,0.41923944308847294,unaudited
sc_311,access_control,High,PancakeSwap,Timelock,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",10762.09,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap Timelock contract,7.7,0.4360989610073934,audited
sc_312,reentrancy,Critical,dYdX,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",81801.27,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in dYdX DEX contract,9.9,0.3030606146087885,unaudited
sc_313,timestamp_dependence,Medium,Curve,Lending,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",118670.85,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Curve Lending contract,6.0,0.39355125353228604,audited
sc_314,tx_origin,Medium,PancakeSwap,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",11076.61,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in PancakeSwap Oracle contract,5.7,0.9643016743744552,audited
sc_315,delegatecall_injection,Critical,Curve,DEX,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",113397.22,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Curve DEX contract,9.8,0.18531878675425373,audited
sc_316,short_address,Medium,PancakeSwap,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58907.8,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in PancakeSwap Vault contract,5.7,0.6359077068201324,audited
sc_317,reentrancy,Critical,Euler,ERC20,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",50464.21,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler ERC20 contract,9.9,0.5167318494645573,unaudited
sc_318,dos_gas_limit,Medium,Frax,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54592.7,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Frax Governor contract,5.5,0.44585349689073794,audited
sc_319,random_weakness,High,Curve,Staking,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",158397.22,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Curve Staking contract,8.4,0.791257221340325,unaudited
sc_320,integer_overflow,High,Balancer,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",24991.24,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Balancer Staking contract,8.4,0.2890145895368886,unaudited
sc_321,integer_overflow,High,Balancer,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",19096.82,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Balancer Bridge contract,7.1,0.8496663413982682,audited
sc_322,access_control,High,Balancer,ERC20,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",67248.28,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer ERC20 contract,8.7,0.3099116430632017,unaudited
sc_323,timestamp_dependence,Medium,Yearn,Bridge,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",144733.7,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn Bridge contract,6.6,0.6070757102893302,audited
sc_324,reentrancy,Critical,Synthetix,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",142585.17,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Synthetix Oracle contract,9.7,0.4272600239158877,audited
sc_325,dos_gas_limit,Medium,Aave,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",178144.49,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Aave Staking contract,6.7,0.5220842988908654,audited
sc_326,access_control,High,PancakeSwap,Oracle,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",69319.2,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap Oracle contract,7.9,0.4528029732717499,audited
sc_327,delegatecall_injection,Critical,Convex,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",36466.78,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Convex AMM contract,9.4,0.3127386075104256,unaudited
sc_328,short_address,Medium,Liquity,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35731.31,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Liquity Staking contract,6.3,0.3597517162995927,unaudited
sc_329,front_running,Medium,Aave,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",79850.96,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Aave Proxy contract,4.9,0.7040544965802084,audited
sc_330,timestamp_dependence,Medium,Liquity,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",25062.07,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity Pool contract,6.7,0.9885083865783096,audited
sc_331,uninitialized_storage,High,Frax,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",77484.95,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Frax Bridge contract,8.7,0.3993197545622872,audited
sc_332,access_control,High,Synthetix,Pool,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",133137.67,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Synthetix Pool contract,7.5,0.21483938601695612,audited
sc_333,front_running,Medium,Curve,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51310.58,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve Pool contract,5.3,0.8868108218965502,audited
sc_334,access_control,High,PancakeSwap,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",58839.93,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap Proxy contract,8.3,0.6289602945613535,audited
sc_335,random_weakness,High,SushiSwap,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",21744.05,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in SushiSwap Router contract,8.8,0.7863800031241878,unaudited
sc_336,integer_overflow,High,Liquity,Oracle,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",17213.98,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Oracle contract,8.7,0.7570956254337114,audited
sc_337,tx_origin,Medium,MakerDAO,ERC20,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",205226.39,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO ERC20 contract,6.3,0.6255784402912807,unaudited
sc_338,dos_gas_limit,Medium,Curve,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",166078.46,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Curve ERC20 contract,4.3,0.7368086675894518,audited
sc_339,front_running,Medium,Curve,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19445.06,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Curve Pool contract,4.4,0.5931526403635529,audited
sc_340,random_weakness,High,Uniswap,Pool,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",187332.55,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Uniswap Pool contract,8.3,0.9082652301659944,unaudited
sc_341,front_running,Medium,Convex,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45384.02,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Convex ERC721 contract,5.3,0.5947030861610858,unaudited
sc_342,uninitialized_storage,High,Compound,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",148131.48,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Compound Bridge contract,7.8,0.8606473265314158,audited
sc_343,reentrancy,Critical,Curve,Router,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",171376.95,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Curve Router contract,9.0,0.6206143194344708,audited
sc_344,front_running,Medium,PancakeSwap,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47020.36,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in PancakeSwap Pool contract,5.3,0.9615503303010761,audited
sc_345,front_running,Medium,Synthetix,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64663.49,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Synthetix Pool contract,6.0,0.7884081522465057,audited
sc_346,tx_origin,Medium,Rari,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",27145.61,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Rari Governor contract,5.2,0.9192208943754695,audited
sc_347,reentrancy,Critical,Curve,Oracle,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",113481.57,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Curve Oracle contract,9.5,0.71521299552808,audited
sc_348,dos_gas_limit,Medium,Curve,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",76580.82,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve Staking contract,4.6,0.1518752321093046,audited
sc_349,tx_origin,Medium,SushiSwap,Vault,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",170691.32,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in SushiSwap Vault contract,4.8,0.9330676870555402,audited
sc_350,reentrancy,Critical,SushiSwap,ERC721,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",128796.67,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in SushiSwap ERC721 contract,9.9,0.21474463407733624,audited
sc_351,access_control,High,SushiSwap,ERC721,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",126355.36,13,0.26,0.8,2,0,1,2,High access_control vulnerability in SushiSwap ERC721 contract,7.2,0.5766950778835779,audited
sc_352,front_running,Medium,Curve,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",88813.94,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve Strategy contract,6.5,0.4808500210691633,audited
sc_353,short_address,Medium,SushiSwap,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53708.58,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in SushiSwap Oracle contract,6.4,0.9859191480805453,unaudited
sc_354,uninitialized_storage,High,Synthetix,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",113914.49,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Synthetix AMM contract,8.7,0.8984320484724552,audited
sc_355,uninitialized_storage,High,Aave,AMM,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",293522.03,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave AMM contract,7.2,0.16101994298162287,unaudited
sc_356,tx_origin,Medium,Rari,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12943.34,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Rari Vault contract,6.4,0.818581491040731,audited
sc_357,delegatecall_injection,Critical,Uniswap,Timelock,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",508286.67,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Uniswap Timelock contract,9.0,0.20098207516844765,audited
sc_358,uninitialized_storage,High,Synthetix,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",95905.12,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Synthetix AMM contract,7.2,0.6806270804343247,audited
sc_359,access_control,High,Balancer,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",63382.27,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Balancer AMM contract,8.5,0.9957560233026755,unaudited
sc_360,tx_origin,Medium,MakerDAO,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",178670.62,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO ERC1155 contract,5.6,0.677340360686382,audited
sc_361,timestamp_dependence,Medium,Convex,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",21789.81,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Convex Staking contract,4.2,0.6606864306828789,audited
sc_362,front_running,Medium,MakerDAO,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",81323.8,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in MakerDAO Bridge contract,4.1,0.13630134083261344,audited
sc_363,timestamp_dependence,Medium,Liquity,Strategy,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",25317.52,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Liquity Strategy contract,6.4,0.7048511073434799,audited
sc_364,unchecked_call,Medium,Curve,ERC1155,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",160044.03,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve ERC1155 contract,6.5,0.21022401951557834,audited
sc_365,tx_origin,Medium,dYdX,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",59785.6,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in dYdX AMM contract,5.9,0.2720752752288416,audited
sc_366,integer_overflow,High,Aave,DEX,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",263874.66,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Aave DEX contract,8.9,0.7809611102019304,audited
sc_367,uninitialized_storage,High,Yearn,Farming,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",177050.97,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Yearn Farming contract,7.2,0.9110663652905742,audited
sc_368,reentrancy,Critical,Convex,Farming,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",23088.93,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Convex Farming contract,9.5,0.8414644910334963,unaudited
sc_369,uninitialized_storage,High,Balancer,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",61107.2,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Balancer Oracle contract,7.4,0.8765888707210444,unaudited
sc_370,delegatecall_injection,Critical,Alpha Homora,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",18772.08,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora AMM contract,9.7,0.673246547990513,unaudited
sc_371,uninitialized_storage,High,Balancer,Router,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",17479.02,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Balancer Router contract,7.8,0.7759810752218881,unaudited
sc_372,dos_gas_limit,Medium,PancakeSwap,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",60221.88,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap ERC20 contract,5.2,0.6644575673187403,unaudited
sc_373,short_address,Medium,dYdX,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",66022.26,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in dYdX Staking contract,5.3,0.7943743218654344,audited
sc_374,delegatecall_injection,Critical,Curve,Vault,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",169026.03,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Curve Vault contract,9.2,0.19715321236933192,audited
sc_375,dos_gas_limit,Medium,Rari,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",65020.14,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Rari Lending contract,4.9,0.8522686043874561,audited
sc_376,dos_gas_limit,Medium,Uniswap,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40969.05,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Uniswap Governor contract,5.1,0.9042393656768289,audited
sc_377,delegatecall_injection,Critical,Balancer,Farming,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",26566.74,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Balancer Farming contract,9.3,0.891563416636549,audited
sc_378,unchecked_call,Medium,Alpha Homora,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",12755.33,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora Proxy contract,4.1,0.9934884588348879,audited
sc_379,short_address,Medium,Curve,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64340.73,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Curve ERC1155 contract,5.7,0.4482685842847949,audited
sc_380,dos_gas_limit,Medium,Liquity,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50424.51,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Liquity Router contract,5.5,0.9439072460597999,unaudited
sc_381,timestamp_dependence,Medium,Rari,ERC721,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",24806.63,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Rari ERC721 contract,5.9,0.6777593990313767,audited
sc_382,random_weakness,High,Convex,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",37906.77,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Convex ERC20 contract,8.3,0.5194996431963013,audited
sc_383,access_control,High,dYdX,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",13921.92,13,0.26,0.8,2,1,1,1,High access_control vulnerability in dYdX Governor contract,8.8,0.20818702769487152,audited
sc_384,unchecked_call,Medium,Curve,Router,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",58155.98,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Router contract,5.4,0.5809193530708492,audited
sc_385,front_running,Medium,Euler,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23423.85,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Euler Bridge contract,4.7,0.9513481539788265,audited
sc_386,delegatecall_injection,Critical,Frax,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",73487.25,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax Bridge contract,9.9,0.7806411346158415,audited
sc_387,unchecked_call,Medium,Compound,DEX,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",327638.42,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Compound DEX contract,6.0,0.7435276893244326,audited
sc_388,delegatecall_injection,Critical,Synthetix,Farming,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",87558.71,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Synthetix Farming contract,9.2,0.6594328809507816,audited
sc_389,short_address,Medium,Aave,Proxy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",209133.68,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Aave Proxy contract,4.8,0.6125453806504155,audited
sc_390,delegatecall_injection,Critical,PancakeSwap,Vault,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",72597.73,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Vault contract,9.0,0.3300389519283228,audited
sc_391,random_weakness,High,Curve,Router,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",124910.47,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Curve Router contract,8.4,0.81376345017088,audited
sc_392,short_address,Medium,Euler,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",9670.54,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Euler Staking contract,6.7,0.9416767752826481,audited
sc_393,front_running,Medium,Synthetix,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",125086.99,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Synthetix Bridge contract,5.6,0.8321380305668727,audited
sc_394,front_running,Medium,MakerDAO,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",116711.69,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in MakerDAO Staking contract,5.6,0.1990252209553108,audited
sc_395,uninitialized_storage,High,MakerDAO,Lending,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",199606.92,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in MakerDAO Lending contract,8.7,0.4134531464263863,audited
sc_396,uninitialized_storage,High,SushiSwap,Strategy,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",148264.32,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in SushiSwap Strategy contract,7.5,0.41717826433313765,audited
sc_397,reentrancy,Critical,Rari,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",68836.41,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Rari Farming contract,9.5,0.5343442033498382,audited
sc_398,front_running,Medium,Liquity,Pool,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55993.38,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Liquity Pool contract,4.9,0.620023500565622,unaudited
sc_399,integer_overflow,High,Rari,Farming,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",54158.04,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari Farming contract,8.5,0.5800358239990446,unaudited
sc_400,dos_gas_limit,Medium,SushiSwap,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",61265.11,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in SushiSwap Proxy contract,4.4,0.4574330636391788,unaudited
sc_401,integer_overflow,High,Frax,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",13157.63,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Frax Proxy contract,8.6,0.50773743574977,unaudited
sc_402,dos_gas_limit,Medium,Curve,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",97110.37,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve Vault contract,6.2,0.5478947820942662,audited
sc_403,random_weakness,High,Synthetix,DEX,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",40440.39,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Synthetix DEX contract,8.1,0.6972585752973409,unaudited
sc_404,integer_overflow,High,PancakeSwap,Vault,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",40801.35,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in PancakeSwap Vault contract,7.7,0.18492649024617586,audited
sc_405,random_weakness,High,PancakeSwap,Proxy,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",38341.01,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in PancakeSwap Proxy contract,8.9,0.20903033676797286,audited
sc_406,short_address,Medium,1inch,Pool,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",70559.59,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch Pool contract,5.3,0.2631678075680701,audited
sc_407,random_weakness,High,Rari,Factory,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",30939.27,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Rari Factory contract,8.2,0.10377351514009832,unaudited
sc_408,access_control,High,Aave,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",105628.47,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Governor contract,7.2,0.4633196989096575,unaudited
sc_409,front_running,Medium,Uniswap,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",224923.03,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Uniswap Lending contract,5.3,0.19549744287302157,unaudited
sc_410,front_running,Medium,Liquity,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12059.72,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Liquity Timelock contract,5.2,0.9606927967309206,audited
sc_411,unchecked_call,Medium,Yearn,ERC20,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",87805.29,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn ERC20 contract,4.5,0.6970416049959601,audited
sc_412,delegatecall_injection,Critical,Alpha Homora,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",30163.84,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Lending contract,9.6,0.6421459528832505,audited
sc_413,reentrancy,Critical,SushiSwap,Lending,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",224832.78,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in SushiSwap Lending contract,9.7,0.6374650311191782,audited
sc_414,dos_gas_limit,Medium,Curve,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",89697.15,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve ERC20 contract,4.3,0.8868285806162564,audited
sc_415,random_weakness,High,Aave,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",106765.62,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Aave AMM contract,8.4,0.2164915505604588,unaudited
sc_416,delegatecall_injection,Critical,PancakeSwap,Governor,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",88356.34,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Governor contract,9.1,0.20900524940745668,audited
sc_417,delegatecall_injection,Critical,dYdX,DEX,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",53590.42,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX DEX contract,9.2,0.9920181275334391,audited
sc_418,dos_gas_limit,Medium,Liquity,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",17095.26,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Liquity Farming contract,6.8,0.1455448029442422,audited
sc_419,dos_gas_limit,Medium,Convex,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24394.13,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Convex Pool contract,5.0,0.8518106526642112,audited
sc_420,access_control,High,PancakeSwap,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",53370.95,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap ERC721 contract,8.6,0.47077321071308165,audited
sc_421,reentrancy,Critical,Frax,Proxy,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",87594.09,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Frax Proxy contract,9.1,0.9920626780409446,audited
sc_422,delegatecall_injection,Critical,Frax,Proxy,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",22392.48,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax Proxy contract,9.5,0.3523862701263303,audited
sc_423,uninitialized_storage,High,Euler,Router,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",29163.62,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Euler Router contract,8.2,0.5561951355050393,unaudited
sc_424,delegatecall_injection,Critical,Alpha Homora,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",44357.59,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Vault contract,9.0,0.7872510180217699,audited
sc_425,access_control,High,Synthetix,Vault,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",182271.08,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Synthetix Vault contract,8.3,0.8804098385156203,audited
sc_426,delegatecall_injection,Critical,Uniswap,DEX,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",441204.34,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Uniswap DEX contract,9.1,0.49390767446250416,audited
sc_427,access_control,High,Curve,Timelock,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",100749.56,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Curve Timelock contract,8.7,0.582706255187178,unaudited
sc_428,integer_overflow,High,Synthetix,AMM,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",123815.59,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix AMM contract,8.4,0.6930859710617502,audited
sc_429,unchecked_call,Medium,Rari,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",25898.35,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Rari Router contract,6.2,0.8258132515238096,audited
sc_430,timestamp_dependence,Medium,Frax,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",60865.83,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax Farming contract,4.7,0.12141322508264701,unaudited
sc_431,front_running,Medium,Curve,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",174359.35,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve ERC1155 contract,5.8,0.6217720810348316,audited
sc_432,front_running,Medium,Curve,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",114459.53,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve Staking contract,4.1,0.3790968375724654,audited
sc_433,short_address,Medium,1inch,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31668.19,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in 1inch Pool contract,5.4,0.5674500483193609,audited
sc_434,uninitialized_storage,High,Rari,Router,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",35296.8,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Rari Router contract,8.5,0.9533338007130637,audited
sc_435,delegatecall_injection,Critical,Convex,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",52422.24,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex Timelock contract,9.8,0.3623908982311186,audited
sc_436,dos_gas_limit,Medium,1inch,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47981.69,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in 1inch Strategy contract,5.0,0.4457472794952676,audited
sc_437,tx_origin,Medium,Synthetix,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",125215.25,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Synthetix Strategy contract,5.3,0.42216721661844125,audited
sc_438,uninitialized_storage,High,PancakeSwap,ERC1155,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",49230.52,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in PancakeSwap ERC1155 contract,7.4,0.8083109493958553,unaudited
sc_439,delegatecall_injection,Critical,Alpha Homora,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",43404.41,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Staking contract,9.2,0.4744964805243813,unaudited
sc_440,delegatecall_injection,Critical,Convex,Oracle,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",101828.21,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex Oracle contract,9.5,0.431737698909471,unaudited
sc_441,dos_gas_limit,Medium,Balancer,ERC20,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34739.41,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Balancer ERC20 contract,6.5,0.269798353380042,unaudited
sc_442,front_running,Medium,Frax,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",6046.9,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax Oracle contract,6.2,0.27488788869729863,audited
sc_443,tx_origin,Medium,SushiSwap,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",110102.91,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in SushiSwap Oracle contract,6.4,0.6710388206989348,audited
sc_444,uninitialized_storage,High,Curve,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",129183.42,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve Router contract,8.9,0.5597217751572553,audited
sc_445,access_control,High,Balancer,ERC721,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",47595.25,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer ERC721 contract,8.4,0.9550991958719864,unaudited
sc_446,delegatecall_injection,Critical,Alpha Homora,Pool,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",27908.48,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Pool contract,9.7,0.8521540223690451,audited
sc_447,access_control,High,Compound,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",387757.9,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Compound ERC20 contract,8.8,0.7241922661091821,audited
sc_448,delegatecall_injection,Critical,SushiSwap,DEX,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",160199.02,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in SushiSwap DEX contract,9.6,0.8913058942214954,unaudited
sc_449,short_address,Medium,Alpha Homora,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",5643.14,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Alpha Homora Strategy contract,5.4,0.38047232757556315,audited
sc_450,timestamp_dependence,Medium,Compound,ERC1155,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",252475.29,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Compound ERC1155 contract,6.3,0.9231091697622698,audited
sc_451,unchecked_call,Medium,Alpha Homora,Oracle,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",32157.48,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Alpha Homora Oracle contract,6.1,0.6042837522732941,unaudited
sc_452,unchecked_call,Medium,Liquity,ERC721,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",21639.23,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Liquity ERC721 contract,5.5,0.2691476949618392,audited
sc_453,timestamp_dependence,Medium,Frax,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",45744.79,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax Lending contract,4.2,0.7902615621637108,audited
sc_454,dos_gas_limit,Medium,Liquity,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",43194.74,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Liquity Proxy contract,4.8,0.23746836167006752,unaudited
sc_455,reentrancy,Critical,PancakeSwap,Lending,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",58827.5,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap Lending contract,9.1,0.8511046885554512,audited
sc_456,integer_overflow,High,Euler,ERC20,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",24303.21,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler ERC20 contract,7.5,0.12052370807173911,audited
sc_457,random_weakness,High,Frax,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",23150.16,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Frax Timelock contract,7.0,0.19638681079056486,audited
sc_458,front_running,Medium,Uniswap,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",283386.87,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Uniswap ERC721 contract,6.0,0.20404355049599493,audited
sc_459,delegatecall_injection,Critical,Compound,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",208133.35,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Compound ERC721 contract,10.0,0.2269995831590993,audited
sc_460,reentrancy,Critical,dYdX,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",41374.8,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in dYdX Proxy contract,9.4,0.1926008549399127,audited
sc_461,short_address,Medium,Aave,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",230442.06,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Aave ERC1155 contract,5.2,0.4071316110229698,audited
sc_462,short_address,Medium,Uniswap,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",254068.44,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Uniswap Farming contract,6.3,0.4326932206666255,audited
sc_463,dos_gas_limit,Medium,Uniswap,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",130441.49,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Uniswap Proxy contract,6.0,0.17622318842050755,unaudited
sc_464,short_address,Medium,Rari,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25012.96,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Rari AMM contract,6.7,0.6322260544235176,audited
sc_465,delegatecall_injection,Critical,Rari,Vault,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",27421.81,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Rari Vault contract,9.2,0.8172434809712145,unaudited
sc_466,unchecked_call,Medium,PancakeSwap,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",31779.96,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in PancakeSwap Proxy contract,6.3,0.9329361755881436,audited
sc_467,random_weakness,High,1inch,Bridge,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",46138.38,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in 1inch Bridge contract,7.6,0.7682397512712577,unaudited
sc_468,access_control,High,PancakeSwap,Pool,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",16415.71,13,0.26,0.8,2,0,1,2,High access_control vulnerability in PancakeSwap Pool contract,7.5,0.7708564915216569,audited
sc_469,delegatecall_injection,Critical,MakerDAO,Bridge,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",538196.22,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in MakerDAO Bridge contract,9.0,0.9563780794160963,audited
sc_470,uninitialized_storage,High,dYdX,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",50686.3,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in dYdX Bridge contract,7.2,0.8692065927469422,audited
sc_471,reentrancy,Critical,Synthetix,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",28462.33,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Synthetix Factory contract,10.0,0.78488944216345,audited
sc_472,unchecked_call,Medium,SushiSwap,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",81067.3,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in SushiSwap Timelock contract,5.4,0.13531917842565072,audited
sc_473,delegatecall_injection,Critical,Uniswap,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",415659.45,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Uniswap Lending contract,9.9,0.27562757684579553,unaudited
sc_474,short_address,Medium,PancakeSwap,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18727.27,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in PancakeSwap Router contract,5.3,0.5292515095574402,audited
sc_475,delegatecall_injection,Critical,PancakeSwap,Farming,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",36012.65,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in PancakeSwap Farming contract,9.5,0.3884770204207747,audited
sc_476,front_running,Medium,SushiSwap,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",71068.83,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in SushiSwap Strategy contract,5.6,0.44421878668942083,audited
sc_477,integer_overflow,High,dYdX,AMM,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",44215.52,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in dYdX AMM contract,7.6,0.5240482603013527,audited
sc_478,short_address,Medium,MakerDAO,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",155870.28,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO Farming contract,6.7,0.6496618138972572,audited
sc_479,timestamp_dependence,Medium,Compound,Oracle,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",43793.93,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Compound Oracle contract,6.2,0.22283678587557937,audited
sc_480,random_weakness,High,Euler,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",25270.46,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Euler Oracle contract,7.9,0.5989217163280488,unaudited
sc_481,tx_origin,Medium,Alpha Homora,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55699.97,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora Governor contract,5.7,0.7888130537845978,audited
sc_482,access_control,High,SushiSwap,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",109898.99,13,0.26,0.8,2,0,1,1,High access_control vulnerability in SushiSwap Router contract,7.8,0.12223724225950217,audited
sc_483,reentrancy,Critical,Liquity,Lending,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",83614.78,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Liquity Lending contract,10.0,0.8483201263170989,audited
sc_484,tx_origin,Medium,Synthetix,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",69225.73,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Synthetix Timelock contract,4.2,0.39927778616105425,unaudited
sc_485,integer_overflow,High,PancakeSwap,Vault,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",23553.47,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in PancakeSwap Vault contract,7.1,0.7017436350082923,audited
sc_486,uninitialized_storage,High,1inch,Farming,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",46315.69,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in 1inch Farming contract,7.0,0.3271033490152505,audited
sc_487,dos_gas_limit,Medium,Synthetix,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",117420.25,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Synthetix Bridge contract,6.0,0.7830159367202447,audited
sc_488,timestamp_dependence,Medium,Curve,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",24654.64,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Curve Pool contract,5.9,0.39204470736359365,audited
sc_489,random_weakness,High,1inch,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",23938.11,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in 1inch Router contract,8.6,0.7889895220912794,audited
sc_490,uninitialized_storage,High,Alpha Homora,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",82437.7,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Alpha Homora ERC20 contract,8.7,0.8510106070303889,unaudited
sc_491,integer_overflow,High,MakerDAO,Governor,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",108239.3,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Governor contract,8.6,0.518550021394168,audited
sc_492,unchecked_call,Medium,Uniswap,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",76769.75,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Uniswap ERC721 contract,6.2,0.35381102277998566,audited
sc_493,unchecked_call,Medium,Yearn,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",20972.82,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Yearn ERC1155 contract,6.7,0.7855516840604115,audited
sc_494,access_control,High,Liquity,Vault,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",15909.68,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Liquity Vault contract,8.4,0.26443466157618206,audited
sc_495,dos_gas_limit,Medium,SushiSwap,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23583.56,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in SushiSwap Router contract,4.1,0.14889060895190587,unaudited
sc_496,dos_gas_limit,Medium,Yearn,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",121798.42,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn Vault contract,4.5,0.4516699052192873,audited
sc_497,dos_gas_limit,Medium,Aave,ERC20,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",179434.69,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave ERC20 contract,5.0,0.3502258613668633,audited
sc_498,timestamp_dependence,Medium,Aave,ERC20,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",215529.9,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave ERC20 contract,4.2,0.16427779719335367,audited
sc_499,uninitialized_storage,High,SushiSwap,Lending,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",191294.93,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in SushiSwap Lending contract,8.3,0.7938459295946019,unaudited
sc_500,unchecked_call,Medium,Uniswap,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",86640.04,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Uniswap Governor contract,6.7,0.5940112597711596,audited
sc_501,timestamp_dependence,Medium,MakerDAO,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",121813.37,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in MakerDAO Lending contract,4.5,0.2533714529445166,audited
sc_502,delegatecall_injection,Critical,dYdX,ERC721,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",15971.08,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX ERC721 contract,9.5,0.11710370742837822,audited
sc_503,timestamp_dependence,Medium,PancakeSwap,Strategy,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",36527.85,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in PancakeSwap Strategy contract,6.1,0.7715077177744832,audited
sc_504,uninitialized_storage,High,Frax,DEX,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",46117.97,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Frax DEX contract,7.3,0.8575461906570496,audited
sc_505,delegatecall_injection,Critical,Yearn,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",303766.23,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Yearn Pool contract,9.8,0.5353359507405224,unaudited
sc_506,short_address,Medium,Frax,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42063.31,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Frax DEX contract,5.3,0.7966492657180828,unaudited
sc_507,unchecked_call,Medium,SushiSwap,Router,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",23554.61,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in SushiSwap Router contract,5.6,0.7509383415243631,audited
sc_508,short_address,Medium,Euler,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12748.58,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Euler Strategy contract,4.3,0.6569155260328458,audited
sc_509,tx_origin,Medium,Compound,Timelock,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49686.79,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Compound Timelock contract,4.5,0.14878151989990726,unaudited
sc_510,uninitialized_storage,High,Uniswap,Governor,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",172373.47,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Uniswap Governor contract,8.6,0.7600680007784296,unaudited
sc_511,uninitialized_storage,High,Balancer,Timelock,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",25065.29,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Balancer Timelock contract,7.2,0.5782805663121519,audited
sc_512,front_running,Medium,Uniswap,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",134745.44,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Uniswap Proxy contract,4.9,0.830554260744685,audited
sc_513,uninitialized_storage,High,Curve,Pool,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",225708.68,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Curve Pool contract,7.8,0.48694287849777596,unaudited
sc_514,random_weakness,High,MakerDAO,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",86727.92,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Oracle contract,7.8,0.42492124838637846,audited
sc_515,unchecked_call,Medium,Balancer,DEX,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",28256.94,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer DEX contract,5.0,0.4116996840288336,audited
sc_516,integer_overflow,High,Aave,Proxy,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",40667.2,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Aave Proxy contract,7.5,0.5117690304216522,audited
sc_517,unchecked_call,Medium,PancakeSwap,ERC1155,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",36298.33,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in PancakeSwap ERC1155 contract,5.8,0.6605512820176584,audited
sc_518,access_control,High,SushiSwap,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",42510.44,13,0.26,0.8,2,1,1,1,High access_control vulnerability in SushiSwap Governor contract,8.3,0.3981481304494501,unaudited
sc_519,unchecked_call,Medium,PancakeSwap,Proxy,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",57388.03,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in PancakeSwap Proxy contract,4.9,0.5968642060933612,audited
sc_520,uninitialized_storage,High,SushiSwap,ERC20,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",45897.42,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in SushiSwap ERC20 contract,8.5,0.5867678976322193,audited
sc_521,delegatecall_injection,Critical,Aave,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",605122.38,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Aave Factory contract,9.3,0.11057621537858171,audited
sc_522,unchecked_call,Medium,SushiSwap,Timelock,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",18945.77,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in SushiSwap Timelock contract,6.2,0.3669845926736529,audited
sc_523,access_control,High,Balancer,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",63403.1,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Factory contract,8.7,0.4172816594757097,unaudited
sc_524,access_control,High,Liquity,ERC20,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",51440.89,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Liquity ERC20 contract,7.6,0.656372707118955,audited
sc_525,short_address,Medium,Yearn,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",80005.23,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Yearn Oracle contract,6.5,0.9867920249696084,unaudited
sc_526,short_address,Medium,Alpha Homora,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13502.66,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Alpha Homora ERC1155 contract,4.2,0.8130878480851956,audited
sc_527,integer_overflow,High,Alpha Homora,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",58191.27,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora AMM contract,8.7,0.7409478567838332,audited
sc_528,dos_gas_limit,Medium,Aave,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",220055.8,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Bridge contract,6.3,0.6079379025459779,audited
sc_529,access_control,High,Curve,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",150168.65,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Curve Factory contract,7.3,0.6402651386168468,audited
sc_530,tx_origin,Medium,dYdX,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7440.38,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX Farming contract,4.6,0.8701295607396791,unaudited
sc_531,reentrancy,Critical,Uniswap,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",404513.15,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Uniswap Oracle contract,9.9,0.2800049262630231,unaudited
sc_532,front_running,Medium,PancakeSwap,DEX,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14823.76,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in PancakeSwap DEX contract,5.6,0.36785072479014147,audited
sc_533,reentrancy,Critical,Convex,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",15779.98,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex Router contract,9.6,0.8846137922849626,audited
sc_534,tx_origin,Medium,Synthetix,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35740.73,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix Factory contract,4.2,0.39533260836416473,audited
sc_535,reentrancy,Critical,Uniswap,Pool,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",64666.99,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Uniswap Pool contract,9.5,0.6705918415352226,audited
sc_536,unchecked_call,Medium,Rari,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",52737.65,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari ERC20 contract,5.8,0.12003728506163697,audited
sc_537,delegatecall_injection,Critical,Rari,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",27800.84,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Rari Lending contract,9.5,0.7234508175740084,audited
sc_538,random_weakness,High,MakerDAO,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",72442.53,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Vault contract,7.0,0.6003431162011097,unaudited
sc_539,delegatecall_injection,Critical,Euler,Strategy,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",11733.87,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler Strategy contract,9.5,0.39068082150686745,audited
sc_540,short_address,Medium,Curve,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",26253.8,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Curve Oracle contract,5.7,0.7972622083205633,audited
sc_541,integer_overflow,High,Alpha Homora,Proxy,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",24100.32,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora Proxy contract,8.5,0.3638347746480275,audited
sc_542,uninitialized_storage,High,dYdX,Pool,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",32254.85,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in dYdX Pool contract,7.5,0.5041053552087158,audited
sc_543,short_address,Medium,Synthetix,ERC721,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",87170.91,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Synthetix ERC721 contract,6.8,0.7651666426578205,audited
sc_544,unchecked_call,Medium,Curve,Bridge,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",108102.16,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Bridge contract,4.7,0.7287757722217612,audited
sc_545,delegatecall_injection,Critical,SushiSwap,Factory,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",104259.9,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in SushiSwap Factory contract,9.7,0.8532806853089316,audited
sc_546,unchecked_call,Medium,dYdX,Bridge,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",46799.88,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in dYdX Bridge contract,4.8,0.5861599650779734,audited
sc_547,reentrancy,Critical,SushiSwap,Proxy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",194402.04,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in SushiSwap Proxy contract,9.4,0.5519940173298626,audited
sc_548,reentrancy,Critical,Aave,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",347943.34,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Proxy contract,9.4,0.25243410259874854,audited
sc_549,short_address,Medium,Rari,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10990.96,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Rari ERC721 contract,5.5,0.5461355361901906,unaudited
sc_550,integer_overflow,High,Balancer,ERC20,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",24020.08,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Balancer ERC20 contract,7.2,0.23570511580777992,audited
sc_551,delegatecall_injection,Critical,Uniswap,Governor,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",60928.67,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Uniswap Governor contract,9.2,0.9989062863367757,audited
sc_552,timestamp_dependence,Medium,Frax,Oracle,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",58349.74,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax Oracle contract,6.1,0.6014294608910477,audited
sc_553,tx_origin,Medium,Uniswap,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",328237.23,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Uniswap Proxy contract,5.6,0.34264611415370616,audited
sc_554,integer_overflow,High,Synthetix,Proxy,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",205056.09,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Proxy contract,7.2,0.9654988809929838,audited
sc_555,dos_gas_limit,Medium,Compound,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",196922.58,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Vault contract,6.1,0.610950523280875,audited
sc_556,short_address,Medium,Compound,Proxy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",190022.2,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Compound Proxy contract,6.5,0.26222910099115737,unaudited
sc_557,random_weakness,High,SushiSwap,DEX,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",126499.91,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in SushiSwap DEX contract,7.3,0.44773351087030433,audited
sc_558,delegatecall_injection,Critical,MakerDAO,Factory,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",121534.55,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in MakerDAO Factory contract,9.8,0.28370711393643,unaudited
sc_559,short_address,Medium,Synthetix,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",155368.97,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix ERC1155 contract,4.3,0.24868195512918756,audited
sc_560,random_weakness,High,Uniswap,Staking,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",378113.19,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Uniswap Staking contract,8.7,0.5783993766682266,audited
sc_561,unchecked_call,Medium,MakerDAO,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",184375.57,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in MakerDAO Governor contract,6.9,0.48594976557436786,audited
sc_562,random_weakness,High,Yearn,Lending,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",100325.01,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn Lending contract,8.6,0.40907532419853776,audited
sc_563,dos_gas_limit,Medium,Curve,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52156.1,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve Oracle contract,5.1,0.42344672246433934,audited
sc_564,integer_overflow,High,Yearn,Strategy,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",179757.27,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Yearn Strategy contract,7.8,0.31862962792097693,audited
sc_565,tx_origin,Medium,Rari,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23209.6,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Rari Bridge contract,4.2,0.5864523456531047,audited
sc_566,delegatecall_injection,Critical,Yearn,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",208623.2,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Yearn Proxy contract,9.1,0.5675748757902169,audited
sc_567,reentrancy,Critical,Liquity,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",16814.59,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Liquity Farming contract,9.4,0.7383339683929612,audited
sc_568,delegatecall_injection,Critical,PancakeSwap,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",51739.7,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Pool contract,9.9,0.8520467682764109,audited
sc_569,unchecked_call,Medium,Rari,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",27325.38,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari Proxy contract,5.6,0.9925327413016013,audited
sc_570,timestamp_dependence,Medium,MakerDAO,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",136044.69,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO AMM contract,5.5,0.6486903538697676,audited
sc_571,unchecked_call,Medium,Aave,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",247150.02,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave ERC1155 contract,5.8,0.6457179832994447,audited
sc_572,timestamp_dependence,Medium,MakerDAO,Farming,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",160394.0,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Farming contract,4.3,0.46374445818437837,audited
sc_573,reentrancy,Critical,Compound,Proxy,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",262733.88,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Compound Proxy contract,9.8,0.48298657477295526,audited
sc_574,delegatecall_injection,Critical,Aave,Farming,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",497038.54,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Aave Farming contract,9.1,0.5726715958863869,audited
sc_575,timestamp_dependence,Medium,SushiSwap,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",134711.09,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap Proxy contract,4.8,0.7583140040183909,audited
sc_576,dos_gas_limit,Medium,Curve,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",76882.41,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve AMM contract,5.5,0.9936229400755715,audited
sc_577,short_address,Medium,Yearn,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",119496.95,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn Vault contract,5.9,0.8195289646576064,audited
sc_578,random_weakness,High,Rari,ERC721,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",53192.89,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari ERC721 contract,8.8,0.9624874472655887,unaudited
sc_579,front_running,Medium,Alpha Homora,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28069.91,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Alpha Homora Oracle contract,4.3,0.5631016170571633,audited
sc_580,unchecked_call,Medium,Rari,Staking,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",51544.91,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Rari Staking contract,6.4,0.4413856474236887,audited
sc_581,delegatecall_injection,Critical,MakerDAO,Proxy,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",120431.92,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in MakerDAO Proxy contract,9.6,0.43504768704943053,unaudited
sc_582,access_control,High,Synthetix,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",141324.97,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Synthetix Lending contract,8.6,0.8656730652513203,unaudited
sc_583,dos_gas_limit,Medium,1inch,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",26641.95,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in 1inch AMM contract,6.7,0.5046772930433179,unaudited
sc_584,front_running,Medium,Euler,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44764.73,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Euler Strategy contract,6.2,0.8444947749055093,unaudited
sc_585,random_weakness,High,Frax,Oracle,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",33727.1,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax Oracle contract,8.2,0.9712038444287617,unaudited
sc_586,delegatecall_injection,Critical,Synthetix,Timelock,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",252710.59,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix Timelock contract,9.8,0.33591351302162703,audited
sc_587,unchecked_call,Medium,Compound,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",101578.47,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Compound AMM contract,6.2,0.5775958797282514,audited
sc_588,uninitialized_storage,High,Alpha Homora,ERC721,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",41168.52,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Alpha Homora ERC721 contract,7.4,0.14274424254395449,unaudited
sc_589,reentrancy,Critical,Yearn,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",26382.21,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Yearn DEX contract,9.5,0.11966305950461056,audited
sc_590,timestamp_dependence,Medium,dYdX,ERC20,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",12366.58,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX ERC20 contract,5.8,0.4616766789516802,unaudited
sc_591,reentrancy,Critical,Rari,ERC721,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",37537.93,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Rari ERC721 contract,9.4,0.389669400153302,audited
sc_592,short_address,Medium,Liquity,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39457.56,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity Oracle contract,4.9,0.4731549832968106,audited
sc_593,short_address,Medium,Convex,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",26015.65,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Convex ERC20 contract,6.2,0.18047891456869383,audited
sc_594,random_weakness,High,Liquity,Oracle,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",11215.12,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity Oracle contract,7.2,0.3196615057214884,audited
sc_595,dos_gas_limit,Medium,Compound,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",71929.07,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Lending contract,5.3,0.5931435486780151,audited
sc_596,random_weakness,High,PancakeSwap,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",19397.23,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in PancakeSwap Proxy contract,7.3,0.8216933689443298,audited
sc_597,dos_gas_limit,Medium,Convex,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7880.8,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Convex Strategy contract,4.7,0.18137623972431766,audited
sc_598,uninitialized_storage,High,Convex,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",49931.94,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Convex AMM contract,7.0,0.7283402809594607,audited
sc_599,random_weakness,High,Convex,Timelock,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",76311.11,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Convex Timelock contract,8.2,0.39410504276224523,unaudited
sc_600,unchecked_call,Medium,Aave,Bridge,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",85131.82,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave Bridge contract,5.8,0.6803957722346927,audited
sc_601,reentrancy,Critical,Compound,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",173032.51,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Compound Vault contract,9.1,0.7632529112234208,audited
sc_602,dos_gas_limit,Medium,Compound,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",114140.29,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound ERC1155 contract,5.8,0.7702688855432632,unaudited
sc_603,tx_origin,Medium,Yearn,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28946.1,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Oracle contract,6.2,0.38361063399245365,audited
sc_604,front_running,Medium,Alpha Homora,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36706.25,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Alpha Homora Staking contract,6.4,0.14376254235136246,audited
sc_605,tx_origin,Medium,Frax,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38766.53,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Proxy contract,5.2,0.37491334134523446,audited
sc_606,tx_origin,Medium,Curve,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24471.64,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Curve AMM contract,4.6,0.8083048919948483,unaudited
sc_607,access_control,High,Uniswap,Oracle,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",312838.23,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap Oracle contract,7.0,0.33687254245786924,audited
sc_608,reentrancy,Critical,Balancer,Timelock,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",15818.1,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Timelock contract,9.5,0.2737939088440329,audited
sc_609,timestamp_dependence,Medium,Compound,Router,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",124411.31,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Compound Router contract,5.4,0.6367563625600996,unaudited
sc_610,delegatecall_injection,Critical,Euler,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",86654.47,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler Timelock contract,9.8,0.6112079097373986,audited
sc_611,uninitialized_storage,High,Aave,Bridge,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",182605.51,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave Bridge contract,8.6,0.8832657994334737,audited
sc_612,access_control,High,MakerDAO,Factory,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",318227.42,13,0.26,0.8,2,0,1,1,High access_control vulnerability in MakerDAO Factory contract,8.3,0.2310312704731367,audited
sc_613,uninitialized_storage,High,Balancer,ERC721,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",57021.84,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Balancer ERC721 contract,8.7,0.2299473547229603,audited
sc_614,uninitialized_storage,High,Aave,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",227291.64,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave Oracle contract,8.7,0.8634731911651324,unaudited
sc_615,integer_overflow,High,Compound,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",354434.61,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Compound Lending contract,8.3,0.5955309155841368,audited
sc_616,reentrancy,Critical,Liquity,Strategy,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",35817.92,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Liquity Strategy contract,9.8,0.45184346900092376,unaudited
sc_617,delegatecall_injection,Critical,SushiSwap,ERC721,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",86749.09,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in SushiSwap ERC721 contract,10.0,0.9722506325635756,audited
sc_618,reentrancy,Critical,Curve,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",136307.89,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Curve Governor contract,9.6,0.8205966529034289,audited
sc_619,front_running,Medium,Alpha Homora,Proxy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12538.98,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Alpha Homora Proxy contract,4.3,0.4718155380311143,audited
sc_620,short_address,Medium,1inch,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19648.57,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in 1inch AMM contract,5.1,0.21035827891776976,audited
sc_621,dos_gas_limit,Medium,dYdX,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38784.64,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in dYdX Governor contract,4.8,0.2970705739787758,audited
sc_622,delegatecall_injection,Critical,MakerDAO,Vault,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",445792.69,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in MakerDAO Vault contract,9.2,0.5031981593750573,audited
sc_623,integer_overflow,High,1inch,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",13635.38,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in 1inch ERC20 contract,7.1,0.1467472098131094,unaudited
sc_624,tx_origin,Medium,Uniswap,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",104016.07,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Vault contract,5.5,0.8025446625806361,audited
sc_625,reentrancy,Critical,Euler,Pool,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",54228.05,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Euler Pool contract,9.1,0.6072467951091299,audited
sc_626,tx_origin,Medium,dYdX,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47353.46,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX Lending contract,4.5,0.6232075382738541,audited
sc_627,tx_origin,Medium,Synthetix,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",92177.99,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix ERC721 contract,6.8,0.49655785014145815,audited
sc_628,reentrancy,Critical,Aave,Proxy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",415575.45,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Aave Proxy contract,9.3,0.6597210508636105,audited
sc_629,integer_overflow,High,Liquity,ERC20,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",39571.41,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Liquity ERC20 contract,7.7,0.29225839415587807,audited
sc_630,tx_origin,Medium,Uniswap,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",129681.3,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Proxy contract,6.1,0.4229584457453106,audited
sc_631,dos_gas_limit,Medium,MakerDAO,Pool,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55767.62,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO Pool contract,4.8,0.49448370119623264,audited
sc_632,unchecked_call,Medium,Curve,Staking,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",59642.48,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Staking contract,6.6,0.5035126903143169,audited
sc_633,random_weakness,High,PancakeSwap,Strategy,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",73728.44,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in PancakeSwap Strategy contract,7.6,0.46808216937930236,unaudited
sc_634,short_address,Medium,Synthetix,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50743.98,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Lending contract,6.1,0.4464645964905367,unaudited
sc_635,access_control,High,MakerDAO,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",106988.69,13,0.26,0.8,2,0,1,1,High access_control vulnerability in MakerDAO Vault contract,7.6,0.45760911774932667,audited
sc_636,unchecked_call,Medium,Euler,ERC721,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",43870.05,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Euler ERC721 contract,5.3,0.834898648412618,unaudited
sc_637,unchecked_call,Medium,MakerDAO,Router,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",210240.7,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in MakerDAO Router contract,5.3,0.16727959960904565,audited
sc_638,integer_overflow,High,Euler,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",24408.95,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler Farming contract,7.2,0.45491441750335593,unaudited
sc_639,tx_origin,Medium,MakerDAO,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",118540.65,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO Router contract,5.0,0.4937594772837084,unaudited
sc_640,unchecked_call,Medium,Balancer,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",39324.96,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer Governor contract,6.7,0.19971660645294687,audited
sc_641,random_weakness,High,Aave,AMM,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",225830.28,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Aave AMM contract,7.7,0.9698971956388072,audited
sc_642,dos_gas_limit,Medium,Yearn,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",94631.99,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn ERC721 contract,5.3,0.21281756503063015,audited
sc_643,dos_gas_limit,Medium,MakerDAO,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",206644.1,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO Governor contract,6.8,0.4696122790188705,audited
sc_644,timestamp_dependence,Medium,PancakeSwap,Oracle,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",51083.57,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Oracle contract,4.7,0.34440953783765815,audited
sc_645,uninitialized_storage,High,Rari,ERC20,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",66428.97,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Rari ERC20 contract,7.3,0.505823299713963,audited
sc_646,dos_gas_limit,Medium,Alpha Homora,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18357.92,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora ERC721 contract,5.9,0.48666610929695775,audited
sc_647,reentrancy,Critical,Compound,AMM,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",288860.06,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Compound AMM contract,9.1,0.19532606479245201,unaudited
sc_648,timestamp_dependence,Medium,Synthetix,Router,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",159492.33,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Synthetix Router contract,4.0,0.1863253956634744,audited
sc_649,access_control,High,Alpha Homora,Farming,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",55853.51,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora Farming contract,8.1,0.18408419034239965,audited
sc_650,reentrancy,Critical,MakerDAO,AMM,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",86771.49,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO AMM contract,9.7,0.3316419154909108,audited
sc_651,uninitialized_storage,High,Frax,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",42051.87,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Frax Timelock contract,7.5,0.5930308440759081,unaudited
sc_652,integer_overflow,High,Aave,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",267411.57,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Aave Oracle contract,8.6,0.9969322202812307,audited
sc_653,access_control,High,dYdX,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",60166.98,13,0.26,0.8,2,0,1,1,High access_control vulnerability in dYdX Strategy contract,8.8,0.5687767182383779,audited
sc_654,dos_gas_limit,Medium,SushiSwap,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",122840.98,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in SushiSwap Lending contract,4.3,0.5635210512218095,unaudited
sc_655,access_control,High,Aave,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",348494.83,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Router contract,7.5,0.967328693169291,audited
sc_656,reentrancy,Critical,Liquity,ERC1155,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",18352.4,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Liquity ERC1155 contract,9.2,0.9360588706516524,audited
sc_657,tx_origin,Medium,Rari,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16167.65,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Rari AMM contract,5.2,0.9433160847517503,audited
sc_658,access_control,High,dYdX,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",58478.04,13,0.26,0.8,2,1,1,1,High access_control vulnerability in dYdX Factory contract,8.0,0.4264792979344435,unaudited
sc_659,unchecked_call,Medium,Convex,DEX,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",70020.2,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Convex DEX contract,4.6,0.6770333613891116,audited
sc_660,short_address,Medium,dYdX,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39574.5,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in dYdX ERC20 contract,5.6,0.36036027301556006,audited
sc_661,short_address,Medium,Yearn,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54844.47,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn Pool contract,5.8,0.3750370376195389,audited
sc_662,tx_origin,Medium,Compound,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",110708.22,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Compound ERC721 contract,6.1,0.7778837595173509,audited
sc_663,uninitialized_storage,High,PancakeSwap,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",34486.47,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in PancakeSwap AMM contract,7.3,0.9400514313863633,audited
sc_664,random_weakness,High,Frax,DEX,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",63788.5,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax DEX contract,7.4,0.2602052448732596,unaudited
sc_665,unchecked_call,Medium,MakerDAO,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",182967.15,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in MakerDAO ERC1155 contract,5.8,0.9438758799842886,audited
sc_666,delegatecall_injection,Critical,MakerDAO,Factory,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",499636.4,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in MakerDAO Factory contract,9.1,0.3699721347423105,audited
sc_667,unchecked_call,Medium,Uniswap,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",260774.14,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Uniswap AMM contract,5.9,0.5470398353220998,audited
sc_668,tx_origin,Medium,dYdX,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53749.74,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX ERC721 contract,6.1,0.6433014705770069,audited
sc_669,integer_overflow,High,dYdX,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",11244.17,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in dYdX Router contract,8.3,0.27465200247707555,audited
sc_670,front_running,Medium,Curve,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",170286.37,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve Router contract,6.5,0.37553909548399,audited
sc_671,unchecked_call,Medium,Curve,ERC1155,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",98689.1,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Curve ERC1155 contract,6.3,0.6920646566020134,audited
sc_672,timestamp_dependence,Medium,Compound,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",121962.89,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Compound Lending contract,6.5,0.18504276848183135,audited
sc_673,access_control,High,Balancer,Pool,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",8308.8,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Balancer Pool contract,7.9,0.18623106554390728,audited
sc_674,dos_gas_limit,Medium,Balancer,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42913.14,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Balancer AMM contract,5.4,0.7031088646352869,audited
sc_675,unchecked_call,Medium,Alpha Homora,Staking,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",28561.06,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora Staking contract,6.0,0.8127129826146232,unaudited
sc_676,short_address,Medium,Liquity,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19732.11,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity Router contract,4.1,0.7602480861133651,audited
sc_677,unchecked_call,Medium,SushiSwap,Pool,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",50212.19,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in SushiSwap Pool contract,4.4,0.6254187282536041,unaudited
sc_678,timestamp_dependence,Medium,Synthetix,Bridge,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",21960.56,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Synthetix Bridge contract,6.4,0.6000147417528134,audited
sc_679,short_address,Medium,Synthetix,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",110667.73,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Synthetix ERC1155 contract,5.6,0.4203102413991092,audited
sc_680,tx_origin,Medium,Curve,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",84736.74,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Curve DEX contract,5.6,0.4549370255721079,audited
sc_681,integer_overflow,High,SushiSwap,Router,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",170943.68,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in SushiSwap Router contract,8.1,0.7450736365026677,audited
sc_682,random_weakness,High,dYdX,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",45089.11,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in dYdX Pool contract,8.8,0.8164966970263922,audited
sc_683,random_weakness,High,Aave,Router,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",293561.9,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Aave Router contract,7.8,0.7549757267834729,audited
sc_684,delegatecall_injection,Critical,Yearn,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",151951.88,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Yearn Bridge contract,9.6,0.5289441864208049,audited
sc_685,timestamp_dependence,Medium,Liquity,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",7330.26,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity DEX contract,6.7,0.7562105417844606,unaudited
sc_686,short_address,Medium,Uniswap,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",207885.38,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Uniswap Oracle contract,5.8,0.5075333255304664,audited
sc_687,tx_origin,Medium,Curve,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",129822.01,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Curve Pool contract,4.8,0.15734428237452014,audited
sc_688,timestamp_dependence,Medium,Rari,Proxy,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",44091.3,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Rari Proxy contract,6.6,0.3191744265536839,unaudited
sc_689,reentrancy,Critical,Uniswap,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",118551.26,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Uniswap ERC721 contract,9.3,0.8228401854615354,audited
sc_690,dos_gas_limit,Medium,Rari,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13969.58,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Rari DEX contract,5.8,0.3098575108452086,audited
sc_691,unchecked_call,Medium,Compound,Timelock,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",37683.54,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Compound Timelock contract,5.5,0.8395652765773949,audited
sc_692,short_address,Medium,SushiSwap,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",173189.74,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in SushiSwap DEX contract,6.8,0.6888383968893392,unaudited
sc_693,access_control,High,MakerDAO,ERC721,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",250148.73,13,0.26,0.8,2,0,1,1,High access_control vulnerability in MakerDAO ERC721 contract,8.3,0.6975356701287314,audited
sc_694,access_control,High,Euler,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",25826.69,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Euler Oracle contract,8.7,0.8686600852222575,audited
sc_695,random_weakness,High,Liquity,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",68068.15,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Liquity Proxy contract,8.0,0.6714656646293574,audited
sc_696,uninitialized_storage,High,Compound,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",86907.38,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Compound Governor contract,7.9,0.864735497240956,audited
sc_697,access_control,High,Balancer,Staking,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",69678.7,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Staking contract,8.1,0.21938838014576395,audited
sc_698,access_control,High,Compound,Staking,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",267018.82,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Compound Staking contract,7.2,0.5717784265228648,audited
sc_699,random_weakness,High,1inch,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",63305.33,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in 1inch Factory contract,7.4,0.6527365520466109,audited
sc_700,integer_overflow,High,Balancer,ERC1155,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",7585.09,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Balancer ERC1155 contract,7.5,0.216763598477134,unaudited
sc_701,timestamp_dependence,Medium,dYdX,Proxy,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",9719.95,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Proxy contract,5.1,0.42230930519609633,audited
sc_702,tx_origin,Medium,Liquity,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23569.34,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity Router contract,5.7,0.4781008949488641,audited
sc_703,integer_overflow,High,Synthetix,Strategy,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",133017.4,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Strategy contract,7.3,0.3888119673345247,audited
sc_704,unchecked_call,Medium,dYdX,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",33403.33,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in dYdX Farming contract,6.1,0.41656948858532583,audited
sc_705,short_address,Medium,Liquity,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56513.41,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity ERC1155 contract,6.1,0.8568570922563791,unaudited
sc_706,tx_origin,Medium,dYdX,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33370.05,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in dYdX ERC1155 contract,5.0,0.6387743275223278,audited
sc_707,integer_overflow,High,dYdX,Lending,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",41154.28,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in dYdX Lending contract,7.9,0.7481717002098578,audited
sc_708,front_running,Medium,Aave,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",220319.69,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Aave Pool contract,4.6,0.5603173489766832,audited
sc_709,unchecked_call,Medium,Uniswap,Lending,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",200543.7,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Uniswap Lending contract,4.6,0.44370344095712566,audited
sc_710,integer_overflow,High,Liquity,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",42281.47,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Liquity AMM contract,7.9,0.15417579783113886,unaudited
sc_711,uninitialized_storage,High,Uniswap,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",287871.72,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Uniswap Strategy contract,8.5,0.2437858282043846,audited
sc_712,reentrancy,Critical,Synthetix,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",200828.55,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Synthetix Factory contract,9.2,0.9922980384295693,audited
sc_713,access_control,High,Uniswap,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",391983.95,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap Strategy contract,7.3,0.18605454660528886,audited
sc_714,dos_gas_limit,Medium,Yearn,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",154624.39,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn Oracle contract,4.3,0.26581568748980844,audited
sc_715,integer_overflow,High,Convex,Farming,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",13405.57,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Convex Farming contract,8.5,0.5525969185695095,unaudited
sc_716,tx_origin,Medium,Synthetix,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64031.89,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix ERC1155 contract,4.9,0.5697990787951954,audited
sc_717,dos_gas_limit,Medium,Alpha Homora,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53772.12,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Oracle contract,4.0,0.780811914498955,audited
sc_718,short_address,Medium,Curve,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",95482.4,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve Pool contract,4.6,0.5355044239795853,unaudited
sc_719,access_control,High,PancakeSwap,Proxy,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",30942.98,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap Proxy contract,8.2,0.3395238517288011,audited
sc_720,front_running,Medium,dYdX,ERC721,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33194.97,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in dYdX ERC721 contract,5.0,0.6455665708200387,unaudited
sc_721,access_control,High,1inch,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",20126.33,13,0.26,0.8,2,0,1,1,High access_control vulnerability in 1inch Staking contract,8.4,0.45710553283984745,unaudited
sc_722,random_weakness,High,Alpha Homora,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",64190.62,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Alpha Homora Lending contract,7.4,0.970040066303588,audited
sc_723,integer_overflow,High,Euler,Proxy,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",28983.94,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler Proxy contract,7.7,0.30186422318246964,unaudited
sc_724,dos_gas_limit,Medium,Compound,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",317202.78,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound ERC721 contract,4.9,0.6104325300137181,audited
sc_725,reentrancy,Critical,dYdX,Oracle,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",13586.47,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in dYdX Oracle contract,9.0,0.5571610173912508,audited
sc_726,tx_origin,Medium,Uniswap,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",60956.55,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Uniswap Staking contract,6.3,0.6408441825409757,audited
sc_727,tx_origin,Medium,Frax,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47068.44,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Bridge contract,5.2,0.9497442332090449,audited
sc_728,delegatecall_injection,Critical,Synthetix,ERC20,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",131770.45,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix ERC20 contract,9.7,0.32519618959136587,unaudited
sc_729,delegatecall_injection,Critical,1inch,Oracle,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",70704.72,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch Oracle contract,9.7,0.7430043318641898,audited
sc_730,random_weakness,High,Synthetix,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",142615.36,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Synthetix Factory contract,7.5,0.24061269150731984,unaudited
sc_731,short_address,Medium,Convex,Governor,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29378.68,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex Governor contract,5.2,0.7950756258260065,unaudited
sc_732,random_weakness,High,Euler,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",75446.48,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Euler Router contract,7.4,0.2599775069982878,audited
sc_733,front_running,Medium,Compound,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",254135.35,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Compound Pool contract,4.9,0.7856867381281374,unaudited
sc_734,short_address,Medium,Euler,ERC20,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",59922.03,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Euler ERC20 contract,5.1,0.8366975232902725,audited
sc_735,reentrancy,Critical,1inch,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",85086.72,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch ERC20 contract,9.1,0.9937196969971195,audited
sc_736,dos_gas_limit,Medium,PancakeSwap,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40009.33,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap Vault contract,4.8,0.8116748809416633,audited
sc_737,unchecked_call,Medium,Yearn,Lending,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",133650.99,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Yearn Lending contract,6.6,0.9185157112811617,unaudited
sc_738,uninitialized_storage,High,dYdX,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",40654.54,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX Staking contract,8.6,0.32690512155697216,audited
sc_739,delegatecall_injection,Critical,SushiSwap,ERC721,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",52268.95,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in SushiSwap ERC721 contract,10.0,0.3616823157635779,audited
sc_740,access_control,High,Frax,Factory,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",41594.46,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Frax Factory contract,8.5,0.4899984450267669,audited
sc_741,delegatecall_injection,Critical,PancakeSwap,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",29032.39,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Governor contract,9.9,0.19718659640039066,unaudited
sc_742,reentrancy,Critical,MakerDAO,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",174245.61,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO Farming contract,9.0,0.4732598475002834,audited
sc_743,uninitialized_storage,High,MakerDAO,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",237703.73,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO ERC721 contract,8.5,0.3708993056125456,audited
sc_744,access_control,High,Frax,Pool,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",47879.87,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Frax Pool contract,7.3,0.6171279680008867,audited
sc_745,unchecked_call,Medium,MakerDAO,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",226590.5,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in MakerDAO Timelock contract,4.3,0.5051615547608875,unaudited
sc_746,dos_gas_limit,Medium,Uniswap,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",230461.01,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Uniswap Factory contract,6.1,0.9528587931925708,unaudited
sc_747,integer_overflow,High,Frax,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",53341.8,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Frax AMM contract,7.3,0.4188503943468016,audited
sc_748,unchecked_call,Medium,Convex,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",19316.63,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Convex ERC721 contract,4.1,0.3898238796388548,audited
sc_749,random_weakness,High,dYdX,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",15075.85,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX ERC721 contract,8.5,0.32574721243980514,unaudited
sc_750,tx_origin,Medium,Balancer,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55610.5,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Balancer Vault contract,4.8,0.4108773168606581,audited
sc_751,tx_origin,Medium,1inch,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21199.01,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in 1inch ERC20 contract,5.7,0.9153471018738435,audited
sc_752,delegatecall_injection,Critical,Convex,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",36691.28,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex DEX contract,9.2,0.8298791235068003,audited
sc_753,unchecked_call,Medium,Liquity,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",9661.87,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Liquity Lending contract,6.1,0.7925417241546563,unaudited
sc_754,uninitialized_storage,High,MakerDAO,Lending,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",276847.42,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO Lending contract,8.1,0.837583507866607,audited
sc_755,random_weakness,High,Yearn,ERC1155,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",181088.06,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn ERC1155 contract,8.7,0.8351022757791103,unaudited
sc_756,uninitialized_storage,High,Alpha Homora,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",80463.51,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Alpha Homora Governor contract,7.6,0.8263099107416699,unaudited
sc_757,short_address,Medium,Alpha Homora,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",69713.39,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Alpha Homora Proxy contract,5.9,0.524302000870704,audited
sc_758,tx_origin,Medium,Curve,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",102904.25,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Curve DEX contract,4.0,0.3839193011345714,audited
sc_759,uninitialized_storage,High,1inch,Staking,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",13297.02,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in 1inch Staking contract,8.2,0.9116705453961388,unaudited
sc_760,access_control,High,Yearn,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",94477.19,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Yearn Lending contract,7.3,0.7725821102594478,unaudited
sc_761,dos_gas_limit,Medium,Balancer,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24567.82,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Balancer Oracle contract,4.9,0.4830358502992086,audited
sc_762,delegatecall_injection,Critical,Uniswap,ERC721,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",536996.81,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Uniswap ERC721 contract,9.0,0.7435714129569447,audited
sc_763,front_running,Medium,1inch,Timelock,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",67511.94,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch Timelock contract,4.2,0.9635324553690064,audited
sc_764,timestamp_dependence,Medium,Convex,Vault,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",17411.24,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Convex Vault contract,5.7,0.3473425827931597,audited
sc_765,timestamp_dependence,Medium,SushiSwap,Router,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",57136.86,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap Router contract,6.0,0.8149301348538346,audited
sc_766,short_address,Medium,Liquity,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35375.43,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity AMM contract,6.2,0.6505234215038275,audited
sc_767,access_control,High,Balancer,Strategy,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",32818.59,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Strategy contract,8.0,0.6729140092471714,audited
sc_768,reentrancy,Critical,Convex,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",64851.3,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex ERC20 contract,9.3,0.6071037336908495,unaudited
sc_769,uninitialized_storage,High,Convex,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",70058.75,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Convex ERC721 contract,8.2,0.5133707876648111,unaudited
sc_770,random_weakness,High,1inch,Oracle,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",39073.27,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in 1inch Oracle contract,8.6,0.9525673364034627,audited
sc_771,delegatecall_injection,Critical,Rari,DEX,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",48026.65,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari DEX contract,9.6,0.6204625748901631,audited
sc_772,access_control,High,Euler,Factory,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",49014.68,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Euler Factory contract,7.6,0.35107677294016615,audited
sc_773,uninitialized_storage,High,Liquity,Governor,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",73068.39,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Liquity Governor contract,8.2,0.4834605876645012,audited
sc_774,tx_origin,Medium,Yearn,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36567.59,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Strategy contract,4.8,0.4326269656998242,audited
sc_775,dos_gas_limit,Medium,MakerDAO,ERC721,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",122901.71,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in MakerDAO ERC721 contract,6.3,0.8042247559499857,audited
sc_776,integer_overflow,High,Rari,ERC721,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",66543.64,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari ERC721 contract,8.2,0.15603705930798933,audited
sc_777,short_address,Medium,Aave,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",78718.47,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Aave Vault contract,4.4,0.680857125020316,audited
sc_778,dos_gas_limit,Medium,MakerDAO,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",308482.09,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in MakerDAO Lending contract,5.8,0.446037134980776,audited
sc_779,uninitialized_storage,High,MakerDAO,Strategy,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",250702.69,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO Strategy contract,7.6,0.19481577222668545,audited
sc_780,dos_gas_limit,Medium,Yearn,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20311.88,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn Router contract,6.1,0.9277645137693572,audited
sc_781,dos_gas_limit,Medium,MakerDAO,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",111200.55,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO ERC20 contract,4.0,0.224028344579419,audited
sc_782,unchecked_call,Medium,Frax,Vault,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",68802.28,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Frax Vault contract,6.8,0.5146225267130681,unaudited
sc_783,unchecked_call,Medium,Balancer,ERC1155,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",48416.95,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer ERC1155 contract,4.7,0.1479509805758708,unaudited
sc_784,short_address,Medium,MakerDAO,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",234393.12,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO ERC1155 contract,5.8,0.6303281439308105,audited
sc_785,front_running,Medium,1inch,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39953.62,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch DEX contract,5.3,0.1532605053351942,audited
sc_786,uninitialized_storage,High,Aave,Router,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",45315.98,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave Router contract,8.4,0.266316857531939,audited
sc_787,uninitialized_storage,High,SushiSwap,Lending,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",188697.58,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in SushiSwap Lending contract,8.6,0.18132038663549388,audited
sc_788,timestamp_dependence,Medium,Uniswap,ERC20,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",96946.85,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Uniswap ERC20 contract,6.6,0.24432684479846237,audited
sc_789,dos_gas_limit,Medium,Convex,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",60963.93,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Convex Pool contract,5.4,0.61518330335994,unaudited
sc_790,front_running,Medium,Rari,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15463.33,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Rari Staking contract,6.8,0.3779305846261666,audited
sc_791,delegatecall_injection,Critical,1inch,ERC721,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",73717.06,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch ERC721 contract,9.8,0.9598349291313548,audited
sc_792,unchecked_call,Medium,1inch,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",71959.77,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in 1inch Factory contract,6.7,0.4757448096706769,audited
sc_793,access_control,High,Yearn,AMM,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",69054.31,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn AMM contract,8.8,0.8079032967956704,audited
sc_794,short_address,Medium,Euler,Timelock,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16268.28,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Euler Timelock contract,4.3,0.3970085332676875,unaudited
sc_795,timestamp_dependence,Medium,Frax,Bridge,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",62353.88,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax Bridge contract,4.1,0.40508967605885804,audited
sc_796,reentrancy,Critical,Compound,Factory,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",611571.17,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Compound Factory contract,9.4,0.8749981886161028,unaudited
sc_797,delegatecall_injection,Critical,Yearn,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",77103.04,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Yearn Strategy contract,9.7,0.4771883218870244,audited
sc_798,integer_overflow,High,Yearn,ERC721,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",95569.78,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Yearn ERC721 contract,8.1,0.5477062287087825,audited
sc_799,integer_overflow,High,Curve,Vault,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",117950.42,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Curve Vault contract,7.0,0.41669188589341044,unaudited
sc_800,uninitialized_storage,High,Uniswap,ERC1155,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",278757.3,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Uniswap ERC1155 contract,7.8,0.42284007598227924,audited
sc_801,front_running,Medium,Liquity,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52863.42,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Liquity Bridge contract,4.9,0.4690790196663963,audited
sc_802,short_address,Medium,Alpha Homora,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",59308.86,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Alpha Homora Farming contract,5.8,0.1467231121940456,unaudited
sc_803,dos_gas_limit,Medium,Balancer,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21354.43,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Balancer Staking contract,6.6,0.41908404125630416,audited
sc_804,integer_overflow,High,Uniswap,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",77383.36,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Uniswap Pool contract,7.2,0.5649267683692137,unaudited
sc_805,delegatecall_injection,Critical,Alpha Homora,Governor,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",27927.6,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Alpha Homora Governor contract,9.6,0.21497572949244959,audited
sc_806,front_running,Medium,Aave,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",193570.74,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Aave DEX contract,5.5,0.8360206496126458,audited
sc_807,delegatecall_injection,Critical,Curve,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",120435.04,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Curve Factory contract,9.3,0.675581746464376,audited
sc_808,access_control,High,Euler,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",25807.02,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Euler Timelock contract,7.1,0.5094473064060152,audited
sc_809,random_weakness,High,Aave,ERC721,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",173639.81,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Aave ERC721 contract,8.4,0.5456695655277397,audited
sc_810,delegatecall_injection,Critical,SushiSwap,Router,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",264441.21,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in SushiSwap Router contract,10.0,0.2221784288578372,audited
sc_811,timestamp_dependence,Medium,Alpha Homora,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",32085.53,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Alpha Homora ERC721 contract,4.0,0.8501389106689384,audited
sc_812,timestamp_dependence,Medium,Frax,Vault,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",9900.67,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax Vault contract,4.0,0.9742769079112891,audited
sc_813,access_control,High,Uniswap,Strategy,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",213004.13,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap Strategy contract,7.9,0.9493469722549454,audited
sc_814,unchecked_call,Medium,Alpha Homora,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",13234.78,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora Proxy contract,5.2,0.5730259956991376,audited
sc_815,tx_origin,Medium,Liquity,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",41374.45,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity Factory contract,5.5,0.10375055751967412,audited
sc_816,random_weakness,High,dYdX,ERC1155,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",84276.55,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX ERC1155 contract,8.2,0.9719333135443219,unaudited
sc_817,timestamp_dependence,Medium,Curve,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",41725.51,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Curve Proxy contract,4.9,0.976843126605338,unaudited
sc_818,short_address,Medium,Uniswap,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",84796.33,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Uniswap Vault contract,5.6,0.7962191452088848,audited
sc_819,uninitialized_storage,High,Alpha Homora,Governor,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",47112.62,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Alpha Homora Governor contract,7.1,0.6105309895824524,audited
sc_820,short_address,Medium,Synthetix,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19241.86,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Farming contract,6.4,0.6057661485686056,audited
sc_821,reentrancy,Critical,Aave,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",180212.89,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Farming contract,9.2,0.3065711022583073,audited
sc_822,front_running,Medium,1inch,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31877.39,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch Router contract,5.1,0.990295026542178,unaudited
sc_823,tx_origin,Medium,SushiSwap,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31532.35,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in SushiSwap Staking contract,6.8,0.9359309937147369,audited
sc_824,access_control,High,PancakeSwap,Router,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",59916.81,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap Router contract,8.5,0.3104168343008019,audited
sc_825,short_address,Medium,Yearn,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",72001.24,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn Staking contract,5.5,0.3207506791718418,audited
sc_826,reentrancy,Critical,Euler,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",113717.93,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler ERC721 contract,9.3,0.2002076310234292,audited
sc_827,reentrancy,Critical,PancakeSwap,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",40123.91,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap Oracle contract,9.4,0.1331646948016273,audited
sc_828,tx_origin,Medium,Rari,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10433.3,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Rari Governor contract,4.3,0.32451292967845935,unaudited
sc_829,integer_overflow,High,Compound,Router,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",324275.32,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Compound Router contract,8.1,0.5365685125786862,audited
sc_830,random_weakness,High,Frax,Governor,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",37396.5,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax Governor contract,7.2,0.3881572043215459,audited
sc_831,reentrancy,Critical,Convex,Farming,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",50496.6,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex Farming contract,9.9,0.6080765403355138,audited
sc_832,timestamp_dependence,Medium,Balancer,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",67047.5,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Balancer Timelock contract,5.6,0.5274945333501109,unaudited
sc_833,timestamp_dependence,Medium,Aave,Pool,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",300307.15,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Aave Pool contract,6.3,0.7586459220015423,audited
sc_834,access_control,High,dYdX,Farming,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",59453.88,13,0.26,0.8,2,0,1,1,High access_control vulnerability in dYdX Farming contract,7.8,0.9492523132075721,audited
sc_835,delegatecall_injection,Critical,Aave,ERC721,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",450084.45,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Aave ERC721 contract,9.6,0.42577201937387155,audited
sc_836,integer_overflow,High,dYdX,DEX,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",49303.06,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in dYdX DEX contract,7.9,0.3856227798032478,audited
sc_837,reentrancy,Critical,Synthetix,ERC20,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",93484.36,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Synthetix ERC20 contract,9.4,0.9225626316456267,unaudited
sc_838,timestamp_dependence,Medium,MakerDAO,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",304049.45,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in MakerDAO ERC1155 contract,6.4,0.8115538161119321,audited
sc_839,reentrancy,Critical,Liquity,Pool,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",28604.8,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Liquity Pool contract,9.9,0.3130029270219142,unaudited
sc_840,tx_origin,Medium,1inch,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20531.33,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in 1inch ERC1155 contract,5.7,0.9172401917414396,audited
sc_841,tx_origin,Medium,PancakeSwap,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64959.68,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in PancakeSwap Oracle contract,5.9,0.7100111656429545,audited
sc_842,integer_overflow,High,Synthetix,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",165945.4,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Bridge contract,7.1,0.3510231122511197,audited
sc_843,front_running,Medium,Uniswap,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",276491.0,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Uniswap Oracle contract,5.1,0.7215507679070287,audited
sc_844,delegatecall_injection,Critical,Convex,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",33411.37,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex Strategy contract,9.7,0.6324704903913658,audited
sc_845,integer_overflow,High,Euler,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",55037.34,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler ERC1155 contract,8.7,0.6227122718885565,unaudited
sc_846,timestamp_dependence,Medium,Curve,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",54743.36,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Curve Lending contract,6.7,0.1655256736999942,audited
sc_847,reentrancy,Critical,MakerDAO,Bridge,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",385849.97,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO Bridge contract,9.0,0.5131938639402673,unaudited
sc_848,front_running,Medium,Synthetix,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",102469.04,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Synthetix Bridge contract,4.1,0.357200181026315,audited
sc_849,front_running,Medium,Curve,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31908.33,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve Lending contract,5.8,0.5091183229900592,audited
sc_850,random_weakness,High,Rari,Strategy,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",73909.74,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari Strategy contract,7.7,0.16848975900970892,audited
sc_851,unchecked_call,Medium,Uniswap,ERC1155,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",248972.39,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Uniswap ERC1155 contract,6.7,0.2721841882751284,audited
sc_852,tx_origin,Medium,Yearn,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55051.37,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Factory contract,5.6,0.40164302304321653,audited
sc_853,random_weakness,High,Aave,ERC20,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",337779.74,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Aave ERC20 contract,8.7,0.382986762563409,unaudited
sc_854,integer_overflow,High,Liquity,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",69931.18,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity ERC1155 contract,7.5,0.4616157995497835,audited
sc_855,tx_origin,Medium,Liquity,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40327.24,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity AMM contract,6.2,0.9078677236675,audited
sc_856,reentrancy,Critical,Synthetix,Timelock,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",260141.53,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Synthetix Timelock contract,9.6,0.2520163490967208,audited
sc_857,short_address,Medium,1inch,Vault,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48828.32,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch Vault contract,4.4,0.3511229916439006,audited
sc_858,delegatecall_injection,Critical,1inch,Strategy,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",69315.99,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch Strategy contract,9.4,0.4595202669263325,audited
sc_859,dos_gas_limit,Medium,Compound,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",114272.35,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Governor contract,5.5,0.8471382240971785,unaudited
sc_860,timestamp_dependence,Medium,Curve,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",180382.64,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Curve Governor contract,4.0,0.24004266679642186,unaudited
sc_861,unchecked_call,Medium,Aave,Staking,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",251474.99,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave Staking contract,6.3,0.5353305337493088,unaudited
sc_862,front_running,Medium,Balancer,Timelock,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52894.21,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer Timelock contract,4.5,0.391815593004337,audited
sc_863,tx_origin,Medium,Uniswap,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",107510.1,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Proxy contract,5.1,0.6698083380561327,audited
sc_864,timestamp_dependence,Medium,Uniswap,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",142544.4,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Uniswap Farming contract,5.8,0.520168252205357,audited
sc_865,uninitialized_storage,High,Aave,Staking,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",421525.6,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Aave Staking contract,8.3,0.1076404199414643,audited
sc_866,uninitialized_storage,High,Convex,Router,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",62272.59,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Convex Router contract,8.5,0.967048972982913,audited
sc_867,short_address,Medium,Compound,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",166998.57,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Compound Farming contract,5.0,0.5752860319160414,audited
sc_868,uninitialized_storage,High,Euler,Proxy,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",50987.87,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Euler Proxy contract,8.6,0.8186354228165741,audited
sc_869,random_weakness,High,Synthetix,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",139805.04,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Synthetix Strategy contract,7.7,0.8737453968170136,unaudited
sc_870,timestamp_dependence,Medium,SushiSwap,ERC20,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",126731.86,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in SushiSwap ERC20 contract,4.6,0.40333789941020437,audited
sc_871,reentrancy,Critical,Euler,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",31908.42,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Euler Lending contract,9.9,0.5779235344536264,audited
sc_872,front_running,Medium,Balancer,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",73800.22,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Balancer Oracle contract,4.2,0.46751354778576315,audited
sc_873,timestamp_dependence,Medium,Rari,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",5845.23,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Rari ERC721 contract,4.6,0.5319002648476465,audited
sc_874,access_control,High,Yearn,AMM,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",176939.36,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn AMM contract,7.6,0.7620877630108419,unaudited
sc_875,front_running,Medium,Frax,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32727.69,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax Bridge contract,6.3,0.895220171312201,audited
sc_876,tx_origin,Medium,Rari,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38838.11,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Rari ERC20 contract,6.3,0.7008299884600951,audited
sc_877,uninitialized_storage,High,Uniswap,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",411004.39,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Uniswap AMM contract,8.3,0.2715483457265975,audited
sc_878,uninitialized_storage,High,Compound,ERC20,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",300045.35,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Compound ERC20 contract,7.5,0.6587656034732009,unaudited
sc_879,dos_gas_limit,Medium,dYdX,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7998.73,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in dYdX Proxy contract,4.4,0.8271882560502812,audited
sc_880,timestamp_dependence,Medium,Compound,Strategy,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",112709.19,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Compound Strategy contract,4.7,0.7967715847062928,audited
sc_881,random_weakness,High,Frax,Vault,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",43360.98,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Frax Vault contract,7.9,0.6893212968806485,unaudited
sc_882,dos_gas_limit,Medium,PancakeSwap,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12166.63,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap ERC721 contract,4.2,0.792983518652069,audited
sc_883,integer_overflow,High,Rari,Oracle,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",43568.48,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari Oracle contract,8.3,0.4907391267607951,audited
sc_884,front_running,Medium,Alpha Homora,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19218.38,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Alpha Homora Vault contract,4.9,0.6512728240766716,audited
sc_885,short_address,Medium,Rari,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58071.45,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Rari Oracle contract,4.5,0.9623435922652241,unaudited
sc_886,timestamp_dependence,Medium,Convex,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",22272.03,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Convex Router contract,5.6,0.575081620236435,unaudited
sc_887,dos_gas_limit,Medium,Synthetix,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",107929.88,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Synthetix AMM contract,6.8,0.7500019886740046,audited
sc_888,tx_origin,Medium,dYdX,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14216.7,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX Timelock contract,4.6,0.4140463259395851,audited
sc_889,unchecked_call,Medium,Alpha Homora,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",65704.35,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Alpha Homora Staking contract,6.2,0.4169493754485606,unaudited
sc_890,unchecked_call,Medium,Synthetix,Lending,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",120294.65,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Synthetix Lending contract,5.5,0.7467596402394288,unaudited
sc_891,access_control,High,PancakeSwap,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",68559.83,13,0.26,0.8,2,1,1,1,High access_control vulnerability in PancakeSwap Pool contract,8.2,0.7674474645907019,audited
sc_892,timestamp_dependence,Medium,Compound,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",227025.0,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Compound ERC721 contract,6.6,0.3296975717109489,audited
sc_893,short_address,Medium,Curve,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",124899.73,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve Lending contract,6.3,0.8267410694052565,audited
sc_894,timestamp_dependence,Medium,Compound,Farming,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",94553.73,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Compound Farming contract,6.1,0.46649958777001677,audited
sc_895,dos_gas_limit,Medium,Synthetix,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",148163.15,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Synthetix Strategy contract,5.3,0.8488179601144306,audited
sc_896,random_weakness,High,PancakeSwap,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",21123.75,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap Lending contract,7.1,0.40715660160458556,audited
sc_897,access_control,High,Synthetix,ERC20,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",18318.83,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Synthetix ERC20 contract,8.5,0.4754478012269211,audited
sc_898,random_weakness,High,Alpha Homora,DEX,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",52767.0,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Alpha Homora DEX contract,7.5,0.13108332098297928,audited
sc_899,access_control,High,Convex,Oracle,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",17397.81,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Convex Oracle contract,8.9,0.5025036130297601,unaudited
sc_900,uninitialized_storage,High,Yearn,Strategy,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",67021.43,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Yearn Strategy contract,7.9,0.388502557127097,unaudited
sc_901,unchecked_call,Medium,Frax,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",40665.7,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Frax AMM contract,4.8,0.9563700061130997,audited
sc_902,timestamp_dependence,Medium,Rari,Router,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",39826.27,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Rari Router contract,6.8,0.2348208295244192,audited
sc_903,timestamp_dependence,Medium,Balancer,ERC721,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",33943.24,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Balancer ERC721 contract,5.1,0.6898720976690006,unaudited
sc_904,dos_gas_limit,Medium,Frax,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39426.37,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Frax Pool contract,4.4,0.14205622335596577,unaudited
sc_905,reentrancy,Critical,Yearn,AMM,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",178877.22,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Yearn AMM contract,9.8,0.11312078610056117,audited
sc_906,timestamp_dependence,Medium,Convex,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",51780.55,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Convex Governor contract,5.5,0.908580996957861,unaudited
sc_907,uninitialized_storage,High,Synthetix,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",139731.63,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Synthetix Vault contract,8.7,0.6215658307602782,unaudited
sc_908,access_control,High,Compound,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",180113.17,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound Proxy contract,8.5,0.8871924357074812,unaudited
sc_909,short_address,Medium,Frax,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39533.2,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Frax Factory contract,6.6,0.27594192345682045,audited
sc_910,random_weakness,High,Compound,AMM,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",303887.23,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound AMM contract,7.2,0.6148532189297057,audited
sc_911,random_weakness,High,Synthetix,Router,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",24789.07,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Synthetix Router contract,8.0,0.14894750438406196,audited
sc_912,dos_gas_limit,Medium,Compound,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",102554.11,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Compound Router contract,6.8,0.8837037694390827,audited
sc_913,integer_overflow,High,Euler,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",42864.77,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler Oracle contract,8.0,0.8193278689467193,audited
sc_914,front_running,Medium,Aave,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",96393.44,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Aave Farming contract,5.0,0.3338362117663388,audited
sc_915,delegatecall_injection,Critical,dYdX,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",84985.37,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX Farming contract,9.4,0.18091590148675368,unaudited
sc_916,short_address,Medium,Uniswap,DEX,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",196407.46,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Uniswap DEX contract,6.7,0.9698389017073583,audited
sc_917,access_control,High,1inch,Pool,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",34279.55,13,0.26,0.8,2,0,1,1,High access_control vulnerability in 1inch Pool contract,7.8,0.9072978437896216,audited
sc_918,short_address,Medium,Curve,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48016.47,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve Lending contract,5.8,0.24123676527114046,audited
sc_919,integer_overflow,High,Compound,Strategy,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",270994.97,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Compound Strategy contract,8.7,0.7471662991381408,audited
sc_920,dos_gas_limit,Medium,Synthetix,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38893.41,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Synthetix Staking contract,4.1,0.5287956313297792,audited
sc_921,integer_overflow,High,MakerDAO,Router,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",226515.47,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Router contract,7.7,0.4815370125169125,audited
sc_922,access_control,High,Balancer,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",26543.83,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Factory contract,7.5,0.7491738791244795,audited
sc_923,delegatecall_injection,Critical,Convex,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",108065.47,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Convex Lending contract,9.4,0.8840482748195503,audited
sc_924,unchecked_call,Medium,Synthetix,Router,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",59819.25,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Synthetix Router contract,4.4,0.8039746786130825,audited
sc_925,front_running,Medium,Balancer,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",62850.0,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Balancer Lending contract,6.1,0.4189678883271051,unaudited
sc_926,short_address,Medium,Yearn,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22257.78,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn ERC1155 contract,5.9,0.6042868366029502,audited
sc_927,tx_origin,Medium,Uniswap,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",289913.07,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Router contract,4.5,0.40513223164821666,audited
sc_928,random_weakness,High,Balancer,ERC1155,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",24991.97,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer ERC1155 contract,8.0,0.8357883348082841,audited
sc_929,front_running,Medium,PancakeSwap,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58632.63,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in PancakeSwap Vault contract,5.2,0.30965239085839635,unaudited
sc_930,front_running,Medium,Rari,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",63277.54,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Rari Vault contract,4.3,0.496870943837494,audited
sc_931,integer_overflow,High,Liquity,Timelock,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",75711.26,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Liquity Timelock contract,8.8,0.7442759852848595,audited
sc_932,unchecked_call,Medium,Aave,Router,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",143709.09,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Aave Router contract,6.3,0.12113469526302233,audited
sc_933,short_address,Medium,MakerDAO,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",213151.49,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO Router contract,5.6,0.2292641480751096,audited
sc_934,delegatecall_injection,Critical,Alpha Homora,Router,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",24048.32,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Router contract,9.4,0.1392829743091813,audited
sc_935,delegatecall_injection,Critical,Yearn,Pool,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",69984.51,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Yearn Pool contract,9.7,0.6143760466721471,audited
sc_936,integer_overflow,High,dYdX,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",54006.23,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in dYdX Lending contract,7.8,0.31266442244555326,audited
sc_937,integer_overflow,High,Uniswap,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",219265.75,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Uniswap Oracle contract,8.9,0.7700405254453802,unaudited
sc_938,integer_overflow,High,Frax,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",47311.3,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Frax Vault contract,8.0,0.6486070390660442,audited
sc_939,unchecked_call,Medium,Euler,Proxy,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",55848.02,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Euler Proxy contract,5.1,0.16535797633364863,unaudited
sc_940,tx_origin,Medium,Curve,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36561.78,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Curve ERC1155 contract,5.2,0.7529459998151927,audited
sc_941,access_control,High,PancakeSwap,Oracle,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",54556.58,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap Oracle contract,7.0,0.4971191065355468,audited
sc_942,tx_origin,Medium,1inch,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",59889.59,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in 1inch Factory contract,5.8,0.4885677248547413,audited
sc_943,dos_gas_limit,Medium,Rari,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",41400.86,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Rari Factory contract,4.6,0.7872261577616136,unaudited
sc_944,timestamp_dependence,Medium,Yearn,ERC1155,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",112154.05,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Yearn ERC1155 contract,5.3,0.18613370516194655,unaudited
sc_945,tx_origin,Medium,Frax,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48971.0,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Governor contract,6.7,0.9202517795623923,audited
sc_946,reentrancy,Critical,Balancer,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",36481.26,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Governor contract,9.3,0.719694562345053,unaudited
sc_947,reentrancy,Critical,Liquity,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",84927.54,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Liquity Proxy contract,9.3,0.4089476718363716,audited
sc_948,delegatecall_injection,Critical,1inch,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",35607.81,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch Governor contract,9.1,0.6079328500509189,audited
sc_949,uninitialized_storage,High,SushiSwap,Lending,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",126456.07,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in SushiSwap Lending contract,8.9,0.2218893602462183,audited
sc_950,random_weakness,High,PancakeSwap,Governor,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",35024.76,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in PancakeSwap Governor contract,8.1,0.5051657459147363,unaudited
sc_951,dos_gas_limit,Medium,Synthetix,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",72418.24,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Synthetix ERC20 contract,6.7,0.753540263291829,audited
sc_952,front_running,Medium,Compound,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",107065.02,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Compound Pool contract,6.5,0.9325248982217925,audited
sc_953,timestamp_dependence,Medium,Synthetix,ERC721,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",69205.18,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Synthetix ERC721 contract,5.0,0.5175690919467449,audited
sc_954,integer_overflow,High,Euler,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",61897.7,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler Pool contract,7.5,0.783398464715298,unaudited
sc_955,unchecked_call,Medium,Balancer,AMM,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",50812.71,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer AMM contract,6.5,0.478727859383006,audited
sc_956,uninitialized_storage,High,Balancer,Factory,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",36129.37,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Balancer Factory contract,7.0,0.8031817080192621,audited
sc_957,uninitialized_storage,High,Aave,Factory,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",158606.91,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave Factory contract,7.3,0.4088075614099087,audited
sc_958,unchecked_call,Medium,Euler,Vault,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",57263.75,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Euler Vault contract,5.5,0.9682339908385388,unaudited
sc_959,timestamp_dependence,Medium,PancakeSwap,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",67493.6,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Proxy contract,6.3,0.8792393547304952,audited
sc_960,random_weakness,High,Uniswap,Oracle,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",86456.45,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Uniswap Oracle contract,8.6,0.5557929069941311,audited
sc_961,reentrancy,Critical,Euler,Governor,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",35633.66,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler Governor contract,9.2,0.681978780251665,audited
sc_962,timestamp_dependence,Medium,Balancer,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",14903.02,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Balancer ERC721 contract,5.8,0.9084184574513576,unaudited
sc_963,tx_origin,Medium,Euler,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33998.04,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Euler Bridge contract,6.4,0.2689791690071487,audited
sc_964,reentrancy,Critical,PancakeSwap,AMM,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",78854.61,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap AMM contract,9.8,0.7489390145730181,unaudited
sc_965,dos_gas_limit,Medium,dYdX,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24374.01,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in dYdX Oracle contract,6.3,0.5039477707778658,unaudited
sc_966,uninitialized_storage,High,Rari,AMM,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",48056.06,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Rari AMM contract,8.0,0.4905220780773969,audited
sc_967,uninitialized_storage,High,MakerDAO,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",272539.91,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in MakerDAO Router contract,7.3,0.11217132616209693,audited
sc_968,short_address,Medium,Synthetix,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",118821.19,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Timelock contract,5.6,0.18712850324355967,audited
sc_969,dos_gas_limit,Medium,Aave,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",155195.94,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Strategy contract,4.8,0.10014885558441769,unaudited
sc_970,tx_origin,Medium,Liquity,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10718.66,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Liquity Strategy contract,6.2,0.7653455239457407,audited
sc_971,unchecked_call,Medium,1inch,Factory,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",27065.17,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Factory contract,6.0,0.7968188450736542,audited
sc_972,random_weakness,High,Convex,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",41257.96,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Convex Farming contract,8.3,0.7651207166010632,unaudited
sc_973,random_weakness,High,Liquity,Oracle,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",29886.94,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity Oracle contract,8.5,0.9849868104090982,audited
sc_974,reentrancy,Critical,Uniswap,Staking,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",140086.55,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Uniswap Staking contract,9.1,0.6323685347751403,audited
sc_975,uninitialized_storage,High,Compound,AMM,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",392150.78,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Compound AMM contract,8.7,0.16595011519497688,audited
sc_976,tx_origin,Medium,SushiSwap,ERC721,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51021.59,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in SushiSwap ERC721 contract,4.0,0.27173979876920706,unaudited
sc_977,reentrancy,Critical,Rari,Factory,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",16541.51,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Rari Factory contract,9.9,0.8936582571865282,unaudited
sc_978,tx_origin,Medium,Aave,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",305848.11,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave ERC721 contract,6.8,0.21578218757658907,audited
sc_979,access_control,High,Liquity,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",19716.91,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Liquity Governor contract,7.4,0.5725236727898317,audited
sc_980,integer_overflow,High,dYdX,Vault,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",15445.61,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in dYdX Vault contract,8.7,0.4178157907443749,unaudited
sc_981,uninitialized_storage,High,Compound,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",420565.67,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Compound ERC721 contract,7.0,0.7227531606089862,audited
sc_982,delegatecall_injection,Critical,Compound,Vault,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",219049.74,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Compound Vault contract,9.8,0.15319081001800353,audited
sc_983,integer_overflow,High,PancakeSwap,Farming,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",56853.89,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in PancakeSwap Farming contract,7.1,0.5663378480493464,audited
sc_984,integer_overflow,High,Balancer,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",69186.47,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Balancer Farming contract,7.2,0.7089947231898305,audited
sc_985,unchecked_call,Medium,1inch,Strategy,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",30579.46,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Strategy contract,6.0,0.7050838462918064,audited
sc_986,unchecked_call,Medium,Yearn,Lending,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",65074.24,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Yearn Lending contract,5.2,0.5794521843610452,audited
sc_987,access_control,High,Balancer,ERC721,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",82921.13,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Balancer ERC721 contract,8.5,0.6348503769695727,unaudited
sc_988,delegatecall_injection,Critical,Rari,Staking,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",10755.49,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari Staking contract,9.9,0.7547723424449749,unaudited
sc_989,front_running,Medium,Curve,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42274.2,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve Proxy contract,6.0,0.16115820570481518,audited
sc_990,dos_gas_limit,Medium,PancakeSwap,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12317.4,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap Proxy contract,5.0,0.3788374008663471,audited
sc_991,uninitialized_storage,High,Aave,AMM,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",219154.41,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave AMM contract,8.6,0.5820182489022456,unaudited
sc_992,timestamp_dependence,Medium,Convex,Timelock,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",33513.34,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Convex Timelock contract,6.1,0.5010055512211379,audited
sc_993,delegatecall_injection,Critical,MakerDAO,Staking,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",406839.8,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in MakerDAO Staking contract,9.2,0.41013857213242955,unaudited
sc_994,timestamp_dependence,Medium,PancakeSwap,Farming,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",47677.24,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Farming contract,5.2,0.6923739939908803,unaudited
sc_995,tx_origin,Medium,SushiSwap,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",102298.61,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in SushiSwap ERC1155 contract,4.7,0.7311997754599039,unaudited
sc_996,front_running,Medium,Synthetix,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",103478.35,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Synthetix Vault contract,5.0,0.30982964605810415,unaudited
sc_997,dos_gas_limit,Medium,Frax,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25687.82,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Frax Oracle contract,6.7,0.5619189542007488,audited
sc_998,access_control,High,Yearn,Farming,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",173119.34,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn Farming contract,7.7,0.611248519149114,audited
sc_999,tx_origin,Medium,Yearn,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38575.42,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Bridge contract,4.1,0.6883688637951868,audited
sc_1000,access_control,High,Alpha Homora,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",45827.94,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora Factory contract,8.0,0.9273568751171347,unaudited
sc_1001,timestamp_dependence,Medium,Liquity,Timelock,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",34931.75,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity Timelock contract,6.1,0.5212193147577238,audited
sc_1002,dos_gas_limit,Medium,Liquity,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",75469.29,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Liquity Farming contract,5.5,0.9606892522106362,audited
sc_1003,unchecked_call,Medium,PancakeSwap,DEX,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",11393.93,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in PancakeSwap DEX contract,5.5,0.8622224862556269,audited
sc_1004,tx_origin,Medium,Yearn,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",97480.63,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Lending contract,5.0,0.4836300194246558,audited
sc_1005,timestamp_dependence,Medium,1inch,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",29131.69,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in 1inch Vault contract,4.4,0.1285478125260594,unaudited
sc_1006,uninitialized_storage,High,Balancer,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",54493.75,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Balancer ERC20 contract,7.2,0.77202636578416,unaudited
sc_1007,access_control,High,Curve,Strategy,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",82153.57,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Curve Strategy contract,7.7,0.8244375745949932,audited
sc_1008,timestamp_dependence,Medium,SushiSwap,Governor,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",14771.59,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap Governor contract,6.5,0.7511824444767993,audited
sc_1009,dos_gas_limit,Medium,MakerDAO,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",86807.29,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO Farming contract,4.6,0.9320691093917116,unaudited
sc_1010,integer_overflow,High,Euler,Router,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",59136.37,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Euler Router contract,8.7,0.8959801101232345,audited
sc_1011,unchecked_call,Medium,Euler,Vault,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",27451.06,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Euler Vault contract,6.0,0.732438515567001,unaudited
sc_1012,random_weakness,High,Euler,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",37148.89,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Euler Vault contract,8.4,0.1356954412331134,audited
sc_1013,integer_overflow,High,Compound,ERC1155,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",42755.86,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Compound ERC1155 contract,7.5,0.5358925948330151,audited
sc_1014,access_control,High,Alpha Homora,Governor,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",48270.36,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Alpha Homora Governor contract,7.4,0.45937055741693555,audited
sc_1015,front_running,Medium,Rari,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56578.85,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Rari DEX contract,6.7,0.7119858547420201,audited
sc_1016,unchecked_call,Medium,Liquity,Vault,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",15859.04,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Liquity Vault contract,5.4,0.8787147779445712,audited
sc_1017,short_address,Medium,Rari,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56076.11,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Rari ERC1155 contract,5.9,0.4116955295139496,audited
sc_1018,integer_overflow,High,Yearn,Factory,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",41895.17,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Yearn Factory contract,7.2,0.42396213644123815,audited
sc_1019,short_address,Medium,PancakeSwap,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10556.93,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in PancakeSwap DEX contract,5.5,0.19596608824846984,audited
sc_1020,tx_origin,Medium,Convex,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",6122.79,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Convex Staking contract,4.7,0.4413995122002512,audited
sc_1021,random_weakness,High,Convex,Vault,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",91875.09,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Convex Vault contract,8.4,0.1362692431214336,audited
sc_1022,random_weakness,High,dYdX,ERC20,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",77341.88,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in dYdX ERC20 contract,7.4,0.2205602771544914,unaudited
sc_1023,tx_origin,Medium,SushiSwap,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",98157.8,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in SushiSwap ERC20 contract,5.9,0.4302677276390683,audited
sc_1024,unchecked_call,Medium,MakerDAO,Lending,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",201640.42,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in MakerDAO Lending contract,4.8,0.10662129523890473,audited
sc_1025,front_running,Medium,Curve,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",81124.45,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Curve Oracle contract,6.0,0.5922656497624342,unaudited
sc_1026,tx_origin,Medium,Aave,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",264973.86,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Aave Router contract,4.7,0.6364978182556974,audited
sc_1027,timestamp_dependence,Medium,SushiSwap,ERC721,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",114639.85,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap ERC721 contract,4.6,0.6287038680205385,unaudited
sc_1028,short_address,Medium,PancakeSwap,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30293.83,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in PancakeSwap Vault contract,6.7,0.7229892350353168,unaudited
sc_1029,random_weakness,High,Rari,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",55315.93,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Rari Governor contract,8.2,0.4709232046570875,audited
sc_1030,tx_origin,Medium,Synthetix,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",118432.27,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix Router contract,6.0,0.9268946083686253,audited
sc_1031,reentrancy,Critical,SushiSwap,Oracle,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",77058.47,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in SushiSwap Oracle contract,9.5,0.6199305661759246,unaudited
sc_1032,timestamp_dependence,Medium,Frax,ERC1155,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",30235.47,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax ERC1155 contract,6.5,0.5920503124323109,audited
sc_1033,tx_origin,Medium,Frax,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25482.43,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Proxy contract,4.6,0.2743748590276513,audited
sc_1034,access_control,High,Convex,Pool,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",25581.35,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Convex Pool contract,7.7,0.4344238844418169,unaudited
sc_1035,tx_origin,Medium,MakerDAO,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",354982.47,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO Vault contract,6.6,0.5993411592131311,unaudited
sc_1036,front_running,Medium,Curve,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",92340.9,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve ERC721 contract,4.1,0.2117840941435991,unaudited
sc_1037,dos_gas_limit,Medium,Alpha Homora,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23466.99,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Alpha Homora Governor contract,5.3,0.26899612649368204,audited
sc_1038,front_running,Medium,Euler,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",5264.67,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Euler Router contract,6.7,0.9569740391128525,unaudited
sc_1039,dos_gas_limit,Medium,Aave,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",229147.19,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Factory contract,6.7,0.5246895285734545,unaudited
sc_1040,timestamp_dependence,Medium,1inch,Bridge,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",35705.32,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in 1inch Bridge contract,5.2,0.4932843850110785,audited
sc_1041,timestamp_dependence,Medium,SushiSwap,AMM,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",44604.84,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap AMM contract,4.1,0.6112296153667662,unaudited
sc_1042,reentrancy,Critical,Alpha Homora,ERC20,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",80917.58,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Alpha Homora ERC20 contract,9.7,0.15873636823212112,audited
sc_1043,access_control,High,Aave,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",280018.56,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Aave Router contract,8.1,0.730195597198045,audited
sc_1044,uninitialized_storage,High,Yearn,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",159688.76,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Yearn Factory contract,7.1,0.9222198827337745,unaudited
sc_1045,delegatecall_injection,Critical,Synthetix,Farming,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",116591.47,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Synthetix Farming contract,9.0,0.9492467786056059,audited
sc_1046,delegatecall_injection,Critical,Synthetix,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",144951.44,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Synthetix Router contract,9.1,0.9351630199403846,audited
sc_1047,uninitialized_storage,High,Compound,AMM,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",451231.04,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Compound AMM contract,8.1,0.48202036096210843,audited
sc_1048,uninitialized_storage,High,Compound,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",154943.98,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Compound Staking contract,8.3,0.3590199833647786,audited
sc_1049,uninitialized_storage,High,dYdX,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",53162.27,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in dYdX DEX contract,7.4,0.3736662325695609,audited
sc_1050,random_weakness,High,dYdX,Governor,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",28014.08,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX Governor contract,8.7,0.5081292682981233,audited
sc_1051,tx_origin,Medium,Yearn,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50373.33,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Proxy contract,5.0,0.4273635740001127,unaudited
sc_1052,dos_gas_limit,Medium,Rari,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21314.17,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Rari Farming contract,5.9,0.24679114840245606,unaudited
sc_1053,dos_gas_limit,Medium,Liquity,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50955.43,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Liquity Pool contract,5.4,0.16949817567047465,audited
sc_1054,timestamp_dependence,Medium,Aave,Vault,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",295372.74,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave Vault contract,4.2,0.1763229569543178,unaudited
sc_1055,uninitialized_storage,High,MakerDAO,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",371709.77,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in MakerDAO ERC721 contract,7.1,0.6508100557636581,audited
sc_1056,front_running,Medium,Balancer,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53714.8,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer ERC20 contract,5.5,0.161500908093282,unaudited
sc_1057,access_control,High,Rari,Pool,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",20547.67,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari Pool contract,8.2,0.9162535776530719,audited
sc_1058,access_control,High,SushiSwap,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",143561.57,13,0.26,0.8,2,1,1,1,High access_control vulnerability in SushiSwap Staking contract,7.8,0.8920355268189415,audited
sc_1059,timestamp_dependence,Medium,Convex,Timelock,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",32172.05,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Convex Timelock contract,5.1,0.14704239837627592,unaudited
sc_1060,unchecked_call,Medium,Alpha Homora,Staking,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",20147.78,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora Staking contract,5.6,0.13549913884331471,unaudited
sc_1061,reentrancy,Critical,SushiSwap,Pool,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",202095.39,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in SushiSwap Pool contract,9.2,0.23237200898561775,audited
sc_1062,dos_gas_limit,Medium,Liquity,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14433.04,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Liquity Factory contract,6.7,0.3187673753011241,audited
sc_1063,unchecked_call,Medium,Convex,Oracle,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",14298.85,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Convex Oracle contract,5.4,0.3072692446235515,unaudited
sc_1064,delegatecall_injection,Critical,Synthetix,ERC20,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",216513.41,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix ERC20 contract,9.4,0.49188880035049654,unaudited
sc_1065,delegatecall_injection,Critical,Rari,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",43037.68,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari Timelock contract,9.3,0.6396700457209781,audited
sc_1066,tx_origin,Medium,Euler,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",27615.77,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Euler AMM contract,6.3,0.4974493240537504,unaudited
sc_1067,front_running,Medium,Convex,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49751.17,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Convex Timelock contract,4.6,0.18268402784571564,audited
sc_1068,tx_origin,Medium,Aave,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",218329.94,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave Lending contract,4.7,0.48612486551145506,audited
sc_1069,reentrancy,Critical,Liquity,Vault,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",79556.8,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Liquity Vault contract,9.8,0.7088184941361703,audited
sc_1070,short_address,Medium,Convex,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22538.51,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Convex Proxy contract,5.5,0.22612087448854298,audited
sc_1071,tx_origin,Medium,Compound,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53075.66,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Compound Farming contract,6.4,0.27421834035863185,audited
sc_1072,uninitialized_storage,High,Rari,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",10924.35,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Rari Farming contract,7.8,0.32956465387485157,audited
sc_1073,timestamp_dependence,Medium,Yearn,Oracle,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",132600.13,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn Oracle contract,4.7,0.3720778644372552,unaudited
sc_1074,short_address,Medium,SushiSwap,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",68469.1,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in SushiSwap ERC1155 contract,6.0,0.8776024149169968,audited
sc_1075,tx_origin,Medium,Aave,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",212992.03,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave Oracle contract,4.4,0.6501297925760937,audited
sc_1076,uninitialized_storage,High,1inch,AMM,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",10498.92,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in 1inch AMM contract,7.7,0.6231381191908829,unaudited
sc_1077,access_control,High,Rari,Pool,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",68830.67,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari Pool contract,8.8,0.17142623013293362,audited
sc_1078,short_address,Medium,Balancer,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52969.08,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Balancer Oracle contract,4.1,0.25758631610016414,audited
sc_1079,uninitialized_storage,High,Compound,Oracle,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",168244.85,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Compound Oracle contract,8.6,0.4411713853236464,audited
sc_1080,short_address,Medium,Alpha Homora,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58913.36,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Alpha Homora Timelock contract,4.3,0.816816942716311,audited
sc_1081,reentrancy,Critical,Frax,Oracle,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",38842.21,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Frax Oracle contract,9.1,0.5451671666465338,audited
sc_1082,reentrancy,Critical,1inch,Pool,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",109122.01,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in 1inch Pool contract,10.0,0.5431294537411893,audited
sc_1083,uninitialized_storage,High,MakerDAO,AMM,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",358571.65,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO AMM contract,7.3,0.6017716141835021,audited
sc_1084,tx_origin,Medium,Convex,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35037.75,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex ERC20 contract,6.2,0.4859395441357969,unaudited
sc_1085,uninitialized_storage,High,Liquity,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",44516.13,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Liquity Strategy contract,8.1,0.18832618339269713,audited
sc_1086,reentrancy,Critical,Rari,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",43329.39,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Rari Governor contract,9.5,0.7209316761505061,audited
sc_1087,delegatecall_injection,Critical,Euler,ERC1155,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",47959.07,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler ERC1155 contract,9.3,0.3966925406837776,audited
sc_1088,access_control,High,1inch,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",48388.99,13,0.26,0.8,2,1,1,1,High access_control vulnerability in 1inch Proxy contract,7.4,0.21422250069504212,audited
sc_1089,timestamp_dependence,Medium,Uniswap,DEX,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",171859.55,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Uniswap DEX contract,6.0,0.5177867000641165,audited
sc_1090,timestamp_dependence,Medium,Yearn,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",79804.85,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn Proxy contract,6.5,0.7416143178378086,unaudited
sc_1091,integer_overflow,High,PancakeSwap,ERC1155,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",42529.59,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap ERC1155 contract,8.1,0.6825244741777835,unaudited
sc_1092,short_address,Medium,Synthetix,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",86958.17,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Router contract,5.5,0.4320641223681151,audited
sc_1093,unchecked_call,Medium,Yearn,AMM,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",66840.71,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Yearn AMM contract,5.4,0.861641205710366,unaudited
sc_1094,dos_gas_limit,Medium,Euler,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14629.67,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Euler ERC20 contract,6.2,0.3231430897107207,unaudited
sc_1095,uninitialized_storage,High,1inch,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",20520.04,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in 1inch Lending contract,7.8,0.5933621004645114,audited
sc_1096,unchecked_call,Medium,PancakeSwap,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",39593.57,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in PancakeSwap Bridge contract,4.5,0.3892500062509703,audited
sc_1097,unchecked_call,Medium,Frax,ERC721,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",8552.16,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Frax ERC721 contract,6.0,0.5500826907348405,unaudited
sc_1098,access_control,High,Yearn,Staking,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",71682.39,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Yearn Staking contract,8.6,0.9709514568315156,unaudited
sc_1099,access_control,High,SushiSwap,Bridge,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",227760.67,13,0.26,0.8,2,0,1,1,High access_control vulnerability in SushiSwap Bridge contract,7.2,0.12218526868966917,audited
sc_1100,reentrancy,Critical,Uniswap,Bridge,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",373907.79,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Uniswap Bridge contract,9.6,0.8698461601061356,audited
sc_1101,delegatecall_injection,Critical,Rari,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",45728.83,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari DEX contract,9.2,0.8716624576200811,audited
sc_1102,timestamp_dependence,Medium,Rari,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",49599.52,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Rari Governor contract,6.1,0.8993449587991591,audited
sc_1103,short_address,Medium,Rari,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40206.23,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Rari AMM contract,5.3,0.1073821647594395,unaudited
sc_1104,random_weakness,High,Compound,DEX,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",269401.68,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound DEX contract,7.7,0.8754309498835207,audited
sc_1105,tx_origin,Medium,Compound,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",237308.94,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Compound Factory contract,6.2,0.6786961077451481,audited
sc_1106,integer_overflow,High,Frax,Staking,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",67824.46,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Frax Staking contract,8.5,0.10495785483326378,audited
sc_1107,dos_gas_limit,Medium,Convex,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",9397.36,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Convex Proxy contract,5.1,0.4072141215824362,audited
sc_1108,access_control,High,Curve,Oracle,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",43680.57,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Curve Oracle contract,7.3,0.7111146978462295,audited
sc_1109,timestamp_dependence,Medium,MakerDAO,Factory,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",307870.31,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Factory contract,5.8,0.31995022495493347,unaudited
sc_1110,front_running,Medium,Aave,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",278287.48,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Aave Farming contract,4.2,0.29101670340911406,audited
sc_1111,access_control,High,Uniswap,DEX,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",135460.26,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap DEX contract,7.6,0.7618570791676778,unaudited
sc_1112,access_control,High,Liquity,Vault,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",88303.35,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Liquity Vault contract,8.1,0.5582082387098553,unaudited
sc_1113,access_control,High,SushiSwap,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",40773.11,13,0.26,0.8,2,0,1,1,High access_control vulnerability in SushiSwap Bridge contract,8.6,0.5633932326290467,unaudited
sc_1114,access_control,High,Compound,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",231360.25,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Compound Timelock contract,7.8,0.6696660574753373,unaudited
sc_1115,front_running,Medium,Yearn,DEX,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",77740.11,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Yearn DEX contract,4.3,0.1757066621013852,audited
sc_1116,random_weakness,High,Yearn,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",65197.17,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn Strategy contract,8.0,0.5610887666298238,audited
sc_1117,reentrancy,Critical,PancakeSwap,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",86358.02,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in PancakeSwap ERC20 contract,9.4,0.544943422907264,audited
sc_1118,access_control,High,Uniswap,Proxy,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",235531.0,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap Proxy contract,8.1,0.521462412551938,audited
sc_1119,access_control,High,Yearn,DEX,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",207680.97,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn DEX contract,8.4,0.1795710416745863,unaudited
sc_1120,dos_gas_limit,Medium,Convex,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54323.91,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Convex Farming contract,6.8,0.9329327568791878,unaudited
sc_1121,unchecked_call,Medium,Liquity,DEX,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",10061.56,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Liquity DEX contract,4.0,0.9420409455997578,audited
sc_1122,unchecked_call,Medium,Convex,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",39081.2,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Convex Lending contract,4.0,0.6761754252683173,audited
sc_1123,reentrancy,Critical,Compound,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",329450.67,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Compound Factory contract,9.9,0.8685041626981045,audited
sc_1124,access_control,High,SushiSwap,Strategy,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",207581.5,13,0.26,0.8,2,0,1,1,High access_control vulnerability in SushiSwap Strategy contract,8.7,0.9940426988260852,audited
sc_1125,unchecked_call,Medium,SushiSwap,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",67576.98,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in SushiSwap Oracle contract,6.2,0.17086803467352768,audited
sc_1126,short_address,Medium,PancakeSwap,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33644.14,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in PancakeSwap ERC20 contract,4.2,0.40137258317402036,audited
sc_1127,integer_overflow,High,Euler,Strategy,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",36945.24,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Euler Strategy contract,8.3,0.3601632556918155,audited
sc_1128,front_running,Medium,Synthetix,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",112793.04,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Synthetix Lending contract,6.4,0.5982750620492165,audited
sc_1129,random_weakness,High,Synthetix,Farming,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",126284.84,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Synthetix Farming contract,8.6,0.7228846903684034,audited
sc_1130,access_control,High,Euler,Pool,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",25015.01,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Euler Pool contract,8.0,0.6808757440467181,audited
sc_1131,tx_origin,Medium,MakerDAO,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",88354.99,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO Governor contract,5.1,0.402536339044665,audited
sc_1132,dos_gas_limit,Medium,dYdX,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44580.09,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in dYdX ERC721 contract,5.9,0.19410922139888975,audited
sc_1133,delegatecall_injection,Critical,Compound,Oracle,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",355745.13,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Compound Oracle contract,9.9,0.6082210103312261,audited
sc_1134,integer_overflow,High,Frax,AMM,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",14322.94,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Frax AMM contract,8.3,0.24902275097050444,unaudited
sc_1135,timestamp_dependence,Medium,Synthetix,Governor,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",39835.19,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Synthetix Governor contract,4.8,0.5149440080917799,unaudited
sc_1136,front_running,Medium,Yearn,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",27723.87,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Yearn Proxy contract,6.5,0.13399020260804761,audited
sc_1137,timestamp_dependence,Medium,1inch,Farming,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",21868.97,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in 1inch Farming contract,5.5,0.9512670174963573,unaudited
sc_1138,timestamp_dependence,Medium,Euler,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",15248.45,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Euler Timelock contract,5.3,0.8894345476673248,audited
sc_1139,delegatecall_injection,Critical,Euler,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",19342.86,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler Proxy contract,9.4,0.9355787013822573,audited
sc_1140,random_weakness,High,Curve,Governor,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",54186.06,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Curve Governor contract,7.4,0.41566308478083425,audited
sc_1141,unchecked_call,Medium,SushiSwap,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",74349.22,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in SushiSwap Strategy contract,6.2,0.92466083674433,audited
sc_1142,tx_origin,Medium,Synthetix,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40371.21,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix Vault contract,4.0,0.4648341425856469,audited
sc_1143,timestamp_dependence,Medium,Aave,DEX,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",180928.59,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave DEX contract,5.9,0.3594103852606194,audited
sc_1144,random_weakness,High,Frax,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",54207.08,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax ERC20 contract,8.4,0.40514398343209745,unaudited
sc_1145,timestamp_dependence,Medium,PancakeSwap,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",17030.58,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Timelock contract,5.7,0.6205866291807923,audited
sc_1146,reentrancy,Critical,Balancer,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",48747.26,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Pool contract,9.9,0.8082082260722309,audited
sc_1147,access_control,High,Yearn,Strategy,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",94164.63,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn Strategy contract,8.3,0.13093621083564697,audited
sc_1148,random_weakness,High,Rari,Vault,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",12898.98,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari Vault contract,8.4,0.6931114449302692,audited
sc_1149,access_control,High,Uniswap,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",409591.92,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Uniswap Pool contract,8.3,0.7591731271044332,audited
sc_1150,delegatecall_injection,Critical,1inch,Farming,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",60948.3,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch Farming contract,10.0,0.5583447649944369,audited
sc_1151,dos_gas_limit,Medium,Liquity,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58128.02,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Liquity ERC1155 contract,5.2,0.67422765344977,audited
sc_1152,front_running,Medium,PancakeSwap,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",27744.4,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in PancakeSwap Governor contract,5.9,0.7690989099464811,audited
sc_1153,unchecked_call,Medium,Convex,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",8696.58,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Convex Timelock contract,5.9,0.42796848327265546,audited
sc_1154,uninitialized_storage,High,Alpha Homora,Timelock,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",31149.19,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Alpha Homora Timelock contract,8.1,0.32769292463435845,audited
sc_1155,unchecked_call,Medium,Balancer,DEX,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",46506.48,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer DEX contract,4.0,0.98868030151842,audited
sc_1156,delegatecall_injection,Critical,dYdX,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",80869.78,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in dYdX Pool contract,9.2,0.13877958931530032,audited
sc_1157,delegatecall_injection,Critical,dYdX,DEX,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",67590.19,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX DEX contract,9.9,0.5408496034810166,audited
sc_1158,unchecked_call,Medium,1inch,AMM,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",49385.26,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in 1inch AMM contract,5.6,0.8472854778423001,unaudited
sc_1159,dos_gas_limit,Medium,dYdX,Proxy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",9604.54,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in dYdX Proxy contract,6.1,0.8644666478219633,audited
sc_1160,delegatecall_injection,Critical,MakerDAO,Farming,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",585380.71,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in MakerDAO Farming contract,9.9,0.20586288112053522,audited
sc_1161,integer_overflow,High,Frax,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",54173.42,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Frax Oracle contract,8.4,0.4066798632493308,audited
sc_1162,reentrancy,Critical,dYdX,Governor,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",57264.24,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in dYdX Governor contract,9.7,0.3362855631929551,audited
sc_1163,dos_gas_limit,Medium,Rari,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8957.16,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Rari Pool contract,5.9,0.6774806173182641,audited
sc_1164,access_control,High,Euler,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",18482.94,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Euler ERC20 contract,7.5,0.9377128045186023,audited
sc_1165,integer_overflow,High,Liquity,Timelock,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",55728.85,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Timelock contract,7.1,0.11127565368897857,unaudited
sc_1166,dos_gas_limit,Medium,Alpha Homora,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",11305.25,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Governor contract,4.3,0.4701511337317902,audited
sc_1167,delegatecall_injection,Critical,Yearn,Timelock,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",56588.9,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Yearn Timelock contract,9.1,0.9465623979901794,audited
sc_1168,short_address,Medium,Convex,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29631.94,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex Governor contract,5.3,0.6682252805191177,audited
sc_1169,front_running,Medium,Convex,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42841.89,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Convex ERC20 contract,5.8,0.7630023970952119,audited
sc_1170,timestamp_dependence,Medium,PancakeSwap,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",38837.69,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Timelock contract,6.7,0.7214743015880316,audited
sc_1171,delegatecall_injection,Critical,Uniswap,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",433163.7,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Uniswap Farming contract,9.1,0.1302747068239199,audited
sc_1172,short_address,Medium,Curve,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",134205.42,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Curve Timelock contract,5.3,0.45552838494420855,audited
sc_1173,unchecked_call,Medium,SushiSwap,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",60569.05,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in SushiSwap Bridge contract,5.4,0.4672907810994068,audited
sc_1174,reentrancy,Critical,1inch,ERC1155,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",124280.6,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch ERC1155 contract,9.8,0.24273346178474167,audited
sc_1175,tx_origin,Medium,Compound,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",79398.58,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Compound AMM contract,4.3,0.980996247936459,unaudited
sc_1176,tx_origin,Medium,PancakeSwap,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13698.41,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in PancakeSwap Bridge contract,4.3,0.6471861763750414,unaudited
sc_1177,front_running,Medium,Liquity,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31900.89,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Liquity DEX contract,4.5,0.767901433995491,audited
sc_1178,integer_overflow,High,Rari,Farming,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",48539.94,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Rari Farming contract,8.5,0.1431255446096696,unaudited
sc_1179,front_running,Medium,1inch,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23884.11,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in 1inch Oracle contract,4.7,0.24919129277978738,audited
sc_1180,dos_gas_limit,Medium,PancakeSwap,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",43149.4,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap AMM contract,4.2,0.8355419707968053,unaudited
sc_1181,front_running,Medium,dYdX,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8722.84,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in dYdX Bridge contract,6.5,0.9128782955036066,audited
sc_1182,reentrancy,Critical,Curve,Timelock,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",271477.38,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Curve Timelock contract,9.8,0.9850415846582281,unaudited
sc_1183,tx_origin,Medium,SushiSwap,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51718.5,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in SushiSwap Farming contract,6.1,0.7745117547890518,audited
sc_1184,random_weakness,High,SushiSwap,Oracle,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",135222.35,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in SushiSwap Oracle contract,7.6,0.9196945809932887,audited
sc_1185,integer_overflow,High,Synthetix,ERC20,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",226697.35,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix ERC20 contract,7.6,0.9272605542515412,audited
sc_1186,delegatecall_injection,Critical,Alpha Homora,Staking,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",42909.86,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Staking contract,9.0,0.6809686525134684,audited
sc_1187,tx_origin,Medium,MakerDAO,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54699.1,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in MakerDAO Pool contract,4.2,0.802384711322257,unaudited
sc_1188,random_weakness,High,SushiSwap,ERC721,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",114472.1,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in SushiSwap ERC721 contract,7.2,0.17099199656788439,audited
sc_1189,short_address,Medium,Curve,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",126577.91,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve Vault contract,6.6,0.601687028273559,audited
sc_1190,random_weakness,High,1inch,ERC20,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",70434.88,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in 1inch ERC20 contract,8.5,0.13537919602673712,audited
sc_1191,front_running,Medium,Curve,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32142.92,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve Farming contract,5.3,0.4957151114347429,audited
sc_1192,timestamp_dependence,Medium,Alpha Homora,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",19593.83,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Alpha Homora Bridge contract,6.8,0.3209279050671702,unaudited
sc_1193,reentrancy,Critical,Euler,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",90447.4,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Euler Farming contract,9.9,0.6780379790449252,audited
sc_1194,delegatecall_injection,Critical,dYdX,Staking,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",32833.66,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX Staking contract,9.7,0.7717266316287289,audited
sc_1195,reentrancy,Critical,Curve,Proxy,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",100385.83,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Curve Proxy contract,9.2,0.8914181804662203,audited
sc_1196,timestamp_dependence,Medium,Liquity,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",32698.83,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Liquity DEX contract,6.5,0.23324426373010076,unaudited
sc_1197,reentrancy,Critical,Rari,Staking,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",13154.29,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Rari Staking contract,9.6,0.9583748577323611,audited
sc_1198,delegatecall_injection,Critical,Liquity,AMM,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",49672.79,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity AMM contract,9.1,0.6681135857040154,audited
sc_1199,reentrancy,Critical,MakerDAO,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",226854.81,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in MakerDAO ERC721 contract,9.5,0.13352705868034,audited
sc_1200,timestamp_dependence,Medium,Yearn,Governor,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",22472.13,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Yearn Governor contract,5.8,0.7081280935896982,audited
sc_1201,reentrancy,Critical,Synthetix,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",104316.0,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Synthetix ERC20 contract,9.4,0.10576564294828351,audited
sc_1202,random_weakness,High,Convex,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",55213.66,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Convex Factory contract,7.7,0.178261134649549,unaudited
sc_1203,random_weakness,High,1inch,Staking,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",11049.24,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in 1inch Staking contract,8.1,0.7915165838668334,unaudited
sc_1204,unchecked_call,Medium,Aave,AMM,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",51305.08,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Aave AMM contract,5.4,0.9216820807650035,audited
sc_1205,access_control,High,Uniswap,AMM,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",385719.27,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap AMM contract,7.6,0.5399407224868108,audited
sc_1206,unchecked_call,Medium,Compound,DEX,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",151625.38,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Compound DEX contract,4.8,0.9687865634818246,unaudited
sc_1207,reentrancy,Critical,Alpha Homora,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",24589.17,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora Farming contract,9.9,0.7722202206947607,audited
sc_1208,delegatecall_injection,Critical,Euler,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",63885.06,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler Vault contract,9.5,0.16387729840249243,unaudited
sc_1209,tx_origin,Medium,Frax,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32931.44,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Frax ERC20 contract,6.4,0.40227974687658163,audited
sc_1210,uninitialized_storage,High,Balancer,Timelock,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",50160.72,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Balancer Timelock contract,8.3,0.5929248557612189,unaudited
sc_1211,tx_origin,Medium,dYdX,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56552.78,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX Strategy contract,6.3,0.9369094484387954,audited
sc_1212,front_running,Medium,Curve,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",108232.57,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve Bridge contract,5.8,0.6687411052481179,audited
sc_1213,delegatecall_injection,Critical,Euler,ERC1155,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",112555.4,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler ERC1155 contract,9.9,0.8652146378260522,audited
sc_1214,front_running,Medium,Euler,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",63277.15,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Euler Vault contract,4.3,0.6146074321935001,audited
sc_1215,integer_overflow,High,Liquity,Timelock,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",19582.12,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Timelock contract,8.6,0.5995991909467784,audited
sc_1216,delegatecall_injection,Critical,Euler,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",97886.03,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler Proxy contract,9.0,0.3798193885688136,unaudited
sc_1217,uninitialized_storage,High,Frax,Farming,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",20970.65,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax Farming contract,7.6,0.18177258825267412,audited
sc_1218,integer_overflow,High,Curve,ERC721,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",90555.63,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Curve ERC721 contract,8.8,0.15029420329268983,audited
sc_1219,timestamp_dependence,Medium,Rari,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",41667.67,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Rari Oracle contract,6.1,0.6121636376074507,audited
sc_1220,access_control,High,Synthetix,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",142186.98,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Synthetix Bridge contract,8.3,0.8522806099594564,unaudited
sc_1221,access_control,High,Balancer,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",55549.55,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer ERC721 contract,8.2,0.850295169553884,audited
sc_1222,tx_origin,Medium,Euler,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35740.18,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Euler DEX contract,6.7,0.7531635363598738,audited
sc_1223,integer_overflow,High,Frax,Governor,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",26738.66,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Frax Governor contract,8.4,0.6776376707502043,audited
sc_1224,random_weakness,High,Euler,Oracle,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",21088.64,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Euler Oracle contract,8.1,0.5315053104252824,audited
sc_1225,front_running,Medium,1inch,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31008.68,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch Lending contract,4.3,0.47316706061480973,unaudited
sc_1226,timestamp_dependence,Medium,Frax,Oracle,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",45333.53,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax Oracle contract,4.2,0.4048281082055819,audited
sc_1227,reentrancy,Critical,Synthetix,Router,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",205234.81,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Synthetix Router contract,9.4,0.8106928815461804,audited
sc_1228,random_weakness,High,Synthetix,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",250431.56,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Synthetix DEX contract,7.0,0.8542797266628605,audited
sc_1229,tx_origin,Medium,MakerDAO,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",303060.02,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO DEX contract,5.7,0.6368670745726253,audited
sc_1230,dos_gas_limit,Medium,PancakeSwap,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35222.71,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap Lending contract,6.4,0.7829553324354478,unaudited
sc_1231,front_running,Medium,Rari,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23994.82,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Rari Governor contract,5.5,0.5324821627659592,audited
sc_1232,integer_overflow,High,Alpha Homora,AMM,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",20529.58,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Alpha Homora AMM contract,8.8,0.5846219409565879,audited
sc_1233,dos_gas_limit,Medium,1inch,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12270.02,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in 1inch Farming contract,4.7,0.45382896383073734,audited
sc_1234,front_running,Medium,1inch,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7755.15,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch Staking contract,6.0,0.9155353156779048,audited
sc_1235,unchecked_call,Medium,Yearn,Oracle,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",166678.66,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn Oracle contract,4.8,0.2060301743265247,audited
sc_1236,access_control,High,Curve,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",179574.88,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Curve Strategy contract,7.7,0.40281166052877004,unaudited
sc_1237,dos_gas_limit,Medium,Rari,Vault,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56380.72,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Rari Vault contract,5.7,0.5057021382746888,unaudited
sc_1238,integer_overflow,High,Euler,Oracle,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",64042.43,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Euler Oracle contract,7.1,0.5562346366958045,audited
sc_1239,short_address,Medium,Yearn,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",125539.95,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn AMM contract,4.3,0.5877220891613198,audited
sc_1240,timestamp_dependence,Medium,PancakeSwap,ERC1155,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",25356.9,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap ERC1155 contract,6.1,0.580970878601748,unaudited
sc_1241,delegatecall_injection,Critical,Compound,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",339636.64,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Compound Oracle contract,9.3,0.4098352036833449,audited
sc_1242,dos_gas_limit,Medium,Curve,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38925.38,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Curve Oracle contract,4.9,0.13022555347972023,audited
sc_1243,uninitialized_storage,High,Synthetix,AMM,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",125666.73,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Synthetix AMM contract,8.1,0.7641464417663263,unaudited
sc_1244,dos_gas_limit,Medium,Frax,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39192.11,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Frax Router contract,5.7,0.3829922850347478,audited
sc_1245,uninitialized_storage,High,PancakeSwap,Oracle,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",82073.07,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in PancakeSwap Oracle contract,8.8,0.802134661958232,audited
sc_1246,access_control,High,Alpha Homora,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",77567.09,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora Timelock contract,7.9,0.9263950429630295,audited
sc_1247,tx_origin,Medium,Curve,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",86009.98,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Curve ERC1155 contract,4.5,0.19556802927675543,audited
sc_1248,access_control,High,Balancer,ERC20,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",20846.6,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer ERC20 contract,8.6,0.14091036394850637,unaudited
sc_1249,timestamp_dependence,Medium,MakerDAO,ERC721,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",274967.71,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO ERC721 contract,4.9,0.13247854057669167,unaudited
sc_1250,integer_overflow,High,SushiSwap,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",37326.94,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in SushiSwap ERC1155 contract,7.9,0.5231184470963445,unaudited
sc_1251,short_address,Medium,1inch,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19198.68,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch AMM contract,6.6,0.3436887625927244,audited
sc_1252,access_control,High,PancakeSwap,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",69476.85,13,0.26,0.8,2,1,1,1,High access_control vulnerability in PancakeSwap ERC721 contract,7.7,0.7848709152144875,unaudited
sc_1253,uninitialized_storage,High,dYdX,Vault,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",39774.16,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX Vault contract,8.4,0.7771606122997128,audited
sc_1254,dos_gas_limit,Medium,Alpha Homora,Pool,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28772.65,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Pool contract,5.3,0.43982478334350505,audited
sc_1255,uninitialized_storage,High,MakerDAO,ERC20,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",479646.58,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in MakerDAO ERC20 contract,8.1,0.959343980453557,audited
sc_1256,access_control,High,dYdX,Farming,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",46819.88,13,0.26,0.8,2,0,1,1,High access_control vulnerability in dYdX Farming contract,8.1,0.6353612913452024,audited
sc_1257,dos_gas_limit,Medium,Convex,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47690.46,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Convex Proxy contract,5.8,0.7870580980778875,audited
sc_1258,reentrancy,Critical,SushiSwap,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",117535.64,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in SushiSwap Oracle contract,9.9,0.5359430821398199,unaudited
sc_1259,tx_origin,Medium,dYdX,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39955.14,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX Strategy contract,5.8,0.23790918660423827,audited
sc_1260,random_weakness,High,Frax,Oracle,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",29952.38,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax Oracle contract,8.7,0.3905894223941545,audited
sc_1261,tx_origin,Medium,MakerDAO,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",73739.1,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in MakerDAO AMM contract,6.4,0.35619482075362574,audited
sc_1262,short_address,Medium,PancakeSwap,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7638.88,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in PancakeSwap AMM contract,4.1,0.31026497220251437,audited
sc_1263,front_running,Medium,Balancer,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37224.7,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer ERC20 contract,4.4,0.15000411816110945,audited
sc_1264,tx_origin,Medium,PancakeSwap,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58292.42,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in PancakeSwap Vault contract,5.0,0.8377752330782042,audited
sc_1265,short_address,Medium,Convex,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30915.03,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex ERC1155 contract,5.9,0.5635470805215071,unaudited
sc_1266,integer_overflow,High,Yearn,Timelock,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",25997.76,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Yearn Timelock contract,8.7,0.30872858071108283,audited
sc_1267,unchecked_call,Medium,Rari,Router,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",55948.85,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari Router contract,6.7,0.3699434348799998,unaudited
sc_1268,unchecked_call,Medium,Synthetix,Staking,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",62783.45,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Synthetix Staking contract,4.8,0.8186121717110246,audited
sc_1269,random_weakness,High,Rari,Factory,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",86372.33,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari Factory contract,8.1,0.21105893603129672,unaudited
sc_1270,reentrancy,Critical,PancakeSwap,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",35747.48,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in PancakeSwap Pool contract,9.1,0.26599210896929115,audited
sc_1271,uninitialized_storage,High,Euler,Pool,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",13315.1,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Euler Pool contract,7.6,0.34517002365460425,unaudited
sc_1272,reentrancy,Critical,MakerDAO,Lending,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",97166.43,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO Lending contract,9.8,0.22120391590318436,audited
sc_1273,tx_origin,Medium,Convex,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14529.34,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex ERC20 contract,4.4,0.8965725318872645,audited
sc_1274,integer_overflow,High,dYdX,ERC1155,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",27011.45,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in dYdX ERC1155 contract,7.5,0.9170153735967789,audited
sc_1275,integer_overflow,High,Euler,ERC1155,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",21306.29,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Euler ERC1155 contract,7.9,0.12010094744924804,unaudited
sc_1276,access_control,High,MakerDAO,Vault,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",70115.63,13,0.26,0.8,2,0,1,1,High access_control vulnerability in MakerDAO Vault contract,8.5,0.1391639756913171,audited
sc_1277,dos_gas_limit,Medium,Convex,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46600.03,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Convex Proxy contract,6.5,0.23286067570189872,audited
sc_1278,front_running,Medium,1inch,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14166.64,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in 1inch Governor contract,5.7,0.7352684899006026,audited
sc_1279,dos_gas_limit,Medium,MakerDAO,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",132187.85,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO Proxy contract,5.5,0.5384211036456485,unaudited
sc_1280,random_weakness,High,Aave,Lending,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",249212.3,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Aave Lending contract,8.9,0.7613554234296461,unaudited
sc_1281,timestamp_dependence,Medium,MakerDAO,Vault,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",140347.0,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Vault contract,6.6,0.3099268627272568,audited
sc_1282,short_address,Medium,Rari,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19484.79,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Rari Router contract,6.0,0.32717347299902577,audited
sc_1283,delegatecall_injection,Critical,Curve,Factory,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",64652.06,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Curve Factory contract,9.5,0.12408788557564834,audited
sc_1284,integer_overflow,High,PancakeSwap,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",10889.2,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap Proxy contract,7.6,0.9532046598086402,audited
sc_1285,delegatecall_injection,Critical,1inch,ERC721,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",18156.51,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch ERC721 contract,9.8,0.3673753731184639,audited
sc_1286,front_running,Medium,Rari,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29550.76,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Rari Lending contract,4.5,0.736776392956882,audited
sc_1287,delegatecall_injection,Critical,Convex,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",39602.53,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex Factory contract,9.8,0.29701722807402264,audited
sc_1288,reentrancy,Critical,Uniswap,Vault,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",235555.47,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Uniswap Vault contract,9.9,0.3971905615248359,audited
sc_1289,random_weakness,High,Balancer,Strategy,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",18544.23,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Balancer Strategy contract,7.9,0.26175404534426305,audited
sc_1290,dos_gas_limit,Medium,Synthetix,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29444.37,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Synthetix Governor contract,4.9,0.23201504910251192,audited
sc_1291,unchecked_call,Medium,Synthetix,Timelock,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",45192.9,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Synthetix Timelock contract,6.1,0.7624930519551024,audited
sc_1292,unchecked_call,Medium,Liquity,AMM,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",24347.61,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity AMM contract,6.5,0.282849120742321,unaudited
sc_1293,short_address,Medium,Euler,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44815.51,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Euler Factory contract,6.5,0.6144672835465458,audited
sc_1294,front_running,Medium,1inch,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48327.26,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch Lending contract,5.9,0.8623641996953026,audited
sc_1295,unchecked_call,Medium,Frax,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",55674.11,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Frax ERC1155 contract,6.3,0.17862996479305127,audited
sc_1296,delegatecall_injection,Critical,Rari,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",50091.21,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Rari Oracle contract,9.2,0.6892644459222556,unaudited
sc_1297,unchecked_call,Medium,PancakeSwap,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",11296.4,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in PancakeSwap Lending contract,4.9,0.1400705692168184,unaudited
sc_1298,reentrancy,Critical,Rari,Farming,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",99690.36,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Rari Farming contract,9.6,0.7470664124139247,audited
sc_1299,random_weakness,High,Rari,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",10641.23,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari Factory contract,7.9,0.43263517239190463,audited
sc_1300,front_running,Medium,SushiSwap,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24169.1,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in SushiSwap Farming contract,6.5,0.18014491366875632,audited
sc_1301,random_weakness,High,dYdX,Governor,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",39518.23,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX Governor contract,7.1,0.6570219626132865,audited
sc_1302,delegatecall_injection,Critical,1inch,Timelock,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",55518.58,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in 1inch Timelock contract,10.0,0.757420690632192,unaudited
sc_1303,dos_gas_limit,Medium,Frax,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",9560.87,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Frax Farming contract,6.3,0.7332107815695931,audited
sc_1304,front_running,Medium,Compound,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",283156.1,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Compound Lending contract,6.0,0.35641858104824675,audited
sc_1305,dos_gas_limit,Medium,Curve,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",124446.21,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Curve Timelock contract,6.9,0.8399488012331243,audited
sc_1306,front_running,Medium,Aave,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",227750.57,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Aave Strategy contract,6.4,0.4876033446528698,audited
sc_1307,unchecked_call,Medium,Aave,Lending,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",103424.94,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave Lending contract,6.6,0.529478092233,audited
sc_1308,front_running,Medium,Rari,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13275.62,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Rari Pool contract,5.3,0.4520488119791801,audited
sc_1309,access_control,High,Frax,Strategy,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",47658.06,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Frax Strategy contract,7.5,0.6804965945810278,audited
sc_1310,short_address,Medium,dYdX,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32446.83,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in dYdX Strategy contract,4.5,0.5418666000464277,audited
sc_1311,unchecked_call,Medium,Compound,Pool,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",293726.62,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Compound Pool contract,4.7,0.4152175481468138,unaudited
sc_1312,short_address,Medium,Convex,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34727.71,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Convex Router contract,5.3,0.5563103140383419,unaudited
sc_1313,integer_overflow,High,Convex,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",30692.78,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Convex ERC1155 contract,8.0,0.3205940653881644,unaudited
sc_1314,delegatecall_injection,Critical,Convex,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",88842.06,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex Router contract,9.2,0.3226525381498749,audited
sc_1315,access_control,High,PancakeSwap,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",86114.98,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap Bridge contract,8.2,0.47020311039973217,unaudited
sc_1316,short_address,Medium,Rari,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7223.74,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Rari AMM contract,6.5,0.4759570230014032,unaudited
sc_1317,reentrancy,Critical,Euler,Strategy,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",50041.74,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler Strategy contract,9.7,0.5201089105742108,audited
sc_1318,timestamp_dependence,Medium,PancakeSwap,Vault,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",43171.84,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Vault contract,5.2,0.4636604627544859,audited
sc_1319,uninitialized_storage,High,Aave,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",414983.2,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave Strategy contract,8.2,0.4125648860773924,audited
sc_1320,timestamp_dependence,Medium,Convex,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",10218.21,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Convex Router contract,5.5,0.29308591055216027,audited
sc_1321,access_control,High,SushiSwap,ERC1155,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",125036.43,13,0.26,0.8,2,0,1,1,High access_control vulnerability in SushiSwap ERC1155 contract,7.7,0.6224341941570545,audited
sc_1322,short_address,Medium,Alpha Homora,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46424.22,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Alpha Homora Strategy contract,6.2,0.5213373074198618,audited
sc_1323,integer_overflow,High,PancakeSwap,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",64755.49,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap Farming contract,7.4,0.5304263717375705,audited
sc_1324,unchecked_call,Medium,dYdX,Oracle,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",8679.7,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in dYdX Oracle contract,6.7,0.44199639841512417,audited
sc_1325,integer_overflow,High,Balancer,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",44199.46,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Balancer Strategy contract,8.2,0.9298282332651381,audited
sc_1326,access_control,High,Yearn,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",175168.82,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Yearn Factory contract,8.1,0.5285331140835454,audited
sc_1327,tx_origin,Medium,Aave,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",78500.85,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave Strategy contract,6.1,0.6711790869201364,audited
sc_1328,unchecked_call,Medium,Curve,Governor,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",64192.76,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Governor contract,4.0,0.8772635468126073,audited
sc_1329,dos_gas_limit,Medium,Uniswap,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39782.04,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Uniswap Staking contract,6.3,0.25800910650982833,audited
sc_1330,uninitialized_storage,High,Convex,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",14126.37,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Convex ERC721 contract,7.8,0.6223506062478489,audited
sc_1331,unchecked_call,Medium,1inch,Lending,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",45098.26,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in 1inch Lending contract,5.9,0.6196937728664289,audited
sc_1332,uninitialized_storage,High,PancakeSwap,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",27748.27,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in PancakeSwap Factory contract,8.0,0.7675747319864928,audited
sc_1333,random_weakness,High,Balancer,Lending,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",17827.63,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Lending contract,8.1,0.6944407527954759,unaudited
sc_1334,dos_gas_limit,Medium,Euler,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",41246.34,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Euler Factory contract,6.6,0.26124269705756437,audited
sc_1335,unchecked_call,Medium,PancakeSwap,Bridge,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",40690.71,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in PancakeSwap Bridge contract,5.6,0.46163496579685237,audited
sc_1336,timestamp_dependence,Medium,1inch,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",54052.36,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in 1inch Vault contract,4.2,0.5085171125278195,audited
sc_1337,random_weakness,High,Aave,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",170363.26,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Aave Farming contract,7.0,0.7884986664472182,audited
sc_1338,unchecked_call,Medium,MakerDAO,DEX,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",58126.07,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in MakerDAO DEX contract,5.6,0.6969788033597049,audited
sc_1339,unchecked_call,Medium,SushiSwap,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",126934.9,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in SushiSwap Farming contract,5.8,0.5911214294221864,audited
sc_1340,uninitialized_storage,High,Liquity,Lending,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",55138.9,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Liquity Lending contract,7.4,0.773263082606575,unaudited
sc_1341,front_running,Medium,Yearn,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",158948.34,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Yearn Oracle contract,6.6,0.7436192826064357,unaudited
sc_1342,unchecked_call,Medium,Balancer,Proxy,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",11105.49,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer Proxy contract,5.1,0.7820102807353514,unaudited
sc_1343,access_control,High,Frax,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",61370.35,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Frax Timelock contract,8.5,0.3716049561091469,audited
sc_1344,short_address,Medium,Yearn,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",68300.12,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn Staking contract,5.5,0.9047100083940902,audited
sc_1345,delegatecall_injection,Critical,Balancer,Timelock,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",48171.53,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Balancer Timelock contract,9.9,0.8725847134301455,audited
sc_1346,uninitialized_storage,High,SushiSwap,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",67491.56,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in SushiSwap Lending contract,7.7,0.5750025612828663,audited
sc_1347,uninitialized_storage,High,dYdX,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",39591.68,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in dYdX Governor contract,8.8,0.7524678633208114,audited
sc_1348,reentrancy,Critical,Aave,Router,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",502834.2,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Router contract,9.6,0.10871275693857024,audited
sc_1349,timestamp_dependence,Medium,Alpha Homora,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",31513.15,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Alpha Homora Lending contract,4.1,0.2051354979977313,audited
sc_1350,timestamp_dependence,Medium,dYdX,Oracle,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",42003.04,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Oracle contract,6.8,0.13367094668162585,audited
sc_1351,access_control,High,Convex,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",60817.45,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Convex Vault contract,8.2,0.6984767721432946,audited
sc_1352,short_address,Medium,Frax,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16999.12,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Frax ERC1155 contract,6.3,0.785197207505153,unaudited
sc_1353,unchecked_call,Medium,Liquity,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",30526.26,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity Timelock contract,5.1,0.6121472764000419,audited
sc_1354,uninitialized_storage,High,Rari,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",60319.64,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Rari Lending contract,8.7,0.32073618704288764,unaudited
sc_1355,integer_overflow,High,Frax,ERC20,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",42441.58,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Frax ERC20 contract,7.6,0.9288233350946954,audited
sc_1356,random_weakness,High,Balancer,Pool,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",74833.34,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Pool contract,8.8,0.49261515357444985,unaudited
sc_1357,timestamp_dependence,Medium,Yearn,Governor,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",75032.69,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn Governor contract,4.6,0.5590937885552494,unaudited
sc_1358,integer_overflow,High,Synthetix,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",141605.4,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Synthetix Vault contract,8.5,0.47293970482790804,unaudited
sc_1359,short_address,Medium,Synthetix,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53044.99,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Synthetix Oracle contract,5.0,0.6993939927968924,audited
sc_1360,reentrancy,Critical,Euler,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",74355.49,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler Governor contract,9.8,0.9037247390951224,audited
sc_1361,front_running,Medium,MakerDAO,Timelock,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",231225.33,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in MakerDAO Timelock contract,5.4,0.9293256230124919,audited
sc_1362,integer_overflow,High,Frax,Factory,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",90465.91,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Frax Factory contract,7.7,0.2206247493786801,audited
sc_1363,access_control,High,Liquity,Router,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",35047.63,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Liquity Router contract,7.5,0.6621359521430437,audited
sc_1364,dos_gas_limit,Medium,Balancer,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7956.2,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Balancer Farming contract,5.5,0.11191981267641801,audited
sc_1365,dos_gas_limit,Medium,Curve,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32250.26,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve DEX contract,4.9,0.6641713830353606,audited
sc_1366,reentrancy,Critical,Balancer,Vault,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",61198.08,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Vault contract,9.6,0.5834519610822774,audited
sc_1367,tx_origin,Medium,Frax,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",17968.45,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Oracle contract,5.0,0.22756231599359716,audited
sc_1368,timestamp_dependence,Medium,Curve,ERC20,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",75657.27,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Curve ERC20 contract,6.8,0.5470116044548646,unaudited
sc_1369,timestamp_dependence,Medium,Synthetix,Oracle,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",30083.53,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Synthetix Oracle contract,4.8,0.6481568861500291,unaudited
sc_1370,tx_origin,Medium,MakerDAO,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",130782.91,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO AMM contract,4.6,0.2420116906922344,audited
sc_1371,integer_overflow,High,SushiSwap,Governor,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",100862.62,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap Governor contract,7.6,0.8270542430738758,audited
sc_1372,access_control,High,dYdX,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",64874.88,13,0.26,0.8,2,0,1,1,High access_control vulnerability in dYdX ERC20 contract,7.2,0.15660062314966688,audited
sc_1373,integer_overflow,High,Uniswap,Staking,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",288974.22,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Uniswap Staking contract,8.5,0.3682678924911308,audited
sc_1374,front_running,Medium,Liquity,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",73849.22,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Liquity Lending contract,6.0,0.6205026957766551,unaudited
sc_1375,front_running,Medium,Synthetix,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",62688.42,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Synthetix ERC721 contract,5.9,0.88514696706798,audited
sc_1376,delegatecall_injection,Critical,Euler,Staking,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",44209.28,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler Staking contract,9.0,0.7380820040094928,audited
sc_1377,tx_origin,Medium,Liquity,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51386.95,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity Bridge contract,5.8,0.7743282283814731,audited
sc_1378,unchecked_call,Medium,1inch,Lending,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",55616.69,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in 1inch Lending contract,6.8,0.9967769443797277,unaudited
sc_1379,reentrancy,Critical,Balancer,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",28689.42,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Balancer Strategy contract,9.3,0.1010984983150764,audited
sc_1380,integer_overflow,High,Aave,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",127361.99,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Aave ERC20 contract,8.8,0.6074508424820034,audited
sc_1381,unchecked_call,Medium,dYdX,Vault,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",31259.36,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in dYdX Vault contract,6.6,0.829281471096087,audited
sc_1382,random_weakness,High,Uniswap,Vault,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",85418.85,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Uniswap Vault contract,8.7,0.5688674984444847,audited
sc_1383,random_weakness,High,SushiSwap,Strategy,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",68191.38,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in SushiSwap Strategy contract,8.2,0.2281813913604194,audited
sc_1384,front_running,Medium,Compound,Governor,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",210952.66,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound Governor contract,6.3,0.41595864648716896,audited
sc_1385,front_running,Medium,Synthetix,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",87748.24,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Synthetix AMM contract,5.7,0.6543326117272231,audited
sc_1386,random_weakness,High,Curve,ERC20,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",83443.15,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Curve ERC20 contract,7.7,0.9594490012518524,audited
sc_1387,access_control,High,SushiSwap,ERC20,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",73689.88,13,0.26,0.8,2,0,1,1,High access_control vulnerability in SushiSwap ERC20 contract,7.0,0.9900678005259932,unaudited
sc_1388,short_address,Medium,Liquity,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16878.17,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity Router contract,6.2,0.6689464314596406,audited
sc_1389,delegatecall_injection,Critical,SushiSwap,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",97282.09,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in SushiSwap Oracle contract,9.2,0.5162340959886423,unaudited
sc_1390,timestamp_dependence,Medium,Yearn,Lending,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",51688.26,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Yearn Lending contract,4.5,0.6631839779791691,audited
sc_1391,dos_gas_limit,Medium,Rari,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29845.65,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Rari Staking contract,4.3,0.7775119280430769,audited
sc_1392,delegatecall_injection,Critical,Yearn,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",287323.71,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Yearn Staking contract,9.6,0.607400531930736,unaudited
sc_1393,short_address,Medium,Liquity,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15683.86,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity AMM contract,6.1,0.5406334010558855,audited
sc_1394,dos_gas_limit,Medium,Convex,Proxy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34575.78,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Convex Proxy contract,6.7,0.3746400795284246,audited
sc_1395,tx_origin,Medium,Rari,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8589.06,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Rari Governor contract,4.7,0.19145784924788417,audited
sc_1396,short_address,Medium,SushiSwap,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58650.22,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in SushiSwap Proxy contract,6.4,0.8091232556571538,audited
sc_1397,front_running,Medium,1inch,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21282.03,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in 1inch Lending contract,5.7,0.9997471615428865,unaudited
sc_1398,dos_gas_limit,Medium,Yearn,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38539.72,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn Staking contract,5.1,0.49959391534163,audited
sc_1399,uninitialized_storage,High,dYdX,Vault,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",31831.84,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX Vault contract,7.2,0.14343948138405513,audited
sc_1400,uninitialized_storage,High,Alpha Homora,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",85153.48,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Alpha Homora Router contract,7.3,0.5125017141205988,unaudited
sc_1401,tx_origin,Medium,PancakeSwap,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18443.69,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in PancakeSwap ERC20 contract,5.7,0.3303079040055281,audited
sc_1402,random_weakness,High,Synthetix,Farming,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",144730.46,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Synthetix Farming contract,7.9,0.47374893427713327,audited
sc_1403,reentrancy,Critical,Synthetix,Farming,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",137684.34,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Synthetix Farming contract,9.2,0.365484913625889,unaudited
sc_1404,random_weakness,High,Uniswap,Router,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",71578.42,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Uniswap Router contract,7.2,0.12307989886207539,audited
sc_1405,delegatecall_injection,Critical,PancakeSwap,Lending,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",81459.67,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Lending contract,9.3,0.15651754696149267,audited
sc_1406,random_weakness,High,Balancer,Bridge,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",18637.96,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Balancer Bridge contract,8.9,0.46018324517933284,unaudited
sc_1407,dos_gas_limit,Medium,Liquity,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10777.65,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Liquity Farming contract,5.5,0.5347765869789372,audited
sc_1408,front_running,Medium,Convex,ERC721,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28151.43,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Convex ERC721 contract,5.1,0.6669670523352872,audited
sc_1409,random_weakness,High,PancakeSwap,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",8162.32,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in PancakeSwap Pool contract,8.2,0.5024321971528515,unaudited
sc_1410,front_running,Medium,Alpha Homora,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45060.08,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Alpha Homora Farming contract,6.4,0.9109639867048142,audited
sc_1411,timestamp_dependence,Medium,Uniswap,Proxy,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",33463.88,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Uniswap Proxy contract,5.5,0.8188377256496637,audited
sc_1412,short_address,Medium,Aave,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",60870.73,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Aave Staking contract,5.0,0.6487076091281377,unaudited
sc_1413,integer_overflow,High,SushiSwap,ERC20,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",97298.73,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap ERC20 contract,7.7,0.5619425240309437,audited
sc_1414,access_control,High,Rari,ERC721,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",27890.49,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Rari ERC721 contract,8.9,0.9642984795704684,audited
sc_1415,uninitialized_storage,High,Curve,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",192536.39,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve Bridge contract,8.4,0.37887315232342567,audited
sc_1416,front_running,Medium,Liquity,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15194.81,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Liquity Staking contract,6.3,0.31931661873718165,audited
sc_1417,random_weakness,High,Synthetix,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",170292.71,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Synthetix Farming contract,8.6,0.44240721471057887,audited
sc_1418,dos_gas_limit,Medium,Synthetix,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",77709.19,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Synthetix ERC20 contract,5.1,0.6454665386747773,unaudited
sc_1419,access_control,High,Uniswap,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",234808.45,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Uniswap Vault contract,7.7,0.4149849427304111,audited
sc_1420,uninitialized_storage,High,Convex,Pool,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",12770.76,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Convex Pool contract,7.2,0.5819143254611242,audited
sc_1421,reentrancy,Critical,PancakeSwap,ERC721,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",62649.06,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap ERC721 contract,9.4,0.23655885160402804,unaudited
sc_1422,short_address,Medium,MakerDAO,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",114110.64,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO AMM contract,6.3,0.9778913615519167,audited
sc_1423,dos_gas_limit,Medium,Alpha Homora,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28825.93,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Vault contract,4.3,0.6276838470429198,audited
sc_1424,timestamp_dependence,Medium,1inch,Bridge,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",62306.95,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in 1inch Bridge contract,5.9,0.5383239900447783,audited
sc_1425,access_control,High,Alpha Homora,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",76092.94,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora Factory contract,8.0,0.8955998674939152,audited
sc_1426,timestamp_dependence,Medium,Liquity,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",24791.55,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity ERC721 contract,4.8,0.21979918730442813,audited
sc_1427,random_weakness,High,MakerDAO,AMM,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",190476.86,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in MakerDAO AMM contract,8.1,0.5059683087171973,unaudited
sc_1428,short_address,Medium,Uniswap,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",131541.13,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Uniswap Router contract,6.9,0.6534878558252479,audited
sc_1429,delegatecall_injection,Critical,Convex,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",41018.37,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex AMM contract,9.8,0.3482393674146408,audited
sc_1430,uninitialized_storage,High,MakerDAO,AMM,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",237038.41,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO AMM contract,7.9,0.5898200565620473,audited
sc_1431,front_running,Medium,Frax,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13505.0,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax ERC1155 contract,4.2,0.3547844490777645,unaudited
sc_1432,timestamp_dependence,Medium,PancakeSwap,Pool,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",63278.73,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in PancakeSwap Pool contract,5.4,0.7380581369075221,audited
sc_1433,timestamp_dependence,Medium,Yearn,ERC721,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",160995.11,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn ERC721 contract,5.1,0.8230076422668637,audited
sc_1434,front_running,Medium,MakerDAO,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",254211.64,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in MakerDAO Vault contract,4.5,0.9469662046172873,audited
sc_1435,front_running,Medium,1inch,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57533.5,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch Factory contract,6.2,0.29758428452829727,audited
sc_1436,delegatecall_injection,Critical,Liquity,Pool,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",97950.56,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity Pool contract,9.3,0.9869488957806611,audited
sc_1437,short_address,Medium,Rari,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42778.02,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Rari Vault contract,4.2,0.8928808073727975,unaudited
sc_1438,delegatecall_injection,Critical,Frax,ERC1155,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",42490.23,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax ERC1155 contract,9.9,0.3441440331682298,unaudited
sc_1439,delegatecall_injection,Critical,dYdX,ERC20,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",33689.09,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in dYdX ERC20 contract,9.4,0.8391303195937652,unaudited
sc_1440,unchecked_call,Medium,Euler,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",61686.27,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Euler Bridge contract,4.4,0.468204146811418,unaudited
sc_1441,access_control,High,MakerDAO,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",168345.27,13,0.26,0.8,2,1,1,1,High access_control vulnerability in MakerDAO Oracle contract,8.1,0.8070776579913589,audited
sc_1442,tx_origin,Medium,Frax,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23575.92,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Frax Timelock contract,4.3,0.2697892135833144,unaudited
sc_1443,integer_overflow,High,Convex,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",64052.4,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Convex Lending contract,7.6,0.5000387865277106,unaudited
sc_1444,unchecked_call,Medium,dYdX,DEX,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",36883.69,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in dYdX DEX contract,4.4,0.9334281417179239,unaudited
sc_1445,dos_gas_limit,Medium,dYdX,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46206.39,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in dYdX Router contract,4.6,0.14698694267013332,audited
sc_1446,timestamp_dependence,Medium,Compound,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",190176.25,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Compound Farming contract,4.3,0.5882164237231408,unaudited
sc_1447,tx_origin,Medium,Balancer,Pool,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40289.62,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Balancer Pool contract,6.1,0.5406189574488824,unaudited
sc_1448,dos_gas_limit,Medium,Uniswap,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",195057.35,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Uniswap Lending contract,5.5,0.995990774286862,audited
sc_1449,uninitialized_storage,High,Synthetix,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",141181.16,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Synthetix ERC721 contract,8.5,0.7332586338461038,unaudited
sc_1450,random_weakness,High,Euler,ERC721,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",32804.4,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Euler ERC721 contract,7.4,0.14442977421657927,audited
sc_1451,timestamp_dependence,Medium,Synthetix,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",39312.38,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Synthetix ERC721 contract,6.7,0.8875472927863829,unaudited
sc_1452,front_running,Medium,Compound,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",186047.75,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound Bridge contract,5.2,0.8345242621413016,audited
sc_1453,random_weakness,High,MakerDAO,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",484851.06,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in MakerDAO Pool contract,8.4,0.11624281038738948,audited
sc_1454,front_running,Medium,Euler,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13567.5,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Euler Strategy contract,5.1,0.25190507184636074,unaudited
sc_1455,front_running,Medium,Alpha Homora,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46735.13,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Alpha Homora Factory contract,4.8,0.7106842963923049,audited
sc_1456,timestamp_dependence,Medium,dYdX,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",39141.29,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX ERC20 contract,5.0,0.3513298565956853,audited
sc_1457,front_running,Medium,dYdX,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38102.95,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in dYdX Bridge contract,5.6,0.2937711855356794,audited
sc_1458,integer_overflow,High,Uniswap,Pool,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",355428.04,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Uniswap Pool contract,8.8,0.12671284435372718,audited
sc_1459,front_running,Medium,Balancer,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58918.51,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer Proxy contract,5.0,0.8710993871868031,audited
sc_1460,tx_origin,Medium,Liquity,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49913.53,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity Vault contract,4.2,0.1050319007028358,audited
sc_1461,random_weakness,High,1inch,ERC1155,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",68551.28,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in 1inch ERC1155 contract,8.5,0.5845722971544596,audited
sc_1462,unchecked_call,Medium,Compound,ERC721,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",101967.15,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Compound ERC721 contract,6.3,0.6148203480270268,unaudited
sc_1463,short_address,Medium,Euler,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25255.71,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Euler ERC20 contract,5.5,0.5005849690622055,audited
sc_1464,unchecked_call,Medium,1inch,Router,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",18807.44,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in 1inch Router contract,6.8,0.6880865512053455,audited
sc_1465,integer_overflow,High,Alpha Homora,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",53223.16,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Alpha Homora Vault contract,8.7,0.7170989821123596,audited
sc_1466,reentrancy,Critical,Rari,AMM,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",31090.17,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Rari AMM contract,9.9,0.2835420666180797,audited
sc_1467,reentrancy,Critical,Synthetix,Oracle,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",128132.19,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Synthetix Oracle contract,9.0,0.39790148318713725,audited
sc_1468,random_weakness,High,PancakeSwap,AMM,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",50614.9,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap AMM contract,8.6,0.5947933370574867,unaudited
sc_1469,random_weakness,High,Compound,Oracle,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",87974.51,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Compound Oracle contract,7.9,0.6105605986679896,audited
sc_1470,dos_gas_limit,Medium,Convex,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",17645.98,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Convex Strategy contract,5.5,0.5477987338243614,audited
sc_1471,delegatecall_injection,Critical,PancakeSwap,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",81262.56,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Strategy contract,9.2,0.658027681279857,audited
sc_1472,dos_gas_limit,Medium,dYdX,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15629.69,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in dYdX DEX contract,5.6,0.33631865290263857,audited
sc_1473,timestamp_dependence,Medium,Curve,Vault,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",153116.84,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Curve Vault contract,5.7,0.31112638776848567,unaudited
sc_1474,integer_overflow,High,SushiSwap,Bridge,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",64096.17,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap Bridge contract,8.1,0.4745946045526205,audited
sc_1475,short_address,Medium,Frax,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48298.93,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Frax AMM contract,5.9,0.2772205201910922,audited
sc_1476,short_address,Medium,MakerDAO,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",282439.07,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO ERC721 contract,5.6,0.8790737906295628,audited
sc_1477,delegatecall_injection,Critical,Synthetix,Staking,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",212465.96,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix Staking contract,9.2,0.10732494944513823,unaudited
sc_1478,unchecked_call,Medium,Curve,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",20758.11,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Farming contract,4.8,0.6905916218407779,audited
sc_1479,short_address,Medium,Synthetix,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",109220.68,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Staking contract,5.3,0.659019136312499,audited
sc_1480,uninitialized_storage,High,Alpha Homora,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",50732.08,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Alpha Homora Router contract,8.7,0.5405708920304778,unaudited
sc_1481,front_running,Medium,Synthetix,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37338.78,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Synthetix Strategy contract,4.9,0.6777044919306613,unaudited
sc_1482,dos_gas_limit,Medium,Alpha Homora,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49673.63,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Vault contract,4.5,0.945342059001931,audited
sc_1483,random_weakness,High,Compound,Strategy,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",149308.21,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Strategy contract,8.4,0.39101511767814245,audited
sc_1484,timestamp_dependence,Medium,Frax,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",55999.47,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Frax Oracle contract,6.1,0.46340450080591045,audited
sc_1485,delegatecall_injection,Critical,1inch,Lending,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",93788.53,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in 1inch Lending contract,9.2,0.5876800277643303,audited
sc_1486,uninitialized_storage,High,Compound,ERC20,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",396845.7,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Compound ERC20 contract,8.1,0.48017370078114896,audited
sc_1487,timestamp_dependence,Medium,Compound,Factory,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",125852.48,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Compound Factory contract,4.1,0.31477300961437904,unaudited
sc_1488,integer_overflow,High,Yearn,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",186707.24,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Yearn Lending contract,7.7,0.8913671503667805,unaudited
sc_1489,reentrancy,Critical,Yearn,Factory,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",200022.25,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Yearn Factory contract,9.8,0.3563244914663042,audited
sc_1490,random_weakness,High,MakerDAO,Vault,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",330264.21,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Vault contract,8.4,0.22054740656233995,audited
sc_1491,front_running,Medium,dYdX,Pool,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23889.35,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in dYdX Pool contract,6.5,0.8224958160652401,audited
sc_1492,random_weakness,High,Rari,ERC20,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",33500.36,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari ERC20 contract,7.7,0.8039391708716311,unaudited
sc_1493,timestamp_dependence,Medium,1inch,Strategy,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",55528.91,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in 1inch Strategy contract,5.2,0.593538983129419,unaudited
sc_1494,uninitialized_storage,High,1inch,ERC721,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",32399.17,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in 1inch ERC721 contract,7.9,0.16203428119044547,audited
sc_1495,access_control,High,dYdX,Lending,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",29876.95,13,0.26,0.8,2,0,1,1,High access_control vulnerability in dYdX Lending contract,7.5,0.31924262784296087,audited
sc_1496,reentrancy,Critical,Convex,AMM,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",51270.36,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex AMM contract,9.7,0.17122383806126706,audited
sc_1497,access_control,High,Alpha Homora,Factory,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",15335.69,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora Factory contract,7.5,0.30567949361184255,unaudited
sc_1498,access_control,High,Frax,Bridge,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",22698.87,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Frax Bridge contract,8.6,0.714587598438655,audited
sc_1499,timestamp_dependence,Medium,PancakeSwap,Farming,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",51891.55,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Farming contract,5.2,0.28436304371079596,unaudited
sc_1500,front_running,Medium,PancakeSwap,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",67679.42,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in PancakeSwap Governor contract,4.1,0.8095156146550656,audited
sc_1501,access_control,High,Rari,Pool,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",59702.33,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Rari Pool contract,7.9,0.7576584511226195,audited
sc_1502,tx_origin,Medium,Yearn,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",59385.86,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Yearn Farming contract,6.1,0.5150000702126787,unaudited
sc_1503,reentrancy,Critical,Yearn,Bridge,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",161257.86,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Yearn Bridge contract,10.0,0.7275744989359298,unaudited
sc_1504,short_address,Medium,Curve,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",128724.62,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Curve Governor contract,4.6,0.6514546449130354,audited
sc_1505,unchecked_call,Medium,1inch,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",28778.62,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in 1inch DEX contract,6.7,0.9051799172047311,audited
sc_1506,random_weakness,High,Compound,Router,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",56301.62,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Router contract,8.0,0.272612972197679,unaudited
sc_1507,delegatecall_injection,Critical,Curve,ERC721,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",89812.59,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Curve ERC721 contract,9.8,0.8998257867534959,unaudited
sc_1508,unchecked_call,Medium,Uniswap,Farming,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",287437.29,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Uniswap Farming contract,6.7,0.14206821401151254,audited
sc_1509,uninitialized_storage,High,Curve,Timelock,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",37890.6,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve Timelock contract,8.3,0.8408137581422407,audited
sc_1510,access_control,High,Convex,Bridge,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",32917.44,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Convex Bridge contract,7.5,0.7421850437085458,audited
sc_1511,unchecked_call,Medium,Alpha Homora,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",48718.17,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Alpha Homora Vault contract,6.1,0.28557033821784494,audited
sc_1512,reentrancy,Critical,PancakeSwap,ERC721,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",53253.38,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap ERC721 contract,9.2,0.5642855919592683,audited
sc_1513,dos_gas_limit,Medium,Alpha Homora,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51147.12,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Alpha Homora Factory contract,4.3,0.5875597563380675,unaudited
sc_1514,integer_overflow,High,SushiSwap,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",28361.03,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap Bridge contract,7.8,0.45220436525351015,audited
sc_1515,dos_gas_limit,Medium,Yearn,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57202.69,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn Lending contract,5.3,0.6128858398262707,audited
sc_1516,front_running,Medium,Aave,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",164697.58,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Aave Proxy contract,5.6,0.8225518755550445,unaudited
sc_1517,dos_gas_limit,Medium,Yearn,Bridge,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",129261.01,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Yearn Bridge contract,6.5,0.7164121812513209,unaudited
sc_1518,random_weakness,High,Convex,Oracle,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",28994.64,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Convex Oracle contract,8.1,0.3471083626942053,unaudited
sc_1519,reentrancy,Critical,Uniswap,AMM,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",112644.97,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Uniswap AMM contract,10.0,0.47839285121672204,audited
sc_1520,short_address,Medium,SushiSwap,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",177122.31,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in SushiSwap Proxy contract,5.0,0.12445295845062199,audited
sc_1521,timestamp_dependence,Medium,Euler,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",14310.65,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Euler ERC1155 contract,6.2,0.3335871748557021,unaudited
sc_1522,tx_origin,Medium,Liquity,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",70477.73,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Liquity Strategy contract,6.6,0.33444017191409386,unaudited
sc_1523,reentrancy,Critical,SushiSwap,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",269832.8,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in SushiSwap Factory contract,9.9,0.38881379353161727,audited
sc_1524,reentrancy,Critical,MakerDAO,AMM,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",159043.1,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in MakerDAO AMM contract,9.8,0.41462982315940033,audited
sc_1525,dos_gas_limit,Medium,Alpha Homora,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",41990.55,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Alpha Homora Farming contract,5.2,0.4133461045851706,audited
sc_1526,short_address,Medium,Convex,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22637.62,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Convex Oracle contract,4.2,0.4417075601559085,unaudited
sc_1527,access_control,High,Alpha Homora,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",41370.15,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora AMM contract,8.4,0.6257533957919266,audited
sc_1528,short_address,Medium,1inch,Timelock,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31739.34,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch Timelock contract,4.0,0.7364716057244561,audited
sc_1529,front_running,Medium,Curve,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",27052.01,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve Staking contract,6.1,0.3778099266436591,audited
sc_1530,integer_overflow,High,Convex,Farming,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",30045.85,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Convex Farming contract,7.7,0.3470581731997907,unaudited
sc_1531,front_running,Medium,dYdX,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29811.94,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in dYdX ERC721 contract,4.0,0.3507197323677165,audited
sc_1532,unchecked_call,Medium,PancakeSwap,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",28525.76,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in PancakeSwap Farming contract,5.3,0.1315770931573027,unaudited
sc_1533,unchecked_call,Medium,Balancer,Governor,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",42971.42,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Balancer Governor contract,5.6,0.46783134770097046,audited
sc_1534,random_weakness,High,Alpha Homora,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",8994.79,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Alpha Homora ERC20 contract,8.2,0.9840314679361366,audited
sc_1535,short_address,Medium,MakerDAO,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38285.83,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in MakerDAO Vault contract,6.1,0.24502744105326937,audited
sc_1536,timestamp_dependence,Medium,Convex,Lending,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",18971.47,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Convex Lending contract,6.9,0.9579991742604054,unaudited
sc_1537,access_control,High,Compound,Lending,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",296136.46,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound Lending contract,8.4,0.5079404154506436,unaudited
sc_1538,short_address,Medium,Yearn,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25861.48,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Yearn Factory contract,5.1,0.15281970343588405,audited
sc_1539,reentrancy,Critical,1inch,Factory,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",52095.93,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch Factory contract,9.5,0.3030919910954224,audited
sc_1540,random_weakness,High,Euler,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",45351.08,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Euler Factory contract,8.4,0.9866841733590245,unaudited
sc_1541,random_weakness,High,1inch,Vault,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",27331.55,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in 1inch Vault contract,7.5,0.26159077390736174,unaudited
sc_1542,reentrancy,Critical,Rari,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",116859.88,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Rari Router contract,9.2,0.5662427734857848,audited
sc_1543,reentrancy,Critical,Alpha Homora,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",26480.17,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Alpha Homora Vault contract,9.4,0.9252787620617179,audited
sc_1544,unchecked_call,Medium,dYdX,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",28652.77,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in dYdX AMM contract,4.0,0.26140137936601654,audited
sc_1545,timestamp_dependence,Medium,SushiSwap,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",64367.36,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap AMM contract,6.8,0.4818653483184162,audited
sc_1546,random_weakness,High,PancakeSwap,Timelock,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",53125.54,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in PancakeSwap Timelock contract,8.6,0.9045577009245793,audited
sc_1547,timestamp_dependence,Medium,PancakeSwap,Vault,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",33787.49,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Vault contract,6.2,0.21913251504966802,audited
sc_1548,tx_origin,Medium,Rari,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39150.34,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Rari Lending contract,4.5,0.6634240043566061,unaudited
sc_1549,uninitialized_storage,High,MakerDAO,Factory,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",473488.6,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in MakerDAO Factory contract,8.1,0.39636893908227266,audited
sc_1550,front_running,Medium,Uniswap,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",119172.86,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Uniswap Strategy contract,5.2,0.9497502463295843,audited
sc_1551,tx_origin,Medium,MakerDAO,DEX,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",201782.34,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in MakerDAO DEX contract,4.9,0.9040668858104447,audited
sc_1552,delegatecall_injection,Critical,Balancer,ERC721,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",11577.76,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Balancer ERC721 contract,9.2,0.2245549827203851,audited
sc_1553,integer_overflow,High,SushiSwap,Lending,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",126323.96,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap Lending contract,7.7,0.28486456553829426,unaudited
sc_1554,front_running,Medium,dYdX,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10787.13,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in dYdX Farming contract,4.2,0.26242448414854846,unaudited
sc_1555,unchecked_call,Medium,Yearn,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",36756.03,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn Bridge contract,4.8,0.44344434284209056,audited
sc_1556,uninitialized_storage,High,Convex,Proxy,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",11675.76,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Convex Proxy contract,7.8,0.5037603556101137,unaudited
sc_1557,uninitialized_storage,High,PancakeSwap,Proxy,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",35183.68,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in PancakeSwap Proxy contract,7.6,0.8143573879153907,audited
sc_1558,tx_origin,Medium,Curve,Bridge,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30534.34,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Curve Bridge contract,4.4,0.15974940883792565,audited
sc_1559,unchecked_call,Medium,Synthetix,Router,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",134737.01,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Synthetix Router contract,4.8,0.7309611488792532,audited
sc_1560,reentrancy,Critical,Uniswap,Proxy,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",283575.8,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Uniswap Proxy contract,9.1,0.9161258792766824,audited
sc_1561,front_running,Medium,Synthetix,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",114950.65,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Synthetix Farming contract,4.4,0.514519259252945,audited
sc_1562,short_address,Medium,Alpha Homora,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19535.04,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Alpha Homora Pool contract,4.7,0.9347342968279656,unaudited
sc_1563,random_weakness,High,Curve,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",140052.88,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Curve Router contract,8.4,0.30031940904589055,audited
sc_1564,dos_gas_limit,Medium,1inch,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49893.81,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in 1inch Vault contract,6.2,0.4603793991944334,audited
sc_1565,dos_gas_limit,Medium,Uniswap,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",140730.15,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Uniswap Vault contract,6.4,0.19480040944857252,audited
sc_1566,uninitialized_storage,High,Curve,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",23211.6,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve Timelock contract,8.1,0.7714632781544298,audited
sc_1567,timestamp_dependence,Medium,1inch,Farming,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",33659.68,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in 1inch Farming contract,5.1,0.7351854979185117,audited
sc_1568,delegatecall_injection,Critical,1inch,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",38113.63,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch Strategy contract,9.6,0.262774581691265,unaudited
sc_1569,reentrancy,Critical,Rari,Router,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",63435.15,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Rari Router contract,9.6,0.7414152752221411,unaudited
sc_1570,unchecked_call,Medium,Frax,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",12534.4,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Frax Router contract,4.9,0.9758641196251681,audited
sc_1571,access_control,High,Rari,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",51184.39,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Rari Strategy contract,7.4,0.895703099328695,unaudited
sc_1572,front_running,Medium,Liquity,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",43322.96,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Liquity Pool contract,4.0,0.2726231529166657,audited
sc_1573,short_address,Medium,Curve,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",104196.85,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve Router contract,5.0,0.7855794642374898,audited
sc_1574,uninitialized_storage,High,Liquity,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",39825.4,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Liquity Timelock contract,8.5,0.5877515943296583,audited
sc_1575,tx_origin,Medium,SushiSwap,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",165779.1,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in SushiSwap Vault contract,5.3,0.5667747922674164,audited
sc_1576,access_control,High,Compound,Factory,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",73386.5,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound Factory contract,7.1,0.38170197973410425,audited
sc_1577,integer_overflow,High,Synthetix,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",58611.32,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Synthetix AMM contract,8.8,0.4334568888029735,audited
sc_1578,timestamp_dependence,Medium,Balancer,Farming,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",64170.46,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Balancer Farming contract,6.6,0.3407143885160028,audited
sc_1579,integer_overflow,High,Synthetix,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",246679.27,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Farming contract,7.1,0.7130268022340014,audited
sc_1580,uninitialized_storage,High,Curve,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",29810.6,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve Governor contract,7.4,0.9565719611187166,audited
sc_1581,short_address,Medium,MakerDAO,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",152435.4,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in MakerDAO Timelock contract,5.4,0.8129877853001988,audited
sc_1582,reentrancy,Critical,Compound,Oracle,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",135886.35,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Compound Oracle contract,9.8,0.9655593073669526,audited
sc_1583,access_control,High,dYdX,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",61995.85,13,0.26,0.8,2,1,1,1,High access_control vulnerability in dYdX Governor contract,7.8,0.9547025480904239,unaudited
sc_1584,integer_overflow,High,MakerDAO,Pool,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",333652.36,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Pool contract,8.1,0.8059537724104993,audited
sc_1585,random_weakness,High,dYdX,Staking,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",70648.94,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX Staking contract,8.8,0.1742759386425119,unaudited
sc_1586,integer_overflow,High,Curve,ERC1155,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",38660.26,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Curve ERC1155 contract,8.3,0.5958895033365519,unaudited
sc_1587,uninitialized_storage,High,SushiSwap,Governor,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",105876.27,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in SushiSwap Governor contract,8.4,0.4902531882075334,audited
sc_1588,tx_origin,Medium,Frax,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19548.05,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Router contract,6.0,0.6873846593294226,audited
sc_1589,reentrancy,Critical,Alpha Homora,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",77225.27,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Alpha Homora Router contract,9.2,0.496631179943572,audited
sc_1590,timestamp_dependence,Medium,dYdX,Lending,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",15344.7,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Lending contract,5.0,0.2804462535192784,unaudited
sc_1591,uninitialized_storage,High,dYdX,ERC20,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",41488.68,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX ERC20 contract,8.7,0.7134404051180786,audited
sc_1592,access_control,High,Balancer,Proxy,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",50773.86,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Balancer Proxy contract,8.7,0.3798308914048041,audited
sc_1593,uninitialized_storage,High,Euler,ERC721,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",39168.4,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Euler ERC721 contract,7.2,0.33080922986084293,audited
sc_1594,short_address,Medium,Convex,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18099.48,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Convex ERC1155 contract,5.4,0.570119472206364,unaudited
sc_1595,tx_origin,Medium,MakerDAO,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",88702.99,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO ERC20 contract,6.4,0.699612844135541,audited
sc_1596,dos_gas_limit,Medium,Alpha Homora,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37528.52,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Factory contract,6.5,0.547608634428988,audited
sc_1597,random_weakness,High,Convex,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",45394.52,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Convex ERC20 contract,8.4,0.26934933609826156,audited
sc_1598,tx_origin,Medium,Uniswap,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",302865.38,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap DEX contract,5.8,0.9449815511866853,audited
sc_1599,dos_gas_limit,Medium,Alpha Homora,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53992.08,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora ERC1155 contract,6.2,0.8533144911068467,audited
sc_1600,access_control,High,Alpha Homora,ERC721,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",29619.42,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora ERC721 contract,7.8,0.4506694863559697,unaudited
sc_1601,tx_origin,Medium,Yearn,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",72291.56,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Yearn AMM contract,6.6,0.5022592767124333,unaudited
sc_1602,timestamp_dependence,Medium,Rari,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",32929.42,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Rari Pool contract,6.1,0.7449113647725709,audited
sc_1603,short_address,Medium,Convex,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7268.15,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Convex Factory contract,4.3,0.6393507446453233,unaudited
sc_1604,random_weakness,High,Balancer,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",14334.91,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Factory contract,7.8,0.7372773098087816,unaudited
sc_1605,short_address,Medium,Convex,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24643.24,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Convex Staking contract,5.7,0.47806448150543246,audited
sc_1606,reentrancy,Critical,MakerDAO,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",223446.58,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO ERC721 contract,9.2,0.8616009676719961,audited
sc_1607,integer_overflow,High,PancakeSwap,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",66380.24,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in PancakeSwap Bridge contract,8.0,0.5383433923101855,unaudited
sc_1608,timestamp_dependence,Medium,Alpha Homora,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",51555.01,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Alpha Homora Router contract,6.4,0.23399040933866988,audited
sc_1609,timestamp_dependence,Medium,Compound,Governor,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",82546.81,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Compound Governor contract,5.4,0.5146315183830644,audited
sc_1610,reentrancy,Critical,dYdX,Router,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",34737.75,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in dYdX Router contract,9.0,0.9109354308837445,audited
sc_1611,integer_overflow,High,Uniswap,Strategy,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",430537.27,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Uniswap Strategy contract,8.8,0.2803274624132824,audited
sc_1612,tx_origin,Medium,Aave,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52030.39,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave Lending contract,6.8,0.11529472376140888,audited
sc_1613,short_address,Medium,MakerDAO,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",61861.13,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in MakerDAO ERC721 contract,5.6,0.9838152072903001,audited
sc_1614,tx_origin,Medium,Synthetix,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19159.16,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix Pool contract,4.4,0.4136045077964219,unaudited
sc_1615,tx_origin,Medium,SushiSwap,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21909.69,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in SushiSwap AMM contract,4.0,0.1510767900263914,audited
sc_1616,tx_origin,Medium,Balancer,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42626.82,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Balancer DEX contract,4.5,0.7239856240689506,audited
sc_1617,dos_gas_limit,Medium,dYdX,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54069.92,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in dYdX Governor contract,4.9,0.2030646869554195,audited
sc_1618,random_weakness,High,Alpha Homora,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",6949.22,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Alpha Homora ERC20 contract,7.8,0.5246031549951,audited
sc_1619,integer_overflow,High,Curve,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",110280.54,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Curve ERC20 contract,8.5,0.14818775626531683,audited
sc_1620,short_address,Medium,MakerDAO,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",201466.69,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO Governor contract,6.3,0.9423757339188973,audited
sc_1621,front_running,Medium,dYdX,Timelock,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36048.58,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in dYdX Timelock contract,5.2,0.8960183773005044,unaudited
sc_1622,unchecked_call,Medium,Curve,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",18345.07,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Curve ERC20 contract,6.6,0.9151321129665028,audited
sc_1623,random_weakness,High,PancakeSwap,Timelock,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",75117.86,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap Timelock contract,7.7,0.2568134298304019,unaudited
sc_1624,timestamp_dependence,Medium,Compound,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",73022.23,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Compound Router contract,6.7,0.2720341144564381,audited
sc_1625,access_control,High,Compound,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",112532.04,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound Oracle contract,8.9,0.7651402664539978,unaudited
sc_1626,delegatecall_injection,Critical,Curve,Oracle,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",150059.71,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Curve Oracle contract,9.5,0.8543510558492762,audited
sc_1627,dos_gas_limit,Medium,Aave,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",211222.08,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Lending contract,6.0,0.848101754128928,audited
sc_1628,short_address,Medium,Euler,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30533.63,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Euler ERC20 contract,4.9,0.6726392953765337,unaudited
sc_1629,uninitialized_storage,High,dYdX,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",40317.7,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in dYdX Pool contract,7.6,0.29928291004899166,audited
sc_1630,integer_overflow,High,Uniswap,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",402756.92,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Uniswap Factory contract,7.3,0.45499051255982736,audited
sc_1631,tx_origin,Medium,dYdX,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",9333.11,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in dYdX ERC20 contract,4.5,0.1035213133087889,audited
sc_1632,unchecked_call,Medium,Synthetix,Router,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",153419.57,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Synthetix Router contract,4.5,0.7501660826127062,unaudited
sc_1633,access_control,High,Liquity,Factory,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",28798.83,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Liquity Factory contract,7.4,0.7813065846581392,audited
sc_1634,delegatecall_injection,Critical,Uniswap,ERC721,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",256222.34,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Uniswap ERC721 contract,9.5,0.9979606867684121,audited
sc_1635,dos_gas_limit,Medium,Synthetix,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",81756.5,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Synthetix ERC20 contract,6.2,0.9838063329605192,audited
sc_1636,delegatecall_injection,Critical,PancakeSwap,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",73900.98,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Strategy contract,9.0,0.4723087461192744,audited
sc_1637,short_address,Medium,Curve,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14982.55,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve Timelock contract,4.8,0.43194020389204446,unaudited
sc_1638,dos_gas_limit,Medium,SushiSwap,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",111880.67,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in SushiSwap Vault contract,5.1,0.38037877261539954,audited
sc_1639,access_control,High,Uniswap,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",64647.07,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap Proxy contract,8.1,0.12196440262564484,audited
sc_1640,integer_overflow,High,PancakeSwap,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",101800.57,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in PancakeSwap DEX contract,7.9,0.5163883161145307,audited
sc_1641,reentrancy,Critical,MakerDAO,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",197290.06,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO Staking contract,9.7,0.6772469364068378,audited
sc_1642,uninitialized_storage,High,1inch,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",36821.81,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in 1inch Farming contract,7.1,0.4973662469038299,audited
sc_1643,delegatecall_injection,Critical,dYdX,ERC721,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",89876.89,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX ERC721 contract,9.3,0.6011811628518585,unaudited
sc_1644,reentrancy,Critical,1inch,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",59852.15,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch Proxy contract,9.1,0.24939795522895097,audited
sc_1645,access_control,High,Alpha Homora,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",31061.43,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora Strategy contract,8.4,0.9312753842414748,unaudited
sc_1646,delegatecall_injection,Critical,MakerDAO,Factory,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",278970.59,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in MakerDAO Factory contract,9.6,0.9065372514000619,audited
sc_1647,tx_origin,Medium,dYdX,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55545.11,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX Router contract,6.7,0.9331519746857535,unaudited
sc_1648,random_weakness,High,Euler,Farming,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",14234.36,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Euler Farming contract,8.7,0.882320406711404,audited
sc_1649,tx_origin,Medium,Yearn,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51306.6,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Factory contract,5.9,0.4299502715838176,unaudited
sc_1650,access_control,High,Aave,Vault,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",196955.72,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Vault contract,8.8,0.6651511926047008,audited
sc_1651,integer_overflow,High,Convex,ERC1155,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",20420.68,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Convex ERC1155 contract,8.3,0.3315144155440235,audited
sc_1652,tx_origin,Medium,Convex,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",72220.89,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex Proxy contract,4.5,0.4719781203345065,audited
sc_1653,uninitialized_storage,High,Compound,Bridge,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",79473.76,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Compound Bridge contract,7.5,0.27287138486309115,unaudited
sc_1654,integer_overflow,High,Euler,Proxy,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",41482.51,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler Proxy contract,7.9,0.9806557086352238,audited
sc_1655,reentrancy,Critical,Yearn,ERC20,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",31533.54,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Yearn ERC20 contract,9.1,0.22747577991060858,audited
sc_1656,access_control,High,Synthetix,Pool,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",96053.97,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Synthetix Pool contract,7.5,0.1880379329215833,unaudited
sc_1657,tx_origin,Medium,Synthetix,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",151750.49,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix DEX contract,6.6,0.5201157552241445,audited
sc_1658,integer_overflow,High,Rari,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",37395.95,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Rari Lending contract,7.3,0.7529530213101234,unaudited
sc_1659,tx_origin,Medium,Curve,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30321.34,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Curve Pool contract,5.2,0.9099248493494546,unaudited
sc_1660,delegatecall_injection,Critical,Aave,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",392152.52,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Aave Governor contract,9.7,0.7951241064925288,audited
sc_1661,short_address,Medium,Yearn,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23390.84,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Yearn Factory contract,4.9,0.2658722380153143,audited
sc_1662,timestamp_dependence,Medium,Curve,Router,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",82482.74,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Curve Router contract,6.4,0.12631160289850962,unaudited
sc_1663,tx_origin,Medium,1inch,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25745.07,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch Oracle contract,5.7,0.14646922414088864,audited
sc_1664,timestamp_dependence,Medium,MakerDAO,Timelock,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",146590.47,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in MakerDAO Timelock contract,5.4,0.34155650436300355,unaudited
sc_1665,uninitialized_storage,High,1inch,ERC1155,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",63283.56,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in 1inch ERC1155 contract,8.6,0.43237434768556116,audited
sc_1666,access_control,High,Alpha Homora,Factory,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",63392.74,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Alpha Homora Factory contract,8.6,0.4957388056009048,audited
sc_1667,front_running,Medium,Alpha Homora,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44694.97,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Alpha Homora Factory contract,4.7,0.5959857809684003,audited
sc_1668,tx_origin,Medium,Yearn,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23390.02,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Yearn AMM contract,4.3,0.7890013452537772,audited
sc_1669,short_address,Medium,dYdX,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35272.82,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in dYdX AMM contract,6.3,0.8454893196015408,audited
sc_1670,random_weakness,High,Alpha Homora,DEX,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",66253.36,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Alpha Homora DEX contract,8.0,0.7747782652018572,audited
sc_1671,short_address,Medium,PancakeSwap,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47908.64,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in PancakeSwap ERC1155 contract,5.2,0.44829692523046416,audited
sc_1672,short_address,Medium,SushiSwap,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",106364.74,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in SushiSwap AMM contract,5.5,0.4310542928987321,unaudited
sc_1673,uninitialized_storage,High,Frax,Vault,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",68936.65,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax Vault contract,7.4,0.42712027630240246,audited
sc_1674,timestamp_dependence,Medium,Euler,Router,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",52812.95,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Euler Router contract,6.5,0.9579447494145645,unaudited
sc_1675,uninitialized_storage,High,Frax,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",7232.44,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax Pool contract,7.7,0.152030948256081,audited
sc_1676,integer_overflow,High,Frax,Lending,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",27505.21,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Frax Lending contract,7.2,0.2685479170971908,unaudited
sc_1677,random_weakness,High,MakerDAO,Proxy,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",348293.89,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Proxy contract,7.5,0.46611978613893046,unaudited
sc_1678,timestamp_dependence,Medium,PancakeSwap,ERC721,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",38264.68,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap ERC721 contract,5.4,0.962231358114755,unaudited
sc_1679,dos_gas_limit,Medium,Rari,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45697.93,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Rari Farming contract,4.6,0.5107309249840262,audited
sc_1680,dos_gas_limit,Medium,SushiSwap,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",86456.85,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in SushiSwap Router contract,6.1,0.33432839279604876,unaudited
sc_1681,front_running,Medium,Frax,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",70039.43,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Frax ERC20 contract,6.0,0.4583513217418469,audited
sc_1682,tx_origin,Medium,Uniswap,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",236924.55,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap AMM contract,6.6,0.49653744558645896,audited
sc_1683,tx_origin,Medium,Synthetix,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",69918.79,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix DEX contract,6.5,0.8226635999476852,audited
sc_1684,reentrancy,Critical,PancakeSwap,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",31801.46,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in PancakeSwap Oracle contract,9.9,0.9747540240065667,unaudited
sc_1685,uninitialized_storage,High,dYdX,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",44133.76,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in dYdX Oracle contract,8.2,0.3278040295644029,audited
sc_1686,reentrancy,Critical,1inch,Staking,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",52452.85,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in 1inch Staking contract,9.7,0.904201419886912,unaudited
sc_1687,uninitialized_storage,High,dYdX,Strategy,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",14034.63,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX Strategy contract,8.6,0.38759727920585096,audited
sc_1688,short_address,Medium,Balancer,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",59347.37,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Balancer ERC1155 contract,6.9,0.9437476555405022,unaudited
sc_1689,front_running,Medium,SushiSwap,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",172190.46,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in SushiSwap Farming contract,6.6,0.9205512039828427,audited
sc_1690,uninitialized_storage,High,Convex,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",93763.22,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Convex ERC1155 contract,7.0,0.6180331938972766,audited
sc_1691,front_running,Medium,Liquity,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31511.01,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Liquity AMM contract,5.4,0.5730919832707507,unaudited
sc_1692,uninitialized_storage,High,Alpha Homora,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",31693.17,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Alpha Homora Router contract,8.6,0.8310152763995838,audited
sc_1693,front_running,Medium,PancakeSwap,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21014.75,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in PancakeSwap Pool contract,6.5,0.462653539226744,unaudited
sc_1694,delegatecall_injection,Critical,Uniswap,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",420316.94,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Uniswap ERC721 contract,9.9,0.41988560696763433,audited
sc_1695,timestamp_dependence,Medium,dYdX,DEX,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",28749.35,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX DEX contract,5.8,0.927982438397397,unaudited
sc_1696,dos_gas_limit,Medium,PancakeSwap,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10644.19,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap DEX contract,5.8,0.6578369227579829,audited
sc_1697,uninitialized_storage,High,Alpha Homora,AMM,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",83009.59,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Alpha Homora AMM contract,8.2,0.9935502338596147,audited
sc_1698,delegatecall_injection,Critical,Uniswap,Governor,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",176730.34,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Uniswap Governor contract,9.5,0.9206908536991428,audited
sc_1699,front_running,Medium,Alpha Homora,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30282.59,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Alpha Homora Router contract,4.6,0.3857413180941983,audited
sc_1700,access_control,High,Convex,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",89797.62,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Convex Proxy contract,8.5,0.49686774624663876,audited
sc_1701,unchecked_call,Medium,dYdX,Governor,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",48186.3,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in dYdX Governor contract,4.9,0.8956480636694232,audited
sc_1702,timestamp_dependence,Medium,dYdX,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",36518.84,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Proxy contract,5.2,0.21222764125184534,audited
sc_1703,dos_gas_limit,Medium,Curve,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38639.72,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve Pool contract,4.1,0.26546815169338994,audited
sc_1704,unchecked_call,Medium,MakerDAO,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",55279.18,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in MakerDAO Oracle contract,6.4,0.9012791845298265,audited
sc_1705,uninitialized_storage,High,1inch,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",39244.91,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in 1inch Staking contract,7.7,0.20388107167486944,unaudited
sc_1706,delegatecall_injection,Critical,Alpha Homora,Vault,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",64146.11,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Vault contract,9.1,0.12935958475718687,audited
sc_1707,front_running,Medium,Euler,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37621.47,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Euler ERC721 contract,6.1,0.2995524178656406,audited
sc_1708,integer_overflow,High,Curve,Bridge,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",22739.0,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Curve Bridge contract,7.3,0.38596565540349537,audited
sc_1709,reentrancy,Critical,MakerDAO,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",475153.12,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO AMM contract,10.0,0.4917695475600995,unaudited
sc_1710,uninitialized_storage,High,MakerDAO,Farming,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",291277.89,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO Farming contract,7.6,0.25980365021651886,audited
sc_1711,delegatecall_injection,Critical,Balancer,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",37491.37,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Balancer ERC1155 contract,9.4,0.42117993796378395,unaudited
sc_1712,short_address,Medium,MakerDAO,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",195256.81,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in MakerDAO Strategy contract,5.9,0.526111198739754,audited
sc_1713,tx_origin,Medium,Liquity,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16893.39,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Liquity Vault contract,6.4,0.5744245476016476,unaudited
sc_1714,access_control,High,Compound,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",304636.05,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound AMM contract,8.3,0.5783658343458257,audited
sc_1715,timestamp_dependence,Medium,MakerDAO,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",210462.13,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Farming contract,5.0,0.587144291942534,audited
sc_1716,random_weakness,High,Balancer,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",50171.66,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Balancer Timelock contract,8.2,0.5053264742603878,unaudited
sc_1717,tx_origin,Medium,Synthetix,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",59212.9,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix ERC1155 contract,6.7,0.44211183538161647,audited
sc_1718,short_address,Medium,Liquity,Timelock,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19375.31,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity Timelock contract,5.1,0.7346040914388311,unaudited
sc_1719,integer_overflow,High,Rari,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",49206.58,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Rari Proxy contract,7.9,0.39390825462188306,audited
sc_1720,unchecked_call,Medium,Aave,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",36114.85,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Aave ERC1155 contract,4.8,0.7205594583698256,audited
sc_1721,timestamp_dependence,Medium,Frax,AMM,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",55226.61,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax AMM contract,5.8,0.47500630227811413,audited
sc_1722,dos_gas_limit,Medium,PancakeSwap,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46072.06,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap Staking contract,6.0,0.22123845395369784,unaudited
sc_1723,front_running,Medium,SushiSwap,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",145181.74,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in SushiSwap AMM contract,5.6,0.5293153080588993,audited
sc_1724,access_control,High,Curve,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",78235.06,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Curve Router contract,7.7,0.6785670070278184,audited
sc_1725,reentrancy,Critical,Liquity,Governor,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",47149.48,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Liquity Governor contract,9.5,0.5835670169728865,unaudited
sc_1726,access_control,High,Balancer,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",72751.67,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Balancer ERC20 contract,7.2,0.5692955591273752,audited
sc_1727,dos_gas_limit,Medium,Synthetix,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38761.55,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Synthetix Timelock contract,4.6,0.16296215142947307,audited
sc_1728,uninitialized_storage,High,1inch,AMM,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",24129.57,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in 1inch AMM contract,8.5,0.2704198056951005,unaudited
sc_1729,timestamp_dependence,Medium,dYdX,ERC1155,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",19102.33,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX ERC1155 contract,4.6,0.8280538119032641,audited
sc_1730,access_control,High,Liquity,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",28040.66,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Liquity AMM contract,7.2,0.653704601360578,audited
sc_1731,reentrancy,Critical,Frax,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",19251.75,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Frax Pool contract,9.9,0.9012690113828445,audited
sc_1732,integer_overflow,High,Alpha Homora,Proxy,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",65084.66,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Alpha Homora Proxy contract,8.3,0.9559147929987987,unaudited
sc_1733,tx_origin,Medium,Synthetix,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",116688.94,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Synthetix ERC721 contract,5.1,0.5699145509058486,unaudited
sc_1734,integer_overflow,High,Liquity,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",62841.13,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Bridge contract,8.5,0.3443570728049777,unaudited
sc_1735,access_control,High,Aave,Oracle,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",59693.77,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Aave Oracle contract,8.0,0.14746951413853898,unaudited
sc_1736,timestamp_dependence,Medium,PancakeSwap,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",12095.19,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Proxy contract,4.3,0.4442229141623697,audited
sc_1737,dos_gas_limit,Medium,MakerDAO,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",238717.14,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in MakerDAO Governor contract,6.1,0.7101554103521643,audited
sc_1738,timestamp_dependence,Medium,Convex,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",49839.97,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Convex Strategy contract,4.3,0.46230149847834645,audited
sc_1739,uninitialized_storage,High,Synthetix,ERC20,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",98310.67,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix ERC20 contract,7.7,0.14601041038322687,audited
sc_1740,short_address,Medium,Yearn,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19814.78,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn Strategy contract,6.2,0.9343131792487319,audited
sc_1741,dos_gas_limit,Medium,dYdX,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",69691.39,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in dYdX Pool contract,5.1,0.930397674842026,audited
sc_1742,random_weakness,High,Rari,AMM,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",69134.69,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari AMM contract,7.9,0.19050473408670593,unaudited
sc_1743,access_control,High,MakerDAO,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",50020.85,13,0.26,0.8,2,0,1,1,High access_control vulnerability in MakerDAO Pool contract,8.5,0.6710115631610343,unaudited
sc_1744,access_control,High,Alpha Homora,Oracle,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",59535.61,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora Oracle contract,8.0,0.9639192650824591,audited
sc_1745,front_running,Medium,Aave,Timelock,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",106082.14,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Aave Timelock contract,5.6,0.9338787602262884,audited
sc_1746,timestamp_dependence,Medium,Aave,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",52946.91,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave Strategy contract,5.8,0.8085251939495776,audited
sc_1747,access_control,High,Liquity,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",58384.88,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Liquity ERC20 contract,7.4,0.41514935294807265,audited
sc_1748,uninitialized_storage,High,PancakeSwap,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",30382.98,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in PancakeSwap ERC721 contract,8.7,0.9380679407185943,audited
sc_1749,front_running,Medium,Balancer,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51667.65,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer Router contract,6.1,0.16386294457932765,audited
sc_1750,unchecked_call,Medium,Yearn,Oracle,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",99042.61,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn Oracle contract,5.1,0.5577841254922916,audited
sc_1751,delegatecall_injection,Critical,SushiSwap,Pool,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",218901.78,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in SushiSwap Pool contract,9.0,0.7934583730577897,audited
sc_1752,access_control,High,Rari,Factory,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",10738.87,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari Factory contract,8.2,0.6134392240819299,audited
sc_1753,random_weakness,High,Aave,Oracle,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",118204.38,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Aave Oracle contract,7.8,0.5156056957704155,audited
sc_1754,dos_gas_limit,Medium,PancakeSwap,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8917.49,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in PancakeSwap Strategy contract,4.5,0.39048593260940057,unaudited
sc_1755,short_address,Medium,Rari,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55271.7,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Rari AMM contract,4.8,0.1445121905547883,audited
sc_1756,integer_overflow,High,Convex,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",35368.11,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Convex Strategy contract,8.0,0.9591602666742214,audited
sc_1757,timestamp_dependence,Medium,Uniswap,Factory,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",189707.37,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Uniswap Factory contract,6.6,0.5230168234473792,audited
sc_1758,integer_overflow,High,MakerDAO,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",152851.08,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Router contract,7.9,0.6030696838343589,audited
sc_1759,reentrancy,Critical,PancakeSwap,Strategy,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",18469.14,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap Strategy contract,9.7,0.42910721386128825,audited
sc_1760,integer_overflow,High,Euler,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",56129.4,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Euler Proxy contract,7.5,0.12199492794157318,audited
sc_1761,unchecked_call,Medium,1inch,Farming,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",41776.56,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in 1inch Farming contract,5.6,0.1358304012295711,audited
sc_1762,short_address,Medium,Uniswap,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",146961.15,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Uniswap Staking contract,5.3,0.9630607757803831,audited
sc_1763,delegatecall_injection,Critical,Convex,Factory,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",83257.83,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex Factory contract,9.9,0.7878931962095678,audited
sc_1764,reentrancy,Critical,Alpha Homora,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",89634.77,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora Strategy contract,9.8,0.4118141705645719,audited
sc_1765,integer_overflow,High,PancakeSwap,Staking,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",53723.53,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap Staking contract,7.7,0.987073626671795,audited
sc_1766,timestamp_dependence,Medium,Convex,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",63857.82,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Convex Governor contract,6.8,0.9705663291376747,audited
sc_1767,access_control,High,Balancer,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",47417.4,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Balancer ERC20 contract,8.1,0.8758994693731582,unaudited
sc_1768,dos_gas_limit,Medium,Compound,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",162543.06,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound ERC721 contract,6.2,0.7271710056888818,audited
sc_1769,timestamp_dependence,Medium,Frax,DEX,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",72444.6,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax DEX contract,4.1,0.21165678751954603,audited
sc_1770,front_running,Medium,Curve,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",73896.55,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Curve ERC20 contract,6.6,0.20944974475365735,audited
sc_1771,dos_gas_limit,Medium,Alpha Homora,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22233.12,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Oracle contract,5.8,0.9418504499863369,unaudited
sc_1772,timestamp_dependence,Medium,Liquity,Governor,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",52248.79,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Liquity Governor contract,4.1,0.2995474592706014,unaudited
sc_1773,tx_origin,Medium,Synthetix,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",80757.27,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix Bridge contract,4.4,0.6777783116835022,audited
sc_1774,dos_gas_limit,Medium,Aave,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",295877.09,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Aave Oracle contract,6.1,0.7666556635811577,audited
sc_1775,dos_gas_limit,Medium,Convex,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44881.28,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Convex Timelock contract,6.2,0.46041775707843424,audited
sc_1776,integer_overflow,High,Euler,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",40943.62,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler Timelock contract,8.9,0.6298208920087266,unaudited
sc_1777,timestamp_dependence,Medium,Yearn,Vault,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",127635.0,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn Vault contract,5.2,0.39602945263696543,unaudited
sc_1778,tx_origin,Medium,Yearn,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",133661.04,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Yearn Bridge contract,5.4,0.8512271229684951,audited
sc_1779,access_control,High,Synthetix,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",76854.42,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Synthetix DEX contract,8.3,0.5577452743559702,unaudited
sc_1780,unchecked_call,Medium,Aave,Timelock,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",98981.49,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave Timelock contract,5.6,0.29755615557166143,audited
sc_1781,timestamp_dependence,Medium,Liquity,Oracle,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",50527.0,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity Oracle contract,6.6,0.4204213152287648,audited
sc_1782,timestamp_dependence,Medium,PancakeSwap,Lending,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",19556.3,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Lending contract,5.8,0.818087690435852,unaudited
sc_1783,front_running,Medium,Balancer,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19606.35,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Balancer Pool contract,6.6,0.9475025789605341,audited
sc_1784,dos_gas_limit,Medium,Rari,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",27567.67,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Rari Timelock contract,6.7,0.5982044064701856,audited
sc_1785,random_weakness,High,Liquity,Router,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",50599.98,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity Router contract,8.1,0.36718505157539805,audited
sc_1786,access_control,High,Rari,Router,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",16510.91,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Rari Router contract,7.9,0.4453534866893394,unaudited
sc_1787,unchecked_call,Medium,Alpha Homora,Factory,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",17498.15,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora Factory contract,6.6,0.12486916312101036,audited
sc_1788,tx_origin,Medium,Synthetix,DEX,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",109200.72,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Synthetix DEX contract,4.3,0.9499145841288467,unaudited
sc_1789,timestamp_dependence,Medium,SushiSwap,ERC1155,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",25829.1,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in SushiSwap ERC1155 contract,6.4,0.8237934692312721,audited
sc_1790,uninitialized_storage,High,MakerDAO,Farming,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",342024.79,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO Farming contract,7.6,0.853798683222567,unaudited
sc_1791,reentrancy,Critical,Synthetix,Proxy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",23714.16,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Synthetix Proxy contract,9.9,0.7716244585228087,unaudited
sc_1792,timestamp_dependence,Medium,Uniswap,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",354427.99,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Uniswap Governor contract,5.6,0.4094993325269738,unaudited
sc_1793,integer_overflow,High,SushiSwap,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",53477.12,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in SushiSwap Lending contract,8.7,0.660475173568014,audited
sc_1794,short_address,Medium,Aave,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",138877.82,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Aave Lending contract,6.2,0.30443788061971594,audited
sc_1795,dos_gas_limit,Medium,Rari,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45531.24,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Rari ERC20 contract,4.5,0.4607563495827972,audited
sc_1796,delegatecall_injection,Critical,Synthetix,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",202967.59,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Synthetix Farming contract,9.2,0.19648699030037242,unaudited
sc_1797,random_weakness,High,Rari,Lending,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",80934.06,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari Lending contract,7.2,0.6053463743182471,audited
sc_1798,delegatecall_injection,Critical,Liquity,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",36350.99,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity Lending contract,9.4,0.21591200774781155,audited
sc_1799,short_address,Medium,Aave,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",133411.96,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Aave Lending contract,5.8,0.6928796592802444,audited
sc_1800,tx_origin,Medium,Liquity,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18931.38,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity ERC1155 contract,4.4,0.467663396629896,audited
sc_1801,access_control,High,Compound,Oracle,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",273922.43,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Compound Oracle contract,7.6,0.9342048995636205,audited
sc_1802,random_weakness,High,Curve,Timelock,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",181389.34,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Curve Timelock contract,8.1,0.7786812348106549,audited
sc_1803,access_control,High,Liquity,Staking,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",39642.61,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Liquity Staking contract,8.1,0.9191645175413015,audited
sc_1804,unchecked_call,Medium,Uniswap,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",367082.38,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Uniswap Bridge contract,6.0,0.8981939364508544,unaudited
sc_1805,reentrancy,Critical,Euler,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",55444.88,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler ERC721 contract,9.5,0.4655788747093357,audited
sc_1806,access_control,High,Uniswap,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",403784.19,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Uniswap Pool contract,7.5,0.8304126251568422,audited
sc_1807,uninitialized_storage,High,Aave,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",275022.62,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Aave Timelock contract,8.1,0.4228301782304482,audited
sc_1808,timestamp_dependence,Medium,Uniswap,ERC20,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",198463.2,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Uniswap ERC20 contract,6.3,0.18140746426804816,audited
sc_1809,tx_origin,Medium,1inch,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16547.63,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch Staking contract,4.9,0.5574542285014021,audited
sc_1810,dos_gas_limit,Medium,Euler,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29816.18,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Euler Timelock contract,4.8,0.5973158791815945,audited
sc_1811,front_running,Medium,MakerDAO,DEX,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",215456.36,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in MakerDAO DEX contract,4.9,0.34818170250594893,audited
sc_1812,front_running,Medium,Yearn,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",116703.14,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Yearn Pool contract,6.5,0.9186366989883855,unaudited
sc_1813,reentrancy,Critical,Alpha Homora,Router,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",40371.84,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora Router contract,9.1,0.8267986765189977,unaudited
sc_1814,dos_gas_limit,Medium,Euler,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53556.18,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Euler ERC721 contract,6.5,0.837899157463718,audited
sc_1815,uninitialized_storage,High,Curve,Factory,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",136344.72,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Curve Factory contract,7.2,0.5572346834338975,audited
sc_1816,random_weakness,High,MakerDAO,ERC721,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",240114.66,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO ERC721 contract,8.2,0.8952460086658799,audited
sc_1817,short_address,Medium,Alpha Homora,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",11090.78,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Alpha Homora Oracle contract,4.3,0.827431248556189,audited
sc_1818,front_running,Medium,SushiSwap,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29945.56,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in SushiSwap Router contract,4.6,0.6573550519559932,audited
sc_1819,integer_overflow,High,Euler,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",22687.28,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler Pool contract,8.6,0.7622451959917426,audited
sc_1820,dos_gas_limit,Medium,Rari,Vault,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36556.3,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Rari Vault contract,5.1,0.79847995424353,audited
sc_1821,uninitialized_storage,High,Liquity,Proxy,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",9858.18,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Liquity Proxy contract,7.9,0.7383293962950818,audited
sc_1822,reentrancy,Critical,Rari,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",48050.35,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Rari Factory contract,10.0,0.2786577943627456,unaudited
sc_1823,reentrancy,Critical,Frax,Lending,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",31863.33,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Frax Lending contract,9.9,0.38417496139062135,audited
sc_1824,short_address,Medium,Convex,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34663.74,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex Governor contract,6.8,0.17640056102098778,unaudited
sc_1825,unchecked_call,Medium,Synthetix,Proxy,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",26145.86,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Synthetix Proxy contract,6.7,0.9850334370568227,audited
sc_1826,delegatecall_injection,Critical,Curve,ERC1155,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",155278.25,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Curve ERC1155 contract,9.2,0.6888673069908599,audited
sc_1827,short_address,Medium,1inch,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7217.16,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in 1inch Strategy contract,6.5,0.3550836961837719,audited
sc_1828,front_running,Medium,Liquity,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",26495.11,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Liquity Router contract,4.6,0.9794842186125363,unaudited
sc_1829,random_weakness,High,Rari,Lending,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",17461.38,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari Lending contract,7.9,0.34098792555951496,audited
sc_1830,integer_overflow,High,PancakeSwap,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",12916.54,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap AMM contract,7.4,0.8666257811204927,unaudited
sc_1831,dos_gas_limit,Medium,Frax,DEX,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29510.09,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Frax DEX contract,6.3,0.8146602934712958,audited
sc_1832,integer_overflow,High,Balancer,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",39853.59,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Balancer Oracle contract,7.7,0.6797335863789052,audited
sc_1833,dos_gas_limit,Medium,Compound,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33260.24,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Vault contract,4.1,0.2429472334795828,audited
sc_1834,integer_overflow,High,SushiSwap,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",83242.59,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap Farming contract,8.5,0.9853984785259227,audited
sc_1835,random_weakness,High,Alpha Homora,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",91366.5,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Alpha Homora Bridge contract,7.2,0.22119418404715332,audited
sc_1836,timestamp_dependence,Medium,Synthetix,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",118286.63,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Synthetix Pool contract,6.7,0.14725585312244183,unaudited
sc_1837,unchecked_call,Medium,Compound,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",272363.72,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Compound ERC20 contract,4.9,0.2693464709163167,audited
sc_1838,integer_overflow,High,1inch,Lending,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",9419.55,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in 1inch Lending contract,8.7,0.46713988717053523,audited
sc_1839,unchecked_call,Medium,Curve,ERC1155,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",20259.96,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve ERC1155 contract,5.5,0.6734733337719797,audited
sc_1840,tx_origin,Medium,Balancer,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10348.71,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Balancer DEX contract,5.5,0.46855124927324776,unaudited
sc_1841,reentrancy,Critical,Rari,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",49849.53,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Rari ERC721 contract,9.7,0.14912493949729605,audited
sc_1842,dos_gas_limit,Medium,dYdX,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16449.47,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in dYdX ERC721 contract,5.7,0.7942428971016,audited
sc_1843,access_control,High,1inch,DEX,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",49592.6,13,0.26,0.8,2,0,1,2,High access_control vulnerability in 1inch DEX contract,7.0,0.9302750103196827,audited
sc_1844,uninitialized_storage,High,Curve,Governor,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",222641.11,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve Governor contract,7.3,0.18103836042090626,unaudited
sc_1845,integer_overflow,High,Yearn,Pool,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",118688.32,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Yearn Pool contract,7.3,0.21809837278761898,audited
sc_1846,integer_overflow,High,Compound,Farming,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",78817.31,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Compound Farming contract,7.6,0.4337381597473833,unaudited
sc_1847,short_address,Medium,1inch,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",43685.81,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in 1inch Router contract,5.6,0.8881640453319195,audited
sc_1848,uninitialized_storage,High,1inch,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",77456.95,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in 1inch Pool contract,8.7,0.2719818334492521,unaudited
sc_1849,uninitialized_storage,High,Yearn,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",42423.17,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Yearn Staking contract,7.9,0.293293133234938,unaudited
sc_1850,short_address,Medium,MakerDAO,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",274561.43,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO Vault contract,4.1,0.9161111057504595,audited
sc_1851,dos_gas_limit,Medium,dYdX,Proxy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23164.14,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in dYdX Proxy contract,5.9,0.8995463340962712,audited
sc_1852,timestamp_dependence,Medium,dYdX,Factory,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",35990.0,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Factory contract,6.8,0.7930638296744029,audited
sc_1853,unchecked_call,Medium,MakerDAO,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",66205.46,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in MakerDAO Lending contract,6.1,0.2824449387299225,unaudited
sc_1854,access_control,High,SushiSwap,Governor,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",187339.31,13,0.26,0.8,2,0,1,1,High access_control vulnerability in SushiSwap Governor contract,7.5,0.9335955405944443,audited
sc_1855,tx_origin,Medium,Yearn,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",73996.18,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Farming contract,4.7,0.9273722426045886,audited
sc_1856,tx_origin,Medium,SushiSwap,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",63085.42,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in SushiSwap Timelock contract,6.5,0.5037094216135594,unaudited
sc_1857,front_running,Medium,Yearn,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47986.07,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Yearn Timelock contract,6.6,0.3256399466749447,audited
sc_1858,short_address,Medium,dYdX,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",5651.43,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in dYdX Factory contract,4.5,0.5537977081520807,audited
sc_1859,timestamp_dependence,Medium,PancakeSwap,Farming,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",8824.54,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Farming contract,4.6,0.1858782796586612,unaudited
sc_1860,front_running,Medium,Convex,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57190.12,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Convex Farming contract,6.4,0.9388686894668301,unaudited
sc_1861,dos_gas_limit,Medium,Yearn,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",148484.96,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Yearn Factory contract,4.9,0.6740913760633264,unaudited
sc_1862,dos_gas_limit,Medium,Rari,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",11471.13,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Rari Router contract,4.7,0.561041658987005,audited
sc_1863,reentrancy,Critical,Alpha Homora,Pool,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",100920.63,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora Pool contract,9.9,0.47609700574983915,unaudited
sc_1864,reentrancy,Critical,Uniswap,Vault,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",231454.39,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Uniswap Vault contract,9.5,0.12282146716978859,audited
sc_1865,timestamp_dependence,Medium,Curve,Factory,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",30282.43,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Curve Factory contract,5.9,0.5576223189503501,audited
sc_1866,random_weakness,High,Yearn,DEX,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",124723.53,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn DEX contract,8.8,0.7871201490845124,unaudited
sc_1867,integer_overflow,High,Curve,Governor,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",42736.46,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Curve Governor contract,8.2,0.6822603099969646,audited
sc_1868,delegatecall_injection,Critical,Euler,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",46764.03,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler Strategy contract,9.8,0.2096171974855951,audited
sc_1869,access_control,High,Curve,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",181156.27,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Curve Governor contract,7.6,0.7484422838325427,audited
sc_1870,delegatecall_injection,Critical,Compound,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",561323.97,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Compound ERC1155 contract,9.6,0.38907940146910824,audited
sc_1871,short_address,Medium,MakerDAO,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",250800.31,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO ERC1155 contract,6.0,0.8842991867135082,audited
sc_1872,access_control,High,Aave,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",334779.15,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Aave Vault contract,8.7,0.2368793659578181,unaudited
sc_1873,random_weakness,High,Alpha Homora,DEX,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",50082.41,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Alpha Homora DEX contract,8.5,0.20300102158788152,unaudited
sc_1874,uninitialized_storage,High,MakerDAO,Oracle,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",269011.79,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in MakerDAO Oracle contract,8.4,0.7454413544539116,audited
sc_1875,access_control,High,1inch,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",96926.03,13,0.26,0.8,2,1,1,1,High access_control vulnerability in 1inch Farming contract,7.7,0.5921548829252353,unaudited
sc_1876,timestamp_dependence,Medium,Alpha Homora,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",24945.67,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Alpha Homora AMM contract,5.1,0.9535964838658061,unaudited
sc_1877,random_weakness,High,Uniswap,Pool,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",308811.73,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Uniswap Pool contract,8.7,0.8466592387612134,unaudited
sc_1878,timestamp_dependence,Medium,PancakeSwap,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",41051.46,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap DEX contract,4.6,0.8770183527227667,audited
sc_1879,unchecked_call,Medium,Frax,Lending,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",30860.98,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Frax Lending contract,5.7,0.40839516112635976,audited
sc_1880,dos_gas_limit,Medium,SushiSwap,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",90840.77,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in SushiSwap Vault contract,5.7,0.322689246090665,audited
sc_1881,reentrancy,Critical,Compound,ERC721,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",386421.87,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Compound ERC721 contract,9.8,0.5986866429500518,unaudited
sc_1882,access_control,High,PancakeSwap,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",80053.37,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap ERC20 contract,8.1,0.9696061468669206,audited
sc_1883,integer_overflow,High,MakerDAO,Strategy,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",196327.39,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Strategy contract,7.1,0.4392934544727204,audited
sc_1884,timestamp_dependence,Medium,Uniswap,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",127576.47,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Uniswap Timelock contract,6.5,0.22678643848320262,audited
sc_1885,random_weakness,High,SushiSwap,Vault,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",95499.46,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in SushiSwap Vault contract,8.6,0.39372753248226255,unaudited
sc_1886,integer_overflow,High,PancakeSwap,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",36847.0,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap Factory contract,8.8,0.5093271779466892,audited
sc_1887,random_weakness,High,Alpha Homora,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",67715.25,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Alpha Homora Pool contract,7.5,0.8729162241319012,audited
sc_1888,reentrancy,Critical,Rari,Farming,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",41663.3,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Rari Farming contract,9.7,0.12940762857753504,unaudited
sc_1889,reentrancy,Critical,Aave,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",282926.66,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Timelock contract,9.8,0.1604961756061109,audited
sc_1890,delegatecall_injection,Critical,Convex,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",80122.19,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Convex ERC20 contract,9.8,0.5233192119764285,unaudited
sc_1891,unchecked_call,Medium,Convex,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",13869.89,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Convex Farming contract,4.2,0.7983144483591814,audited
sc_1892,integer_overflow,High,Aave,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",274517.57,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Aave ERC1155 contract,8.0,0.7504113137420761,audited
sc_1893,tx_origin,Medium,Synthetix,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",132346.6,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix Router contract,5.5,0.9919458871903248,audited
sc_1894,reentrancy,Critical,Uniswap,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",482659.07,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Uniswap Bridge contract,9.4,0.48319662458020884,audited
sc_1895,unchecked_call,Medium,Yearn,Lending,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",40449.57,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn Lending contract,4.9,0.4547099092183834,audited
sc_1896,dos_gas_limit,Medium,MakerDAO,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",176766.07,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in MakerDAO ERC1155 contract,4.4,0.21404947532781116,audited
sc_1897,integer_overflow,High,Aave,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",440729.33,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Aave Pool contract,8.5,0.5662676982885464,audited
sc_1898,integer_overflow,High,PancakeSwap,ERC20,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",32844.31,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap ERC20 contract,8.5,0.5680531349599678,audited
sc_1899,reentrancy,Critical,PancakeSwap,ERC721,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",86094.93,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in PancakeSwap ERC721 contract,9.8,0.5259597188795209,audited
sc_1900,uninitialized_storage,High,dYdX,AMM,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",14108.81,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in dYdX AMM contract,7.1,0.6961127679394725,unaudited
sc_1901,integer_overflow,High,Convex,ERC1155,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",19455.17,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Convex ERC1155 contract,8.1,0.18341156386532043,audited
sc_1902,timestamp_dependence,Medium,Alpha Homora,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",21477.3,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Alpha Homora Factory contract,4.7,0.9278802417943801,audited
sc_1903,front_running,Medium,1inch,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",6311.06,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in 1inch AMM contract,4.8,0.3132005565174294,audited
sc_1904,access_control,High,Balancer,Staking,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",26994.57,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Balancer Staking contract,7.8,0.43017274775752223,audited
sc_1905,integer_overflow,High,Liquity,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",44825.72,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Liquity Router contract,8.6,0.7272139539622231,audited
sc_1906,unchecked_call,Medium,MakerDAO,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",52981.51,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in MakerDAO Vault contract,4.6,0.7007362152832745,audited
sc_1907,unchecked_call,Medium,Curve,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",115138.69,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Curve DEX contract,6.5,0.2712164580301013,audited
sc_1908,dos_gas_limit,Medium,Yearn,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",130545.35,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Yearn Governor contract,5.2,0.20034540856520988,audited
sc_1909,short_address,Medium,Compound,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",129199.31,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Compound Factory contract,4.8,0.5906296006586526,audited
sc_1910,timestamp_dependence,Medium,Rari,Staking,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",38799.7,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Rari Staking contract,4.2,0.16719579926701933,audited
sc_1911,dos_gas_limit,Medium,MakerDAO,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",219048.58,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in MakerDAO Router contract,6.9,0.9550765839507237,audited
sc_1912,reentrancy,Critical,SushiSwap,Strategy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",122292.46,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in SushiSwap Strategy contract,9.8,0.3619937233147764,audited
sc_1913,short_address,Medium,Frax,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55163.37,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Frax Lending contract,4.2,0.9688586494847928,unaudited
sc_1914,front_running,Medium,Frax,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34265.22,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Frax Bridge contract,6.6,0.8050231121966188,audited
sc_1915,short_address,Medium,Uniswap,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",202756.07,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Uniswap Timelock contract,5.1,0.7882387907645949,audited
sc_1916,uninitialized_storage,High,Balancer,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",59008.14,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Balancer Vault contract,7.2,0.45176659488735993,audited
sc_1917,short_address,Medium,1inch,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56465.11,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in 1inch AMM contract,6.1,0.46589955834718366,unaudited
sc_1918,unchecked_call,Medium,Rari,ERC20,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",13053.73,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Rari ERC20 contract,5.5,0.6150336677178838,unaudited
sc_1919,access_control,High,SushiSwap,Pool,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",57629.4,13,0.26,0.8,2,0,1,1,High access_control vulnerability in SushiSwap Pool contract,7.9,0.8690972222931591,unaudited
sc_1920,random_weakness,High,MakerDAO,ERC1155,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",447941.98,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in MakerDAO ERC1155 contract,8.8,0.6658897687995978,audited
sc_1921,access_control,High,Euler,ERC721,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",69831.17,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Euler ERC721 contract,8.4,0.6965907082741685,audited
sc_1922,reentrancy,Critical,PancakeSwap,Vault,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",80023.12,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap Vault contract,10.0,0.6974904561617669,audited
sc_1923,uninitialized_storage,High,Compound,ERC1155,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",188836.72,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Compound ERC1155 contract,7.9,0.45444192804181516,unaudited
sc_1924,reentrancy,Critical,Alpha Homora,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",83454.81,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora Bridge contract,9.9,0.8984771999492044,audited
sc_1925,front_running,Medium,Yearn,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",111942.77,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Yearn Proxy contract,6.8,0.15124808897767675,unaudited
sc_1926,unchecked_call,Medium,Synthetix,ERC721,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",111594.06,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Synthetix ERC721 contract,4.7,0.1626674650288733,audited
sc_1927,reentrancy,Critical,Uniswap,Bridge,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",498199.94,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Uniswap Bridge contract,9.3,0.662391401828391,audited
sc_1928,tx_origin,Medium,Frax,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16671.37,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax ERC721 contract,4.4,0.7511727220888895,audited
sc_1929,uninitialized_storage,High,Synthetix,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",36651.96,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Synthetix Router contract,7.1,0.8319161427668137,audited
sc_1930,access_control,High,Compound,Proxy,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",369851.5,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound Proxy contract,8.8,0.20176735079242844,unaudited
sc_1931,dos_gas_limit,Medium,Liquity,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",77515.65,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Liquity Factory contract,5.8,0.933921278344977,audited
sc_1932,random_weakness,High,Compound,Oracle,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",97595.61,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Oracle contract,8.4,0.219708555774728,audited
sc_1933,integer_overflow,High,MakerDAO,Proxy,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",209225.65,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in MakerDAO Proxy contract,7.7,0.47359768912728817,audited
sc_1934,tx_origin,Medium,dYdX,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30010.94,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX AMM contract,4.2,0.8039842929227864,audited
sc_1935,reentrancy,Critical,Yearn,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",214711.85,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Yearn AMM contract,9.2,0.952819146525408,audited
sc_1936,delegatecall_injection,Critical,Convex,Factory,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",100474.5,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex Factory contract,9.8,0.1300444577567199,audited
sc_1937,tx_origin,Medium,Compound,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",112643.17,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Compound AMM contract,6.5,0.7904942109013734,audited
sc_1938,random_weakness,High,PancakeSwap,Vault,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",71626.33,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap Vault contract,7.2,0.2529470983471986,audited
sc_1939,tx_origin,Medium,Curve,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",141023.01,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Curve Strategy contract,6.1,0.9979648918804741,audited
sc_1940,uninitialized_storage,High,PancakeSwap,Timelock,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",32263.17,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in PancakeSwap Timelock contract,7.9,0.17519158454445244,audited
sc_1941,reentrancy,Critical,Synthetix,Pool,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",112040.53,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Synthetix Pool contract,9.9,0.14883605756017063,audited
sc_1942,integer_overflow,High,Synthetix,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",47680.41,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Vault contract,7.1,0.12058132953579749,audited
sc_1943,integer_overflow,High,Alpha Homora,Timelock,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",85036.76,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora Timelock contract,8.4,0.29585429569178545,unaudited
sc_1944,reentrancy,Critical,Yearn,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",234820.37,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Yearn Lending contract,9.6,0.3678602741115059,audited
sc_1945,timestamp_dependence,Medium,Yearn,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",51856.71,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn Router contract,4.1,0.6615179718666095,audited
sc_1946,short_address,Medium,Curve,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",60289.88,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve Lending contract,6.7,0.8551437296280623,audited
sc_1947,delegatecall_injection,Critical,Curve,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",38900.89,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Curve Factory contract,9.4,0.5634228245328818,audited
sc_1948,access_control,High,Convex,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",52704.71,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Convex Proxy contract,7.3,0.9335612493181029,audited
sc_1949,reentrancy,Critical,Rari,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",44605.69,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Rari AMM contract,9.5,0.4283927978364864,audited
sc_1950,front_running,Medium,Alpha Homora,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25903.4,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Alpha Homora Strategy contract,5.8,0.23530630234180813,unaudited
sc_1951,access_control,High,Alpha Homora,Proxy,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",62150.87,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora Proxy contract,8.2,0.8815198800547944,audited
sc_1952,delegatecall_injection,Critical,Frax,Farming,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",53210.01,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax Farming contract,9.9,0.9851072670072035,audited
sc_1953,front_running,Medium,Synthetix,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",107821.92,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Synthetix Vault contract,5.2,0.8460135381451755,audited
sc_1954,dos_gas_limit,Medium,Rari,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34906.52,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Rari Oracle contract,6.6,0.3783766915511291,audited
sc_1955,access_control,High,Alpha Homora,ERC20,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",53041.28,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora ERC20 contract,7.5,0.5078859741662408,audited
sc_1956,front_running,Medium,Compound,ERC721,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",253842.25,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Compound ERC721 contract,4.3,0.6212549822339527,audited
sc_1957,dos_gas_limit,Medium,Balancer,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42111.08,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Balancer Pool contract,6.1,0.8337878248326003,audited
sc_1958,delegatecall_injection,Critical,Balancer,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",26240.89,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Balancer ERC20 contract,9.8,0.88947276354137,unaudited
sc_1959,dos_gas_limit,Medium,Yearn,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",72822.31,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn ERC1155 contract,6.6,0.745847142127055,unaudited
sc_1960,access_control,High,Uniswap,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",305791.89,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Uniswap Vault contract,7.2,0.8203319743952427,audited
sc_1961,short_address,Medium,Convex,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46367.05,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex Factory contract,6.8,0.36321336803692694,audited
sc_1962,dos_gas_limit,Medium,Convex,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8161.94,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Convex ERC20 contract,4.2,0.8882856236447059,audited
sc_1963,integer_overflow,High,Curve,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",187820.3,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Curve ERC20 contract,8.1,0.7439863467323355,unaudited
sc_1964,access_control,High,Liquity,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",30116.55,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Liquity Governor contract,8.2,0.30045508529447473,audited
sc_1965,short_address,Medium,Convex,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14538.58,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex Proxy contract,5.9,0.47603344444051576,audited
sc_1966,reentrancy,Critical,Yearn,Farming,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",190853.09,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Yearn Farming contract,9.1,0.48450052227852924,audited
sc_1967,dos_gas_limit,Medium,Aave,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",127334.18,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Aave Strategy contract,5.0,0.2379410719729695,audited
sc_1968,front_running,Medium,SushiSwap,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31843.0,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in SushiSwap Oracle contract,6.4,0.3183685894812206,unaudited
sc_1969,short_address,Medium,Aave,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",66195.52,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Aave Factory contract,6.2,0.7809623470278861,audited
sc_1970,unchecked_call,Medium,Curve,Strategy,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",101831.31,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Curve Strategy contract,5.1,0.5382428051754669,audited
sc_1971,tx_origin,Medium,SushiSwap,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57825.83,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in SushiSwap Bridge contract,5.9,0.7808533301569424,audited
sc_1972,random_weakness,High,Uniswap,Staking,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",110022.0,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Uniswap Staking contract,7.8,0.9633679675889854,unaudited
sc_1973,access_control,High,Balancer,Bridge,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",49897.7,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Bridge contract,7.6,0.8984945653020187,audited
sc_1974,uninitialized_storage,High,Synthetix,Pool,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",39308.55,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix Pool contract,8.4,0.17062778612151347,audited
sc_1975,uninitialized_storage,High,Compound,Router,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",232427.8,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Compound Router contract,8.4,0.16296820980908427,audited
sc_1976,random_weakness,High,Synthetix,ERC1155,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",32758.42,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Synthetix ERC1155 contract,7.2,0.10872474997472753,unaudited
sc_1977,dos_gas_limit,Medium,Yearn,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",100556.78,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn ERC721 contract,5.0,0.46558208911386323,audited
sc_1978,short_address,Medium,SushiSwap,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",102987.23,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in SushiSwap Strategy contract,4.9,0.6165113574970985,audited
sc_1979,timestamp_dependence,Medium,Frax,Vault,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",53285.54,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Frax Vault contract,4.5,0.4093704678934361,unaudited
sc_1980,dos_gas_limit,Medium,Yearn,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",65881.7,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn ERC721 contract,5.1,0.438088134007532,unaudited
sc_1981,random_weakness,High,Uniswap,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",209841.14,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Uniswap Lending contract,7.8,0.3955255359440474,audited
sc_1982,front_running,Medium,Liquity,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14011.05,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Liquity Farming contract,6.4,0.725472689665575,audited
sc_1983,short_address,Medium,MakerDAO,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57742.69,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in MakerDAO Staking contract,5.5,0.9063305612260077,audited
sc_1984,delegatecall_injection,Critical,Alpha Homora,Governor,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",105721.72,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Governor contract,9.7,0.5958070345608749,audited
sc_1985,access_control,High,Compound,Proxy,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",243441.61,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound Proxy contract,8.4,0.45194974228280815,audited
sc_1986,delegatecall_injection,Critical,Synthetix,AMM,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",158218.53,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix AMM contract,9.7,0.35820079746728395,unaudited
sc_1987,reentrancy,Critical,PancakeSwap,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",70674.42,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in PancakeSwap Bridge contract,9.3,0.9261383085682021,audited
sc_1988,unchecked_call,Medium,Balancer,ERC721,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",29352.76,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer ERC721 contract,4.8,0.33249591034861875,audited
sc_1989,delegatecall_injection,Critical,Uniswap,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",70900.03,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Uniswap Factory contract,9.4,0.23283339226631117,audited
sc_1990,uninitialized_storage,High,Alpha Homora,ERC1155,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",66592.11,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Alpha Homora ERC1155 contract,8.1,0.10353145930963438,audited
sc_1991,short_address,Medium,Yearn,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",71208.28,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn ERC1155 contract,6.2,0.9552379817477546,unaudited
sc_1992,timestamp_dependence,Medium,PancakeSwap,Pool,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",8535.3,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Pool contract,6.5,0.5946597102018956,unaudited
sc_1993,tx_origin,Medium,Synthetix,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40042.54,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Synthetix AMM contract,4.3,0.3255996383143097,audited
sc_1994,random_weakness,High,Balancer,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",73505.37,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Balancer Farming contract,7.6,0.38172673532150436,unaudited
sc_1995,unchecked_call,Medium,Convex,Governor,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",13610.17,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Convex Governor contract,5.0,0.8579884540452988,audited
sc_1996,front_running,Medium,1inch,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38258.52,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch Oracle contract,4.1,0.7058919970655473,unaudited
sc_1997,uninitialized_storage,High,Yearn,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",61967.92,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Yearn Farming contract,8.7,0.26978193256968314,audited
sc_1998,unchecked_call,Medium,Euler,Strategy,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",8502.59,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Euler Strategy contract,6.0,0.27168263743181653,audited
sc_1999,integer_overflow,High,Yearn,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",29167.2,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Yearn ERC20 contract,7.9,0.28374097520425323,audited
sc_2000,tx_origin,Medium,Aave,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64093.89,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave Farming contract,6.3,0.32948268456958063,audited
sc_2001,front_running,Medium,Yearn,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52341.56,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Yearn DEX contract,4.9,0.9808274326665586,audited
sc_2002,random_weakness,High,MakerDAO,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",64633.78,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in MakerDAO Router contract,7.3,0.6991790612592427,audited
sc_2003,access_control,High,Frax,Vault,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",34686.37,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Frax Vault contract,7.1,0.5600656404583579,unaudited
sc_2004,timestamp_dependence,Medium,Aave,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",373732.81,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Aave ERC721 contract,5.3,0.9594049461602215,audited
sc_2005,delegatecall_injection,Critical,Rari,Farming,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",29687.63,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Rari Farming contract,9.0,0.9978374407844217,audited
sc_2006,tx_origin,Medium,Uniswap,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38949.28,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Uniswap Staking contract,4.1,0.8047468565821274,audited
sc_2007,tx_origin,Medium,Frax,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14031.19,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax ERC20 contract,4.4,0.8048832897847017,audited
sc_2008,timestamp_dependence,Medium,Aave,Timelock,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",40908.81,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Aave Timelock contract,4.1,0.32102884506025214,audited
sc_2009,access_control,High,Yearn,Governor,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",215301.89,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn Governor contract,8.4,0.7699137440284761,audited
sc_2010,delegatecall_injection,Critical,PancakeSwap,Router,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",42404.56,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Router contract,9.2,0.5183495669443864,unaudited
sc_2011,dos_gas_limit,Medium,Liquity,Bridge,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10054.19,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Liquity Bridge contract,6.4,0.41782316943687825,audited
sc_2012,unchecked_call,Medium,PancakeSwap,ERC721,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",24393.37,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in PancakeSwap ERC721 contract,5.4,0.8829811352956108,audited
sc_2013,dos_gas_limit,Medium,Compound,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50365.71,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Compound AMM contract,6.8,0.44220380169484685,audited
sc_2014,uninitialized_storage,High,Frax,AMM,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",65610.67,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Frax AMM contract,8.2,0.3007768983300913,unaudited
sc_2015,timestamp_dependence,Medium,Liquity,Staking,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",33111.24,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Liquity Staking contract,4.2,0.9877080651054571,audited
sc_2016,delegatecall_injection,Critical,Frax,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",20157.4,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Frax AMM contract,9.7,0.9878209128653461,audited
sc_2017,integer_overflow,High,SushiSwap,Lending,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",234416.12,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in SushiSwap Lending contract,8.6,0.9071172603477574,audited
sc_2018,short_address,Medium,Compound,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",169799.7,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Compound Lending contract,4.6,0.28361243964420757,audited
sc_2019,dos_gas_limit,Medium,Synthetix,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",163289.91,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Synthetix ERC20 contract,6.6,0.7475736458776442,audited
sc_2020,dos_gas_limit,Medium,Aave,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",261332.06,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Timelock contract,6.5,0.425757970649308,audited
sc_2021,timestamp_dependence,Medium,Compound,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",257565.3,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Compound Strategy contract,5.2,0.938125552760983,audited
sc_2022,timestamp_dependence,Medium,Balancer,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",22096.94,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Balancer Vault contract,6.3,0.7826970659230599,audited
sc_2023,delegatecall_injection,Critical,Yearn,DEX,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",287676.95,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Yearn DEX contract,9.8,0.6603511198506415,audited
sc_2024,front_running,Medium,MakerDAO,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",289638.5,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in MakerDAO ERC721 contract,4.0,0.7466516038379919,audited
sc_2025,delegatecall_injection,Critical,Frax,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",48784.15,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Frax Timelock contract,10.0,0.3795390188889187,unaudited
sc_2026,reentrancy,Critical,Synthetix,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",242114.54,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Synthetix Router contract,9.3,0.8469004261884288,audited
sc_2027,delegatecall_injection,Critical,Convex,Lending,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",76135.74,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Convex Lending contract,9.1,0.32365692292797454,audited
sc_2028,dos_gas_limit,Medium,Aave,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",151643.03,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Aave Farming contract,6.1,0.4638630906285073,audited
sc_2029,delegatecall_injection,Critical,1inch,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",23304.81,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in 1inch DEX contract,9.6,0.3813516050150154,unaudited
sc_2030,dos_gas_limit,Medium,1inch,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55495.8,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in 1inch Lending contract,5.4,0.4465043567577264,audited
sc_2031,front_running,Medium,Rari,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52339.44,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Rari ERC20 contract,4.1,0.9552702219008343,audited
sc_2032,short_address,Medium,Frax,ERC20,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15565.67,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Frax ERC20 contract,4.4,0.1238267144129649,audited
sc_2033,unchecked_call,Medium,SushiSwap,DEX,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",93988.15,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in SushiSwap DEX contract,5.3,0.3421957609291908,audited
sc_2034,access_control,High,1inch,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",28390.37,13,0.26,0.8,2,1,1,1,High access_control vulnerability in 1inch Vault contract,7.2,0.6888738904085181,audited
sc_2035,uninitialized_storage,High,1inch,Vault,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",12884.03,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in 1inch Vault contract,8.9,0.536425539891117,audited
sc_2036,access_control,High,Yearn,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",230248.15,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Yearn ERC721 contract,7.1,0.5568626323332787,audited
sc_2037,unchecked_call,Medium,Synthetix,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",26958.41,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Synthetix ERC1155 contract,5.8,0.36882633822124,audited
sc_2038,uninitialized_storage,High,PancakeSwap,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",38578.65,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in PancakeSwap Factory contract,7.2,0.8966026812259538,audited
sc_2039,tx_origin,Medium,Alpha Homora,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33425.86,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora Router contract,4.6,0.18884945200216136,unaudited
sc_2040,reentrancy,Critical,Convex,ERC20,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",15848.81,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex ERC20 contract,9.6,0.2661109650519229,unaudited
sc_2041,tx_origin,Medium,1inch,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12483.3,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch Pool contract,5.0,0.9291662539990116,audited
sc_2042,front_running,Medium,dYdX,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38372.87,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in dYdX Router contract,5.3,0.9389478070124114,audited
sc_2043,unchecked_call,Medium,SushiSwap,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",41919.1,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in SushiSwap Vault contract,4.6,0.27708184640367406,unaudited
sc_2044,random_weakness,High,Rari,Strategy,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",83049.36,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari Strategy contract,7.3,0.7046916773856863,audited
sc_2045,tx_origin,Medium,MakerDAO,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45977.7,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO Oracle contract,6.8,0.9334624511893566,audited
sc_2046,uninitialized_storage,High,dYdX,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",11863.28,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX Bridge contract,7.7,0.38274967091115286,unaudited
sc_2047,delegatecall_injection,Critical,MakerDAO,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",343964.76,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in MakerDAO Governor contract,9.0,0.47782892256608955,audited
sc_2048,unchecked_call,Medium,MakerDAO,Pool,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",145181.32,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in MakerDAO Pool contract,5.2,0.9722564143574206,audited
sc_2049,tx_origin,Medium,Compound,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",235850.67,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Compound Bridge contract,4.1,0.7505246501762111,unaudited
sc_2050,reentrancy,Critical,Compound,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",405199.13,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Compound Farming contract,9.8,0.3257863827477211,audited
sc_2051,uninitialized_storage,High,dYdX,Timelock,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",50355.97,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in dYdX Timelock contract,8.9,0.6324444678433261,unaudited
sc_2052,access_control,High,1inch,ERC721,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",42349.96,13,0.26,0.8,2,0,1,2,High access_control vulnerability in 1inch ERC721 contract,8.7,0.4866360789670078,audited
sc_2053,dos_gas_limit,Medium,Balancer,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25794.15,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Balancer Staking contract,4.7,0.7634182268137673,unaudited
sc_2054,timestamp_dependence,Medium,Convex,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",36553.11,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Convex Bridge contract,6.4,0.35003080632620387,audited
sc_2055,short_address,Medium,dYdX,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25963.47,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in dYdX Oracle contract,4.8,0.6385151802796617,audited
sc_2056,dos_gas_limit,Medium,MakerDAO,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",278021.26,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO Staking contract,4.6,0.13428115947441174,audited
sc_2057,access_control,High,Aave,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",47578.75,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Aave Proxy contract,8.7,0.5466809439958769,audited
sc_2058,delegatecall_injection,Critical,Aave,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",276316.02,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Aave Strategy contract,9.7,0.9197007421283702,unaudited
sc_2059,timestamp_dependence,Medium,MakerDAO,Pool,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",180045.77,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Pool contract,6.5,0.2454290177639724,audited
sc_2060,timestamp_dependence,Medium,Euler,Factory,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",22728.37,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Euler Factory contract,5.3,0.12912937902382052,audited
sc_2061,uninitialized_storage,High,Alpha Homora,ERC1155,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",80745.92,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Alpha Homora ERC1155 contract,8.6,0.23341849847406337,audited
sc_2062,front_running,Medium,PancakeSwap,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8649.05,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in PancakeSwap ERC721 contract,4.4,0.41617310781174954,audited
sc_2063,uninitialized_storage,High,Curve,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",66779.19,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve Lending contract,8.7,0.2234393844305526,audited
sc_2064,random_weakness,High,Euler,Timelock,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",56808.89,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Euler Timelock contract,7.5,0.29846703235062266,unaudited
sc_2065,integer_overflow,High,Euler,DEX,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",16586.24,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler DEX contract,8.6,0.6080874563053217,audited
sc_2066,short_address,Medium,Aave,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",117085.53,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Aave Proxy contract,5.9,0.230471492143973,unaudited
sc_2067,dos_gas_limit,Medium,dYdX,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39798.58,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in dYdX Vault contract,6.2,0.866616359412802,unaudited
sc_2068,random_weakness,High,Convex,ERC1155,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",76255.39,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Convex ERC1155 contract,7.7,0.7987327737894295,audited
sc_2069,dos_gas_limit,Medium,1inch,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16251.03,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in 1inch Bridge contract,5.5,0.2855755275770432,audited
sc_2070,random_weakness,High,1inch,ERC721,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",65175.19,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in 1inch ERC721 contract,8.2,0.8787217862428001,unaudited
sc_2071,integer_overflow,High,Compound,Farming,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",463682.89,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Compound Farming contract,7.6,0.4649254381993967,audited
sc_2072,access_control,High,Balancer,ERC20,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",26861.72,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Balancer ERC20 contract,7.8,0.28931263457660505,audited
sc_2073,access_control,High,Yearn,Router,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",28001.08,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn Router contract,8.5,0.5776259586065661,audited
sc_2074,dos_gas_limit,Medium,1inch,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21687.23,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in 1inch Router contract,5.8,0.9134059668713898,unaudited
sc_2075,delegatecall_injection,Critical,Rari,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",35067.58,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Rari DEX contract,9.3,0.5514864434182574,audited
sc_2076,tx_origin,Medium,Frax,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10230.6,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Farming contract,5.0,0.9684853279382474,unaudited
sc_2077,unchecked_call,Medium,Yearn,Farming,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",127851.29,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Yearn Farming contract,4.9,0.3588931690306397,audited
sc_2078,front_running,Medium,Synthetix,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",142272.31,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Synthetix Governor contract,5.1,0.7216663207132842,audited
sc_2079,access_control,High,Convex,ERC1155,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",55129.21,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Convex ERC1155 contract,8.0,0.40494217398198173,audited
sc_2080,timestamp_dependence,Medium,Uniswap,Router,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",104232.82,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Uniswap Router contract,4.5,0.18163323612077287,audited
sc_2081,tx_origin,Medium,Rari,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36187.62,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Rari ERC20 contract,4.1,0.636113724886308,unaudited
sc_2082,tx_origin,Medium,Synthetix,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50357.45,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Synthetix Staking contract,4.6,0.7717556505462642,audited
sc_2083,reentrancy,Critical,Yearn,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",27727.89,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Yearn Lending contract,9.8,0.34166476378855315,audited
sc_2084,timestamp_dependence,Medium,Aave,Proxy,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",184590.39,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave Proxy contract,6.6,0.40098029123426704,audited
sc_2085,uninitialized_storage,High,Frax,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",54022.04,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Frax ERC721 contract,8.8,0.6972054301613579,audited
sc_2086,dos_gas_limit,Medium,Aave,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",60331.67,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Lending contract,6.4,0.3756183429514669,unaudited
sc_2087,unchecked_call,Medium,Rari,Governor,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",9483.82,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari Governor contract,4.7,0.46382647701825463,unaudited
sc_2088,delegatecall_injection,Critical,Liquity,Timelock,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",74385.97,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Liquity Timelock contract,9.8,0.420978080313792,unaudited
sc_2089,access_control,High,Convex,Vault,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",34270.04,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Convex Vault contract,7.7,0.5674252446104259,audited
sc_2090,random_weakness,High,Uniswap,Farming,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",155368.11,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Uniswap Farming contract,7.8,0.7331694240544004,unaudited
sc_2091,uninitialized_storage,High,Frax,ERC1155,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",13974.5,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax ERC1155 contract,7.9,0.13811773334299085,audited
sc_2092,random_weakness,High,PancakeSwap,Staking,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",59621.94,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in PancakeSwap Staking contract,8.0,0.289028877701789,audited
sc_2093,front_running,Medium,Yearn,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49394.37,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Yearn ERC20 contract,4.2,0.20623057472176748,unaudited
sc_2094,integer_overflow,High,Yearn,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",139477.43,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Yearn Farming contract,8.3,0.2163472504563123,unaudited
sc_2095,uninitialized_storage,High,MakerDAO,Factory,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",314062.44,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO Factory contract,8.4,0.32551977224352713,audited
sc_2096,delegatecall_injection,Critical,Liquity,Router,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",41891.41,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity Router contract,9.1,0.4155684762715054,audited
sc_2097,delegatecall_injection,Critical,Euler,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",53752.33,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Euler Timelock contract,9.4,0.37929903522436836,audited
sc_2098,integer_overflow,High,MakerDAO,Governor,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",73165.72,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in MakerDAO Governor contract,8.1,0.49553792958242926,unaudited
sc_2099,front_running,Medium,Synthetix,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",79726.86,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Synthetix Bridge contract,5.4,0.21836262966237388,audited
sc_2100,front_running,Medium,Uniswap,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",280197.92,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Uniswap Router contract,4.9,0.9836931888971588,audited
sc_2101,delegatecall_injection,Critical,dYdX,Factory,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",53258.46,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in dYdX Factory contract,10.0,0.4618961294654772,audited
sc_2102,dos_gas_limit,Medium,Aave,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",206760.85,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave AMM contract,6.8,0.6874854691776967,unaudited
sc_2103,tx_origin,Medium,PancakeSwap,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",6181.38,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in PancakeSwap Router contract,4.1,0.7727835576776347,unaudited
sc_2104,reentrancy,Critical,1inch,ERC20,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",46017.06,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in 1inch ERC20 contract,9.2,0.9450740813233526,audited
sc_2105,short_address,Medium,SushiSwap,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",190883.67,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in SushiSwap Factory contract,6.3,0.5247627693954652,audited
sc_2106,delegatecall_injection,Critical,Synthetix,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",110048.15,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix Staking contract,9.5,0.6082520615196377,audited
sc_2107,timestamp_dependence,Medium,MakerDAO,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",204268.86,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Oracle contract,6.0,0.4597984040185501,audited
sc_2108,tx_origin,Medium,dYdX,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36715.45,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX ERC1155 contract,4.4,0.8377453195161065,audited
sc_2109,integer_overflow,High,Liquity,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",79369.54,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Liquity Proxy contract,8.3,0.14630825462630306,audited
sc_2110,delegatecall_injection,Critical,Convex,Factory,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",74059.47,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex Factory contract,9.6,0.5230007131019666,unaudited
sc_2111,delegatecall_injection,Critical,MakerDAO,ERC721,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",345920.74,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in MakerDAO ERC721 contract,9.9,0.3555360041757073,audited
sc_2112,dos_gas_limit,Medium,Compound,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",101952.7,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Compound Timelock contract,5.1,0.25162280299045336,unaudited
sc_2113,random_weakness,High,Frax,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",81383.5,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax ERC721 contract,8.9,0.3339566108936793,audited
sc_2114,dos_gas_limit,Medium,1inch,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23432.01,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in 1inch Factory contract,4.6,0.3289334403876357,unaudited
sc_2115,timestamp_dependence,Medium,Yearn,Oracle,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",116517.68,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn Oracle contract,4.9,0.9620128776121813,audited
sc_2116,reentrancy,Critical,1inch,Farming,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",75332.26,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in 1inch Farming contract,9.6,0.6714139151006181,unaudited
sc_2117,delegatecall_injection,Critical,Rari,AMM,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",78095.02,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari AMM contract,9.4,0.7669641781245252,audited
sc_2118,integer_overflow,High,Uniswap,Lending,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",190942.24,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Uniswap Lending contract,7.1,0.6133094685095479,audited
sc_2119,short_address,Medium,Aave,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",275849.31,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Aave Oracle contract,4.7,0.7750015468413983,audited
sc_2120,random_weakness,High,dYdX,Staking,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",50954.14,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in dYdX Staking contract,7.3,0.43839687881076894,unaudited
sc_2121,tx_origin,Medium,Alpha Homora,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42293.69,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Alpha Homora Governor contract,4.7,0.6240084088773487,audited
sc_2122,delegatecall_injection,Critical,Liquity,Governor,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",10753.21,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity Governor contract,9.9,0.6584650326525203,audited
sc_2123,unchecked_call,Medium,Liquity,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",47011.5,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Liquity Pool contract,5.0,0.9772500764973618,audited
sc_2124,timestamp_dependence,Medium,Rari,Proxy,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",48094.58,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Rari Proxy contract,5.1,0.6912241604706161,audited
sc_2125,random_weakness,High,Synthetix,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",80453.43,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Synthetix ERC721 contract,8.9,0.13249936482830185,unaudited
sc_2126,dos_gas_limit,Medium,Curve,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",73691.63,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve ERC1155 contract,4.7,0.11908143880012355,audited
sc_2127,front_running,Medium,Rari,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52740.08,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Rari Oracle contract,4.9,0.3400008150626551,audited
sc_2128,integer_overflow,High,Yearn,Bridge,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",147216.09,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Yearn Bridge contract,8.0,0.934320813663315,unaudited
sc_2129,access_control,High,Alpha Homora,Proxy,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",55844.51,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Alpha Homora Proxy contract,8.3,0.6339574525205899,audited
sc_2130,timestamp_dependence,Medium,Convex,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",42667.95,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Convex Timelock contract,6.6,0.4935478659134571,audited
sc_2131,tx_origin,Medium,Compound,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64930.99,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Compound Pool contract,6.9,0.4526697777113682,unaudited
sc_2132,tx_origin,Medium,Uniswap,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",63290.16,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Uniswap Bridge contract,6.2,0.21967878205446834,unaudited
sc_2133,unchecked_call,Medium,MakerDAO,Proxy,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",221514.7,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in MakerDAO Proxy contract,4.2,0.7471768308935299,audited
sc_2134,unchecked_call,Medium,Convex,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",41451.59,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Convex Staking contract,6.9,0.528882660646742,audited
sc_2135,short_address,Medium,Curve,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",83727.14,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve ERC721 contract,6.2,0.26609049447954947,audited
sc_2136,front_running,Medium,1inch,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29097.22,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in 1inch Bridge contract,6.5,0.4339458569571506,unaudited
sc_2137,reentrancy,Critical,MakerDAO,Staking,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",404394.97,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO Staking contract,9.0,0.35813714830956944,unaudited
sc_2138,short_address,Medium,Balancer,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48205.56,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Balancer Factory contract,4.5,0.7106047230019015,audited
sc_2139,reentrancy,Critical,Synthetix,Vault,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",151540.62,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Synthetix Vault contract,9.5,0.23898654998753618,audited
sc_2140,short_address,Medium,Synthetix,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",173836.53,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Synthetix Factory contract,5.8,0.18657757774433303,audited
sc_2141,timestamp_dependence,Medium,Yearn,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",16182.97,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Yearn Factory contract,4.9,0.2085975456486288,audited
sc_2142,tx_origin,Medium,dYdX,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22653.05,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX Bridge contract,4.3,0.6657312080195388,unaudited
sc_2143,reentrancy,Critical,Convex,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",26421.46,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Convex ERC721 contract,9.8,0.9750391759605865,audited
sc_2144,uninitialized_storage,High,Compound,DEX,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",70191.86,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Compound DEX contract,8.5,0.583865156106502,audited
sc_2145,reentrancy,Critical,SushiSwap,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",136568.57,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in SushiSwap Vault contract,9.0,0.1530313579462008,audited
sc_2146,random_weakness,High,Synthetix,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",80345.33,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Synthetix Pool contract,7.8,0.4208064144927288,audited
sc_2147,timestamp_dependence,Medium,Balancer,Vault,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",64335.09,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Balancer Vault contract,5.4,0.4577218992074735,audited
sc_2148,uninitialized_storage,High,SushiSwap,Vault,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",59584.27,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in SushiSwap Vault contract,7.5,0.6532588306112211,audited
sc_2149,dos_gas_limit,Medium,SushiSwap,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57265.34,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in SushiSwap Pool contract,5.7,0.35799860249371473,unaudited
sc_2150,short_address,Medium,Compound,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",93197.98,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Compound Vault contract,5.3,0.7876419316743395,audited
sc_2151,random_weakness,High,Balancer,Proxy,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",45682.83,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Proxy contract,8.4,0.31917113681772147,audited
sc_2152,timestamp_dependence,Medium,Synthetix,Router,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",94549.86,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Synthetix Router contract,4.5,0.5867362527441126,audited
sc_2153,random_weakness,High,dYdX,Router,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",17275.78,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX Router contract,8.5,0.18801584477360114,unaudited
sc_2154,tx_origin,Medium,Balancer,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37522.0,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Balancer DEX contract,4.3,0.9665017497563742,unaudited
sc_2155,short_address,Medium,Curve,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50041.72,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Curve Factory contract,6.4,0.10657124507175668,audited
sc_2156,front_running,Medium,SushiSwap,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53229.94,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in SushiSwap Staking contract,5.9,0.4334029532757203,audited
sc_2157,access_control,High,Balancer,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",41992.38,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Farming contract,7.2,0.5484717818854944,unaudited
sc_2158,access_control,High,Balancer,Bridge,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",11666.27,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Bridge contract,7.2,0.22344674661278058,unaudited
sc_2159,integer_overflow,High,Liquity,Farming,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",77286.43,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Farming contract,7.8,0.9999154075825041,audited
sc_2160,delegatecall_injection,Critical,Liquity,Strategy,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",35003.8,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity Strategy contract,9.8,0.49565720204008035,audited
sc_2161,reentrancy,Critical,Liquity,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",25923.02,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Liquity Router contract,9.8,0.46001857631499266,audited
sc_2162,reentrancy,Critical,Yearn,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",120922.15,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Yearn DEX contract,9.7,0.8122383242546781,audited
sc_2163,timestamp_dependence,Medium,Alpha Homora,Governor,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",32434.01,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Alpha Homora Governor contract,4.1,0.6829501254555885,audited
sc_2164,integer_overflow,High,Curve,DEX,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",121384.86,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Curve DEX contract,7.5,0.5718600491868662,unaudited
sc_2165,integer_overflow,High,MakerDAO,Governor,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",336804.41,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Governor contract,8.3,0.6542283981865354,audited
sc_2166,front_running,Medium,Synthetix,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",85433.38,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Synthetix ERC20 contract,4.1,0.2756954478339447,unaudited
sc_2167,uninitialized_storage,High,Balancer,Timelock,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",40035.08,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Balancer Timelock contract,8.0,0.9914602532469863,audited
sc_2168,timestamp_dependence,Medium,SushiSwap,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",97483.16,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in SushiSwap ERC721 contract,4.3,0.5189297618432356,audited
sc_2169,uninitialized_storage,High,Alpha Homora,Timelock,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",35450.85,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Alpha Homora Timelock contract,8.8,0.48830196854238717,unaudited
sc_2170,reentrancy,Critical,Aave,Governor,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",503459.05,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Aave Governor contract,9.3,0.5956669280844707,unaudited
sc_2171,tx_origin,Medium,Alpha Homora,DEX,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",65870.28,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Alpha Homora DEX contract,5.3,0.22435781073214206,audited
sc_2172,integer_overflow,High,Frax,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",60879.44,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Frax Pool contract,8.8,0.40765050888553744,audited
sc_2173,uninitialized_storage,High,Uniswap,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",327041.02,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Uniswap ERC20 contract,8.4,0.7453122045448671,audited
sc_2174,delegatecall_injection,Critical,Aave,Router,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",279944.29,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Aave Router contract,9.8,0.30038760765244277,audited
sc_2175,timestamp_dependence,Medium,Rari,ERC20,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",55976.22,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Rari ERC20 contract,6.4,0.48866641155591406,audited
sc_2176,uninitialized_storage,High,MakerDAO,ERC20,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",316545.54,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO ERC20 contract,8.2,0.6329853436266688,audited
sc_2177,delegatecall_injection,Critical,dYdX,Oracle,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",57058.18,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in dYdX Oracle contract,9.2,0.4860724348993529,unaudited
sc_2178,delegatecall_injection,Critical,PancakeSwap,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",61487.61,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in PancakeSwap AMM contract,9.7,0.5144914224726194,unaudited
sc_2179,random_weakness,High,Curve,Staking,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",37775.59,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Curve Staking contract,7.6,0.9178828926783613,unaudited
sc_2180,front_running,Medium,Yearn,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47921.53,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Yearn ERC721 contract,6.6,0.6163952953468863,audited
sc_2181,delegatecall_injection,Critical,PancakeSwap,Staking,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",93318.18,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in PancakeSwap Staking contract,9.2,0.46598146435596877,audited
sc_2182,uninitialized_storage,High,Liquity,Oracle,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",56662.13,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Liquity Oracle contract,7.3,0.6382957770998758,audited
sc_2183,uninitialized_storage,High,dYdX,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",39748.1,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX DEX contract,8.5,0.8926510852951202,unaudited
sc_2184,access_control,High,Compound,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",296986.82,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Compound ERC721 contract,7.8,0.7681343460192571,audited
sc_2185,front_running,Medium,1inch,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22237.04,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in 1inch DEX contract,5.3,0.9926168209191166,audited
sc_2186,uninitialized_storage,High,MakerDAO,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",271602.6,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in MakerDAO Staking contract,7.1,0.7841649815038318,audited
sc_2187,dos_gas_limit,Medium,Convex,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",11074.17,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Convex Staking contract,4.5,0.21506577433292,unaudited
sc_2188,integer_overflow,High,PancakeSwap,ERC20,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",45027.97,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap ERC20 contract,7.1,0.6516021525567015,audited
sc_2189,integer_overflow,High,Frax,AMM,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",11948.61,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Frax AMM contract,8.9,0.10461455629696015,audited
sc_2190,dos_gas_limit,Medium,Uniswap,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53273.09,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Uniswap Router contract,6.1,0.6027096827731615,audited
sc_2191,front_running,Medium,Convex,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22022.45,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Convex Farming contract,5.6,0.9410869394656526,unaudited
sc_2192,timestamp_dependence,Medium,Yearn,DEX,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",59741.32,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn DEX contract,5.0,0.2779147383132867,audited
sc_2193,access_control,High,Liquity,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",53824.98,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Liquity Strategy contract,8.8,0.9920657617557074,unaudited
sc_2194,integer_overflow,High,Synthetix,Farming,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",57321.41,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Farming contract,7.5,0.6635109982196229,audited
sc_2195,delegatecall_injection,Critical,Euler,DEX,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",59384.46,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler DEX contract,9.9,0.8796595402547766,unaudited
sc_2196,reentrancy,Critical,Compound,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",550071.05,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Compound Factory contract,9.4,0.20369928377048951,audited
sc_2197,unchecked_call,Medium,Balancer,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",40410.01,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer Proxy contract,4.6,0.6188200216575127,unaudited
sc_2198,timestamp_dependence,Medium,Compound,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",367577.08,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Compound Vault contract,5.0,0.7193664148552709,audited
sc_2199,timestamp_dependence,Medium,PancakeSwap,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",28594.01,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Router contract,5.0,0.24937794763093513,unaudited
sc_2200,delegatecall_injection,Critical,Compound,Staking,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",295165.0,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Compound Staking contract,9.6,0.3431505501223079,unaudited
sc_2201,reentrancy,Critical,Balancer,ERC721,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",11234.64,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer ERC721 contract,10.0,0.15526808008742207,unaudited
sc_2202,short_address,Medium,Liquity,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42554.25,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Liquity DEX contract,5.1,0.6118259781275693,audited
sc_2203,dos_gas_limit,Medium,PancakeSwap,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14057.89,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap Strategy contract,6.0,0.6136011873738164,unaudited
sc_2204,dos_gas_limit,Medium,Aave,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",132228.6,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Strategy contract,4.9,0.6438072019602195,audited
sc_2205,random_weakness,High,Uniswap,ERC20,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",181201.03,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Uniswap ERC20 contract,7.7,0.48876827013589297,audited
sc_2206,integer_overflow,High,1inch,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",28437.59,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in 1inch Pool contract,7.6,0.9770137282899949,audited
sc_2207,unchecked_call,Medium,Compound,Factory,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",283423.96,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Compound Factory contract,6.3,0.8068074019571655,unaudited
sc_2208,dos_gas_limit,Medium,Frax,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44962.4,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Frax Proxy contract,5.5,0.45143320238336404,unaudited
sc_2209,integer_overflow,High,Synthetix,Governor,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",33844.36,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Synthetix Governor contract,7.2,0.18410217557887787,audited
sc_2210,short_address,Medium,MakerDAO,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",202207.62,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO DEX contract,4.1,0.2987898304170281,audited
sc_2211,unchecked_call,Medium,Compound,Router,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",213292.96,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Compound Router contract,5.9,0.1877775099902972,audited
sc_2212,unchecked_call,Medium,1inch,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",48058.09,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Proxy contract,6.0,0.25210767493045133,audited
sc_2213,random_weakness,High,Rari,AMM,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",61000.1,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari AMM contract,8.1,0.5424737561861261,audited
sc_2214,dos_gas_limit,Medium,PancakeSwap,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50244.81,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in PancakeSwap ERC1155 contract,6.8,0.9675078743679684,audited
sc_2215,dos_gas_limit,Medium,Curve,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",123244.72,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve Pool contract,5.1,0.539690130233467,unaudited
sc_2216,uninitialized_storage,High,Aave,Pool,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",496164.33,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave Pool contract,7.6,0.6819738008174823,audited
sc_2217,unchecked_call,Medium,PancakeSwap,Factory,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",55116.57,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in PancakeSwap Factory contract,6.2,0.43055118069697496,audited
sc_2218,short_address,Medium,Euler,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18750.42,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Euler DEX contract,4.0,0.7843148255185449,unaudited
sc_2219,integer_overflow,High,Balancer,ERC1155,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",47982.86,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Balancer ERC1155 contract,7.2,0.6243296300626303,audited
sc_2220,unchecked_call,Medium,Convex,DEX,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",36605.57,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Convex DEX contract,4.6,0.2654171391403993,audited
sc_2221,unchecked_call,Medium,Curve,AMM,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",131657.27,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve AMM contract,6.8,0.6206862752219835,audited
sc_2222,unchecked_call,Medium,SushiSwap,Lending,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",32906.15,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in SushiSwap Lending contract,4.4,0.4996743429351669,audited
sc_2223,reentrancy,Critical,MakerDAO,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",66812.41,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO Governor contract,9.9,0.36225106441599697,audited
sc_2224,integer_overflow,High,Rari,DEX,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",82158.61,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari DEX contract,8.3,0.9000791292543282,audited
sc_2225,unchecked_call,Medium,dYdX,Oracle,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",38944.59,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in dYdX Oracle contract,5.6,0.6300395262588833,audited
sc_2226,reentrancy,Critical,Convex,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",50053.9,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex DEX contract,9.5,0.1065657355328305,audited
sc_2227,front_running,Medium,Euler,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34830.4,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Euler Staking contract,5.8,0.8007090990698449,unaudited
sc_2228,unchecked_call,Medium,Curve,Factory,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",127210.96,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Factory contract,5.2,0.7474710768724713,unaudited
sc_2229,reentrancy,Critical,Balancer,ERC20,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",71929.86,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer ERC20 contract,9.4,0.5544169311746583,audited
sc_2230,unchecked_call,Medium,Convex,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",40179.82,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Convex Vault contract,5.6,0.7611569587592633,audited
sc_2231,front_running,Medium,Uniswap,DEX,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51904.61,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Uniswap DEX contract,4.6,0.5502495221743021,audited
sc_2232,front_running,Medium,Euler,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21216.29,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Euler Oracle contract,4.5,0.7516792529999322,audited
sc_2233,timestamp_dependence,Medium,Curve,Strategy,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",119050.54,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Curve Strategy contract,6.1,0.8482321676039245,audited
sc_2234,front_running,Medium,Aave,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",254924.13,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Aave Pool contract,6.6,0.18619529428668447,audited
sc_2235,unchecked_call,Medium,Alpha Homora,Router,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",8789.55,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora Router contract,4.4,0.9791720088295737,audited
sc_2236,dos_gas_limit,Medium,MakerDAO,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",234170.04,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO ERC20 contract,6.5,0.39321738781012616,unaudited
sc_2237,delegatecall_injection,Critical,Liquity,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",15243.24,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity AMM contract,9.8,0.29492491142553895,audited
sc_2238,short_address,Medium,Aave,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",116164.49,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Aave Oracle contract,6.0,0.5926394970217971,audited
sc_2239,unchecked_call,Medium,Balancer,Bridge,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",20117.59,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer Bridge contract,6.7,0.22113250172637475,audited
sc_2240,dos_gas_limit,Medium,Yearn,Vault,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",79184.88,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn Vault contract,4.8,0.6439699526998525,audited
sc_2241,reentrancy,Critical,Convex,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",119686.57,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Convex ERC20 contract,9.5,0.2598681942713036,audited
sc_2242,reentrancy,Critical,Convex,Router,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",41810.18,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Convex Router contract,9.4,0.6488653380940773,audited
sc_2243,unchecked_call,Medium,Rari,Timelock,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",27265.78,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari Timelock contract,6.6,0.47058678025503875,audited
sc_2244,tx_origin,Medium,Frax,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",41189.23,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Governor contract,5.2,0.9168797063566737,audited
sc_2245,reentrancy,Critical,Convex,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",40989.58,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Convex ERC1155 contract,9.8,0.4145218959907714,audited
sc_2246,front_running,Medium,Compound,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",203152.31,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound Strategy contract,5.2,0.5848495705669936,audited
sc_2247,dos_gas_limit,Medium,Synthetix,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",110376.45,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Synthetix Bridge contract,5.1,0.6727578279528441,unaudited
sc_2248,integer_overflow,High,Uniswap,Oracle,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",382061.45,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Uniswap Oracle contract,8.8,0.930863775970744,unaudited
sc_2249,delegatecall_injection,Critical,Alpha Homora,Bridge,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",52886.39,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Bridge contract,9.5,0.7075337098702303,unaudited
sc_2250,random_weakness,High,SushiSwap,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",98695.47,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in SushiSwap Lending contract,8.2,0.441693135807239,audited
sc_2251,uninitialized_storage,High,Euler,Factory,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",13422.55,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Euler Factory contract,7.9,0.48649556089824897,unaudited
sc_2252,integer_overflow,High,Liquity,Governor,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",59414.97,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Governor contract,7.7,0.8141366657055683,audited
sc_2253,short_address,Medium,MakerDAO,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",95218.27,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO Lending contract,4.1,0.9847002440950148,audited
sc_2254,access_control,High,Uniswap,Lending,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",130415.88,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Uniswap Lending contract,7.7,0.12560747942577347,unaudited
sc_2255,unchecked_call,Medium,dYdX,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",58105.71,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in dYdX Factory contract,4.8,0.7865909742643423,audited
sc_2256,uninitialized_storage,High,Curve,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",133589.01,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Curve Governor contract,7.9,0.33805186216624067,audited
sc_2257,dos_gas_limit,Medium,Aave,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",349508.17,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Strategy contract,6.1,0.4127216268821591,unaudited
sc_2258,dos_gas_limit,Medium,dYdX,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21069.18,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in dYdX AMM contract,4.7,0.3570933334145401,audited
sc_2259,timestamp_dependence,Medium,1inch,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",61027.51,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in 1inch ERC20 contract,4.0,0.8788377267419254,audited
sc_2260,delegatecall_injection,Critical,Compound,DEX,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",92388.98,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Compound DEX contract,9.2,0.18697517480786213,audited
sc_2261,access_control,High,Euler,Router,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",60980.89,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Euler Router contract,7.7,0.6786764393235584,unaudited
sc_2262,tx_origin,Medium,Convex,Timelock,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45440.65,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex Timelock contract,4.1,0.6000301403777105,audited
sc_2263,reentrancy,Critical,Rari,Farming,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",14268.03,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Rari Farming contract,9.0,0.24100497771376564,audited
sc_2264,reentrancy,Critical,Alpha Homora,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",38951.87,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Alpha Homora ERC20 contract,9.6,0.7570827341316463,audited
sc_2265,uninitialized_storage,High,PancakeSwap,DEX,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",19465.44,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in PancakeSwap DEX contract,7.7,0.8036676565294313,audited
sc_2266,uninitialized_storage,High,Balancer,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",24770.92,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Balancer Factory contract,7.4,0.994158797894973,audited
sc_2267,dos_gas_limit,Medium,Liquity,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50967.12,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Liquity Strategy contract,6.3,0.36559112389952864,audited
sc_2268,tx_origin,Medium,Liquity,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48625.06,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity Staking contract,6.0,0.6727878405312943,unaudited
sc_2269,short_address,Medium,Liquity,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10774.95,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Liquity Vault contract,5.1,0.7827131273377259,audited
sc_2270,front_running,Medium,MakerDAO,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",26961.07,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in MakerDAO Factory contract,4.5,0.8165762174485187,audited
sc_2271,access_control,High,Liquity,AMM,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",84875.88,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Liquity AMM contract,8.5,0.5695057916973109,audited
sc_2272,tx_origin,Medium,MakerDAO,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",335922.14,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in MakerDAO Timelock contract,5.3,0.9671824680220763,audited
sc_2273,delegatecall_injection,Critical,PancakeSwap,Farming,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",59911.56,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Farming contract,9.3,0.7167689139669399,unaudited
sc_2274,dos_gas_limit,Medium,Synthetix,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19620.57,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Synthetix Factory contract,6.5,0.7352299086248847,audited
sc_2275,tx_origin,Medium,Compound,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",121276.75,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Compound Lending contract,6.6,0.3213056881048587,audited
sc_2276,access_control,High,1inch,DEX,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",61300.68,13,0.26,0.8,2,0,1,1,High access_control vulnerability in 1inch DEX contract,8.7,0.516285944106748,unaudited
sc_2277,uninitialized_storage,High,SushiSwap,ERC1155,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",133827.77,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in SushiSwap ERC1155 contract,7.4,0.7449664025096604,audited
sc_2278,timestamp_dependence,Medium,Liquity,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",54555.75,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity Pool contract,6.8,0.23464536977874462,audited
sc_2279,unchecked_call,Medium,Balancer,Lending,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",54299.72,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer Lending contract,6.2,0.216715191940901,audited
sc_2280,uninitialized_storage,High,Uniswap,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",363140.81,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Uniswap DEX contract,7.3,0.6364378262850304,audited
sc_2281,tx_origin,Medium,Rari,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32101.63,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Rari Pool contract,4.2,0.13430672060230386,audited
sc_2282,tx_origin,Medium,Uniswap,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",221505.18,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Uniswap Router contract,6.2,0.15740648729971696,audited
sc_2283,timestamp_dependence,Medium,1inch,Governor,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",45349.08,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in 1inch Governor contract,5.6,0.4069726008596741,audited
sc_2284,uninitialized_storage,High,Rari,Farming,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",63303.01,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Rari Farming contract,7.4,0.6087496669669037,audited
sc_2285,timestamp_dependence,Medium,Balancer,AMM,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",41864.35,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Balancer AMM contract,4.7,0.3556937327307529,audited
sc_2286,timestamp_dependence,Medium,Liquity,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",28373.04,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity Router contract,4.3,0.5505973690011005,audited
sc_2287,delegatecall_injection,Critical,Balancer,Lending,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",80362.92,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Balancer Lending contract,9.7,0.4319002926799823,audited
sc_2288,uninitialized_storage,High,Aave,ERC721,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",63433.98,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Aave ERC721 contract,7.0,0.8352327124942152,unaudited
sc_2289,delegatecall_injection,Critical,MakerDAO,ERC721,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",391270.26,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in MakerDAO ERC721 contract,9.4,0.1958569818368368,unaudited
sc_2290,reentrancy,Critical,Yearn,Bridge,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",157039.57,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Yearn Bridge contract,9.6,0.3217310000724156,unaudited
sc_2291,delegatecall_injection,Critical,PancakeSwap,DEX,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",54054.71,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in PancakeSwap DEX contract,9.5,0.11256095237202719,audited
sc_2292,uninitialized_storage,High,Compound,Lending,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",319082.9,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Compound Lending contract,8.4,0.6935135238183374,unaudited
sc_2293,access_control,High,1inch,Lending,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",82563.27,13,0.26,0.8,2,0,1,1,High access_control vulnerability in 1inch Lending contract,8.1,0.37200892655151374,audited
sc_2294,short_address,Medium,MakerDAO,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33289.09,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO Vault contract,4.1,0.8061163921417838,unaudited
sc_2295,uninitialized_storage,High,Compound,Strategy,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",308540.22,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Compound Strategy contract,8.3,0.38733300576599494,audited
sc_2296,dos_gas_limit,Medium,Compound,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",155135.25,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Factory contract,5.5,0.9424073770047774,audited
sc_2297,access_control,High,Balancer,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",60541.29,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Balancer Governor contract,7.9,0.5647853628686883,unaudited
sc_2298,dos_gas_limit,Medium,dYdX,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40875.15,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in dYdX Staking contract,4.4,0.8496802636683198,audited
sc_2299,delegatecall_injection,Critical,Curve,ERC721,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",64388.21,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Curve ERC721 contract,9.4,0.5774937782450542,unaudited
sc_2300,front_running,Medium,1inch,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56773.21,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in 1inch Vault contract,5.5,0.47119297476494093,audited
sc_2301,timestamp_dependence,Medium,Aave,Pool,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",225243.46,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Aave Pool contract,6.7,0.14455678528615665,audited
sc_2302,short_address,Medium,Frax,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51968.41,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Frax Lending contract,6.1,0.23532888812395447,unaudited
sc_2303,tx_origin,Medium,Alpha Homora,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21043.44,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora ERC721 contract,6.1,0.17077176552931245,unaudited
sc_2304,short_address,Medium,Liquity,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28976.32,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity Staking contract,4.8,0.26554783184681324,unaudited
sc_2305,access_control,High,Uniswap,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",466204.75,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Uniswap ERC20 contract,8.2,0.333841445756333,audited
sc_2306,access_control,High,Yearn,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",137741.56,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn ERC721 contract,7.3,0.40205208863832953,unaudited
sc_2307,timestamp_dependence,Medium,1inch,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",10718.17,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in 1inch Proxy contract,4.5,0.26525993345573073,audited
sc_2308,unchecked_call,Medium,Yearn,AMM,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",141973.05,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn AMM contract,5.8,0.5772332913763516,unaudited
sc_2309,tx_origin,Medium,Convex,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",43576.79,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Convex Pool contract,5.3,0.33877604683189866,audited
sc_2310,short_address,Medium,MakerDAO,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",262175.94,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO Lending contract,4.8,0.7319428742171888,unaudited
sc_2311,timestamp_dependence,Medium,Synthetix,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",78028.6,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Synthetix Factory contract,6.5,0.11320637542946531,audited
sc_2312,unchecked_call,Medium,1inch,Lending,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",39930.13,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in 1inch Lending contract,5.4,0.10337067871450739,unaudited
sc_2313,reentrancy,Critical,Frax,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",52970.7,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Frax Pool contract,9.8,0.2035714966488471,audited
sc_2314,unchecked_call,Medium,Aave,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",271148.76,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave ERC721 contract,6.1,0.9602474722999187,unaudited
sc_2315,front_running,Medium,Alpha Homora,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15268.83,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Alpha Homora Proxy contract,4.8,0.5801291942732839,audited
sc_2316,integer_overflow,High,Rari,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",65070.76,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari Farming contract,8.7,0.572561954658771,audited
sc_2317,access_control,High,Yearn,DEX,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",73018.48,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Yearn DEX contract,7.6,0.7220449225228971,audited
sc_2318,front_running,Medium,Convex,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14483.04,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Convex Timelock contract,5.0,0.37949162662890445,unaudited
sc_2319,timestamp_dependence,Medium,Liquity,Governor,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",48396.34,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity Governor contract,4.5,0.7171594602439486,audited
sc_2320,short_address,Medium,Synthetix,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",94575.11,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Router contract,5.3,0.4099370201066579,audited
sc_2321,uninitialized_storage,High,Liquity,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",32336.55,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Liquity Farming contract,7.6,0.2886671376838531,audited
sc_2322,unchecked_call,Medium,Curve,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",52053.34,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Curve Farming contract,4.7,0.9283050381648745,audited
sc_2323,dos_gas_limit,Medium,Liquity,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",17803.36,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Liquity ERC1155 contract,4.8,0.6110360565909788,audited
sc_2324,random_weakness,High,Balancer,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",72359.9,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Balancer Governor contract,7.6,0.4018953207593613,audited
sc_2325,timestamp_dependence,Medium,Aave,DEX,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",146431.69,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave DEX contract,6.2,0.37453776968648866,unaudited
sc_2326,access_control,High,Synthetix,ERC721,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",32598.34,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Synthetix ERC721 contract,7.2,0.7923918180024604,audited
sc_2327,front_running,Medium,PancakeSwap,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8435.7,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in PancakeSwap Bridge contract,5.4,0.3445376459902139,audited
sc_2328,reentrancy,Critical,PancakeSwap,Router,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",55901.6,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap Router contract,9.4,0.2978799956504058,audited
sc_2329,delegatecall_injection,Critical,SushiSwap,Lending,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",103012.93,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in SushiSwap Lending contract,9.6,0.294966636169697,unaudited
sc_2330,front_running,Medium,Uniswap,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",242816.6,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Uniswap Farming contract,4.4,0.7191877935517466,audited
sc_2331,delegatecall_injection,Critical,PancakeSwap,Bridge,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",72149.39,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in PancakeSwap Bridge contract,10.0,0.47059941156540697,audited
sc_2332,integer_overflow,High,SushiSwap,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",41840.52,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap Pool contract,8.3,0.9995751664024175,audited
sc_2333,integer_overflow,High,Yearn,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",23741.92,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Yearn Proxy contract,8.0,0.6305638560678385,audited
sc_2334,tx_origin,Medium,Aave,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",128361.32,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Aave ERC1155 contract,6.0,0.1326125099259538,audited
sc_2335,front_running,Medium,Curve,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",81094.53,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve ERC20 contract,6.7,0.9296209951033194,unaudited
sc_2336,unchecked_call,Medium,Synthetix,Vault,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",156398.12,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Synthetix Vault contract,5.9,0.9439336666074976,audited
sc_2337,timestamp_dependence,Medium,MakerDAO,Farming,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",50466.48,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Farming contract,6.4,0.8975030743155862,unaudited
sc_2338,dos_gas_limit,Medium,Frax,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21651.44,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Frax Router contract,6.3,0.8219624286632106,audited
sc_2339,short_address,Medium,Compound,Pool,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",205432.0,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Compound Pool contract,5.7,0.21024086046784946,audited
sc_2340,tx_origin,Medium,Uniswap,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",195497.29,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap DEX contract,5.7,0.4978836227736304,audited
sc_2341,random_weakness,High,Alpha Homora,ERC20,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",61131.42,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Alpha Homora ERC20 contract,7.7,0.4106558902429557,unaudited
sc_2342,reentrancy,Critical,Convex,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",76485.07,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Convex ERC20 contract,9.4,0.9403023029260011,audited
sc_2343,timestamp_dependence,Medium,PancakeSwap,Strategy,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",6988.05,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Strategy contract,4.8,0.5277114828851076,audited
sc_2344,timestamp_dependence,Medium,SushiSwap,ERC20,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",105664.91,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap ERC20 contract,6.9,0.21145094338738213,audited
sc_2345,front_running,Medium,PancakeSwap,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45459.25,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in PancakeSwap Staking contract,6.2,0.8232119592571535,audited
sc_2346,tx_origin,Medium,Convex,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13984.02,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex Router contract,5.7,0.6499922152116197,audited
sc_2347,access_control,High,Aave,Staking,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",92019.77,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Staking contract,8.3,0.3820932660965166,audited
sc_2348,timestamp_dependence,Medium,dYdX,Vault,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",46200.19,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in dYdX Vault contract,5.3,0.9782575710106547,audited
sc_2349,front_running,Medium,Curve,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49536.22,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Curve AMM contract,6.1,0.5587309556625176,audited
sc_2350,random_weakness,High,Aave,Router,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",204965.89,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Aave Router contract,8.8,0.4953045712860775,audited
sc_2351,reentrancy,Critical,Yearn,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",63125.39,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Yearn Strategy contract,10.0,0.6137109426277484,unaudited
sc_2352,random_weakness,High,Liquity,ERC1155,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",48629.05,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity ERC1155 contract,7.3,0.7557179798195193,audited
sc_2353,integer_overflow,High,Convex,ERC20,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",79553.39,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Convex ERC20 contract,7.0,0.6005815814320276,unaudited
sc_2354,dos_gas_limit,Medium,Alpha Homora,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7790.9,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Alpha Homora DEX contract,6.8,0.4060714850362088,audited
sc_2355,timestamp_dependence,Medium,Balancer,Pool,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",38575.2,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Balancer Pool contract,6.8,0.1469637236964527,audited
sc_2356,unchecked_call,Medium,Yearn,ERC1155,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",115493.54,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn ERC1155 contract,5.7,0.9743785253225974,unaudited
sc_2357,reentrancy,Critical,dYdX,ERC1155,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",56049.63,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in dYdX ERC1155 contract,9.7,0.9350361378250607,audited
sc_2358,front_running,Medium,Balancer,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25152.76,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer DEX contract,4.6,0.4855206094453387,unaudited
sc_2359,tx_origin,Medium,SushiSwap,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24934.74,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in SushiSwap Lending contract,6.7,0.4856876115159151,audited
sc_2360,front_running,Medium,Compound,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52139.62,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound ERC721 contract,4.3,0.43697948070602244,audited
sc_2361,tx_origin,Medium,SushiSwap,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",108808.56,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in SushiSwap ERC1155 contract,6.7,0.398689008050939,unaudited
sc_2362,random_weakness,High,dYdX,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",37615.21,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in dYdX ERC20 contract,7.7,0.8106427925947708,audited
sc_2363,dos_gas_limit,Medium,Compound,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",214017.64,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound ERC1155 contract,5.6,0.9263400688243669,unaudited
sc_2364,reentrancy,Critical,PancakeSwap,ERC721,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",18638.53,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap ERC721 contract,9.4,0.7831768496599567,unaudited
sc_2365,dos_gas_limit,Medium,Balancer,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21246.96,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Balancer Bridge contract,4.8,0.8585849363150396,audited
sc_2366,timestamp_dependence,Medium,Frax,Farming,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",30294.26,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax Farming contract,4.0,0.5099562535563146,audited
sc_2367,tx_origin,Medium,Yearn,Pool,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18604.96,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Pool contract,6.3,0.7713406023013559,audited
sc_2368,random_weakness,High,Rari,ERC20,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",56309.05,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari ERC20 contract,7.6,0.806351949834141,audited
sc_2369,uninitialized_storage,High,Yearn,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",175788.98,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Yearn Bridge contract,7.9,0.9249459550463983,unaudited
sc_2370,reentrancy,Critical,Curve,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",302790.02,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Curve Governor contract,9.7,0.6747920421936046,audited
sc_2371,unchecked_call,Medium,1inch,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",27488.8,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in 1inch Governor contract,4.3,0.5313123039746882,audited
sc_2372,short_address,Medium,Liquity,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34789.93,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Liquity AMM contract,6.3,0.8773021033431906,unaudited
sc_2373,integer_overflow,High,1inch,Pool,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",82148.36,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in 1inch Pool contract,8.7,0.3282396570344183,audited
sc_2374,timestamp_dependence,Medium,Aave,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",223223.33,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave DEX contract,4.5,0.8412672212216301,audited
sc_2375,reentrancy,Critical,Compound,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",290838.8,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Compound Governor contract,9.8,0.7199143425958947,audited
sc_2376,dos_gas_limit,Medium,Compound,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37655.21,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Staking contract,4.2,0.6872484655388293,unaudited
sc_2377,short_address,Medium,Synthetix,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",68804.14,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Synthetix Oracle contract,6.3,0.8438455772378883,audited
sc_2378,access_control,High,Rari,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",17379.09,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari ERC20 contract,8.4,0.3798349244504189,unaudited
sc_2379,unchecked_call,Medium,PancakeSwap,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",62924.54,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in PancakeSwap Router contract,4.9,0.19610016270733288,unaudited
sc_2380,reentrancy,Critical,Convex,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",63779.85,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Convex Farming contract,9.4,0.4959233427656977,audited
sc_2381,uninitialized_storage,High,Rari,Router,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",63662.08,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Rari Router contract,8.0,0.5665072791617745,unaudited
sc_2382,access_control,High,Uniswap,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",53377.0,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Uniswap Bridge contract,7.9,0.5327685716571768,audited
sc_2383,front_running,Medium,Aave,Timelock,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",189414.97,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Aave Timelock contract,4.9,0.48823615889856087,audited
sc_2384,access_control,High,Convex,DEX,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",95315.73,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Convex DEX contract,8.3,0.9775611639635663,audited
sc_2385,random_weakness,High,PancakeSwap,ERC20,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",46537.86,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap ERC20 contract,7.5,0.7446188378462688,audited
sc_2386,random_weakness,High,1inch,Strategy,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",44284.35,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in 1inch Strategy contract,8.0,0.5920754092944106,audited
sc_2387,short_address,Medium,Rari,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52954.59,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Rari ERC20 contract,6.0,0.7578181251003456,unaudited
sc_2388,reentrancy,Critical,Aave,Bridge,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",103830.18,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Bridge contract,9.8,0.1708636478028091,audited
sc_2389,front_running,Medium,PancakeSwap,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38901.21,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in PancakeSwap Pool contract,6.4,0.14287680461525146,audited
sc_2390,integer_overflow,High,Rari,Farming,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",17104.65,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari Farming contract,8.3,0.7706218410985322,audited
sc_2391,access_control,High,Alpha Homora,Vault,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",64911.36,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Alpha Homora Vault contract,8.0,0.33665731396983717,unaudited
sc_2392,timestamp_dependence,Medium,Euler,Factory,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",16993.13,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Euler Factory contract,5.6,0.6118431583812466,audited
sc_2393,integer_overflow,High,MakerDAO,Vault,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",112693.13,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Vault contract,7.9,0.3385339412608534,unaudited
sc_2394,access_control,High,Alpha Homora,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",40123.59,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Alpha Homora Bridge contract,8.8,0.8756543003545771,audited
sc_2395,timestamp_dependence,Medium,Yearn,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",25316.07,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Yearn ERC1155 contract,6.6,0.46825073429769337,unaudited
sc_2396,tx_origin,Medium,MakerDAO,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",169257.13,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO Bridge contract,5.4,0.2471612289068985,unaudited
sc_2397,short_address,Medium,1inch,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38101.73,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in 1inch ERC20 contract,4.4,0.8252241834540085,audited
sc_2398,uninitialized_storage,High,Rari,Timelock,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",80615.51,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Rari Timelock contract,8.9,0.2866573284279187,unaudited
sc_2399,integer_overflow,High,SushiSwap,Vault,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",115297.8,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap Vault contract,8.6,0.6181319546280513,audited
sc_2400,reentrancy,Critical,Aave,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",309614.91,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Oracle contract,9.8,0.5740229118208349,audited
sc_2401,integer_overflow,High,dYdX,Pool,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",11563.84,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in dYdX Pool contract,7.1,0.867787133445728,audited
sc_2402,reentrancy,Critical,Alpha Homora,Proxy,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",55071.82,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora Proxy contract,9.3,0.13668678337972173,audited
sc_2403,random_weakness,High,Compound,ERC721,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",447417.53,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound ERC721 contract,7.6,0.2695665931444964,audited
sc_2404,delegatecall_injection,Critical,Yearn,Lending,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",262541.3,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Yearn Lending contract,9.4,0.4382330944110051,audited
sc_2405,short_address,Medium,PancakeSwap,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",41545.14,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in PancakeSwap Oracle contract,5.9,0.8928785941611438,audited
sc_2406,unchecked_call,Medium,Rari,Router,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",42933.29,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Rari Router contract,6.6,0.8021189162325696,audited
sc_2407,access_control,High,SushiSwap,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",183023.51,13,0.26,0.8,2,1,1,1,High access_control vulnerability in SushiSwap DEX contract,8.5,0.10195491625457782,audited
sc_2408,integer_overflow,High,Rari,ERC20,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",56569.47,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Rari ERC20 contract,7.1,0.30944371241987,audited
sc_2409,uninitialized_storage,High,SushiSwap,Vault,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",179698.29,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in SushiSwap Vault contract,7.8,0.5837920843112541,audited
sc_2410,dos_gas_limit,Medium,Uniswap,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",141046.09,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Uniswap Proxy contract,5.3,0.4235613290569812,audited
sc_2411,tx_origin,Medium,Euler,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36118.79,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Euler Pool contract,5.0,0.23023936100609274,unaudited
sc_2412,front_running,Medium,Frax,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28293.11,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax Strategy contract,4.6,0.4822101185493516,audited
sc_2413,dos_gas_limit,Medium,Euler,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30446.51,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Euler Governor contract,5.8,0.6599523224124777,audited
sc_2414,tx_origin,Medium,MakerDAO,Timelock,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",163854.53,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO Timelock contract,6.1,0.11345142035436762,audited
sc_2415,timestamp_dependence,Medium,Alpha Homora,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",18792.9,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Alpha Homora Router contract,5.6,0.6159281789163565,unaudited
sc_2416,short_address,Medium,Synthetix,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",104039.53,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Router contract,6.4,0.1790280102977462,unaudited
sc_2417,tx_origin,Medium,Aave,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31469.24,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave ERC1155 contract,5.8,0.5774347019143697,audited
sc_2418,access_control,High,Yearn,Router,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",181724.67,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn Router contract,8.4,0.8393604181031089,audited
sc_2419,access_control,High,MakerDAO,Router,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",421506.52,13,0.26,0.8,2,0,1,2,High access_control vulnerability in MakerDAO Router contract,8.2,0.5747533545886401,audited
sc_2420,delegatecall_injection,Critical,Rari,Lending,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",46458.09,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Rari Lending contract,9.3,0.3545477215565477,audited
sc_2421,unchecked_call,Medium,PancakeSwap,ERC1155,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",11346.62,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in PancakeSwap ERC1155 contract,4.9,0.4541469682220324,audited
sc_2422,reentrancy,Critical,Convex,Farming,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",93984.39,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex Farming contract,9.6,0.2759004747239904,audited
sc_2423,reentrancy,Critical,SushiSwap,ERC1155,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",214593.09,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in SushiSwap ERC1155 contract,9.6,0.5718863159652211,unaudited
sc_2424,unchecked_call,Medium,Balancer,Strategy,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",6642.84,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Balancer Strategy contract,4.8,0.27563825301364997,unaudited
sc_2425,dos_gas_limit,Medium,Rari,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",17264.26,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Rari Factory contract,6.3,0.4019880070061801,audited
sc_2426,timestamp_dependence,Medium,1inch,ERC721,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",21290.93,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in 1inch ERC721 contract,6.6,0.15681311532449055,audited
sc_2427,reentrancy,Critical,Aave,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",328661.98,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Timelock contract,9.3,0.21152334183744964,audited
sc_2428,unchecked_call,Medium,Curve,Router,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",183600.76,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Router contract,6.2,0.3008034259434248,unaudited
sc_2429,unchecked_call,Medium,Liquity,AMM,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",53923.22,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity AMM contract,4.4,0.16816834101263067,audited
sc_2430,random_weakness,High,dYdX,Governor,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",59731.77,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX Governor contract,8.7,0.5810785207789828,audited
sc_2431,delegatecall_injection,Critical,Synthetix,Governor,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",180033.89,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix Governor contract,9.5,0.5004220571454885,audited
sc_2432,timestamp_dependence,Medium,Yearn,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",106890.94,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn Router contract,5.0,0.8784111456008984,audited
sc_2433,integer_overflow,High,Synthetix,Proxy,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",159855.72,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Synthetix Proxy contract,7.1,0.4745395027261764,unaudited
sc_2434,uninitialized_storage,High,Compound,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",252101.69,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Compound Lending contract,7.6,0.27077394405724825,unaudited
sc_2435,integer_overflow,High,PancakeSwap,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",34048.18,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap Lending contract,8.1,0.23021603519514336,audited
sc_2436,integer_overflow,High,1inch,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",9994.78,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in 1inch Bridge contract,7.0,0.3192290127362554,unaudited
sc_2437,reentrancy,Critical,Rari,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",47434.88,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Rari ERC20 contract,9.7,0.5749852013845715,audited
sc_2438,dos_gas_limit,Medium,PancakeSwap,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19736.65,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap Vault contract,4.1,0.6228969060392844,unaudited
sc_2439,reentrancy,Critical,Frax,Oracle,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",79995.15,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Frax Oracle contract,9.5,0.7464935664640092,audited
sc_2440,access_control,High,Alpha Homora,ERC1155,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",75985.03,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora ERC1155 contract,8.3,0.2888536927016506,audited
sc_2441,access_control,High,Yearn,Pool,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",52901.96,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn Pool contract,7.3,0.37782344165955684,unaudited
sc_2442,unchecked_call,Medium,Balancer,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",29513.44,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer ERC20 contract,4.3,0.2680775587444314,audited
sc_2443,uninitialized_storage,High,Frax,Vault,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",74641.22,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax Vault contract,7.5,0.43259164585633103,audited
sc_2444,timestamp_dependence,Medium,SushiSwap,ERC20,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",24449.91,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in SushiSwap ERC20 contract,4.7,0.2935336732130649,audited
sc_2445,reentrancy,Critical,Compound,Governor,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",431832.41,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Compound Governor contract,9.4,0.3397862776026632,unaudited
sc_2446,uninitialized_storage,High,Curve,Staking,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",103632.4,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve Staking contract,7.3,0.14929746252862783,audited
sc_2447,short_address,Medium,SushiSwap,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",130886.14,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in SushiSwap Farming contract,6.0,0.3343889863325686,audited
sc_2448,random_weakness,High,Curve,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",48167.91,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Curve Factory contract,7.8,0.2824700460557434,audited
sc_2449,access_control,High,1inch,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",71874.65,13,0.26,0.8,2,0,1,1,High access_control vulnerability in 1inch Timelock contract,7.4,0.8993340122458859,audited
sc_2450,tx_origin,Medium,Compound,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48936.57,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Compound Vault contract,6.1,0.5348697536715108,audited
sc_2451,reentrancy,Critical,Rari,Vault,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",14844.01,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Rari Vault contract,9.4,0.9363290908159404,audited
sc_2452,front_running,Medium,dYdX,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15124.76,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in dYdX Pool contract,5.0,0.5514563065140902,audited
sc_2453,delegatecall_injection,Critical,Yearn,Farming,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",62956.61,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Yearn Farming contract,9.0,0.6654779748293436,audited
sc_2454,timestamp_dependence,Medium,dYdX,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",22268.89,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX AMM contract,5.2,0.852790585797221,audited
sc_2455,unchecked_call,Medium,1inch,Oracle,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",24020.43,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Oracle contract,6.8,0.5041695178751482,unaudited
sc_2456,tx_origin,Medium,Curve,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49416.37,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Curve Factory contract,5.3,0.55761151144534,audited
sc_2457,access_control,High,Frax,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",22193.59,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Frax Factory contract,7.2,0.35690788387647565,unaudited
sc_2458,front_running,Medium,Compound,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50718.17,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound Oracle contract,6.6,0.5091018328734561,unaudited
sc_2459,delegatecall_injection,Critical,MakerDAO,Oracle,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",601667.7,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in MakerDAO Oracle contract,9.8,0.18097367375453466,audited
sc_2460,delegatecall_injection,Critical,Frax,Timelock,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",78963.1,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax Timelock contract,9.2,0.5295605511470094,unaudited
sc_2461,delegatecall_injection,Critical,Aave,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",302524.8,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Aave ERC1155 contract,9.4,0.700193517479631,audited
sc_2462,integer_overflow,High,Yearn,Lending,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",53084.85,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Yearn Lending contract,8.0,0.2452083837716619,unaudited
sc_2463,uninitialized_storage,High,Rari,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",70293.91,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Rari Bridge contract,7.4,0.35991141906046886,unaudited
sc_2464,reentrancy,Critical,Balancer,Factory,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",113106.01,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Balancer Factory contract,9.6,0.35847961587668753,unaudited
sc_2465,reentrancy,Critical,Liquity,Oracle,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",54494.31,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Liquity Oracle contract,9.8,0.37634926664659485,audited
sc_2466,timestamp_dependence,Medium,1inch,Oracle,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",27071.87,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in 1inch Oracle contract,6.6,0.9133744660006686,audited
sc_2467,access_control,High,1inch,AMM,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",61389.66,13,0.26,0.8,2,0,1,1,High access_control vulnerability in 1inch AMM contract,7.3,0.5722816797347541,unaudited
sc_2468,delegatecall_injection,Critical,SushiSwap,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",37504.71,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in SushiSwap Strategy contract,9.0,0.24416555322659705,unaudited
sc_2469,delegatecall_injection,Critical,Euler,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",109691.44,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler AMM contract,9.6,0.9610726619418747,audited
sc_2470,uninitialized_storage,High,Convex,Router,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",42046.04,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Convex Router contract,8.4,0.49262893516808837,audited
sc_2471,front_running,Medium,Balancer,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15225.1,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer Factory contract,5.2,0.6005424030903764,unaudited
sc_2472,random_weakness,High,Balancer,ERC721,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",15709.61,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Balancer ERC721 contract,8.3,0.8717991258186154,audited
sc_2473,random_weakness,High,Yearn,Strategy,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",126157.49,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn Strategy contract,7.8,0.4358319968711526,unaudited
sc_2474,random_weakness,High,Yearn,Governor,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",237965.35,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn Governor contract,7.9,0.6552595284266401,audited
sc_2475,random_weakness,High,Uniswap,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",312110.31,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Uniswap Staking contract,7.5,0.18896089942260286,audited
sc_2476,reentrancy,Critical,Euler,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",12376.92,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler ERC20 contract,9.1,0.8678054802195398,audited
sc_2477,random_weakness,High,Compound,Farming,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",143342.22,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Farming contract,7.3,0.6351782596800761,audited
sc_2478,tx_origin,Medium,Alpha Homora,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8955.81,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora ERC20 contract,5.9,0.949912919542145,audited
sc_2479,dos_gas_limit,Medium,Yearn,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",110729.3,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn DEX contract,5.4,0.13539489635304996,audited
sc_2480,reentrancy,Critical,Curve,Proxy,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",125854.7,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Curve Proxy contract,10.0,0.9235702039289245,audited
sc_2481,uninitialized_storage,High,MakerDAO,DEX,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",175166.36,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO DEX contract,7.3,0.20963026900174658,audited
sc_2482,unchecked_call,Medium,Aave,Bridge,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",177566.15,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave Bridge contract,4.3,0.2464460732513304,audited
sc_2483,front_running,Medium,1inch,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",26579.13,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch ERC1155 contract,4.5,0.9350758905832451,audited
sc_2484,uninitialized_storage,High,dYdX,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",85497.69,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX Staking contract,7.9,0.8003594364443174,audited
sc_2485,tx_origin,Medium,Liquity,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35428.93,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity ERC1155 contract,4.2,0.9275157245550741,unaudited
sc_2486,random_weakness,High,Yearn,ERC1155,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",75791.54,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn ERC1155 contract,7.4,0.7409633074499228,audited
sc_2487,integer_overflow,High,Euler,Oracle,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",65277.81,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler Oracle contract,8.6,0.5640586518236601,audited
sc_2488,integer_overflow,High,Convex,ERC1155,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",81026.02,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Convex ERC1155 contract,8.6,0.9573142706748339,audited
sc_2489,dos_gas_limit,Medium,dYdX,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64574.32,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in dYdX ERC721 contract,5.0,0.3964316882281922,audited
sc_2490,tx_origin,Medium,MakerDAO,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47653.9,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO Lending contract,5.0,0.5003532744246912,audited
sc_2491,access_control,High,Liquity,DEX,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",56071.53,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Liquity DEX contract,8.7,0.28044673317883795,audited
sc_2492,front_running,Medium,dYdX,Proxy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",9790.46,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in dYdX Proxy contract,6.3,0.2716760604390486,audited
sc_2493,short_address,Medium,Rari,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44370.74,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Rari Proxy contract,6.2,0.8370323836369647,audited
sc_2494,short_address,Medium,Convex,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58118.04,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex Router contract,6.2,0.6576060921165267,audited
sc_2495,random_weakness,High,dYdX,Farming,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",59781.46,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX Farming contract,8.4,0.450573009502945,audited
sc_2496,integer_overflow,High,Liquity,ERC1155,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",23350.43,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity ERC1155 contract,8.4,0.8070705143765553,audited
sc_2497,tx_origin,Medium,Yearn,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28550.98,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Yearn Vault contract,4.8,0.17364696916566658,unaudited
sc_2498,reentrancy,Critical,SushiSwap,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",120027.44,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in SushiSwap Lending contract,9.4,0.16263577363129678,unaudited
sc_2499,short_address,Medium,Yearn,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",154322.34,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn Strategy contract,5.7,0.8341603309328264,audited
sc_2500,random_weakness,High,Compound,Router,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",140388.62,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Router contract,7.8,0.8351333799911725,audited
sc_2501,reentrancy,Critical,dYdX,Router,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",68752.91,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in dYdX Router contract,9.9,0.16795376923383315,audited
sc_2502,uninitialized_storage,High,MakerDAO,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",394746.24,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in MakerDAO Proxy contract,8.1,0.4967909642730124,unaudited
sc_2503,short_address,Medium,Euler,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33846.71,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Euler AMM contract,6.1,0.992406332055132,unaudited
sc_2504,delegatecall_injection,Critical,SushiSwap,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",53910.45,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in SushiSwap Staking contract,9.2,0.46627506647809913,audited
sc_2505,unchecked_call,Medium,Alpha Homora,Farming,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",10315.81,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora Farming contract,4.8,0.940237908685529,unaudited
sc_2506,short_address,Medium,Synthetix,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52766.53,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Proxy contract,4.2,0.7613473418650724,unaudited
sc_2507,reentrancy,Critical,Rari,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",94053.14,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Rari Oracle contract,9.5,0.14313424684075027,audited
sc_2508,front_running,Medium,Curve,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",153299.71,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve Factory contract,5.9,0.5501159898696593,audited
sc_2509,delegatecall_injection,Critical,Synthetix,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",144324.43,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix Strategy contract,9.4,0.8974912153745164,audited
sc_2510,front_running,Medium,Balancer,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42457.62,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Balancer ERC721 contract,4.9,0.9325706698038976,audited
sc_2511,unchecked_call,Medium,Rari,Farming,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",6586.35,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Rari Farming contract,6.5,0.45377050176171796,audited
sc_2512,random_weakness,High,SushiSwap,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",31116.67,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in SushiSwap Proxy contract,8.0,0.18325679186508467,unaudited
sc_2513,front_running,Medium,SushiSwap,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",61653.79,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in SushiSwap Strategy contract,5.5,0.22470173912631375,audited
sc_2514,access_control,High,Euler,ERC20,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",18669.99,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Euler ERC20 contract,7.3,0.7919344758583392,audited
sc_2515,reentrancy,Critical,SushiSwap,Bridge,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",285864.58,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in SushiSwap Bridge contract,9.6,0.9162140363474033,audited
sc_2516,short_address,Medium,1inch,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52541.89,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in 1inch Factory contract,5.5,0.26632386938645325,audited
sc_2517,delegatecall_injection,Critical,dYdX,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",60853.61,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX Factory contract,9.4,0.3398670777565479,unaudited
sc_2518,reentrancy,Critical,Yearn,Factory,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",136316.49,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Yearn Factory contract,10.0,0.8947989151303937,audited
sc_2519,front_running,Medium,Uniswap,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",216473.48,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Uniswap Strategy contract,4.1,0.8292801622470135,unaudited
sc_2520,tx_origin,Medium,Aave,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",206103.15,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Aave Strategy contract,5.7,0.8068676717979315,audited
sc_2521,unchecked_call,Medium,PancakeSwap,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",31707.66,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in PancakeSwap Factory contract,6.6,0.17397331277222894,audited
sc_2522,integer_overflow,High,PancakeSwap,Oracle,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",31975.78,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in PancakeSwap Oracle contract,7.4,0.6836744226056165,unaudited
sc_2523,tx_origin,Medium,Synthetix,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",83834.66,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Synthetix ERC1155 contract,6.0,0.7928614694304689,audited
sc_2524,short_address,Medium,Aave,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",157112.82,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Aave Governor contract,4.1,0.9056105729486018,audited
sc_2525,tx_origin,Medium,Uniswap,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",125041.22,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Bridge contract,6.0,0.5925660416646285,unaudited
sc_2526,reentrancy,Critical,Liquity,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",54638.47,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Liquity Router contract,9.1,0.6008361160736928,audited
sc_2527,delegatecall_injection,Critical,MakerDAO,ERC721,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",310961.38,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in MakerDAO ERC721 contract,9.9,0.3802866622553128,audited
sc_2528,random_weakness,High,Synthetix,Strategy,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",145306.87,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Synthetix Strategy contract,8.4,0.4522389965429985,unaudited
sc_2529,tx_origin,Medium,Alpha Homora,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16544.61,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora Farming contract,5.7,0.9157520926340942,unaudited
sc_2530,uninitialized_storage,High,dYdX,Staking,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",57105.59,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX Staking contract,8.3,0.7876724957007953,unaudited
sc_2531,integer_overflow,High,dYdX,AMM,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",71508.67,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in dYdX AMM contract,8.4,0.8654607244102811,audited
sc_2532,uninitialized_storage,High,PancakeSwap,Farming,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",13734.62,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in PancakeSwap Farming contract,8.1,0.6328041777557402,unaudited
sc_2533,timestamp_dependence,Medium,1inch,ERC1155,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",41093.31,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in 1inch ERC1155 contract,5.1,0.3678416874991247,audited
sc_2534,reentrancy,Critical,MakerDAO,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",239466.38,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in MakerDAO Strategy contract,9.6,0.24400567311856006,audited
sc_2535,timestamp_dependence,Medium,SushiSwap,ERC1155,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",15342.25,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in SushiSwap ERC1155 contract,4.6,0.10497295911666239,audited
sc_2536,access_control,High,Aave,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",295886.16,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Bridge contract,8.4,0.8218234077360825,audited
sc_2537,access_control,High,Balancer,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",77239.98,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Router contract,8.0,0.7241018344609539,audited
sc_2538,front_running,Medium,PancakeSwap,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40358.62,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in PancakeSwap ERC20 contract,4.8,0.5232756620268346,unaudited
sc_2539,access_control,High,Convex,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",69109.27,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Convex Factory contract,8.1,0.9402065291455268,audited
sc_2540,random_weakness,High,PancakeSwap,Timelock,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",16544.06,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap Timelock contract,8.2,0.9179411508262559,audited
sc_2541,timestamp_dependence,Medium,Liquity,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",25065.6,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity Lending contract,5.1,0.49666851290274805,audited
sc_2542,access_control,High,SushiSwap,Vault,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",95376.96,13,0.26,0.8,2,0,1,1,High access_control vulnerability in SushiSwap Vault contract,7.4,0.6993715649754729,audited
sc_2543,delegatecall_injection,Critical,Rari,Bridge,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",43430.68,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari Bridge contract,9.1,0.6933357724929794,unaudited
sc_2544,integer_overflow,High,Curve,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",43212.35,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Curve Bridge contract,8.2,0.5676664000796824,audited
sc_2545,integer_overflow,High,1inch,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",42524.36,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in 1inch Governor contract,8.2,0.9350595913417238,audited
sc_2546,short_address,Medium,SushiSwap,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53269.05,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in SushiSwap Pool contract,5.2,0.8755623132392447,audited
sc_2547,timestamp_dependence,Medium,Uniswap,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",181705.68,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Uniswap Pool contract,6.8,0.6516176732512161,audited
sc_2548,dos_gas_limit,Medium,dYdX,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14201.06,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in dYdX ERC721 contract,6.9,0.8870728374857798,audited
sc_2549,uninitialized_storage,High,Alpha Homora,DEX,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",13798.45,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Alpha Homora DEX contract,7.3,0.8028069373626848,audited
sc_2550,access_control,High,Yearn,Router,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",147828.86,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn Router contract,8.7,0.8599399457297171,unaudited
sc_2551,integer_overflow,High,Uniswap,Timelock,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",199627.15,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Uniswap Timelock contract,7.5,0.1330641468802979,audited
sc_2552,dos_gas_limit,Medium,Liquity,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55180.51,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Liquity DEX contract,5.1,0.28835330778091106,unaudited
sc_2553,timestamp_dependence,Medium,dYdX,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",20812.24,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Strategy contract,5.9,0.3886225167596079,audited
sc_2554,uninitialized_storage,High,Balancer,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",47007.33,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Balancer ERC1155 contract,7.8,0.5702382333912139,unaudited
sc_2555,dos_gas_limit,Medium,Aave,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",147495.42,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Bridge contract,6.7,0.9753086881571559,audited
sc_2556,uninitialized_storage,High,MakerDAO,Lending,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",402978.61,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO Lending contract,7.4,0.6929210687484149,unaudited
sc_2557,unchecked_call,Medium,Aave,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",338416.34,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Aave ERC721 contract,4.1,0.9363630539989605,audited
sc_2558,uninitialized_storage,High,Synthetix,ERC721,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",231144.48,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix ERC721 contract,8.8,0.470192209358989,audited
sc_2559,reentrancy,Critical,Balancer,Timelock,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",65205.95,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Timelock contract,9.1,0.9397315736942998,audited
sc_2560,dos_gas_limit,Medium,Rari,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",6538.14,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Rari ERC20 contract,5.8,0.5484100319182319,audited
sc_2561,random_weakness,High,MakerDAO,Strategy,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",143162.08,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in MakerDAO Strategy contract,8.6,0.4274344367894839,unaudited
sc_2562,timestamp_dependence,Medium,Alpha Homora,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",21718.68,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Alpha Homora Proxy contract,6.3,0.42705640994538563,audited
sc_2563,integer_overflow,High,Curve,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",98347.26,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Curve Router contract,8.7,0.7963169620764718,audited
sc_2564,front_running,Medium,Yearn,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",87243.7,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Yearn Pool contract,6.4,0.7747316827883515,unaudited
sc_2565,dos_gas_limit,Medium,Aave,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",322429.73,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Router contract,6.0,0.24868254527579955,audited
sc_2566,tx_origin,Medium,Euler,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56630.27,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Euler ERC721 contract,5.8,0.7420658429491968,unaudited
sc_2567,delegatecall_injection,Critical,PancakeSwap,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",16865.49,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Proxy contract,9.3,0.12570707448674903,unaudited
sc_2568,timestamp_dependence,Medium,SushiSwap,DEX,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",89490.34,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap DEX contract,4.5,0.5189827557216219,audited
sc_2569,random_weakness,High,Rari,Staking,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",25119.68,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari Staking contract,7.5,0.8491316062054379,audited
sc_2570,short_address,Medium,Compound,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",257638.78,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Compound Factory contract,6.4,0.13608517556058497,audited
sc_2571,timestamp_dependence,Medium,PancakeSwap,Timelock,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",40520.64,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in PancakeSwap Timelock contract,4.0,0.48278723584830086,audited
sc_2572,front_running,Medium,Compound,ERC20,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",302666.19,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound ERC20 contract,6.0,0.2590097087661317,unaudited
sc_2573,integer_overflow,High,dYdX,Staking,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",48170.24,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in dYdX Staking contract,7.6,0.8530161932089415,audited
sc_2574,reentrancy,Critical,Aave,Proxy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",349037.77,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Aave Proxy contract,9.1,0.9469335929335316,audited
sc_2575,reentrancy,Critical,Frax,Timelock,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",37517.08,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Frax Timelock contract,9.8,0.3577035709015739,audited
sc_2576,integer_overflow,High,Frax,Lending,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",18837.16,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Frax Lending contract,7.8,0.12911374127281242,audited
sc_2577,tx_origin,Medium,SushiSwap,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",43316.85,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in SushiSwap Pool contract,4.8,0.13118679734579367,audited
sc_2578,short_address,Medium,Liquity,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19025.9,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity Oracle contract,4.0,0.3520991338397512,unaudited
sc_2579,unchecked_call,Medium,Curve,Timelock,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",152083.05,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Timelock contract,4.7,0.28167661517770826,unaudited
sc_2580,uninitialized_storage,High,SushiSwap,ERC721,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",227543.32,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in SushiSwap ERC721 contract,7.1,0.17772475803085647,unaudited
sc_2581,timestamp_dependence,Medium,SushiSwap,ERC1155,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",19011.54,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap ERC1155 contract,4.8,0.17738762587477708,audited
sc_2582,random_weakness,High,Aave,Pool,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",221397.14,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Aave Pool contract,8.8,0.627143603870748,unaudited
sc_2583,delegatecall_injection,Critical,Synthetix,ERC20,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",163796.83,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Synthetix ERC20 contract,9.1,0.7774677407259165,audited
sc_2584,delegatecall_injection,Critical,Frax,ERC20,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",73414.23,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax ERC20 contract,9.7,0.9419690279974398,audited
sc_2585,timestamp_dependence,Medium,Compound,Vault,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",237447.01,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Compound Vault contract,6.3,0.11532619298791724,unaudited
sc_2586,random_weakness,High,1inch,Bridge,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",36535.82,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in 1inch Bridge contract,8.5,0.3354231953440019,unaudited
sc_2587,random_weakness,High,dYdX,Pool,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",45306.67,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX Pool contract,8.5,0.8067815534896607,audited
sc_2588,access_control,High,Liquity,Pool,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",35937.68,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Liquity Pool contract,7.9,0.41081084031162296,audited
sc_2589,random_weakness,High,Rari,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",28162.25,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari ERC721 contract,7.0,0.9311728426760657,audited
sc_2590,short_address,Medium,SushiSwap,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44148.62,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in SushiSwap AMM contract,5.4,0.6464930772842232,unaudited
sc_2591,integer_overflow,High,Alpha Homora,Proxy,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",75473.64,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora Proxy contract,7.7,0.5397658411658388,audited
sc_2592,timestamp_dependence,Medium,Convex,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",7474.54,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Convex Governor contract,5.9,0.7130204533782388,unaudited
sc_2593,dos_gas_limit,Medium,Compound,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53861.62,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound ERC721 contract,5.8,0.15616427227543264,unaudited
sc_2594,tx_origin,Medium,Alpha Homora,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15700.79,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora Bridge contract,6.2,0.18014545307741725,audited
sc_2595,tx_origin,Medium,Euler,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23192.2,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Euler Vault contract,5.9,0.67342997860268,unaudited
sc_2596,uninitialized_storage,High,Compound,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",113705.35,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Compound Timelock contract,7.5,0.9158813751647324,audited
sc_2597,delegatecall_injection,Critical,Convex,Router,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",16354.58,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex Router contract,9.1,0.856787191777447,audited
sc_2598,reentrancy,Critical,Uniswap,Timelock,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",326144.85,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Uniswap Timelock contract,9.5,0.7719592990886693,audited
sc_2599,dos_gas_limit,Medium,Uniswap,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52896.61,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Uniswap Governor contract,5.2,0.9356174998170217,unaudited
sc_2600,tx_origin,Medium,Frax,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21607.8,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Staking contract,6.3,0.31723118133889866,audited
sc_2601,reentrancy,Critical,Alpha Homora,Vault,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",20313.46,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora Vault contract,9.3,0.4136094647382783,audited
sc_2602,unchecked_call,Medium,Yearn,Governor,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",124123.03,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn Governor contract,6.9,0.48555690359887493,audited
sc_2603,access_control,High,Synthetix,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",115467.76,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Synthetix AMM contract,8.5,0.6183261760595756,unaudited
sc_2604,reentrancy,Critical,Uniswap,AMM,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",123445.42,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Uniswap AMM contract,9.2,0.11211272117724654,unaudited
sc_2605,timestamp_dependence,Medium,Aave,ERC721,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",123982.68,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Aave ERC721 contract,4.2,0.38835141566443065,unaudited
sc_2606,unchecked_call,Medium,MakerDAO,ERC20,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",214973.83,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in MakerDAO ERC20 contract,4.7,0.1727116566297342,audited
sc_2607,reentrancy,Critical,Convex,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",73709.07,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Convex Vault contract,9.2,0.7774546609901675,audited
sc_2608,dos_gas_limit,Medium,Liquity,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48777.76,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Liquity AMM contract,4.6,0.8877729100404556,unaudited
sc_2609,tx_origin,Medium,Frax,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45976.66,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Frax Factory contract,6.4,0.2180748736554669,audited
sc_2610,dos_gas_limit,Medium,Euler,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",59168.86,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Euler Strategy contract,6.1,0.962749862129945,audited
sc_2611,integer_overflow,High,Compound,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",219638.99,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Compound Lending contract,8.2,0.35387642710510525,unaudited
sc_2612,reentrancy,Critical,Frax,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",65944.49,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Frax Farming contract,9.6,0.192012769305335,audited
sc_2613,short_address,Medium,Frax,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44528.51,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Frax Governor contract,4.4,0.590146449231335,audited
sc_2614,reentrancy,Critical,Uniswap,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",164087.18,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Uniswap Timelock contract,9.7,0.8705854548929493,audited
sc_2615,timestamp_dependence,Medium,SushiSwap,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",177023.4,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap Bridge contract,6.2,0.7017752060797694,unaudited
sc_2616,tx_origin,Medium,Aave,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",158771.3,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave Oracle contract,4.3,0.7035935367083068,audited
sc_2617,random_weakness,High,Yearn,DEX,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",66015.12,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn DEX contract,8.9,0.4290909443325239,audited
sc_2618,short_address,Medium,Euler,ERC721,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64623.95,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Euler ERC721 contract,6.8,0.9230655618553886,audited
sc_2619,dos_gas_limit,Medium,Uniswap,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",160378.35,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Uniswap Lending contract,5.8,0.7821780819433877,audited
sc_2620,delegatecall_injection,Critical,SushiSwap,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",130551.98,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in SushiSwap Bridge contract,9.3,0.5942590789488357,unaudited
sc_2621,uninitialized_storage,High,Yearn,DEX,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",151282.61,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Yearn DEX contract,7.6,0.3384227482108295,audited
sc_2622,uninitialized_storage,High,Balancer,Governor,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",91012.2,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Balancer Governor contract,7.8,0.4552585879360166,audited
sc_2623,uninitialized_storage,High,Curve,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",221403.29,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve Lending contract,7.4,0.9018650411150375,audited
sc_2624,front_running,Medium,Liquity,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7705.75,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Liquity AMM contract,6.2,0.700041660139557,audited
sc_2625,short_address,Medium,Synthetix,ERC721,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",78141.13,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Synthetix ERC721 contract,4.0,0.370385587662045,audited
sc_2626,tx_origin,Medium,dYdX,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20363.27,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX ERC1155 contract,4.3,0.4980484061649406,audited
sc_2627,unchecked_call,Medium,Alpha Homora,Oracle,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",30881.58,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora Oracle contract,6.3,0.4812340776896197,audited
sc_2628,random_weakness,High,PancakeSwap,Governor,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",18393.55,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap Governor contract,7.1,0.10691421259390033,audited
sc_2629,access_control,High,Balancer,Vault,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",15540.47,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Vault contract,8.5,0.23525362319051898,audited
sc_2630,access_control,High,Liquity,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",21091.95,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Liquity Vault contract,8.6,0.6188136252391753,audited
sc_2631,dos_gas_limit,Medium,Aave,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",165158.07,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Aave ERC1155 contract,4.8,0.8940194484427252,unaudited
sc_2632,tx_origin,Medium,1inch,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33570.08,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch ERC1155 contract,5.4,0.30863496211552227,audited
sc_2633,delegatecall_injection,Critical,Yearn,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",268511.46,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Yearn Factory contract,9.8,0.5607475698910529,audited
sc_2634,front_running,Medium,Rari,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57598.17,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Rari Oracle contract,6.3,0.1498587943383635,unaudited
sc_2635,uninitialized_storage,High,Rari,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",42645.28,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Rari ERC1155 contract,7.2,0.5399892286918186,audited
sc_2636,random_weakness,High,SushiSwap,Factory,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",200005.14,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in SushiSwap Factory contract,8.3,0.8112574768294402,unaudited
sc_2637,short_address,Medium,Convex,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31372.7,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex DEX contract,6.6,0.6347558465090548,audited
sc_2638,access_control,High,Synthetix,ERC721,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",105749.87,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Synthetix ERC721 contract,7.1,0.897268352370479,unaudited
sc_2639,integer_overflow,High,Aave,Strategy,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",383626.49,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Aave Strategy contract,8.2,0.544894559244221,audited
sc_2640,random_weakness,High,Compound,Strategy,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",279821.61,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Strategy contract,8.4,0.8720376621252246,audited
sc_2641,reentrancy,Critical,Curve,Vault,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",55109.7,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Curve Vault contract,9.2,0.9877155952321913,unaudited
sc_2642,tx_origin,Medium,Uniswap,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",67584.26,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Uniswap Governor contract,6.5,0.9614866637612038,unaudited
sc_2643,short_address,Medium,Liquity,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25725.09,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity ERC721 contract,5.2,0.9492149622209637,audited
sc_2644,delegatecall_injection,Critical,Rari,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",81614.24,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari Pool contract,9.7,0.5631648895289885,audited
sc_2645,access_control,High,Aave,Governor,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",295680.37,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Governor contract,8.0,0.6944557115435163,audited
sc_2646,reentrancy,Critical,1inch,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",18840.25,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch Router contract,9.5,0.742778842637362,audited
sc_2647,random_weakness,High,1inch,Lending,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",46676.28,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in 1inch Lending contract,7.7,0.2814078329978334,unaudited
sc_2648,front_running,Medium,MakerDAO,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",234023.54,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in MakerDAO Pool contract,6.3,0.41061277265281027,unaudited
sc_2649,short_address,Medium,Rari,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34098.28,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Rari ERC721 contract,4.3,0.40296961281472876,audited
sc_2650,integer_overflow,High,Alpha Homora,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",49139.59,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora ERC20 contract,8.8,0.8885149516081191,audited
sc_2651,timestamp_dependence,Medium,Uniswap,DEX,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",249600.63,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Uniswap DEX contract,6.8,0.1431499821866952,audited
sc_2652,front_running,Medium,SushiSwap,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",145719.47,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in SushiSwap Strategy contract,5.7,0.5820793223123811,unaudited
sc_2653,delegatecall_injection,Critical,Frax,Router,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",38044.19,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax Router contract,9.6,0.1934437928521489,audited
sc_2654,random_weakness,High,Frax,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",35166.39,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax ERC721 contract,7.7,0.1565413058319389,unaudited
sc_2655,uninitialized_storage,High,Compound,Farming,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",486132.56,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Compound Farming contract,8.5,0.5615633475296294,audited
sc_2656,short_address,Medium,dYdX,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19765.71,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in dYdX Oracle contract,4.1,0.7957009276718575,audited
sc_2657,unchecked_call,Medium,Rari,Proxy,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",36796.82,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari Proxy contract,4.3,0.6969986903196317,unaudited
sc_2658,random_weakness,High,Compound,Oracle,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",417502.17,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Compound Oracle contract,8.5,0.6717847046287839,audited
sc_2659,delegatecall_injection,Critical,Synthetix,Timelock,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",189112.17,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix Timelock contract,9.7,0.7983269537947224,audited
sc_2660,uninitialized_storage,High,Aave,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",343655.88,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave Timelock contract,8.1,0.5658212482199179,audited
sc_2661,delegatecall_injection,Critical,dYdX,Pool,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",83600.15,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX Pool contract,9.2,0.7998174092198083,audited
sc_2662,timestamp_dependence,Medium,Uniswap,ERC1155,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",302407.85,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Uniswap ERC1155 contract,6.0,0.9254125014068085,audited
sc_2663,front_running,Medium,1inch,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18630.65,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in 1inch Oracle contract,5.0,0.6302946087698761,audited
sc_2664,random_weakness,High,Uniswap,Router,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",351411.66,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Uniswap Router contract,7.0,0.14715756967600035,audited
sc_2665,timestamp_dependence,Medium,dYdX,Lending,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",35966.51,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Lending contract,4.1,0.919023996330489,audited
sc_2666,short_address,Medium,dYdX,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46321.48,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in dYdX AMM contract,4.8,0.13278557463014562,unaudited
sc_2667,integer_overflow,High,MakerDAO,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",178572.04,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Pool contract,7.6,0.5416025101517847,unaudited
sc_2668,tx_origin,Medium,SushiSwap,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",60803.61,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in SushiSwap ERC20 contract,6.7,0.6116199829813765,audited
sc_2669,dos_gas_limit,Medium,Aave,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",239017.58,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Lending contract,4.3,0.23850060283108573,audited
sc_2670,uninitialized_storage,High,Euler,Governor,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",15879.89,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Euler Governor contract,7.5,0.39967835607125957,audited
sc_2671,dos_gas_limit,Medium,Curve,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",106729.24,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve Pool contract,4.3,0.4908818903054266,audited
sc_2672,delegatecall_injection,Critical,Compound,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",133740.53,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Compound ERC1155 contract,9.7,0.14066970880246876,audited
sc_2673,delegatecall_injection,Critical,SushiSwap,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",260261.11,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in SushiSwap ERC721 contract,9.9,0.765675326411253,audited
sc_2674,uninitialized_storage,High,Rari,Governor,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",35594.35,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Rari Governor contract,7.0,0.4009404356800057,audited
sc_2675,front_running,Medium,Euler,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35405.11,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Euler Vault contract,5.5,0.17918675992333843,audited
sc_2676,short_address,Medium,Uniswap,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",87818.26,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Uniswap Oracle contract,5.2,0.7954617924383711,audited
sc_2677,integer_overflow,High,Synthetix,Timelock,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",41309.48,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Timelock contract,7.1,0.9056163298312097,audited
sc_2678,reentrancy,Critical,Alpha Homora,DEX,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",96821.47,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora DEX contract,9.9,0.5401646020753674,audited
sc_2679,uninitialized_storage,High,SushiSwap,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",106667.15,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in SushiSwap ERC721 contract,8.0,0.37114335903573203,audited
sc_2680,unchecked_call,Medium,PancakeSwap,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",17892.09,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in PancakeSwap Bridge contract,5.4,0.7301754734499135,audited
sc_2681,unchecked_call,Medium,dYdX,ERC1155,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",47331.8,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in dYdX ERC1155 contract,5.9,0.7635777420596201,audited
sc_2682,access_control,High,Convex,Timelock,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",69697.03,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Convex Timelock contract,7.6,0.15303070978060948,unaudited
sc_2683,timestamp_dependence,Medium,MakerDAO,Factory,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",281223.0,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Factory contract,4.1,0.19182232171014707,audited
sc_2684,timestamp_dependence,Medium,Euler,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",13049.45,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Euler Oracle contract,5.2,0.4413971558346794,audited
sc_2685,unchecked_call,Medium,Alpha Homora,Pool,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",50742.69,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Alpha Homora Pool contract,6.0,0.6939450888369049,audited
sc_2686,timestamp_dependence,Medium,MakerDAO,Pool,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",167102.6,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Pool contract,4.2,0.5392163375668425,audited
sc_2687,delegatecall_injection,Critical,Balancer,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",57576.35,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Balancer Strategy contract,9.6,0.7380696981499133,unaudited
sc_2688,random_weakness,High,Yearn,Vault,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",97016.62,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn Vault contract,8.7,0.7162310132293307,audited
sc_2689,timestamp_dependence,Medium,PancakeSwap,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",39145.07,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Vault contract,5.3,0.12090453351932538,audited
sc_2690,short_address,Medium,Uniswap,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",226054.75,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Uniswap ERC20 contract,4.2,0.8223944393514423,unaudited
sc_2691,timestamp_dependence,Medium,SushiSwap,Factory,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",82676.74,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in SushiSwap Factory contract,4.8,0.2637232741955718,audited
sc_2692,unchecked_call,Medium,Rari,AMM,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",39763.61,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari AMM contract,6.3,0.3836733296697331,audited
sc_2693,delegatecall_injection,Critical,dYdX,ERC721,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",84059.04,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in dYdX ERC721 contract,9.1,0.7338854797405466,audited
sc_2694,uninitialized_storage,High,Rari,Bridge,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",62183.05,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Rari Bridge contract,8.4,0.16336508718201637,unaudited
sc_2695,random_weakness,High,Aave,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",144370.2,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Aave Factory contract,8.2,0.8764874441576807,audited
sc_2696,unchecked_call,Medium,1inch,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",20126.91,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in 1inch Bridge contract,5.6,0.26539593749318247,audited
sc_2697,short_address,Medium,Alpha Homora,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32626.8,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Alpha Homora ERC1155 contract,4.6,0.3800433562039671,audited
sc_2698,unchecked_call,Medium,Curve,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",144932.89,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Curve AMM contract,6.2,0.31207411951036707,audited
sc_2699,dos_gas_limit,Medium,Aave,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",240858.78,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Aave ERC20 contract,6.3,0.7273047914623358,audited
sc_2700,tx_origin,Medium,Synthetix,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",110906.64,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Synthetix Pool contract,5.5,0.7787059885663958,audited
sc_2701,tx_origin,Medium,Uniswap,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",76694.37,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Pool contract,5.7,0.8722387757439672,audited
sc_2702,access_control,High,Aave,Timelock,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",265219.28,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Timelock contract,8.0,0.29156159751789573,audited
sc_2703,delegatecall_injection,Critical,Yearn,Staking,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",259173.58,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Yearn Staking contract,9.5,0.13420937419261209,audited
sc_2704,reentrancy,Critical,Curve,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",146809.91,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Curve ERC721 contract,9.5,0.4088290841163851,audited
sc_2705,uninitialized_storage,High,PancakeSwap,Router,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",10829.72,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in PancakeSwap Router contract,8.4,0.349530913186821,unaudited
sc_2706,short_address,Medium,Liquity,ERC721,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15001.09,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Liquity ERC721 contract,5.0,0.837354511230341,audited
sc_2707,tx_origin,Medium,Compound,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",208011.4,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Compound Staking contract,5.5,0.7810543281828862,audited
sc_2708,integer_overflow,High,Aave,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",392835.1,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Aave Vault contract,8.5,0.8271986885648343,audited
sc_2709,tx_origin,Medium,Balancer,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13149.12,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Balancer Pool contract,6.7,0.36174971419782564,unaudited
sc_2710,uninitialized_storage,High,Yearn,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",94157.54,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Yearn Oracle contract,7.9,0.7781131510283006,audited
sc_2711,access_control,High,Alpha Homora,Lending,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",30306.47,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Alpha Homora Lending contract,8.2,0.5552496935748993,audited
sc_2712,timestamp_dependence,Medium,Balancer,Vault,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",17850.88,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Balancer Vault contract,6.2,0.1273975634168603,audited
sc_2713,timestamp_dependence,Medium,Yearn,DEX,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",117276.18,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn DEX contract,6.6,0.41012783170677525,audited
sc_2714,delegatecall_injection,Critical,Euler,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",51704.88,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler ERC721 contract,9.9,0.641503623250838,audited
sc_2715,uninitialized_storage,High,Balancer,Timelock,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",61262.5,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Balancer Timelock contract,7.3,0.8535565880204684,audited
sc_2716,short_address,Medium,Synthetix,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",90975.99,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Lending contract,5.9,0.5170005102054674,audited
sc_2717,uninitialized_storage,High,SushiSwap,Strategy,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",150884.6,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in SushiSwap Strategy contract,7.6,0.2949492084839881,audited
sc_2718,timestamp_dependence,Medium,Alpha Homora,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",29010.68,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Alpha Homora AMM contract,6.6,0.8641370650683579,unaudited
sc_2719,front_running,Medium,SushiSwap,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31917.71,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in SushiSwap Farming contract,6.5,0.6831296930875693,audited
sc_2720,reentrancy,Critical,dYdX,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",41141.83,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in dYdX Strategy contract,9.3,0.5284149629819179,audited
sc_2721,dos_gas_limit,Medium,Compound,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",298634.17,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Factory contract,4.8,0.8299397552219137,audited
sc_2722,short_address,Medium,Synthetix,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23649.88,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Synthetix Timelock contract,6.4,0.10569185355478228,audited
sc_2723,delegatecall_injection,Critical,Frax,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",19030.96,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax Farming contract,9.2,0.967631207711919,unaudited
sc_2724,uninitialized_storage,High,Euler,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",55148.98,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Euler Factory contract,8.4,0.697688902985987,audited
sc_2725,reentrancy,Critical,Convex,DEX,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",28084.84,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex DEX contract,9.1,0.47739701878184393,unaudited
sc_2726,reentrancy,Critical,Aave,Pool,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",206484.25,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Pool contract,9.7,0.1528783040556023,audited
sc_2727,delegatecall_injection,Critical,Frax,Strategy,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",12966.38,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Frax Strategy contract,10.0,0.8051673969663192,audited
sc_2728,delegatecall_injection,Critical,SushiSwap,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",222289.72,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in SushiSwap Bridge contract,9.9,0.1528564637448277,audited
sc_2729,reentrancy,Critical,MakerDAO,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",318662.97,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO Proxy contract,9.5,0.8893764246286553,audited
sc_2730,integer_overflow,High,Synthetix,Vault,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",245301.33,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Synthetix Vault contract,7.4,0.26017131376609015,audited
sc_2731,delegatecall_injection,Critical,dYdX,ERC20,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",69190.24,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in dYdX ERC20 contract,9.9,0.7675084555236272,audited
sc_2732,unchecked_call,Medium,SushiSwap,Pool,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",107513.33,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in SushiSwap Pool contract,6.9,0.8040022555984541,audited
sc_2733,front_running,Medium,PancakeSwap,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25426.47,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in PancakeSwap Vault contract,4.6,0.26917035192597216,audited
sc_2734,dos_gas_limit,Medium,Frax,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10955.22,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Frax Oracle contract,4.5,0.3191551205627284,unaudited
sc_2735,reentrancy,Critical,MakerDAO,Lending,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",167812.0,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO Lending contract,9.1,0.5624236542936092,unaudited
sc_2736,front_running,Medium,Synthetix,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",69732.8,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Synthetix Pool contract,6.5,0.22999626278356833,audited
sc_2737,delegatecall_injection,Critical,Compound,Factory,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",136535.77,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Compound Factory contract,9.3,0.5606391907222195,audited
sc_2738,random_weakness,High,1inch,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",13351.85,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in 1inch ERC721 contract,7.9,0.48476451764959694,audited
sc_2739,access_control,High,Compound,Factory,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",221717.77,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound Factory contract,7.1,0.9664307270400975,unaudited
sc_2740,dos_gas_limit,Medium,Frax,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47576.27,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Frax DEX contract,4.2,0.3127699335376245,audited
sc_2741,front_running,Medium,PancakeSwap,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38184.65,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in PancakeSwap Farming contract,5.2,0.2667088928429067,audited
sc_2742,integer_overflow,High,1inch,Vault,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",69400.93,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in 1inch Vault contract,7.3,0.3989055373293571,audited
sc_2743,reentrancy,Critical,Compound,Strategy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",447053.06,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Compound Strategy contract,9.2,0.16832793398423962,unaudited
sc_2744,short_address,Medium,Curve,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",119276.23,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve Oracle contract,4.7,0.784243193097849,audited
sc_2745,random_weakness,High,Balancer,Lending,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",83251.91,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Lending contract,8.0,0.5074572558112393,audited
sc_2746,integer_overflow,High,Uniswap,Router,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",167336.6,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Uniswap Router contract,7.9,0.10368517079240788,audited
sc_2747,integer_overflow,High,Alpha Homora,ERC721,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",47153.75,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora ERC721 contract,7.0,0.7710214315955295,unaudited
sc_2748,dos_gas_limit,Medium,Euler,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",67311.81,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Euler Pool contract,4.2,0.5884735749917407,unaudited
sc_2749,uninitialized_storage,High,Euler,Router,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",58554.18,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Euler Router contract,8.2,0.8161885065176798,audited
sc_2750,delegatecall_injection,Critical,Rari,Farming,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",16893.19,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Rari Farming contract,9.1,0.8332352402095212,audited
sc_2751,integer_overflow,High,Synthetix,Oracle,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",139452.77,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Oracle contract,8.3,0.8578515577812897,audited
sc_2752,reentrancy,Critical,Balancer,Timelock,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",69087.73,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Balancer Timelock contract,9.0,0.6227325178790343,audited
sc_2753,delegatecall_injection,Critical,Curve,Factory,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",291101.78,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Curve Factory contract,9.3,0.1895204469885688,unaudited
sc_2754,integer_overflow,High,dYdX,DEX,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",39411.39,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in dYdX DEX contract,8.4,0.18131255100279453,unaudited
sc_2755,timestamp_dependence,Medium,Balancer,Vault,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",14021.92,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Balancer Vault contract,5.0,0.8868517327539805,audited
sc_2756,integer_overflow,High,PancakeSwap,AMM,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",92888.86,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in PancakeSwap AMM contract,8.8,0.2305815222288791,audited
sc_2757,random_weakness,High,Liquity,AMM,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",18701.98,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity AMM contract,7.5,0.7867058220485111,unaudited
sc_2758,timestamp_dependence,Medium,1inch,DEX,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",9422.08,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in 1inch DEX contract,6.6,0.6923254639463482,audited
sc_2759,random_weakness,High,dYdX,Farming,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",46056.45,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX Farming contract,8.1,0.30044662378228276,audited
sc_2760,access_control,High,Rari,ERC1155,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",73996.39,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari ERC1155 contract,8.5,0.6168470293989631,audited
sc_2761,timestamp_dependence,Medium,Alpha Homora,DEX,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",15531.2,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Alpha Homora DEX contract,4.9,0.6617342580469626,audited
sc_2762,random_weakness,High,Aave,DEX,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",324513.44,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Aave DEX contract,8.8,0.897597016820585,audited
sc_2763,delegatecall_injection,Critical,SushiSwap,Staking,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",193086.26,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in SushiSwap Staking contract,9.0,0.9221913170822076,audited
sc_2764,short_address,Medium,Euler,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29939.8,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Euler ERC721 contract,4.9,0.6975597297678405,unaudited
sc_2765,timestamp_dependence,Medium,Euler,Lending,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",39979.64,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Euler Lending contract,4.6,0.37551537140432556,audited
sc_2766,unchecked_call,Medium,Synthetix,Timelock,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",66435.46,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Synthetix Timelock contract,5.8,0.1092071211316194,unaudited
sc_2767,unchecked_call,Medium,Yearn,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",183124.43,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn Governor contract,6.2,0.6436595090982461,audited
sc_2768,dos_gas_limit,Medium,Alpha Homora,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55028.01,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Alpha Homora Pool contract,5.9,0.67254687487948,audited
sc_2769,short_address,Medium,1inch,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18729.77,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch AMM contract,4.4,0.18999750341515553,audited
sc_2770,front_running,Medium,Rari,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",72942.97,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Rari Proxy contract,5.8,0.8351455168807979,unaudited
sc_2771,unchecked_call,Medium,Balancer,Bridge,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",49987.57,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Balancer Bridge contract,5.5,0.853109733479927,audited
sc_2772,delegatecall_injection,Critical,Uniswap,DEX,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",520937.34,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Uniswap DEX contract,9.5,0.12677655519620398,unaudited
sc_2773,front_running,Medium,Aave,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",226248.06,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Aave Factory contract,4.7,0.6345048953191958,audited
sc_2774,uninitialized_storage,High,Liquity,AMM,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",11500.72,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Liquity AMM contract,8.7,0.8031655435770408,audited
sc_2775,uninitialized_storage,High,Uniswap,AMM,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",152169.81,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Uniswap AMM contract,7.8,0.8086570707575252,audited
sc_2776,front_running,Medium,Balancer,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",17575.65,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Balancer Strategy contract,5.5,0.3549979093187926,audited
sc_2777,access_control,High,Convex,Governor,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",12042.48,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Convex Governor contract,7.9,0.9170433499824918,audited
sc_2778,timestamp_dependence,Medium,Alpha Homora,DEX,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",11691.12,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Alpha Homora DEX contract,4.2,0.1822095426360174,unaudited
sc_2779,front_running,Medium,Uniswap,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",260554.46,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Uniswap Farming contract,4.3,0.3681218848526622,audited
sc_2780,dos_gas_limit,Medium,Euler,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29117.77,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Euler Timelock contract,5.5,0.27075556531030076,audited
sc_2781,reentrancy,Critical,Alpha Homora,Pool,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",111306.48,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora Pool contract,9.0,0.5134955854162189,audited
sc_2782,integer_overflow,High,Synthetix,DEX,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",106058.37,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix DEX contract,8.2,0.7121999375609915,unaudited
sc_2783,unchecked_call,Medium,dYdX,Oracle,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",29933.54,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in dYdX Oracle contract,5.5,0.5015846433023204,audited
sc_2784,short_address,Medium,Synthetix,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",96639.68,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Synthetix ERC1155 contract,6.3,0.5333333770276135,unaudited
sc_2785,dos_gas_limit,Medium,Frax,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13684.95,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Frax Vault contract,5.1,0.9498141737627808,audited
sc_2786,dos_gas_limit,Medium,Alpha Homora,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12178.96,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Staking contract,6.5,0.24850942199810735,audited
sc_2787,reentrancy,Critical,dYdX,Lending,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",79236.08,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in dYdX Lending contract,9.0,0.12363625504180105,unaudited
sc_2788,timestamp_dependence,Medium,Frax,Farming,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",35490.49,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax Farming contract,6.4,0.6304832464709238,audited
sc_2789,tx_origin,Medium,Alpha Homora,Bridge,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23882.68,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Alpha Homora Bridge contract,6.0,0.5606996150396706,unaudited
sc_2790,uninitialized_storage,High,Curve,Timelock,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",167707.62,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve Timelock contract,8.5,0.46998736666432517,audited
sc_2791,random_weakness,High,Liquity,ERC721,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",50526.74,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity ERC721 contract,7.8,0.18840216999766324,audited
sc_2792,reentrancy,Critical,Aave,AMM,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",396162.09,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Aave AMM contract,9.2,0.6639115693667756,audited
sc_2793,dos_gas_limit,Medium,Euler,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",43688.24,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Euler Vault contract,5.9,0.8760069276535496,unaudited
sc_2794,access_control,High,Uniswap,Pool,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",316727.77,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap Pool contract,8.7,0.6369555085413682,audited
sc_2795,integer_overflow,High,Rari,Strategy,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",58467.24,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari Strategy contract,7.6,0.14800371845893578,unaudited
sc_2796,access_control,High,Aave,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",168204.67,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Router contract,7.0,0.9985941908097428,unaudited
sc_2797,delegatecall_injection,Critical,Alpha Homora,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",103248.03,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora AMM contract,9.4,0.22941188314318586,audited
sc_2798,dos_gas_limit,Medium,Curve,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",123741.17,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve ERC20 contract,5.0,0.8506172194452783,audited
sc_2799,front_running,Medium,Yearn,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",165827.24,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Yearn Proxy contract,6.2,0.8141171291257622,audited
sc_2800,access_control,High,Compound,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",398895.59,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Compound Lending contract,7.4,0.5420809746925032,unaudited
sc_2801,access_control,High,MakerDAO,Bridge,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",260603.08,13,0.26,0.8,2,0,1,1,High access_control vulnerability in MakerDAO Bridge contract,7.1,0.9871394685444785,audited
sc_2802,uninitialized_storage,High,Convex,Strategy,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",34469.22,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Convex Strategy contract,7.0,0.6446907538154694,audited
sc_2803,short_address,Medium,dYdX,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44409.08,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in dYdX Staking contract,6.6,0.4577981845333545,audited
sc_2804,tx_origin,Medium,Alpha Homora,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34036.51,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora ERC1155 contract,4.8,0.23261164563839012,audited
sc_2805,reentrancy,Critical,Convex,ERC721,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",86406.46,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex ERC721 contract,9.5,0.5997362194722665,unaudited
sc_2806,access_control,High,Synthetix,Proxy,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",182114.69,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Synthetix Proxy contract,7.5,0.8734894268424978,unaudited
sc_2807,front_running,Medium,Alpha Homora,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7274.44,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Alpha Homora Factory contract,5.4,0.6867972205749319,unaudited
sc_2808,tx_origin,Medium,MakerDAO,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34051.29,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in MakerDAO Farming contract,6.0,0.16323484010761535,unaudited
sc_2809,uninitialized_storage,High,Aave,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",347041.26,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave Oracle contract,7.4,0.1188175015051423,unaudited
sc_2810,integer_overflow,High,Compound,ERC721,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",304306.39,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Compound ERC721 contract,8.2,0.3880641139581271,audited
sc_2811,tx_origin,Medium,Compound,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",80682.41,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Compound ERC721 contract,4.2,0.1808615523775451,audited
sc_2812,delegatecall_injection,Critical,Balancer,Pool,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",46377.22,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Balancer Pool contract,9.4,0.33640682919673887,audited
sc_2813,random_weakness,High,Uniswap,Vault,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",55430.36,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Uniswap Vault contract,7.2,0.7576483850046184,audited
sc_2814,tx_origin,Medium,Uniswap,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",174798.0,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Router contract,6.6,0.6714377163503296,audited
sc_2815,unchecked_call,Medium,1inch,Lending,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",39299.7,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Lending contract,4.1,0.17032533337028716,audited
sc_2816,unchecked_call,Medium,Balancer,Strategy,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",9365.99,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Balancer Strategy contract,5.8,0.24029292898102503,audited
sc_2817,access_control,High,Curve,AMM,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",193247.91,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Curve AMM contract,8.0,0.7372696107530949,audited
sc_2818,short_address,Medium,Curve,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",109008.42,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Curve Router contract,5.0,0.31102139875303514,audited
sc_2819,short_address,Medium,Curve,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42803.57,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Curve ERC1155 contract,5.4,0.10494046322495809,unaudited
sc_2820,short_address,Medium,Synthetix,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",99440.49,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Proxy contract,4.8,0.9452255651528063,audited
sc_2821,dos_gas_limit,Medium,MakerDAO,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",102754.42,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO Bridge contract,4.8,0.8331829637044403,audited
sc_2822,unchecked_call,Medium,Alpha Homora,Vault,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",12559.83,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Alpha Homora Vault contract,5.3,0.4718760874987371,audited
sc_2823,delegatecall_injection,Critical,Rari,Staking,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",68699.38,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari Staking contract,9.2,0.29991894658173257,unaudited
sc_2824,tx_origin,Medium,Rari,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22263.37,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Rari Router contract,4.8,0.19049759274365702,unaudited
sc_2825,tx_origin,Medium,SushiSwap,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23134.82,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in SushiSwap ERC721 contract,6.4,0.3161453174203009,audited
sc_2826,tx_origin,Medium,Balancer,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",63241.21,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Balancer Farming contract,4.7,0.566970903315569,audited
sc_2827,integer_overflow,High,1inch,ERC20,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",62169.52,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in 1inch ERC20 contract,8.3,0.8442286814858619,audited
sc_2828,reentrancy,Critical,Yearn,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",36776.86,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Yearn Oracle contract,9.0,0.7841149236215953,unaudited
sc_2829,tx_origin,Medium,Curve,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",155516.57,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Curve ERC1155 contract,4.7,0.7690066456048887,audited
sc_2830,dos_gas_limit,Medium,Liquity,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48982.94,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Liquity Proxy contract,4.4,0.5420166289395602,audited
sc_2831,front_running,Medium,Yearn,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56604.93,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Yearn AMM contract,5.3,0.3929652248138239,unaudited
sc_2832,dos_gas_limit,Medium,Frax,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14777.78,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Frax ERC1155 contract,6.1,0.4893638307293974,unaudited
sc_2833,access_control,High,Compound,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",129584.76,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound Farming contract,8.4,0.9880680525034842,audited
sc_2834,front_running,Medium,Euler,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34611.03,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Euler Strategy contract,6.0,0.5434968195820832,audited
sc_2835,random_weakness,High,Convex,Timelock,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",53235.28,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Convex Timelock contract,7.8,0.5253823042560217,unaudited
sc_2836,unchecked_call,Medium,Liquity,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",74312.29,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Liquity Vault contract,4.8,0.14499772036569442,unaudited
sc_2837,random_weakness,High,Convex,Bridge,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",69225.62,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Convex Bridge contract,7.1,0.9421340725842127,unaudited
sc_2838,random_weakness,High,MakerDAO,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",349167.3,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Timelock contract,8.1,0.7678084853902221,audited
sc_2839,dos_gas_limit,Medium,SushiSwap,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",170495.26,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in SushiSwap Vault contract,6.4,0.6597821395019959,unaudited
sc_2840,front_running,Medium,1inch,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10527.92,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch Governor contract,5.4,0.359078336775454,audited
sc_2841,unchecked_call,Medium,Frax,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",60138.82,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Frax Factory contract,5.3,0.5963324659749423,audited
sc_2842,delegatecall_injection,Critical,Liquity,Governor,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",54070.46,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Liquity Governor contract,9.7,0.9389316659441767,audited
sc_2843,dos_gas_limit,Medium,MakerDAO,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",314473.32,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in MakerDAO Factory contract,6.5,0.36130889172229186,audited
sc_2844,integer_overflow,High,Aave,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",226968.26,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Aave ERC721 contract,7.6,0.7275132499921362,audited
sc_2845,timestamp_dependence,Medium,SushiSwap,Lending,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",123783.86,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in SushiSwap Lending contract,5.9,0.4646122463688803,audited
sc_2846,timestamp_dependence,Medium,SushiSwap,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",65105.31,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap DEX contract,6.6,0.41852193957790473,audited
sc_2847,tx_origin,Medium,Curve,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57571.96,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Curve Pool contract,6.1,0.7469541458992486,audited
sc_2848,access_control,High,Uniswap,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",229459.14,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Uniswap ERC1155 contract,7.4,0.37232035361521953,audited
sc_2849,delegatecall_injection,Critical,Rari,Factory,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",50822.23,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari Factory contract,9.8,0.21298140235914337,unaudited
sc_2850,dos_gas_limit,Medium,1inch,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40429.71,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in 1inch Timelock contract,4.2,0.6733710899549209,unaudited
sc_2851,reentrancy,Critical,Synthetix,ERC721,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",169882.14,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Synthetix ERC721 contract,9.3,0.9342424638863196,audited
sc_2852,front_running,Medium,Aave,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",196527.1,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Aave Strategy contract,5.7,0.9697194978748208,audited
sc_2853,unchecked_call,Medium,MakerDAO,Strategy,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",255884.56,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in MakerDAO Strategy contract,6.4,0.6311568043172312,unaudited
sc_2854,dos_gas_limit,Medium,Convex,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32539.42,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Convex Factory contract,5.4,0.9840066489733555,unaudited
sc_2855,timestamp_dependence,Medium,Aave,Vault,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",239489.43,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave Vault contract,5.0,0.44347271114767906,audited
sc_2856,access_control,High,dYdX,Timelock,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",83781.0,13,0.26,0.8,2,0,1,2,High access_control vulnerability in dYdX Timelock contract,7.7,0.4638960680542087,audited
sc_2857,timestamp_dependence,Medium,Synthetix,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",18499.34,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Synthetix Lending contract,5.8,0.11812216694859437,audited
sc_2858,tx_origin,Medium,Balancer,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44894.82,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Balancer Factory contract,5.7,0.9108929104384894,unaudited
sc_2859,random_weakness,High,Frax,Router,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",42816.47,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Frax Router contract,8.2,0.5403890535634761,unaudited
sc_2860,unchecked_call,Medium,Alpha Homora,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",48919.23,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Alpha Homora Pool contract,6.2,0.6118313719017937,audited
sc_2861,timestamp_dependence,Medium,dYdX,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",25953.92,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in dYdX Farming contract,5.0,0.2127523248417028,audited
sc_2862,delegatecall_injection,Critical,MakerDAO,Proxy,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",61762.68,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in MakerDAO Proxy contract,9.9,0.231801121692299,audited
sc_2863,reentrancy,Critical,Curve,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",95656.32,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Curve ERC20 contract,9.8,0.4722573748925811,audited
sc_2864,integer_overflow,High,Yearn,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",110580.33,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Yearn ERC721 contract,8.0,0.7258228933551786,audited
sc_2865,random_weakness,High,Curve,Governor,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",32601.89,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Curve Governor contract,7.8,0.17358908292284148,audited
sc_2866,uninitialized_storage,High,Balancer,ERC721,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",52055.8,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Balancer ERC721 contract,7.5,0.9331379769515361,unaudited
sc_2867,front_running,Medium,Convex,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24605.39,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Convex Proxy contract,5.5,0.3296147439857313,audited
sc_2868,delegatecall_injection,Critical,dYdX,Proxy,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",98697.77,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in dYdX Proxy contract,9.4,0.17687328255121015,unaudited
sc_2869,reentrancy,Critical,MakerDAO,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",615581.76,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO ERC721 contract,9.3,0.5699196080577759,unaudited
sc_2870,tx_origin,Medium,Compound,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",121061.43,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Compound Bridge contract,6.3,0.6074584390025701,audited
sc_2871,random_weakness,High,Compound,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",126859.03,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Compound Timelock contract,8.8,0.718191546777546,unaudited
sc_2872,timestamp_dependence,Medium,1inch,Proxy,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",13459.97,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in 1inch Proxy contract,5.2,0.5005479647362342,unaudited
sc_2873,dos_gas_limit,Medium,PancakeSwap,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",61799.52,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in PancakeSwap Farming contract,4.9,0.7737078911627137,audited
sc_2874,tx_origin,Medium,Yearn,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",77615.88,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Yearn Lending contract,5.4,0.8717399313465338,audited
sc_2875,unchecked_call,Medium,Euler,Governor,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",32805.37,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Euler Governor contract,6.2,0.6588102646140787,unaudited
sc_2876,unchecked_call,Medium,Aave,Timelock,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",157573.3,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Aave Timelock contract,4.6,0.6306651186285419,unaudited
sc_2877,integer_overflow,High,Curve,Timelock,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",210424.35,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Curve Timelock contract,8.6,0.2970637139119976,audited
sc_2878,random_weakness,High,Curve,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",111002.84,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Curve Vault contract,7.0,0.8817132439981017,audited
sc_2879,access_control,High,dYdX,Strategy,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",57579.74,13,0.26,0.8,2,0,1,2,High access_control vulnerability in dYdX Strategy contract,7.5,0.9500228888811761,audited
sc_2880,unchecked_call,Medium,Liquity,Bridge,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",27485.11,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity Bridge contract,5.9,0.5347487029750111,audited
sc_2881,uninitialized_storage,High,Balancer,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",29781.73,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Balancer Bridge contract,8.7,0.20554903832742127,unaudited
sc_2882,delegatecall_injection,Critical,Rari,Strategy,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",23958.48,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari Strategy contract,9.6,0.9279384959322596,audited
sc_2883,unchecked_call,Medium,Alpha Homora,AMM,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",8708.96,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora AMM contract,4.2,0.5941037533842136,audited
sc_2884,timestamp_dependence,Medium,Yearn,ERC1155,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",33395.11,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn ERC1155 contract,6.7,0.729453356393175,audited
sc_2885,front_running,Medium,PancakeSwap,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35578.26,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in PancakeSwap DEX contract,6.1,0.2891392113126145,audited
sc_2886,uninitialized_storage,High,Convex,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",59466.0,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Convex Timelock contract,8.2,0.26366574726006986,audited
sc_2887,timestamp_dependence,Medium,dYdX,Farming,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",40313.4,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Farming contract,4.4,0.46464862213661096,unaudited
sc_2888,dos_gas_limit,Medium,MakerDAO,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",87653.33,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in MakerDAO Lending contract,5.5,0.4791998035369647,unaudited
sc_2889,short_address,Medium,Compound,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",201632.3,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Compound DEX contract,6.4,0.20733130501113287,audited
sc_2890,random_weakness,High,Uniswap,ERC721,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",157403.13,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Uniswap ERC721 contract,8.0,0.16253649196417222,audited
sc_2891,short_address,Medium,Balancer,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40291.87,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Balancer AMM contract,6.3,0.15063041259971527,audited
sc_2892,dos_gas_limit,Medium,dYdX,Bridge,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31061.45,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in dYdX Bridge contract,6.0,0.6942689204716428,audited
sc_2893,dos_gas_limit,Medium,Balancer,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34861.67,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Balancer Governor contract,4.4,0.47245773736692354,unaudited
sc_2894,unchecked_call,Medium,Uniswap,Router,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",30937.46,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Uniswap Router contract,5.1,0.49707635176518594,audited
sc_2895,uninitialized_storage,High,Alpha Homora,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",30171.63,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Alpha Homora Governor contract,8.8,0.12463307699389597,unaudited
sc_2896,random_weakness,High,Balancer,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",21890.63,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer ERC1155 contract,7.2,0.8318563491388177,audited
sc_2897,random_weakness,High,Frax,Strategy,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",19120.28,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Frax Strategy contract,8.6,0.667004336578975,audited
sc_2898,unchecked_call,Medium,Compound,Timelock,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",238697.5,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Compound Timelock contract,6.2,0.48225357861554896,audited
sc_2899,front_running,Medium,Balancer,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21322.51,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Balancer Vault contract,6.3,0.30886679097917746,audited
sc_2900,reentrancy,Critical,Alpha Homora,Farming,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",67875.57,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora Farming contract,9.9,0.22306452458723922,audited
sc_2901,random_weakness,High,Alpha Homora,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",42391.68,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Alpha Homora Pool contract,8.0,0.8944010606666345,audited
sc_2902,delegatecall_injection,Critical,Compound,Farming,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",503795.42,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Compound Farming contract,9.8,0.9727492942233209,unaudited
sc_2903,random_weakness,High,Alpha Homora,Farming,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",8996.79,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Alpha Homora Farming contract,8.4,0.8605252099705379,unaudited
sc_2904,unchecked_call,Medium,Frax,AMM,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",27925.89,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Frax AMM contract,5.0,0.10444819287888484,unaudited
sc_2905,dos_gas_limit,Medium,Aave,ERC20,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",236757.6,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave ERC20 contract,4.5,0.11546162440551457,audited
sc_2906,delegatecall_injection,Critical,SushiSwap,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",171068.54,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in SushiSwap Vault contract,9.9,0.3025297009647363,unaudited
sc_2907,timestamp_dependence,Medium,Rari,Pool,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",58812.99,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Rari Pool contract,4.8,0.865629000864705,unaudited
sc_2908,unchecked_call,Medium,1inch,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",41459.28,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Oracle contract,5.5,0.23383667762045215,unaudited
sc_2909,tx_origin,Medium,Yearn,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29900.17,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Bridge contract,4.5,0.10381368049996878,audited
sc_2910,delegatecall_injection,Critical,Synthetix,Bridge,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",88655.24,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix Bridge contract,9.5,0.6753190950296049,unaudited
sc_2911,delegatecall_injection,Critical,Liquity,ERC721,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",84703.29,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity ERC721 contract,9.3,0.9395717095867783,audited
sc_2912,uninitialized_storage,High,Synthetix,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",154820.46,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix Factory contract,7.6,0.9276148964891662,unaudited
sc_2913,tx_origin,Medium,Compound,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",152611.35,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Compound Staking contract,6.0,0.23103157533562635,audited
sc_2914,access_control,High,SushiSwap,Lending,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",83979.92,13,0.26,0.8,2,0,1,2,High access_control vulnerability in SushiSwap Lending contract,7.3,0.9501553103421264,audited
sc_2915,dos_gas_limit,Medium,Compound,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",221858.98,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Compound ERC20 contract,4.5,0.7724931274655826,audited
sc_2916,random_weakness,High,Compound,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",320846.0,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Vault contract,8.2,0.4009243088756317,audited
sc_2917,tx_origin,Medium,SushiSwap,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",139094.16,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in SushiSwap Lending contract,4.9,0.7686248549025897,unaudited
sc_2918,random_weakness,High,Aave,Pool,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",117197.67,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Aave Pool contract,7.2,0.10180039916611756,audited
sc_2919,short_address,Medium,Yearn,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34280.12,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn DEX contract,5.0,0.5618788138869334,audited
sc_2920,tx_origin,Medium,Uniswap,Governor,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",245046.68,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Governor contract,4.6,0.37913137855722046,audited
sc_2921,timestamp_dependence,Medium,Liquity,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",39867.42,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Liquity Timelock contract,4.2,0.6782140274986397,audited
sc_2922,random_weakness,High,Compound,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",116496.13,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Pool contract,8.9,0.13055558621279584,unaudited
sc_2923,random_weakness,High,Rari,Bridge,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",60008.45,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Rari Bridge contract,8.1,0.6798164485369269,unaudited
sc_2924,timestamp_dependence,Medium,Compound,ERC20,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",54838.29,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Compound ERC20 contract,5.4,0.36159445132212487,audited
sc_2925,short_address,Medium,Frax,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",9932.98,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Frax Staking contract,5.3,0.17368721627783595,audited
sc_2926,tx_origin,Medium,PancakeSwap,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32994.3,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in PancakeSwap AMM contract,4.7,0.16396057360836974,audited
sc_2927,integer_overflow,High,Yearn,Pool,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",64437.34,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Yearn Pool contract,7.2,0.8295064149236698,unaudited
sc_2928,dos_gas_limit,Medium,1inch,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10452.17,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in 1inch Factory contract,4.2,0.8327884719397155,audited
sc_2929,tx_origin,Medium,1inch,Bridge,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",11263.88,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in 1inch Bridge contract,5.2,0.5408578371508389,audited
sc_2930,integer_overflow,High,Alpha Homora,Farming,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",52573.84,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora Farming contract,8.2,0.5245511853594481,audited
sc_2931,reentrancy,Critical,Balancer,Staking,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",66365.0,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Balancer Staking contract,9.8,0.16806916940751043,audited
sc_2932,tx_origin,Medium,Curve,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",63090.31,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Curve AMM contract,6.5,0.29837127993558005,audited
sc_2933,short_address,Medium,Liquity,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",9021.26,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Liquity ERC20 contract,5.8,0.17102870999606284,audited
sc_2934,random_weakness,High,MakerDAO,Staking,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",325761.12,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Staking contract,7.1,0.882779228352049,audited
sc_2935,delegatecall_injection,Critical,Aave,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",427459.01,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Aave Staking contract,9.4,0.7407854004668956,audited
sc_2936,unchecked_call,Medium,Compound,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",192114.59,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Compound ERC1155 contract,5.8,0.158498155421895,audited
sc_2937,short_address,Medium,Liquity,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33357.77,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Liquity Staking contract,5.7,0.2610265805512558,unaudited
sc_2938,short_address,Medium,1inch,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",26056.95,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch Oracle contract,5.5,0.1972412671033443,unaudited
sc_2939,dos_gas_limit,Medium,Synthetix,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",87101.28,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Synthetix Lending contract,5.0,0.7839312873842033,audited
sc_2940,timestamp_dependence,Medium,PancakeSwap,ERC20,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",56595.13,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap ERC20 contract,6.4,0.2058025911335708,unaudited
sc_2941,delegatecall_injection,Critical,Yearn,Vault,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",181123.54,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Yearn Vault contract,9.2,0.6933566693485961,audited
sc_2942,integer_overflow,High,Balancer,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",39324.25,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Balancer ERC1155 contract,7.1,0.5120458897510545,audited
sc_2943,unchecked_call,Medium,MakerDAO,Lending,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",260121.44,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in MakerDAO Lending contract,4.8,0.6217780525546192,unaudited
sc_2944,integer_overflow,High,Frax,Lending,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",56568.91,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Frax Lending contract,7.8,0.6343598470160356,unaudited
sc_2945,reentrancy,Critical,Aave,Staking,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",175235.61,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Staking contract,9.1,0.1456293131510168,audited
sc_2946,delegatecall_injection,Critical,Balancer,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",79014.43,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Balancer Timelock contract,9.7,0.182478302538302,audited
sc_2947,front_running,Medium,dYdX,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33850.45,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in dYdX Staking contract,5.3,0.46407380674223186,audited
sc_2948,unchecked_call,Medium,Curve,DEX,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",50505.38,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve DEX contract,6.8,0.14473652274155735,audited
sc_2949,reentrancy,Critical,Liquity,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",74246.63,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Liquity Strategy contract,9.5,0.4822852378674779,audited
sc_2950,front_running,Medium,dYdX,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14093.68,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in dYdX Pool contract,4.8,0.7285087444504713,audited
sc_2951,unchecked_call,Medium,dYdX,Farming,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",38942.59,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in dYdX Farming contract,5.2,0.8891445114365945,audited
sc_2952,access_control,High,Compound,ERC721,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",237869.61,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound ERC721 contract,7.5,0.6793135944798393,audited
sc_2953,unchecked_call,Medium,SushiSwap,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",44179.69,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in SushiSwap ERC20 contract,4.8,0.8500389209270369,audited
sc_2954,delegatecall_injection,Critical,Curve,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",206968.39,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Curve ERC20 contract,9.9,0.7325565718468099,unaudited
sc_2955,random_weakness,High,Synthetix,Timelock,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",166215.37,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Synthetix Timelock contract,7.9,0.2962354840073922,audited
sc_2956,dos_gas_limit,Medium,Yearn,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",115103.26,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Yearn Bridge contract,6.4,0.3492200644694647,unaudited
sc_2957,integer_overflow,High,MakerDAO,Staking,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",280265.16,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in MakerDAO Staking contract,8.6,0.6680940451832107,audited
sc_2958,tx_origin,Medium,Uniswap,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",78131.02,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Uniswap DEX contract,4.5,0.7183938497380336,unaudited
sc_2959,random_weakness,High,Frax,Vault,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",60915.71,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax Vault contract,8.6,0.46488551046726834,audited
sc_2960,reentrancy,Critical,Aave,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",501897.48,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Farming contract,9.9,0.4350218865584111,unaudited
sc_2961,delegatecall_injection,Critical,Uniswap,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",426563.74,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Uniswap Vault contract,9.4,0.5264939467104516,audited
sc_2962,delegatecall_injection,Critical,Liquity,DEX,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",38406.12,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity DEX contract,9.9,0.7858355765136974,audited
sc_2963,unchecked_call,Medium,Uniswap,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",149078.52,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Uniswap ERC20 contract,5.5,0.32890420630202655,unaudited
sc_2964,dos_gas_limit,Medium,Balancer,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22457.88,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Balancer Staking contract,4.5,0.8054414528358327,unaudited
sc_2965,reentrancy,Critical,Balancer,Farming,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",42804.75,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Farming contract,9.5,0.5148271910835971,unaudited
sc_2966,short_address,Medium,1inch,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36822.29,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch Timelock contract,4.8,0.9366588291104189,unaudited
sc_2967,dos_gas_limit,Medium,Aave,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",240140.12,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Aave Router contract,6.0,0.6892602206290752,audited
sc_2968,reentrancy,Critical,Compound,DEX,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",491164.88,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Compound DEX contract,9.5,0.27941184943118214,unaudited
sc_2969,unchecked_call,Medium,Curve,Pool,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",26298.75,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Pool contract,6.3,0.28835684904614245,audited
sc_2970,front_running,Medium,Euler,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53589.85,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Euler ERC1155 contract,4.9,0.7441881944406991,unaudited
sc_2971,access_control,High,PancakeSwap,Router,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",20686.09,13,0.26,0.8,2,0,1,2,High access_control vulnerability in PancakeSwap Router contract,8.3,0.8799785801045449,audited
sc_2972,random_weakness,High,Yearn,Router,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",248995.37,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn Router contract,8.3,0.5806853326111492,audited
sc_2973,tx_origin,Medium,Uniswap,Timelock,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",90920.31,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Timelock contract,5.9,0.6344755597972914,unaudited
sc_2974,delegatecall_injection,Critical,Aave,Bridge,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",496846.64,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Aave Bridge contract,9.7,0.4531303718483829,audited
sc_2975,random_weakness,High,dYdX,ERC1155,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",38728.23,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in dYdX ERC1155 contract,8.1,0.4777771092053482,unaudited
sc_2976,unchecked_call,Medium,Compound,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",92808.15,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Compound Proxy contract,6.3,0.4475430550082171,audited
sc_2977,dos_gas_limit,Medium,Balancer,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",70110.88,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Balancer DEX contract,6.2,0.8018599789737523,unaudited
sc_2978,front_running,Medium,Euler,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48678.82,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Euler AMM contract,5.4,0.5141003457446247,audited
sc_2979,front_running,Medium,Balancer,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48909.56,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer Factory contract,5.1,0.642741389606516,audited
sc_2980,reentrancy,Critical,Compound,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",173788.08,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Compound Strategy contract,9.6,0.24978033823773185,audited
sc_2981,delegatecall_injection,Critical,Curve,Router,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",160852.4,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Curve Router contract,9.1,0.5411185880282076,audited
sc_2982,timestamp_dependence,Medium,MakerDAO,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",49250.69,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Oracle contract,4.2,0.6533627496234367,unaudited
sc_2983,delegatecall_injection,Critical,Aave,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",556293.35,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Aave ERC20 contract,9.2,0.38537379445748576,audited
sc_2984,unchecked_call,Medium,1inch,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",48898.61,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Vault contract,5.0,0.715929672902663,unaudited
sc_2985,tx_origin,Medium,Euler,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37209.45,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Euler Factory contract,5.5,0.5466125265163571,audited
sc_2986,timestamp_dependence,Medium,Curve,Pool,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",130893.34,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Curve Pool contract,4.7,0.37459986704407955,audited
sc_2987,access_control,High,Aave,Bridge,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",248638.92,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Bridge contract,8.3,0.22058814756570677,audited
sc_2988,front_running,Medium,1inch,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49409.36,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in 1inch AMM contract,5.4,0.5056017843318434,unaudited
sc_2989,timestamp_dependence,Medium,Compound,Pool,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",115231.1,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Compound Pool contract,6.1,0.40593720702528124,unaudited
sc_2990,front_running,Medium,SushiSwap,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",171621.9,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in SushiSwap Staking contract,5.9,0.9209060896406636,audited
sc_2991,random_weakness,High,PancakeSwap,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",78677.02,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap ERC1155 contract,7.8,0.4555928756551233,audited
sc_2992,delegatecall_injection,Critical,SushiSwap,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",154985.37,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in SushiSwap Router contract,9.8,0.5957954121441202,audited
sc_2993,dos_gas_limit,Medium,MakerDAO,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",261391.27,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO ERC721 contract,4.5,0.9960120819379767,audited
sc_2994,unchecked_call,Medium,Balancer,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",39839.7,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer ERC1155 contract,5.1,0.10734475127412736,audited
sc_2995,reentrancy,Critical,dYdX,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",61139.44,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in dYdX Staking contract,9.9,0.5375838772585678,audited
sc_2996,random_weakness,High,dYdX,AMM,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",76519.69,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX AMM contract,8.1,0.3146038190057336,unaudited
sc_2997,delegatecall_injection,Critical,dYdX,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",72527.33,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX AMM contract,9.9,0.9947047514015077,audited
sc_2998,short_address,Medium,Rari,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34582.73,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Rari AMM contract,4.7,0.913171965796126,unaudited
sc_2999,uninitialized_storage,High,Balancer,Bridge,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",32557.21,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Balancer Bridge contract,8.6,0.18182384150638387,audited
sc_3000,short_address,Medium,Compound,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",41097.34,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Compound ERC20 contract,4.5,0.2677098194759253,audited
sc_3001,integer_overflow,High,Frax,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",20720.23,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Frax Proxy contract,8.0,0.590956516839642,audited
sc_3002,random_weakness,High,Euler,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",26409.21,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Euler Farming contract,8.5,0.7163857246031277,audited
sc_3003,random_weakness,High,Frax,AMM,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",66231.1,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax AMM contract,8.6,0.6983323027065671,unaudited
sc_3004,random_weakness,High,SushiSwap,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",26579.23,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in SushiSwap Proxy contract,7.9,0.4138393061760508,audited
sc_3005,short_address,Medium,Balancer,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50642.6,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Balancer AMM contract,6.0,0.66975118002996,audited
sc_3006,timestamp_dependence,Medium,Alpha Homora,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",26337.72,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Alpha Homora ERC1155 contract,5.0,0.5938253916030155,unaudited
sc_3007,front_running,Medium,dYdX,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55662.54,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in dYdX Oracle contract,4.4,0.3350207279556916,audited
sc_3008,dos_gas_limit,Medium,Alpha Homora,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31564.15,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Strategy contract,6.3,0.9300505406836482,audited
sc_3009,access_control,High,Synthetix,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",90154.35,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Synthetix Timelock contract,7.8,0.4292085235177321,unaudited
sc_3010,front_running,Medium,Aave,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",78182.65,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Aave Oracle contract,6.3,0.8308900451062854,audited
sc_3011,unchecked_call,Medium,1inch,Staking,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",51004.01,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Staking contract,5.6,0.6724957908129062,audited
sc_3012,integer_overflow,High,Yearn,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",39348.05,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Yearn Proxy contract,7.5,0.8327795294305672,audited
sc_3013,integer_overflow,High,Compound,Strategy,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",126592.06,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Compound Strategy contract,8.0,0.2915047557883963,unaudited
sc_3014,tx_origin,Medium,Liquity,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35592.13,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity Oracle contract,4.9,0.8380781733173936,audited
sc_3015,tx_origin,Medium,Frax,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20500.93,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Frax DEX contract,6.4,0.7205282718132214,audited
sc_3016,uninitialized_storage,High,Aave,Governor,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",192002.53,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Aave Governor contract,7.7,0.9091460349680818,audited
sc_3017,uninitialized_storage,High,SushiSwap,Timelock,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",77311.3,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in SushiSwap Timelock contract,7.7,0.3166870975340713,unaudited
sc_3018,tx_origin,Medium,Uniswap,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",72107.69,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Uniswap Lending contract,6.2,0.5838451526331613,unaudited
sc_3019,tx_origin,Medium,Frax,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",17698.25,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Frax Governor contract,4.5,0.35431565628044126,audited
sc_3020,access_control,High,Euler,Strategy,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",44235.61,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Euler Strategy contract,7.4,0.21678348223706245,audited
sc_3021,dos_gas_limit,Medium,MakerDAO,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",286159.89,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO ERC1155 contract,5.6,0.31118701701124163,audited
sc_3022,access_control,High,MakerDAO,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",312985.14,13,0.26,0.8,2,1,1,1,High access_control vulnerability in MakerDAO ERC721 contract,7.2,0.5254899134291744,audited
sc_3023,short_address,Medium,MakerDAO,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",148920.2,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO Farming contract,4.3,0.2722720390785286,audited
sc_3024,dos_gas_limit,Medium,Liquity,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",41240.35,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Liquity Router contract,4.0,0.6911922598553085,unaudited
sc_3025,short_address,Medium,Liquity,Vault,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64943.58,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity Vault contract,6.6,0.8506516806945865,audited
sc_3026,front_running,Medium,1inch,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32102.07,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch Farming contract,4.6,0.2625083735816393,audited
sc_3027,dos_gas_limit,Medium,Alpha Homora,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42170.76,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora ERC1155 contract,5.9,0.8577504081497463,unaudited
sc_3028,random_weakness,High,Aave,ERC721,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",178485.19,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Aave ERC721 contract,8.6,0.7730838452790791,audited
sc_3029,dos_gas_limit,Medium,dYdX,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20502.23,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in dYdX ERC1155 contract,6.1,0.8915470013839294,audited
sc_3030,access_control,High,Balancer,Farming,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",44210.89,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Farming contract,8.3,0.30102460714203455,audited
sc_3031,access_control,High,1inch,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",31564.64,13,0.26,0.8,2,1,1,1,High access_control vulnerability in 1inch ERC20 contract,8.5,0.8956985796332744,unaudited
sc_3032,short_address,Medium,dYdX,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22419.55,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in dYdX Proxy contract,4.6,0.3993038011279233,audited
sc_3033,short_address,Medium,PancakeSwap,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37935.44,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in PancakeSwap Staking contract,5.3,0.14610912311722823,audited
sc_3034,uninitialized_storage,High,Aave,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",287579.55,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Aave Vault contract,8.6,0.9431564602488277,audited
sc_3035,access_control,High,Euler,ERC1155,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",24349.47,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Euler ERC1155 contract,8.0,0.46612072910804125,audited
sc_3036,access_control,High,Rari,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",65355.12,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari Bridge contract,7.6,0.509869247654545,audited
sc_3037,delegatecall_injection,Critical,dYdX,Vault,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",95558.21,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in dYdX Vault contract,9.4,0.32132939361309953,audited
sc_3038,uninitialized_storage,High,Synthetix,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",137572.65,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Synthetix Router contract,8.3,0.5617236454371131,unaudited
sc_3039,delegatecall_injection,Critical,Uniswap,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",251486.99,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Uniswap Router contract,9.6,0.27720585387998137,audited
sc_3040,timestamp_dependence,Medium,PancakeSwap,AMM,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",64150.51,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap AMM contract,6.7,0.25807883572499113,audited
sc_3041,reentrancy,Critical,Frax,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",25660.94,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Frax Bridge contract,9.4,0.1187951386746525,unaudited
sc_3042,integer_overflow,High,Rari,Staking,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",60530.83,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari Staking contract,7.3,0.8182843579002007,unaudited
sc_3043,random_weakness,High,Curve,Pool,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",122049.46,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Curve Pool contract,8.6,0.5913117595350992,audited
sc_3044,tx_origin,Medium,MakerDAO,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",106160.59,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in MakerDAO AMM contract,4.9,0.3652613428827881,unaudited
sc_3045,uninitialized_storage,High,dYdX,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",67632.9,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX ERC20 contract,8.4,0.6474087056534109,unaudited
sc_3046,tx_origin,Medium,Rari,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36862.45,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Rari Staking contract,5.2,0.8135795684924645,audited
sc_3047,short_address,Medium,Frax,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64708.19,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Frax Strategy contract,6.9,0.8865621787095849,audited
sc_3048,random_weakness,High,1inch,Strategy,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",45215.13,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in 1inch Strategy contract,7.4,0.7869138104335966,audited
sc_3049,dos_gas_limit,Medium,1inch,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16861.02,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in 1inch Vault contract,4.9,0.2582602681143243,audited
sc_3050,dos_gas_limit,Medium,Curve,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25436.11,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve ERC721 contract,6.1,0.1901966356202377,audited
sc_3051,uninitialized_storage,High,Yearn,Governor,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",89293.49,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Yearn Governor contract,7.6,0.2515046833287469,audited
sc_3052,access_control,High,Alpha Homora,Oracle,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",24294.3,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora Oracle contract,7.1,0.1094073045035031,unaudited
sc_3053,timestamp_dependence,Medium,Curve,Vault,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",44960.67,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Curve Vault contract,4.5,0.9730189250223664,audited
sc_3054,unchecked_call,Medium,1inch,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",8597.59,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Staking contract,5.2,0.7045968131770968,audited
sc_3055,unchecked_call,Medium,Liquity,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",47450.65,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Liquity Pool contract,5.3,0.8377842050547353,audited
sc_3056,uninitialized_storage,High,Convex,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",21730.58,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Convex ERC721 contract,8.3,0.9652062377413048,audited
sc_3057,unchecked_call,Medium,1inch,ERC1155,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",36593.17,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in 1inch ERC1155 contract,4.3,0.1981243175835838,unaudited
sc_3058,timestamp_dependence,Medium,Frax,Strategy,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",32833.48,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax Strategy contract,6.3,0.8261214879141681,audited
sc_3059,integer_overflow,High,1inch,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",79497.25,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in 1inch ERC721 contract,8.3,0.5091130274666062,audited
sc_3060,front_running,Medium,Curve,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",145724.37,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve Router contract,6.6,0.6830067609816305,audited
sc_3061,tx_origin,Medium,Convex,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44336.32,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Convex Timelock contract,4.2,0.2741267349826305,audited
sc_3062,integer_overflow,High,Balancer,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",55727.49,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Balancer Oracle contract,7.1,0.9780550822088622,unaudited
sc_3063,access_control,High,Yearn,Vault,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",160753.05,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn Vault contract,7.5,0.4091728964039726,audited
sc_3064,timestamp_dependence,Medium,Liquity,ERC721,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",38174.61,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity ERC721 contract,5.7,0.3107800811590161,audited
sc_3065,random_weakness,High,MakerDAO,Strategy,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",79535.91,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Strategy contract,7.6,0.5640489237166132,unaudited
sc_3066,unchecked_call,Medium,Rari,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",7826.48,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Rari DEX contract,4.1,0.8465812806661963,audited
sc_3067,unchecked_call,Medium,PancakeSwap,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",15487.41,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in PancakeSwap Lending contract,5.7,0.5046436104465983,unaudited
sc_3068,reentrancy,Critical,Rari,Timelock,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",41114.78,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Rari Timelock contract,9.3,0.4021530120737298,audited
sc_3069,tx_origin,Medium,Liquity,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16225.68,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity ERC1155 contract,5.6,0.5228251806756671,audited
sc_3070,front_running,Medium,Convex,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22445.33,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Convex Farming contract,4.3,0.3153929458174266,audited
sc_3071,dos_gas_limit,Medium,Balancer,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31933.12,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Balancer Strategy contract,5.7,0.7980770178448698,unaudited
sc_3072,dos_gas_limit,Medium,PancakeSwap,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",26075.47,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in PancakeSwap AMM contract,4.3,0.6491084421587549,unaudited
sc_3073,tx_origin,Medium,Convex,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42440.05,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex Bridge contract,6.0,0.6934735791627656,audited
sc_3074,dos_gas_limit,Medium,Uniswap,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",194815.15,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Uniswap Vault contract,6.3,0.35594795009024693,audited
sc_3075,tx_origin,Medium,Convex,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",65352.93,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex Governor contract,5.0,0.4590740404393814,audited
sc_3076,random_weakness,High,Uniswap,ERC721,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",172296.54,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Uniswap ERC721 contract,8.7,0.3061104887568931,unaudited
sc_3077,uninitialized_storage,High,Frax,Strategy,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",18787.19,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax Strategy contract,8.4,0.8599483445024678,audited
sc_3078,tx_origin,Medium,Rari,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22406.49,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Rari Timelock contract,5.9,0.8363446127478285,audited
sc_3079,random_weakness,High,Liquity,Router,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",54428.15,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity Router contract,8.5,0.649730756733548,audited
sc_3080,short_address,Medium,Curve,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",90333.28,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Curve Pool contract,4.2,0.1515854378887265,unaudited
sc_3081,random_weakness,High,MakerDAO,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",65553.66,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in MakerDAO Factory contract,7.8,0.260916753382383,unaudited
sc_3082,uninitialized_storage,High,Yearn,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",214392.39,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Yearn DEX contract,7.7,0.283010825461453,audited
sc_3083,uninitialized_storage,High,Rari,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",41133.27,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Rari Pool contract,8.3,0.7960960801369417,audited
sc_3084,uninitialized_storage,High,Frax,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",77236.64,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax ERC721 contract,8.4,0.41206393550175,audited
sc_3085,uninitialized_storage,High,PancakeSwap,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",80329.79,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in PancakeSwap DEX contract,7.0,0.8028100366817778,audited
sc_3086,unchecked_call,Medium,Convex,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",51952.04,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Convex Lending contract,4.6,0.11340535910621116,audited
sc_3087,access_control,High,PancakeSwap,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",32457.99,13,0.26,0.8,2,1,1,1,High access_control vulnerability in PancakeSwap Oracle contract,8.1,0.3769845023620335,unaudited
sc_3088,tx_origin,Medium,Yearn,Vault,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29653.33,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Vault contract,5.9,0.6049631936134118,unaudited
sc_3089,delegatecall_injection,Critical,Aave,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",320779.47,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Aave Router contract,9.0,0.426164293430602,audited
sc_3090,reentrancy,Critical,PancakeSwap,Farming,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",67866.43,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap Farming contract,9.5,0.21725338841446776,audited
sc_3091,unchecked_call,Medium,dYdX,Lending,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",66338.24,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in dYdX Lending contract,6.1,0.8864843445281652,audited
sc_3092,integer_overflow,High,Uniswap,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",210896.84,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Uniswap Vault contract,7.3,0.5046161409042188,audited
sc_3093,short_address,Medium,Curve,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44316.39,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Curve Proxy contract,6.4,0.3906508261410284,unaudited
sc_3094,short_address,Medium,Liquity,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57463.42,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Liquity Vault contract,6.1,0.2204702035468769,audited
sc_3095,delegatecall_injection,Critical,Frax,Factory,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",16881.05,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax Factory contract,9.2,0.9114006562613506,audited
sc_3096,uninitialized_storage,High,Frax,AMM,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",62279.18,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax AMM contract,7.6,0.36985041224650883,audited
sc_3097,uninitialized_storage,High,Curve,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",204030.35,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve Timelock contract,8.7,0.6549545528060803,audited
sc_3098,access_control,High,Balancer,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",34689.27,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Balancer Oracle contract,7.8,0.6997381067489883,unaudited
sc_3099,delegatecall_injection,Critical,MakerDAO,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",466430.41,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in MakerDAO Router contract,9.5,0.8104588667209495,audited
sc_3100,unchecked_call,Medium,Rari,Proxy,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",59685.42,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari Proxy contract,6.8,0.20572062627735613,audited
sc_3101,unchecked_call,Medium,Convex,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",40798.35,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Convex Router contract,5.6,0.24518433772381043,audited
sc_3102,random_weakness,High,Rari,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",60678.43,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari Pool contract,7.1,0.15897006727654608,unaudited
sc_3103,integer_overflow,High,Yearn,Pool,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",31499.86,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Yearn Pool contract,8.1,0.2873975200803577,unaudited
sc_3104,uninitialized_storage,High,Euler,Strategy,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",38154.6,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Euler Strategy contract,7.6,0.9272558949916242,audited
sc_3105,tx_origin,Medium,Curve,Bridge,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",17463.93,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Curve Bridge contract,6.2,0.676483997859292,audited
sc_3106,reentrancy,Critical,Convex,ERC721,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",48670.8,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex ERC721 contract,9.5,0.5495917702804076,audited
sc_3107,access_control,High,PancakeSwap,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",72371.17,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap Governor contract,8.1,0.45513456337680247,audited
sc_3108,unchecked_call,Medium,Uniswap,ERC1155,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",173044.22,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Uniswap ERC1155 contract,5.9,0.23343209438976995,unaudited
sc_3109,reentrancy,Critical,PancakeSwap,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",23520.56,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in PancakeSwap Timelock contract,9.2,0.2677812673532928,audited
sc_3110,short_address,Medium,MakerDAO,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",127916.82,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO AMM contract,5.9,0.3470280634768398,unaudited
sc_3111,reentrancy,Critical,Aave,Strategy,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",71499.95,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Strategy contract,9.9,0.9545432318568616,audited
sc_3112,uninitialized_storage,High,SushiSwap,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",92834.87,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in SushiSwap Oracle contract,8.5,0.8412802591347338,audited
sc_3113,access_control,High,Balancer,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",46702.99,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Farming contract,7.5,0.6021518609761607,audited
sc_3114,reentrancy,Critical,Liquity,ERC1155,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",45028.68,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Liquity ERC1155 contract,9.9,0.6354378522936868,audited
sc_3115,access_control,High,Frax,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",79825.73,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Frax Proxy contract,7.8,0.19989906952125686,unaudited
sc_3116,access_control,High,Aave,ERC1155,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",394022.87,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave ERC1155 contract,8.4,0.8978434160510217,unaudited
sc_3117,front_running,Medium,PancakeSwap,Bridge,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32925.85,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in PancakeSwap Bridge contract,6.1,0.4988799564297277,audited
sc_3118,integer_overflow,High,Uniswap,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",356764.99,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Uniswap Farming contract,8.1,0.1432320892824207,unaudited
sc_3119,tx_origin,Medium,Liquity,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28367.17,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity Staking contract,5.5,0.5182660974438059,unaudited
sc_3120,unchecked_call,Medium,Rari,Proxy,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",12642.96,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari Proxy contract,6.0,0.3143776443210045,audited
sc_3121,integer_overflow,High,SushiSwap,ERC20,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",89385.97,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap ERC20 contract,8.8,0.10267244389803855,audited
sc_3122,reentrancy,Critical,Euler,DEX,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",12014.08,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Euler DEX contract,9.8,0.230127781053299,audited
sc_3123,tx_origin,Medium,Compound,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",114162.73,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Compound ERC721 contract,4.1,0.23582665236154354,unaudited
sc_3124,tx_origin,Medium,MakerDAO,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",224259.13,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO Lending contract,6.7,0.12151899189361404,audited
sc_3125,delegatecall_injection,Critical,PancakeSwap,ERC1155,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",35689.44,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in PancakeSwap ERC1155 contract,9.9,0.1545686378083583,audited
sc_3126,dos_gas_limit,Medium,PancakeSwap,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48931.89,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap Staking contract,5.7,0.8900317608173808,audited
sc_3127,uninitialized_storage,High,MakerDAO,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",51597.48,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO Governor contract,8.6,0.15617999602195345,audited
sc_3128,timestamp_dependence,Medium,Curve,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",23005.74,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Curve ERC1155 contract,6.0,0.2693384363776066,audited
sc_3129,short_address,Medium,Liquity,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52998.91,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Liquity Governor contract,5.2,0.24557283659672474,audited
sc_3130,reentrancy,Critical,Compound,Proxy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",272262.35,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Compound Proxy contract,9.5,0.313651166163361,audited
sc_3131,uninitialized_storage,High,Frax,Router,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",83337.02,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Frax Router contract,8.9,0.6305764577334978,audited
sc_3132,uninitialized_storage,High,Liquity,Staking,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",17023.23,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Liquity Staking contract,7.4,0.8163465618681216,unaudited
sc_3133,delegatecall_injection,Critical,Synthetix,Governor,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",181057.42,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix Governor contract,9.7,0.5638748870177702,audited
sc_3134,random_weakness,High,Compound,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",399124.17,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Compound Pool contract,7.6,0.6663813930408619,unaudited
sc_3135,front_running,Medium,PancakeSwap,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45599.4,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in PancakeSwap Staking contract,5.3,0.2341944336462926,unaudited
sc_3136,integer_overflow,High,Synthetix,Governor,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",146446.42,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Governor contract,7.4,0.4554265776380588,audited
sc_3137,access_control,High,Liquity,Oracle,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",26626.13,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Liquity Oracle contract,8.3,0.23858460886107719,unaudited
sc_3138,front_running,Medium,Compound,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55081.68,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Compound Bridge contract,6.5,0.8179516643905358,audited
sc_3139,timestamp_dependence,Medium,Euler,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",53552.45,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Euler Factory contract,5.4,0.3125629565692475,unaudited
sc_3140,short_address,Medium,PancakeSwap,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16023.06,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in PancakeSwap Staking contract,5.6,0.6683925056098488,audited
sc_3141,uninitialized_storage,High,Yearn,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",170366.31,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Yearn Vault contract,8.6,0.6306259004099319,audited
sc_3142,timestamp_dependence,Medium,Compound,Oracle,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",314113.64,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Compound Oracle contract,6.4,0.6123238760698124,unaudited
sc_3143,delegatecall_injection,Critical,Euler,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",28082.91,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Euler Strategy contract,9.3,0.213379008880273,audited
sc_3144,random_weakness,High,Yearn,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",80924.83,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Yearn Oracle contract,8.7,0.3594573114394225,audited
sc_3145,integer_overflow,High,Rari,Staking,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",25600.76,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Rari Staking contract,7.4,0.9057795272293472,audited
sc_3146,delegatecall_injection,Critical,SushiSwap,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",219478.25,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in SushiSwap Farming contract,9.3,0.5779884352066169,audited
sc_3147,delegatecall_injection,Critical,Uniswap,AMM,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",287603.23,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Uniswap AMM contract,9.5,0.9165177832505959,unaudited
sc_3148,reentrancy,Critical,SushiSwap,Oracle,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",36776.92,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in SushiSwap Oracle contract,9.9,0.12971243314675449,audited
sc_3149,random_weakness,High,Balancer,Farming,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",100039.86,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Farming contract,7.6,0.33318038031532077,audited
sc_3150,integer_overflow,High,Compound,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",402423.16,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Compound Lending contract,8.9,0.8605448399022682,audited
sc_3151,reentrancy,Critical,Aave,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",208239.31,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Aave ERC1155 contract,9.2,0.294368087535292,audited
sc_3152,unchecked_call,Medium,Liquity,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",17841.66,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity Bridge contract,4.4,0.1686861193220346,audited
sc_3153,integer_overflow,High,Liquity,Governor,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",61001.87,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Governor contract,8.6,0.9409123646561751,audited
sc_3154,delegatecall_injection,Critical,Euler,Pool,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",47493.58,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler Pool contract,9.4,0.30784902519267454,audited
sc_3155,unchecked_call,Medium,Euler,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",20957.81,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Euler Farming contract,6.9,0.6748111868608822,unaudited
sc_3156,random_weakness,High,SushiSwap,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",193496.39,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in SushiSwap Router contract,7.2,0.3778187072422493,unaudited
sc_3157,random_weakness,High,PancakeSwap,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",16860.85,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap Governor contract,8.0,0.6891890012711138,audited
sc_3158,tx_origin,Medium,Alpha Homora,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50038.28,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Alpha Homora ERC721 contract,5.9,0.4299589052555959,audited
sc_3159,dos_gas_limit,Medium,Compound,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",101100.19,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Bridge contract,6.4,0.3198055765091531,audited
sc_3160,delegatecall_injection,Critical,Frax,Governor,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",28198.27,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Frax Governor contract,9.1,0.3594379758563727,audited
sc_3161,access_control,High,Uniswap,Farming,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",333520.0,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap Farming contract,7.4,0.7041860841437055,audited
sc_3162,unchecked_call,Medium,dYdX,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",49663.4,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in dYdX Farming contract,5.2,0.5619654542095781,audited
sc_3163,integer_overflow,High,1inch,Pool,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",29689.83,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in 1inch Pool contract,7.1,0.9914058841661663,audited
sc_3164,timestamp_dependence,Medium,Aave,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",73608.07,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave Lending contract,6.3,0.4387955417684778,audited
sc_3165,random_weakness,High,Frax,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",61053.52,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax ERC721 contract,8.3,0.41501495955659584,unaudited
sc_3166,random_weakness,High,1inch,Proxy,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",13844.51,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in 1inch Proxy contract,7.0,0.23767580326682863,audited
sc_3167,uninitialized_storage,High,Liquity,Staking,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",71500.28,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Liquity Staking contract,7.6,0.8991721456920264,audited
sc_3168,short_address,Medium,Balancer,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14909.52,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Balancer Strategy contract,4.0,0.4216904533422833,audited
sc_3169,uninitialized_storage,High,MakerDAO,Farming,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",150544.51,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in MakerDAO Farming contract,8.8,0.792906075500994,audited
sc_3170,access_control,High,Rari,Strategy,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",46641.87,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari Strategy contract,8.8,0.526161538182771,audited
sc_3171,dos_gas_limit,Medium,1inch,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",41770.8,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in 1inch Vault contract,4.6,0.15634884731786283,audited
sc_3172,unchecked_call,Medium,Synthetix,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",64839.74,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Synthetix Timelock contract,4.6,0.3181605881911095,audited
sc_3173,unchecked_call,Medium,Liquity,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",46757.91,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity Pool contract,5.0,0.3166452113096765,unaudited
sc_3174,access_control,High,Aave,Farming,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",159255.09,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Farming contract,8.1,0.7672952495354223,unaudited
sc_3175,short_address,Medium,MakerDAO,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",135683.35,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in MakerDAO AMM contract,4.1,0.6079839616845322,audited
sc_3176,integer_overflow,High,Balancer,Factory,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",35151.5,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Balancer Factory contract,7.8,0.8051742075661521,audited
sc_3177,tx_origin,Medium,Uniswap,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",235581.7,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Strategy contract,6.5,0.4737047666958347,unaudited
sc_3178,integer_overflow,High,Synthetix,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",158911.25,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Synthetix Staking contract,8.8,0.4444601552726618,unaudited
sc_3179,dos_gas_limit,Medium,Rari,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58541.19,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Rari Farming contract,4.3,0.6189021925272413,audited
sc_3180,dos_gas_limit,Medium,Curve,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",82918.57,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve Pool contract,4.1,0.7707761073768952,unaudited
sc_3181,short_address,Medium,Synthetix,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",83608.63,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Synthetix Pool contract,5.0,0.6393921486871816,audited
sc_3182,random_weakness,High,Alpha Homora,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",52877.79,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Alpha Homora Factory contract,7.3,0.2968797666930155,audited
sc_3183,timestamp_dependence,Medium,Convex,Timelock,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",23711.17,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Convex Timelock contract,5.0,0.6307109085824707,audited
sc_3184,integer_overflow,High,Liquity,Vault,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",30482.47,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Vault contract,7.7,0.8457223567579993,audited
sc_3185,dos_gas_limit,Medium,1inch,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14229.31,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in 1inch Farming contract,5.7,0.611711792599745,audited
sc_3186,random_weakness,High,Liquity,Vault,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",58069.93,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity Vault contract,7.8,0.6901730363598464,audited
sc_3187,access_control,High,Uniswap,ERC20,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",392855.16,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap ERC20 contract,8.5,0.9389568125774336,audited
sc_3188,short_address,Medium,Synthetix,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",123596.36,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Synthetix Lending contract,4.3,0.9462402310889849,audited
sc_3189,tx_origin,Medium,Frax,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55572.27,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Strategy contract,5.7,0.4331980690792716,audited
sc_3190,delegatecall_injection,Critical,Synthetix,Timelock,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",269029.76,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix Timelock contract,9.7,0.8830995740256149,unaudited
sc_3191,front_running,Medium,Compound,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",116208.27,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound Bridge contract,4.8,0.11818805970742746,unaudited
sc_3192,integer_overflow,High,Balancer,DEX,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",55943.77,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Balancer DEX contract,7.2,0.6943043571225398,unaudited
sc_3193,unchecked_call,Medium,Rari,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",48640.79,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari Vault contract,4.4,0.6081127298337976,audited
sc_3194,access_control,High,Balancer,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",58207.83,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Timelock contract,7.0,0.9039825285447215,unaudited
sc_3195,unchecked_call,Medium,Aave,Governor,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",52791.49,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave Governor contract,5.7,0.9305542011801651,audited
sc_3196,random_weakness,High,Synthetix,Proxy,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",101325.84,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Synthetix Proxy contract,8.6,0.18165815059373377,unaudited
sc_3197,access_control,High,Uniswap,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",362975.4,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Uniswap Staking contract,7.1,0.9717567109136669,unaudited
sc_3198,random_weakness,High,Aave,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",253397.71,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Aave ERC20 contract,7.2,0.7904627366602707,audited
sc_3199,timestamp_dependence,Medium,1inch,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",41806.56,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in 1inch ERC721 contract,4.4,0.3416670450256777,unaudited
sc_3200,access_control,High,Frax,AMM,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",44107.88,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Frax AMM contract,7.5,0.8595863054084855,audited
sc_3201,short_address,Medium,Liquity,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10683.33,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity Factory contract,4.4,0.2797185660035484,audited
sc_3202,unchecked_call,Medium,Euler,AMM,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",52664.92,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Euler AMM contract,4.1,0.6787525572890267,audited
sc_3203,front_running,Medium,Euler,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",9287.71,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Euler DEX contract,6.1,0.970450997444079,audited
sc_3204,reentrancy,Critical,Rari,ERC1155,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",11632.09,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Rari ERC1155 contract,9.8,0.10478101082979721,unaudited
sc_3205,delegatecall_injection,Critical,Uniswap,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",84294.25,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Uniswap Farming contract,9.3,0.9232636522440482,audited
sc_3206,dos_gas_limit,Medium,Alpha Homora,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58526.06,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Staking contract,4.8,0.9872612293730975,audited
sc_3207,dos_gas_limit,Medium,Rari,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18536.71,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Rari Strategy contract,4.1,0.9986289672376025,unaudited
sc_3208,unchecked_call,Medium,Aave,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",114374.22,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave Farming contract,6.6,0.38869029630134455,audited
sc_3209,uninitialized_storage,High,Curve,Oracle,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",162964.54,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve Oracle contract,8.6,0.19673690285122442,audited
sc_3210,tx_origin,Medium,PancakeSwap,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49758.54,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in PancakeSwap ERC721 contract,5.4,0.24299333974726187,unaudited
sc_3211,reentrancy,Critical,Synthetix,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",66947.01,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Synthetix Bridge contract,9.3,0.41661470868252115,audited
sc_3212,delegatecall_injection,Critical,Aave,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",263347.91,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Aave Strategy contract,9.3,0.13845071534735476,unaudited
sc_3213,dos_gas_limit,Medium,PancakeSwap,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56923.44,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap Strategy contract,6.0,0.4687575533154684,unaudited
sc_3214,dos_gas_limit,Medium,Convex,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",72219.51,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Convex ERC1155 contract,4.1,0.9243829633607153,audited
sc_3215,integer_overflow,High,MakerDAO,Bridge,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",173379.33,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Bridge contract,8.7,0.4433067623454102,unaudited
sc_3216,unchecked_call,Medium,1inch,Pool,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",34669.7,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in 1inch Pool contract,4.6,0.8984878302053513,audited
sc_3217,front_running,Medium,Synthetix,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40351.76,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Synthetix Proxy contract,6.3,0.7435376837885238,audited
sc_3218,access_control,High,Uniswap,Pool,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",352472.45,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap Pool contract,8.6,0.47610051760439653,audited
sc_3219,random_weakness,High,MakerDAO,Factory,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",86526.53,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in MakerDAO Factory contract,8.0,0.2658069493346982,audited
sc_3220,front_running,Medium,Compound,Proxy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",176475.83,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Compound Proxy contract,6.2,0.2548941684604249,audited
sc_3221,front_running,Medium,Convex,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18480.54,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Convex Router contract,5.5,0.16443641882179633,audited
sc_3222,access_control,High,dYdX,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",11494.45,13,0.26,0.8,2,1,1,1,High access_control vulnerability in dYdX Pool contract,8.2,0.37246214474363937,audited
sc_3223,access_control,High,Euler,ERC20,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",13117.61,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Euler ERC20 contract,8.5,0.10541622639544801,audited
sc_3224,unchecked_call,Medium,Compound,Vault,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",70198.81,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Compound Vault contract,6.3,0.26087858244748435,unaudited
sc_3225,tx_origin,Medium,MakerDAO,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30057.37,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO Timelock contract,4.3,0.1248119718575621,audited
sc_3226,timestamp_dependence,Medium,Liquity,Bridge,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",53233.85,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity Bridge contract,5.8,0.21203047180341786,audited
sc_3227,short_address,Medium,MakerDAO,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",224293.15,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in MakerDAO Farming contract,6.3,0.22668073149490983,audited
sc_3228,reentrancy,Critical,Aave,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",333533.36,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Aave ERC20 contract,9.8,0.5194757427514511,unaudited
sc_3229,uninitialized_storage,High,Convex,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",40654.55,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Convex DEX contract,7.1,0.5448710562876966,audited
sc_3230,short_address,Medium,Euler,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50261.0,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Euler Lending contract,5.1,0.7631778442161108,audited
sc_3231,short_address,Medium,Curve,Governor,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",62551.58,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve Governor contract,5.6,0.8961658025914245,audited
sc_3232,delegatecall_injection,Critical,Balancer,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",81601.58,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Balancer ERC1155 contract,9.4,0.330403876435839,audited
sc_3233,short_address,Medium,Convex,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40963.01,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex Lending contract,5.9,0.548916374175462,unaudited
sc_3234,uninitialized_storage,High,Euler,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",62620.74,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Euler Staking contract,7.8,0.3523088810145609,unaudited
sc_3235,reentrancy,Critical,MakerDAO,Lending,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",204575.33,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO Lending contract,9.6,0.932107085583067,audited
sc_3236,tx_origin,Medium,Balancer,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30038.01,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Balancer Lending contract,4.9,0.38166968257672995,audited
sc_3237,short_address,Medium,dYdX,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12855.01,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in dYdX Factory contract,5.7,0.31488659056433743,audited
sc_3238,delegatecall_injection,Critical,Liquity,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",45314.37,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity Router contract,9.8,0.22667013068259095,audited
sc_3239,front_running,Medium,Alpha Homora,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13809.75,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Alpha Homora Bridge contract,4.2,0.5480760506080276,audited
sc_3240,delegatecall_injection,Critical,Balancer,ERC20,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",97681.46,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Balancer ERC20 contract,9.7,0.783863628194748,audited
sc_3241,timestamp_dependence,Medium,PancakeSwap,ERC20,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",15198.93,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap ERC20 contract,4.1,0.7816395032921689,audited
sc_3242,front_running,Medium,Synthetix,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",43693.25,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Synthetix Staking contract,4.9,0.8431857223231891,audited
sc_3243,delegatecall_injection,Critical,Frax,ERC1155,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",16616.26,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax ERC1155 contract,9.4,0.3441813240929362,unaudited
sc_3244,tx_origin,Medium,Compound,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",253210.85,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Compound Vault contract,6.6,0.18542999311806702,unaudited
sc_3245,timestamp_dependence,Medium,Alpha Homora,Governor,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",13226.23,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Alpha Homora Governor contract,6.8,0.5225763235578279,audited
sc_3246,unchecked_call,Medium,Liquity,Staking,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",23814.32,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity Staking contract,6.4,0.8337422218887544,audited
sc_3247,unchecked_call,Medium,Alpha Homora,Farming,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",31110.12,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora Farming contract,6.3,0.16918927783784837,unaudited
sc_3248,integer_overflow,High,Frax,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",56395.64,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Frax Oracle contract,7.0,0.9289979366626303,audited
sc_3249,tx_origin,Medium,Uniswap,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",238816.59,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Uniswap Factory contract,5.8,0.5477200095310125,audited
sc_3250,uninitialized_storage,High,1inch,Farming,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",48986.7,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in 1inch Farming contract,7.2,0.7959648195727576,audited
sc_3251,unchecked_call,Medium,Yearn,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",102116.02,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Yearn Bridge contract,5.5,0.2902453204906663,unaudited
sc_3252,front_running,Medium,Rari,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18979.28,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Rari AMM contract,6.5,0.3804135766799347,audited
sc_3253,delegatecall_injection,Critical,Aave,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",100387.98,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Aave Bridge contract,9.9,0.4640469170637964,audited
sc_3254,reentrancy,Critical,Aave,Timelock,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",476350.13,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Timelock contract,9.5,0.5892839615007717,audited
sc_3255,front_running,Medium,Yearn,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",132703.04,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Yearn Router contract,6.3,0.43232321754582614,audited
sc_3256,tx_origin,Medium,Convex,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20704.1,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex ERC1155 contract,5.1,0.8475750591962398,audited
sc_3257,tx_origin,Medium,1inch,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57425.3,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in 1inch Proxy contract,5.0,0.5207727847771765,audited
sc_3258,timestamp_dependence,Medium,Alpha Homora,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",48929.33,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Alpha Homora Pool contract,4.7,0.4994219275020704,audited
sc_3259,delegatecall_injection,Critical,Yearn,Router,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",176009.5,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Yearn Router contract,10.0,0.3444159307020712,unaudited
sc_3260,random_weakness,High,Balancer,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",21746.88,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Staking contract,7.4,0.18816500025552674,audited
sc_3261,dos_gas_limit,Medium,Aave,Timelock,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",122709.55,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Timelock contract,4.7,0.11593800945138098,audited
sc_3262,front_running,Medium,Euler,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16021.33,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Euler ERC721 contract,4.5,0.1891030635381925,audited
sc_3263,reentrancy,Critical,Frax,Vault,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",49019.28,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Frax Vault contract,9.6,0.3379033311805569,unaudited
sc_3264,delegatecall_injection,Critical,Rari,Bridge,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",15915.61,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Rari Bridge contract,9.0,0.201575818048294,audited
sc_3265,reentrancy,Critical,Convex,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",55161.64,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Convex Timelock contract,9.9,0.19613240940975418,unaudited
sc_3266,reentrancy,Critical,Alpha Homora,Router,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",46346.62,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora Router contract,9.6,0.5467290817286113,unaudited
sc_3267,front_running,Medium,Synthetix,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",169861.26,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Synthetix Staking contract,6.6,0.20628607092239332,audited
sc_3268,access_control,High,Balancer,Bridge,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",78249.87,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Bridge contract,7.6,0.24656741470108315,unaudited
sc_3269,random_weakness,High,Yearn,AMM,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",175457.83,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn AMM contract,8.2,0.4830124950691004,unaudited
sc_3270,timestamp_dependence,Medium,1inch,Strategy,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",18749.44,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in 1inch Strategy contract,5.8,0.8966860328748028,audited
sc_3271,delegatecall_injection,Critical,Rari,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",78807.09,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Rari Timelock contract,10.0,0.5632256342149988,audited
sc_3272,short_address,Medium,PancakeSwap,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23465.9,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in PancakeSwap Staking contract,5.4,0.2755846317161025,audited
sc_3273,random_weakness,High,dYdX,Pool,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",11312.9,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in dYdX Pool contract,8.5,0.12717075547908055,unaudited
sc_3274,reentrancy,Critical,PancakeSwap,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",16300.24,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in PancakeSwap Proxy contract,9.3,0.8403839278122368,audited
sc_3275,timestamp_dependence,Medium,Alpha Homora,Lending,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",24895.43,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Alpha Homora Lending contract,6.2,0.56039605497123,audited
sc_3276,timestamp_dependence,Medium,Balancer,ERC20,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",52770.21,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Balancer ERC20 contract,4.1,0.7371559057198402,audited
sc_3277,front_running,Medium,Synthetix,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",123739.19,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Synthetix ERC721 contract,6.0,0.58710073680685,unaudited
sc_3278,integer_overflow,High,Liquity,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",24946.96,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Governor contract,8.4,0.6015466679103159,unaudited
sc_3279,access_control,High,Yearn,Proxy,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",95985.34,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn Proxy contract,8.6,0.38573176424358746,audited
sc_3280,short_address,Medium,Convex,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20361.14,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex Factory contract,4.3,0.6418962612038469,audited
sc_3281,short_address,Medium,SushiSwap,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50622.86,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in SushiSwap Proxy contract,6.1,0.7125873152982372,unaudited
sc_3282,access_control,High,PancakeSwap,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",40267.23,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap Staking contract,7.5,0.5001165308508061,audited
sc_3283,reentrancy,Critical,Balancer,Strategy,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",83748.61,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Strategy contract,9.0,0.16800413170376927,audited
sc_3284,unchecked_call,Medium,Rari,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",11451.71,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari Strategy contract,5.1,0.35525512785933644,audited
sc_3285,integer_overflow,High,Aave,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",192280.54,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Aave Bridge contract,8.5,0.46055838560220974,audited
sc_3286,access_control,High,SushiSwap,Bridge,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",110813.08,13,0.26,0.8,2,0,1,1,High access_control vulnerability in SushiSwap Bridge contract,7.4,0.35709064441254657,unaudited
sc_3287,short_address,Medium,MakerDAO,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",76528.55,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in MakerDAO Timelock contract,6.0,0.1275572515815154,unaudited
sc_3288,integer_overflow,High,Alpha Homora,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",34372.32,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora ERC20 contract,7.4,0.19928471450236063,audited
sc_3289,front_running,Medium,MakerDAO,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",200870.11,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in MakerDAO Strategy contract,6.0,0.27604539148419627,audited
sc_3290,random_weakness,High,Compound,Bridge,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",293991.43,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Compound Bridge contract,7.2,0.3747433695939474,audited
sc_3291,short_address,Medium,Compound,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",184275.79,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Compound ERC721 contract,4.4,0.4849256815207399,audited
sc_3292,dos_gas_limit,Medium,MakerDAO,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",89794.07,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in MakerDAO Strategy contract,4.2,0.672735184460683,audited
sc_3293,short_address,Medium,PancakeSwap,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",11699.05,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in PancakeSwap DEX contract,6.5,0.9643586453076195,audited
sc_3294,unchecked_call,Medium,Liquity,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",36267.15,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity Farming contract,4.2,0.9096227260409916,unaudited
sc_3295,tx_origin,Medium,Rari,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",63475.84,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Rari Pool contract,5.2,0.2280156941862914,audited
sc_3296,dos_gas_limit,Medium,Aave,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",122545.8,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Staking contract,5.8,0.29831463927129864,audited
sc_3297,timestamp_dependence,Medium,MakerDAO,Timelock,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",219960.68,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Timelock contract,6.6,0.29132155667157583,audited
sc_3298,delegatecall_injection,Critical,1inch,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",45504.85,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch ERC721 contract,9.1,0.8479826219005477,unaudited
sc_3299,reentrancy,Critical,1inch,Pool,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",54853.92,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch Pool contract,9.6,0.6195306739900738,audited
sc_3300,dos_gas_limit,Medium,1inch,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25529.01,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in 1inch Strategy contract,4.4,0.49490748050042344,audited
sc_3301,short_address,Medium,Rari,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38063.15,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Rari ERC1155 contract,4.9,0.8651228535631197,audited
sc_3302,integer_overflow,High,Balancer,Governor,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",83182.44,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Balancer Governor contract,7.9,0.9490474840824409,audited
sc_3303,integer_overflow,High,PancakeSwap,Staking,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",53135.65,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap Staking contract,7.4,0.7951990604029907,audited
sc_3304,random_weakness,High,PancakeSwap,Lending,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",59571.44,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap Lending contract,7.9,0.20624383270565033,audited
sc_3305,random_weakness,High,SushiSwap,Factory,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",88696.01,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in SushiSwap Factory contract,7.4,0.6849511921329182,unaudited
sc_3306,delegatecall_injection,Critical,PancakeSwap,Staking,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",81922.46,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Staking contract,9.4,0.9102020077805211,unaudited
sc_3307,reentrancy,Critical,Euler,Farming,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",67591.32,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler Farming contract,9.8,0.35845008499999576,audited
sc_3308,short_address,Medium,Convex,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23954.03,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Convex Farming contract,5.3,0.32340545299102097,audited
sc_3309,access_control,High,Balancer,Factory,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",87230.58,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Factory contract,7.7,0.23215247815902212,audited
sc_3310,short_address,Medium,1inch,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21636.72,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch Bridge contract,5.9,0.3103595604541697,audited
sc_3311,short_address,Medium,Frax,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58584.65,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Frax Timelock contract,4.1,0.5015049494231578,audited
sc_3312,integer_overflow,High,1inch,Staking,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",20483.31,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in 1inch Staking contract,8.0,0.7182371068751436,audited
sc_3313,uninitialized_storage,High,Convex,AMM,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",69165.64,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Convex AMM contract,8.0,0.7104134019438638,audited
sc_3314,tx_origin,Medium,Aave,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",96222.03,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave Proxy contract,4.8,0.8690392363319474,audited
sc_3315,dos_gas_limit,Medium,Synthetix,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",43942.41,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Synthetix ERC1155 contract,4.9,0.4626760933935802,audited
sc_3316,delegatecall_injection,Critical,Compound,AMM,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",277713.81,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Compound AMM contract,9.9,0.8549223075374631,audited
sc_3317,front_running,Medium,Compound,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31776.58,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound ERC1155 contract,4.9,0.6249897247363468,unaudited
sc_3318,uninitialized_storage,High,Aave,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",279061.27,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Aave Oracle contract,8.6,0.35277349928873525,audited
sc_3319,unchecked_call,Medium,Curve,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",46514.13,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Curve Oracle contract,6.2,0.5915697301848012,audited
sc_3320,integer_overflow,High,Frax,Bridge,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",51125.82,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Frax Bridge contract,7.3,0.6351954628752977,audited
sc_3321,integer_overflow,High,Curve,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",178962.91,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Curve ERC20 contract,7.7,0.3585464607325367,audited
sc_3322,integer_overflow,High,Liquity,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",84536.73,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Liquity Proxy contract,8.1,0.8264528289571994,audited
sc_3323,reentrancy,Critical,Rari,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",72704.79,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Rari Lending contract,9.4,0.9367275058885791,audited
sc_3324,uninitialized_storage,High,PancakeSwap,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",18857.28,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in PancakeSwap Router contract,7.1,0.4215676814917012,audited
sc_3325,tx_origin,Medium,dYdX,Governor,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16119.75,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX Governor contract,5.0,0.17202240369564342,audited
sc_3326,access_control,High,MakerDAO,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",179898.82,13,0.26,0.8,2,0,1,1,High access_control vulnerability in MakerDAO AMM contract,7.7,0.8240441440730144,unaudited
sc_3327,delegatecall_injection,Critical,Liquity,AMM,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",46963.93,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity AMM contract,9.3,0.19012126588033662,audited
sc_3328,front_running,Medium,1inch,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",66478.33,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in 1inch Timelock contract,5.2,0.9147612096738816,audited
sc_3329,random_weakness,High,Liquity,ERC1155,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",42721.69,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity ERC1155 contract,7.2,0.8723185223868517,unaudited
sc_3330,integer_overflow,High,dYdX,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",13095.49,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in dYdX Strategy contract,8.2,0.8395539244212951,unaudited
sc_3331,random_weakness,High,Balancer,Factory,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",61752.76,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Factory contract,8.8,0.8047383940278093,audited
sc_3332,dos_gas_limit,Medium,Curve,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",105265.41,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve Pool contract,4.7,0.6386746857354851,audited
sc_3333,short_address,Medium,Uniswap,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",152033.03,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Uniswap AMM contract,6.3,0.9811491157440212,unaudited
sc_3334,delegatecall_injection,Critical,Euler,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",15600.98,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Euler Strategy contract,9.0,0.5266277536274426,audited
sc_3335,integer_overflow,High,Convex,ERC20,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",64556.2,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Convex ERC20 contract,8.6,0.5584006051706338,audited
sc_3336,unchecked_call,Medium,Alpha Homora,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",34889.94,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora Factory contract,6.3,0.9240809458589883,audited
sc_3337,integer_overflow,High,MakerDAO,ERC20,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",150401.35,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in MakerDAO ERC20 contract,8.2,0.17168086501515348,audited
sc_3338,random_weakness,High,Euler,Oracle,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",97645.85,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Euler Oracle contract,8.5,0.9322606619642787,unaudited
sc_3339,tx_origin,Medium,Uniswap,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",63208.79,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Proxy contract,4.4,0.7534879346065788,unaudited
sc_3340,uninitialized_storage,High,Aave,Oracle,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",280798.68,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave Oracle contract,8.8,0.810279446967665,audited
sc_3341,dos_gas_limit,Medium,MakerDAO,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",208280.45,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in MakerDAO ERC20 contract,4.5,0.48972511703344257,unaudited
sc_3342,tx_origin,Medium,Aave,Vault,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",233495.34,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave Vault contract,6.1,0.297176969035051,audited
sc_3343,short_address,Medium,Liquity,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20150.07,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Liquity Vault contract,5.9,0.19972036951798253,audited
sc_3344,uninitialized_storage,High,Synthetix,Router,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",121075.36,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix Router contract,7.9,0.13052419689914463,unaudited
sc_3345,dos_gas_limit,Medium,dYdX,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38151.27,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in dYdX Bridge contract,6.7,0.4807472176289175,audited
sc_3346,uninitialized_storage,High,1inch,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",10958.36,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in 1inch Timelock contract,7.2,0.9438836948787894,audited
sc_3347,uninitialized_storage,High,Balancer,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",49048.66,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Balancer Router contract,7.3,0.4427363676665661,audited
sc_3348,random_weakness,High,1inch,Proxy,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",61037.73,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in 1inch Proxy contract,7.7,0.5435597871618375,audited
sc_3349,dos_gas_limit,Medium,Synthetix,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",26204.24,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Synthetix ERC20 contract,4.8,0.2855915274641493,unaudited
sc_3350,reentrancy,Critical,Uniswap,Timelock,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",65345.65,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Uniswap Timelock contract,9.9,0.4710170714826908,unaudited
sc_3351,uninitialized_storage,High,Liquity,ERC1155,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",54287.8,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Liquity ERC1155 contract,7.8,0.48409575333868404,audited
sc_3352,unchecked_call,Medium,MakerDAO,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",158543.51,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in MakerDAO Staking contract,5.9,0.8029285017079217,unaudited
sc_3353,tx_origin,Medium,1inch,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8112.59,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch DEX contract,6.2,0.49337562844668315,unaudited
sc_3354,integer_overflow,High,Yearn,Timelock,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",241565.5,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Yearn Timelock contract,8.6,0.14454393973098678,unaudited
sc_3355,unchecked_call,Medium,Convex,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",44194.29,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Convex Lending contract,5.5,0.5630240852633054,audited
sc_3356,tx_origin,Medium,Curve,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39928.73,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Curve AMM contract,6.0,0.36501661590169254,audited
sc_3357,timestamp_dependence,Medium,Balancer,Pool,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",47810.83,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Balancer Pool contract,5.3,0.7102756217038964,audited
sc_3358,integer_overflow,High,Yearn,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",117377.79,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Yearn ERC1155 contract,8.4,0.7480825242113277,unaudited
sc_3359,uninitialized_storage,High,Uniswap,ERC1155,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",144455.8,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Uniswap ERC1155 contract,8.4,0.2309528676526784,audited
sc_3360,timestamp_dependence,Medium,Aave,Governor,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",73968.18,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave Governor contract,4.3,0.47754252495604077,audited
sc_3361,short_address,Medium,Alpha Homora,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48209.05,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Alpha Homora Lending contract,4.1,0.8422732416280199,audited
sc_3362,unchecked_call,Medium,dYdX,ERC721,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",17458.27,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in dYdX ERC721 contract,4.9,0.5712391024367898,audited
sc_3363,short_address,Medium,Curve,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",68973.85,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Curve Vault contract,4.8,0.6563185907412975,audited
sc_3364,timestamp_dependence,Medium,Compound,Router,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",278670.19,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Compound Router contract,6.9,0.6313046967008469,audited
sc_3365,delegatecall_injection,Critical,Alpha Homora,Timelock,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",86960.93,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Timelock contract,9.7,0.25085123029673334,unaudited
sc_3366,tx_origin,Medium,Yearn,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",160008.74,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn ERC721 contract,4.8,0.5856874439730252,unaudited
sc_3367,tx_origin,Medium,PancakeSwap,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42998.95,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in PancakeSwap ERC721 contract,5.7,0.7948533739062711,unaudited
sc_3368,uninitialized_storage,High,dYdX,Strategy,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",12420.43,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX Strategy contract,8.6,0.6152327032915952,unaudited
sc_3369,reentrancy,Critical,Compound,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",137996.54,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Compound Timelock contract,9.7,0.359997196930379,audited
sc_3370,timestamp_dependence,Medium,Aave,AMM,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",40584.55,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Aave AMM contract,5.0,0.3239153749664754,unaudited
sc_3371,unchecked_call,Medium,Alpha Homora,Timelock,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",41275.51,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora Timelock contract,5.6,0.48609712136513594,audited
sc_3372,front_running,Medium,1inch,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",27317.35,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch Router contract,5.2,0.716104975103387,audited
sc_3373,access_control,High,Aave,Proxy,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",189217.11,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Proxy contract,7.5,0.5488799388022865,audited
sc_3374,delegatecall_injection,Critical,Curve,Farming,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",134430.51,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Curve Farming contract,9.5,0.4681196959355751,audited
sc_3375,access_control,High,Euler,Farming,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",42937.17,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Euler Farming contract,8.6,0.3663067007915968,audited
sc_3376,front_running,Medium,Alpha Homora,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54854.57,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Alpha Homora Factory contract,4.6,0.5933346970135528,unaudited
sc_3377,delegatecall_injection,Critical,Euler,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",50882.64,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Euler ERC721 contract,9.6,0.30814162395854794,audited
sc_3378,uninitialized_storage,High,dYdX,Proxy,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",81740.32,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX Proxy contract,7.2,0.24553657299973478,audited
sc_3379,uninitialized_storage,High,Frax,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",55251.41,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Frax Staking contract,7.5,0.23272013713406908,audited
sc_3380,dos_gas_limit,Medium,Uniswap,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",173640.76,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Uniswap Strategy contract,4.1,0.9850966362041359,audited
sc_3381,uninitialized_storage,High,Synthetix,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",53106.36,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix Oracle contract,8.6,0.46937062633086135,unaudited
sc_3382,delegatecall_injection,Critical,Synthetix,DEX,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",82161.5,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix DEX contract,9.4,0.15907120997090188,audited
sc_3383,random_weakness,High,1inch,DEX,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",74142.0,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in 1inch DEX contract,8.1,0.7180657126269528,unaudited
sc_3384,dos_gas_limit,Medium,Compound,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",230269.59,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound AMM contract,4.1,0.18594759932120627,audited
sc_3385,reentrancy,Critical,Euler,Vault,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",109368.07,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler Vault contract,9.6,0.6301853833454504,audited
sc_3386,dos_gas_limit,Medium,1inch,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",62529.77,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in 1inch Factory contract,5.2,0.319325757653368,audited
sc_3387,short_address,Medium,Curve,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",113158.98,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Curve Strategy contract,4.7,0.6051996971313792,audited
sc_3388,unchecked_call,Medium,Balancer,ERC20,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",11883.9,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Balancer ERC20 contract,4.4,0.7169685602568265,audited
sc_3389,short_address,Medium,Rari,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",71649.58,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Rari ERC1155 contract,4.5,0.2751515361421305,audited
sc_3390,dos_gas_limit,Medium,1inch,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",60271.24,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in 1inch DEX contract,6.5,0.7588237270024398,audited
sc_3391,timestamp_dependence,Medium,Frax,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",38813.17,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax AMM contract,5.3,0.18957037438339314,audited
sc_3392,access_control,High,1inch,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",21363.51,13,0.26,0.8,2,0,1,1,High access_control vulnerability in 1inch Pool contract,8.1,0.5037515394574565,audited
sc_3393,unchecked_call,Medium,Liquity,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",28768.1,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Liquity Strategy contract,5.2,0.8832428165849588,audited
sc_3394,integer_overflow,High,dYdX,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",51739.9,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in dYdX Timelock contract,8.3,0.8176666748817417,unaudited
sc_3395,random_weakness,High,MakerDAO,Lending,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",250434.6,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Lending contract,7.4,0.2140564436206628,audited
sc_3396,access_control,High,Yearn,ERC20,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",152333.45,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn ERC20 contract,8.0,0.988115670943757,audited
sc_3397,short_address,Medium,Synthetix,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",73928.83,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Farming contract,4.6,0.8347400389221056,audited
sc_3398,random_weakness,High,Aave,Strategy,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",244837.91,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Aave Strategy contract,8.0,0.22801762805624895,audited
sc_3399,timestamp_dependence,Medium,Euler,ERC1155,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",8332.2,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Euler ERC1155 contract,4.2,0.41070509686884127,audited
sc_3400,delegatecall_injection,Critical,Liquity,Bridge,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",50404.41,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity Bridge contract,9.5,0.6436368722879814,audited
sc_3401,uninitialized_storage,High,dYdX,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",58989.16,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in dYdX Proxy contract,8.1,0.5287381505750994,unaudited
sc_3402,integer_overflow,High,Euler,Factory,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",88136.41,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler Factory contract,7.7,0.14538132916444546,audited
sc_3403,integer_overflow,High,Alpha Homora,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",31332.54,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora Proxy contract,7.5,0.5625791784573644,unaudited
sc_3404,front_running,Medium,1inch,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15678.32,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch Oracle contract,5.5,0.939793363606188,unaudited
sc_3405,access_control,High,Synthetix,Staking,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",91663.33,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Synthetix Staking contract,8.6,0.21949822365518235,unaudited
sc_3406,access_control,High,Uniswap,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",235859.32,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap Oracle contract,8.7,0.10462404401456901,audited
sc_3407,delegatecall_injection,Critical,Compound,Oracle,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",319218.98,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Compound Oracle contract,9.7,0.22901348600131158,audited
sc_3408,uninitialized_storage,High,dYdX,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",61439.24,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX Timelock contract,7.0,0.6976325777281118,unaudited
sc_3409,integer_overflow,High,Frax,ERC20,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",35873.9,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Frax ERC20 contract,7.5,0.296121727545656,audited
sc_3410,tx_origin,Medium,Yearn,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",142459.17,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Router contract,4.9,0.7766351006456128,unaudited
sc_3411,access_control,High,1inch,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",52592.81,13,0.26,0.8,2,0,1,1,High access_control vulnerability in 1inch AMM contract,8.8,0.783835082120564,audited
sc_3412,delegatecall_injection,Critical,Synthetix,Router,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",178762.4,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Synthetix Router contract,9.5,0.9335329601420572,audited
sc_3413,short_address,Medium,Rari,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18855.24,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Rari Lending contract,4.1,0.5465612775095244,audited
sc_3414,integer_overflow,High,Liquity,Factory,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",22992.99,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Factory contract,7.3,0.415490767447963,unaudited
sc_3415,delegatecall_injection,Critical,Rari,Pool,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",30662.63,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari Pool contract,9.3,0.10996074540918188,audited
sc_3416,dos_gas_limit,Medium,Aave,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",149921.35,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave ERC20 contract,5.0,0.20794488209838236,unaudited
sc_3417,timestamp_dependence,Medium,Aave,DEX,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",29741.77,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Aave DEX contract,6.7,0.5128966314206223,audited
sc_3418,access_control,High,Frax,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",23055.58,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Frax ERC721 contract,8.5,0.8388528508431244,audited
sc_3419,dos_gas_limit,Medium,Synthetix,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",123149.5,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Synthetix Governor contract,4.3,0.5004272055326436,audited
sc_3420,tx_origin,Medium,Frax,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",63042.16,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Strategy contract,6.5,0.30641339085470803,audited
sc_3421,tx_origin,Medium,Rari,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49950.08,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Rari Lending contract,4.4,0.8995647269595334,audited
sc_3422,integer_overflow,High,Uniswap,ERC721,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",54026.69,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Uniswap ERC721 contract,8.7,0.25303858753615743,unaudited
sc_3423,integer_overflow,High,Balancer,Router,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",55320.76,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Balancer Router contract,7.1,0.16024469359526322,unaudited
sc_3424,random_weakness,High,Frax,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",56911.16,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax AMM contract,7.9,0.6373813923869609,unaudited
sc_3425,reentrancy,Critical,SushiSwap,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",98395.43,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in SushiSwap Proxy contract,9.5,0.5923004277515611,audited
sc_3426,access_control,High,Rari,ERC1155,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",69145.51,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari ERC1155 contract,8.9,0.35341266607974176,unaudited
sc_3427,timestamp_dependence,Medium,1inch,Proxy,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",46453.06,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in 1inch Proxy contract,6.8,0.39199555737424774,audited
sc_3428,unchecked_call,Medium,dYdX,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",20198.18,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in dYdX ERC1155 contract,6.6,0.9785316827521753,unaudited
sc_3429,tx_origin,Medium,PancakeSwap,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42983.89,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in PancakeSwap Lending contract,4.7,0.48403419231347267,audited
sc_3430,reentrancy,Critical,Euler,ERC1155,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",13523.47,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler ERC1155 contract,9.7,0.16129232875377678,audited
sc_3431,dos_gas_limit,Medium,Curve,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",100211.8,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Curve Timelock contract,5.0,0.510006712220539,audited
sc_3432,reentrancy,Critical,Euler,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",74365.88,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler Governor contract,9.6,0.9859000057903256,audited
sc_3433,short_address,Medium,Liquity,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15257.63,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Liquity Oracle contract,5.3,0.4420193554135218,audited
sc_3434,dos_gas_limit,Medium,MakerDAO,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",135445.5,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO Strategy contract,6.1,0.9827696720499464,audited
sc_3435,unchecked_call,Medium,Aave,AMM,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",281845.15,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave AMM contract,4.7,0.16562849715639055,audited
sc_3436,tx_origin,Medium,Aave,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",252812.12,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave Oracle contract,4.7,0.3847732270865363,unaudited
sc_3437,uninitialized_storage,High,Frax,ERC20,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",21380.19,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax ERC20 contract,7.9,0.5657901616962788,audited
sc_3438,unchecked_call,Medium,Uniswap,Strategy,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",90615.24,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Uniswap Strategy contract,6.0,0.970332711065751,unaudited
sc_3439,tx_origin,Medium,Balancer,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",61718.47,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Balancer Staking contract,5.2,0.7956466776914621,audited
sc_3440,delegatecall_injection,Critical,dYdX,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",88991.35,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in dYdX Lending contract,9.6,0.8345246258574359,unaudited
sc_3441,front_running,Medium,Aave,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",237779.6,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Aave Oracle contract,6.1,0.14801482204873,audited
sc_3442,access_control,High,Frax,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",60211.22,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Frax ERC721 contract,8.3,0.3548078292520819,audited
sc_3443,reentrancy,Critical,Balancer,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",13559.55,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Router contract,9.5,0.6869492058306874,unaudited
sc_3444,dos_gas_limit,Medium,SushiSwap,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32709.71,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in SushiSwap Bridge contract,5.3,0.8531445931268508,unaudited
sc_3445,delegatecall_injection,Critical,Convex,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",113486.26,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Convex Pool contract,9.0,0.5175242898546568,unaudited
sc_3446,tx_origin,Medium,Compound,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",86201.99,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Compound Oracle contract,4.9,0.7122216614118116,audited
sc_3447,random_weakness,High,Uniswap,Factory,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",351135.52,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Uniswap Factory contract,7.0,0.6301526564216552,unaudited
sc_3448,access_control,High,Compound,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",365459.18,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound Factory contract,7.2,0.4749895188195614,audited
sc_3449,short_address,Medium,1inch,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",9283.48,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in 1inch Strategy contract,6.2,0.8740690782720798,audited
sc_3450,timestamp_dependence,Medium,PancakeSwap,Farming,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",8759.32,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Farming contract,6.8,0.3927868590862593,audited
sc_3451,timestamp_dependence,Medium,PancakeSwap,Strategy,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",46495.23,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in PancakeSwap Strategy contract,4.1,0.6540905590566762,audited
sc_3452,unchecked_call,Medium,Balancer,Bridge,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",24892.71,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Balancer Bridge contract,4.4,0.2131805310908169,audited
sc_3453,timestamp_dependence,Medium,Convex,DEX,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",54368.01,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Convex DEX contract,6.6,0.2841684511914318,audited
sc_3454,integer_overflow,High,Compound,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",174925.32,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Compound Staking contract,7.1,0.6225329323124483,audited
sc_3455,access_control,High,MakerDAO,Pool,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",290009.01,13,0.26,0.8,2,0,1,2,High access_control vulnerability in MakerDAO Pool contract,7.1,0.4207110601143157,audited
sc_3456,integer_overflow,High,Balancer,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",47338.2,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Balancer Factory contract,7.0,0.5753542116964996,audited
sc_3457,short_address,Medium,MakerDAO,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",201845.57,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in MakerDAO AMM contract,5.6,0.1481816724209885,audited
sc_3458,access_control,High,Convex,Router,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",30074.87,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Convex Router contract,8.3,0.7632779955151544,audited
sc_3459,delegatecall_injection,Critical,Alpha Homora,ERC1155,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",11327.64,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora ERC1155 contract,9.8,0.8214902222249046,audited
sc_3460,dos_gas_limit,Medium,Yearn,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50390.11,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn Staking contract,4.9,0.3029433129303684,audited
sc_3461,reentrancy,Critical,Convex,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",22753.26,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex ERC721 contract,9.0,0.27827812467057583,audited
sc_3462,uninitialized_storage,High,Yearn,Oracle,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",211967.12,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Yearn Oracle contract,8.5,0.7082588349450145,audited
sc_3463,access_control,High,Frax,ERC20,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",39486.59,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Frax ERC20 contract,7.8,0.8045620484534404,audited
sc_3464,short_address,Medium,Compound,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",173404.73,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Compound Bridge contract,5.2,0.4350119418339794,unaudited
sc_3465,tx_origin,Medium,Balancer,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29596.71,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Balancer Strategy contract,4.7,0.45043612375453457,audited
sc_3466,delegatecall_injection,Critical,Rari,Strategy,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",92090.61,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari Strategy contract,9.7,0.15001681323699168,audited
sc_3467,dos_gas_limit,Medium,Convex,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46232.09,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Convex Bridge contract,5.0,0.7982513170752032,audited
sc_3468,front_running,Medium,MakerDAO,ERC20,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49081.17,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in MakerDAO ERC20 contract,5.5,0.9441258967878804,unaudited
sc_3469,unchecked_call,Medium,Aave,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",185690.5,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Aave Proxy contract,6.3,0.9537435373382748,unaudited
sc_3470,access_control,High,PancakeSwap,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",95531.22,13,0.26,0.8,2,1,1,1,High access_control vulnerability in PancakeSwap DEX contract,8.8,0.8569782706825722,unaudited
sc_3471,random_weakness,High,MakerDAO,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",224737.86,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Factory contract,8.9,0.9084170256111085,audited
sc_3472,access_control,High,Euler,AMM,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",16890.75,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Euler AMM contract,7.5,0.7066958339847239,audited
sc_3473,reentrancy,Critical,Yearn,Oracle,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",104117.39,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Yearn Oracle contract,9.9,0.8064023052114863,unaudited
sc_3474,integer_overflow,High,Uniswap,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",42243.17,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Uniswap Factory contract,7.9,0.749154799225906,unaudited
sc_3475,unchecked_call,Medium,PancakeSwap,ERC20,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",50066.15,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in PancakeSwap ERC20 contract,4.4,0.2927294836796151,audited
sc_3476,unchecked_call,Medium,Uniswap,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",159143.17,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Uniswap Lending contract,4.7,0.3734417938000911,audited
sc_3477,front_running,Medium,Balancer,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13050.17,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Balancer Strategy contract,6.5,0.8325051725722792,audited
sc_3478,random_weakness,High,Aave,Pool,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",452810.59,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Aave Pool contract,7.1,0.6021769944173717,audited
sc_3479,short_address,Medium,Yearn,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",74849.29,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Yearn Pool contract,4.7,0.4259447358458609,unaudited
sc_3480,access_control,High,Yearn,DEX,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",58700.69,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn DEX contract,8.5,0.1241833553923601,audited
sc_3481,access_control,High,Synthetix,Timelock,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",167725.87,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Synthetix Timelock contract,7.5,0.8393392363862738,unaudited
sc_3482,short_address,Medium,Yearn,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",67416.23,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Yearn Strategy contract,4.7,0.6114093731552915,audited
sc_3483,front_running,Medium,SushiSwap,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37096.91,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in SushiSwap AMM contract,5.2,0.18303709453077743,unaudited
sc_3484,delegatecall_injection,Critical,Yearn,AMM,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",34267.94,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Yearn AMM contract,9.5,0.24517501848926526,audited
sc_3485,integer_overflow,High,Euler,AMM,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",47946.44,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Euler AMM contract,7.5,0.1766294764969933,unaudited
sc_3486,reentrancy,Critical,Alpha Homora,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",38765.75,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Alpha Homora Bridge contract,9.2,0.8942574214992319,audited
sc_3487,delegatecall_injection,Critical,Aave,Factory,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",287910.95,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Aave Factory contract,10.0,0.5639560315640789,audited
sc_3488,timestamp_dependence,Medium,Aave,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",184083.26,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Aave Oracle contract,6.2,0.7093805125803523,audited
sc_3489,front_running,Medium,Curve,Pool,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",73133.94,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve Pool contract,6.4,0.5673363912303344,unaudited
sc_3490,unchecked_call,Medium,Liquity,Factory,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",55015.02,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity Factory contract,6.4,0.6566870473332181,audited
sc_3491,random_weakness,High,Uniswap,Farming,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",175286.76,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Uniswap Farming contract,7.0,0.9760731868337335,unaudited
sc_3492,uninitialized_storage,High,Uniswap,Factory,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",223220.36,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Uniswap Factory contract,7.2,0.32258374333936246,audited
sc_3493,front_running,Medium,Synthetix,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50791.08,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Synthetix Oracle contract,5.7,0.13120139630680155,unaudited
sc_3494,access_control,High,Yearn,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",72487.1,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Yearn Factory contract,7.3,0.1583657062497084,audited
sc_3495,random_weakness,High,Compound,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",112403.18,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound ERC20 contract,7.8,0.7640223323375572,unaudited
sc_3496,tx_origin,Medium,Euler,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12570.23,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Euler Governor contract,6.9,0.954250857722712,audited
sc_3497,front_running,Medium,Uniswap,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",132507.44,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Uniswap Governor contract,4.1,0.8781297528450647,audited
sc_3498,delegatecall_injection,Critical,Rari,Vault,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",110786.83,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari Vault contract,10.0,0.7449441291195728,unaudited
sc_3499,dos_gas_limit,Medium,Rari,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12044.02,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Rari Router contract,4.8,0.9240857672415722,unaudited
sc_3500,unchecked_call,Medium,SushiSwap,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",134605.4,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in SushiSwap Lending contract,4.2,0.7561684659884353,audited
sc_3501,timestamp_dependence,Medium,dYdX,Strategy,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",34898.86,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Strategy contract,4.2,0.14787306480799337,audited
sc_3502,short_address,Medium,Aave,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",186975.02,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Aave Router contract,5.1,0.16726068663171678,audited
sc_3503,integer_overflow,High,SushiSwap,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",27770.03,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in SushiSwap AMM contract,8.2,0.7913499665501418,audited
sc_3504,dos_gas_limit,Medium,Compound,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",234093.04,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Bridge contract,6.7,0.41736092390363044,unaudited
sc_3505,access_control,High,Alpha Homora,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",70241.29,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Alpha Homora AMM contract,8.3,0.5602664845020776,audited
sc_3506,uninitialized_storage,High,Euler,ERC20,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",47171.4,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Euler ERC20 contract,7.3,0.5810039743198288,audited
sc_3507,timestamp_dependence,Medium,Synthetix,Timelock,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",68918.32,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Synthetix Timelock contract,5.7,0.9601012373274369,audited
sc_3508,timestamp_dependence,Medium,Synthetix,Staking,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",170723.83,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Synthetix Staking contract,5.1,0.1283757545996874,audited
sc_3509,short_address,Medium,Frax,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18783.16,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Frax ERC20 contract,6.5,0.4316974992800636,audited
sc_3510,delegatecall_injection,Critical,Compound,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",236207.22,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Compound Oracle contract,9.4,0.6141291953966338,audited
sc_3511,access_control,High,Convex,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",37209.91,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Convex ERC721 contract,7.0,0.5179656815074125,audited
sc_3512,unchecked_call,Medium,Yearn,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",118748.79,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Yearn Bridge contract,6.5,0.5284125121280251,audited
sc_3513,tx_origin,Medium,Frax,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47910.11,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Factory contract,5.9,0.48818626867951065,audited
sc_3514,random_weakness,High,Uniswap,ERC20,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",177641.93,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Uniswap ERC20 contract,8.1,0.9205030039912288,audited
sc_3515,short_address,Medium,Yearn,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23498.18,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn Vault contract,6.4,0.9174529658921773,audited
sc_3516,short_address,Medium,dYdX,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35852.1,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in dYdX ERC1155 contract,4.6,0.5442225619898925,audited
sc_3517,integer_overflow,High,Balancer,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",49248.41,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Balancer Oracle contract,8.7,0.1741225867113158,audited
sc_3518,uninitialized_storage,High,Curve,Staking,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",81423.81,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve Staking contract,7.5,0.6950507858381246,unaudited
sc_3519,short_address,Medium,Compound,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",76499.86,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Compound Router contract,5.9,0.15754329095753017,audited
sc_3520,front_running,Medium,Balancer,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34787.9,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer Farming contract,6.0,0.872472799385756,audited
sc_3521,delegatecall_injection,Critical,Curve,Proxy,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",190554.13,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Curve Proxy contract,9.4,0.9758627114746893,audited
sc_3522,unchecked_call,Medium,Yearn,Router,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",78840.35,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn Router contract,4.5,0.838878888142502,audited
sc_3523,access_control,High,Euler,Strategy,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",56467.66,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Euler Strategy contract,7.6,0.8066750461856131,audited
sc_3524,short_address,Medium,Frax,Timelock,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52860.39,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Frax Timelock contract,6.6,0.18168212089175695,audited
sc_3525,random_weakness,High,Synthetix,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",78279.03,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Synthetix ERC721 contract,7.5,0.8109840883743954,audited
sc_3526,uninitialized_storage,High,Rari,Staking,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",42854.88,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Rari Staking contract,7.2,0.8873587116350035,audited
sc_3527,unchecked_call,Medium,1inch,Router,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",9331.79,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Router contract,5.6,0.542093541251642,audited
sc_3528,dos_gas_limit,Medium,Rari,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14457.58,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Rari ERC1155 contract,6.0,0.5063769903745596,unaudited
sc_3529,unchecked_call,Medium,Curve,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",156634.4,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Bridge contract,4.3,0.43596297542238527,audited
sc_3530,timestamp_dependence,Medium,Euler,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",15589.23,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Euler DEX contract,6.6,0.6389465919783821,unaudited
sc_3531,delegatecall_injection,Critical,Convex,Strategy,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",90334.93,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Convex Strategy contract,9.0,0.15145871700599767,audited
sc_3532,tx_origin,Medium,Frax,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23631.47,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax AMM contract,5.8,0.7399001066223642,audited
sc_3533,access_control,High,Uniswap,Farming,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",248020.67,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap Farming contract,8.0,0.9557953488420166,audited
sc_3534,delegatecall_injection,Critical,Liquity,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",62849.41,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity DEX contract,9.7,0.3258932091707022,audited
sc_3535,random_weakness,High,Aave,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",82460.61,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Aave Bridge contract,8.4,0.6894109928561504,audited
sc_3536,timestamp_dependence,Medium,MakerDAO,Proxy,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",118758.54,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Proxy contract,4.6,0.41398023563472186,unaudited
sc_3537,short_address,Medium,PancakeSwap,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58524.97,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in PancakeSwap ERC721 contract,4.8,0.14097909416679005,unaudited
sc_3538,timestamp_dependence,Medium,Aave,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",167834.91,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave ERC721 contract,6.6,0.573321802046909,audited
sc_3539,dos_gas_limit,Medium,Compound,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",131708.14,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Pool contract,6.3,0.5590232062656234,unaudited
sc_3540,unchecked_call,Medium,Frax,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",65146.8,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Frax Staking contract,5.8,0.5727675209971949,unaudited
sc_3541,unchecked_call,Medium,Liquity,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",29744.45,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity Proxy contract,5.3,0.786216085694644,audited
sc_3542,integer_overflow,High,Yearn,Oracle,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",195199.17,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Yearn Oracle contract,8.8,0.9579734890893034,audited
sc_3543,dos_gas_limit,Medium,Compound,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",300468.51,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Staking contract,4.9,0.6144467705104756,unaudited
sc_3544,tx_origin,Medium,Convex,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40393.82,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex Farming contract,5.1,0.7358627116291461,audited
sc_3545,access_control,High,Rari,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",15057.67,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Rari Strategy contract,7.3,0.8507316811419335,unaudited
sc_3546,reentrancy,Critical,Alpha Homora,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",45221.59,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora Bridge contract,9.2,0.608621152982255,audited
sc_3547,delegatecall_injection,Critical,Liquity,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",73900.95,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity Router contract,9.2,0.9671944708229091,audited
sc_3548,short_address,Medium,Convex,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",6971.69,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex ERC721 contract,5.4,0.12665418512758092,unaudited
sc_3549,tx_origin,Medium,MakerDAO,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",197091.72,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO Governor contract,6.1,0.6535235617873821,audited
sc_3550,front_running,Medium,PancakeSwap,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14398.04,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in PancakeSwap Lending contract,4.5,0.4803590814197811,unaudited
sc_3551,short_address,Medium,Alpha Homora,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",17182.98,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Alpha Homora Governor contract,6.8,0.6140594529318392,audited
sc_3552,reentrancy,Critical,Balancer,Factory,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",50869.1,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Factory contract,9.6,0.6428055618722911,audited
sc_3553,uninitialized_storage,High,Synthetix,ERC20,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",180201.61,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix ERC20 contract,7.5,0.4872391510413161,audited
sc_3554,short_address,Medium,SushiSwap,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",132887.37,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in SushiSwap AMM contract,6.5,0.6226055802694552,audited
sc_3555,dos_gas_limit,Medium,Synthetix,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39604.57,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Synthetix Factory contract,6.3,0.20388154616192478,audited
sc_3556,delegatecall_injection,Critical,Liquity,Oracle,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",52923.34,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity Oracle contract,9.4,0.6743100263458414,unaudited
sc_3557,access_control,High,SushiSwap,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",122910.39,13,0.26,0.8,2,0,1,1,High access_control vulnerability in SushiSwap ERC1155 contract,7.6,0.8714287641479523,unaudited
sc_3558,dos_gas_limit,Medium,Alpha Homora,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23757.7,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Strategy contract,6.7,0.6300130596528561,audited
sc_3559,unchecked_call,Medium,Frax,Router,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",34101.57,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Frax Router contract,4.3,0.4665117806319258,audited
sc_3560,short_address,Medium,SushiSwap,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",92227.57,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in SushiSwap Staking contract,6.4,0.11723576616626924,unaudited
sc_3561,dos_gas_limit,Medium,Frax,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29985.92,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Frax Router contract,6.6,0.1403640140231471,audited
sc_3562,dos_gas_limit,Medium,Rari,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14004.49,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Rari Timelock contract,5.0,0.2514435432572883,audited
sc_3563,reentrancy,Critical,1inch,Strategy,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",15669.84,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch Strategy contract,9.2,0.11937148401155655,unaudited
sc_3564,uninitialized_storage,High,Rari,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",88024.43,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Rari ERC721 contract,7.8,0.5097003796610251,unaudited
sc_3565,dos_gas_limit,Medium,Rari,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44610.41,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Rari Router contract,6.3,0.6637452999031536,unaudited
sc_3566,front_running,Medium,1inch,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49215.78,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in 1inch Strategy contract,5.2,0.5730381871855318,audited
sc_3567,dos_gas_limit,Medium,Uniswap,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51702.88,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Uniswap Governor contract,5.2,0.2515242280313874,audited
sc_3568,dos_gas_limit,Medium,Yearn,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",27734.18,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn Lending contract,5.6,0.8326960564731025,unaudited
sc_3569,random_weakness,High,Rari,Strategy,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",9375.36,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari Strategy contract,7.7,0.5423502271644124,audited
sc_3570,front_running,Medium,Balancer,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31676.19,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Balancer Lending contract,4.3,0.34174530022187066,unaudited
sc_3571,front_running,Medium,MakerDAO,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",111674.24,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in MakerDAO Vault contract,5.0,0.9215196596229873,audited
sc_3572,random_weakness,High,Uniswap,AMM,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",232616.83,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Uniswap AMM contract,7.5,0.25191807856211706,audited
sc_3573,random_weakness,High,Rari,Governor,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",7626.48,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari Governor contract,7.8,0.8450182708428376,audited
sc_3574,unchecked_call,Medium,Balancer,ERC20,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",44299.87,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Balancer ERC20 contract,6.0,0.3171595467123789,audited
sc_3575,reentrancy,Critical,Euler,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",38099.23,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler Router contract,9.6,0.6824675671381756,audited
sc_3576,uninitialized_storage,High,Rari,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",9513.85,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Rari Bridge contract,8.1,0.5842344815616823,audited
sc_3577,tx_origin,Medium,Convex,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34739.13,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Convex Lending contract,5.4,0.1515819189988873,audited
sc_3578,timestamp_dependence,Medium,SushiSwap,Lending,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",27648.86,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in SushiSwap Lending contract,5.9,0.1975163848587992,audited
sc_3579,unchecked_call,Medium,Compound,Pool,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",198521.04,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Compound Pool contract,6.5,0.6141961615030741,audited
sc_3580,timestamp_dependence,Medium,Synthetix,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",53409.35,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Synthetix Oracle contract,6.4,0.4179935665523843,audited
sc_3581,delegatecall_injection,Critical,SushiSwap,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",175365.1,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in SushiSwap Proxy contract,9.6,0.11471650067425554,audited
sc_3582,uninitialized_storage,High,Convex,Lending,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",54143.76,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Convex Lending contract,8.7,0.3739814154547162,audited
sc_3583,delegatecall_injection,Critical,Curve,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",105100.21,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Curve Lending contract,9.3,0.6525280910630827,unaudited
sc_3584,uninitialized_storage,High,Euler,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",24451.51,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Euler Governor contract,7.8,0.6872990553663779,audited
sc_3585,access_control,High,Curve,Lending,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",140497.0,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Curve Lending contract,7.7,0.7638594350880185,audited
sc_3586,dos_gas_limit,Medium,dYdX,ERC721,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",60719.67,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in dYdX ERC721 contract,5.7,0.780654237924047,audited
sc_3587,access_control,High,Compound,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",244267.11,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound Strategy contract,7.4,0.6717501613670377,audited
sc_3588,reentrancy,Critical,Aave,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",435843.79,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Aave Pool contract,9.6,0.9048188902298574,audited
sc_3589,random_weakness,High,Rari,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",41264.99,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Rari Staking contract,7.5,0.4167882788272669,audited
sc_3590,random_weakness,High,Rari,DEX,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",86887.31,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari DEX contract,7.4,0.7186848341654279,audited
sc_3591,timestamp_dependence,Medium,Convex,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",30368.99,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Convex Factory contract,4.6,0.8914592786172186,audited
sc_3592,timestamp_dependence,Medium,Aave,Lending,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",157648.8,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave Lending contract,6.9,0.652360726569946,audited
sc_3593,uninitialized_storage,High,Balancer,Strategy,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",39065.26,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Balancer Strategy contract,7.3,0.4402022291041161,audited
sc_3594,short_address,Medium,1inch,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37734.22,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch Factory contract,4.1,0.8608877902453831,audited
sc_3595,dos_gas_limit,Medium,SushiSwap,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",126533.61,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in SushiSwap AMM contract,4.4,0.9772224690040225,audited
sc_3596,random_weakness,High,Liquity,Timelock,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",14431.36,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Liquity Timelock contract,8.1,0.6853004732124238,audited
sc_3597,reentrancy,Critical,Aave,Strategy,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",331920.49,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Strategy contract,9.9,0.946201134173365,audited
sc_3598,uninitialized_storage,High,SushiSwap,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",66381.86,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in SushiSwap AMM contract,8.8,0.5247097659981069,audited
sc_3599,integer_overflow,High,Curve,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",95235.81,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Curve Farming contract,8.2,0.17614922833406305,audited
sc_3600,front_running,Medium,dYdX,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57737.88,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in dYdX DEX contract,6.3,0.526030425025432,audited
sc_3601,front_running,Medium,Yearn,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48630.72,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Yearn Factory contract,4.3,0.9210058895387351,audited
sc_3602,reentrancy,Critical,MakerDAO,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",77102.35,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO AMM contract,9.8,0.15213450656326716,audited
sc_3603,dos_gas_limit,Medium,Synthetix,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",108745.92,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Synthetix Timelock contract,6.2,0.7056360242657493,audited
sc_3604,random_weakness,High,PancakeSwap,Vault,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",13041.15,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap Vault contract,7.3,0.449206262147826,audited
sc_3605,random_weakness,High,Alpha Homora,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",59105.6,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Alpha Homora Timelock contract,8.0,0.13970232581096292,audited
sc_3606,dos_gas_limit,Medium,Yearn,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",149496.99,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn Bridge contract,5.2,0.7022710502846499,audited
sc_3607,random_weakness,High,dYdX,Proxy,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",42829.73,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX Proxy contract,8.2,0.7219157455603475,audited
sc_3608,random_weakness,High,Synthetix,Oracle,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",164763.69,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Synthetix Oracle contract,8.2,0.9551540056678328,audited
sc_3609,timestamp_dependence,Medium,Liquity,ERC1155,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",48144.58,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity ERC1155 contract,6.2,0.7273030846246761,audited
sc_3610,front_running,Medium,1inch,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10871.26,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in 1inch Oracle contract,5.2,0.8543871957551884,audited
sc_3611,uninitialized_storage,High,Rari,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",24425.13,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Rari Farming contract,8.6,0.35273132556081466,unaudited
sc_3612,delegatecall_injection,Critical,Curve,Pool,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",190038.77,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Curve Pool contract,9.2,0.8139707259287865,audited
sc_3613,uninitialized_storage,High,SushiSwap,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",205658.02,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in SushiSwap ERC721 contract,8.1,0.5751151652689613,unaudited
sc_3614,short_address,Medium,Liquity,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49812.22,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity AMM contract,6.0,0.46508336630138636,unaudited
sc_3615,short_address,Medium,Aave,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",125407.63,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Aave Staking contract,4.6,0.878857643181854,audited
sc_3616,random_weakness,High,Curve,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",189380.83,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Curve Timelock contract,8.6,0.3276394681722165,audited
sc_3617,access_control,High,Frax,ERC20,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",19114.98,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Frax ERC20 contract,7.1,0.6514639421181514,unaudited
sc_3618,delegatecall_injection,Critical,Aave,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",510434.94,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Aave Oracle contract,9.1,0.29217212213637156,audited
sc_3619,integer_overflow,High,Yearn,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",146074.73,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Yearn Staking contract,7.8,0.11554335821234579,audited
sc_3620,front_running,Medium,Frax,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44055.11,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax Lending contract,5.5,0.8917952719281871,audited
sc_3621,random_weakness,High,1inch,Staking,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",8851.24,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in 1inch Staking contract,8.1,0.9349709037055455,unaudited
sc_3622,unchecked_call,Medium,Frax,Proxy,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",42933.41,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Frax Proxy contract,6.8,0.44007093085781124,audited
sc_3623,delegatecall_injection,Critical,Aave,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",403548.44,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Aave AMM contract,9.3,0.3258838366249782,audited
sc_3624,tx_origin,Medium,Aave,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",101417.32,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave ERC20 contract,5.9,0.3481009053835235,unaudited
sc_3625,random_weakness,High,1inch,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",39292.5,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in 1inch Timelock contract,7.6,0.32804817958565663,audited
sc_3626,short_address,Medium,Compound,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47112.99,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Compound DEX contract,4.3,0.17827305999890353,audited
sc_3627,tx_origin,Medium,Synthetix,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38737.6,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix ERC721 contract,5.7,0.37575739629965554,unaudited
sc_3628,timestamp_dependence,Medium,Convex,Farming,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",34666.46,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Convex Farming contract,5.8,0.6319569859235586,unaudited
sc_3629,front_running,Medium,dYdX,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22756.08,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in dYdX DEX contract,6.0,0.1677529605481933,unaudited
sc_3630,reentrancy,Critical,Yearn,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",134943.44,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Yearn Timelock contract,9.6,0.19471521979414708,audited
sc_3631,random_weakness,High,Rari,Lending,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",53206.26,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari Lending contract,7.2,0.2555425651696243,unaudited
sc_3632,timestamp_dependence,Medium,Alpha Homora,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",42365.0,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Alpha Homora Governor contract,5.4,0.4526350796637518,audited
sc_3633,reentrancy,Critical,Yearn,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",313682.47,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Yearn Farming contract,9.7,0.7460694047373635,unaudited
sc_3634,short_address,Medium,PancakeSwap,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49004.55,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in PancakeSwap Pool contract,6.6,0.6310586179202494,audited
sc_3635,short_address,Medium,MakerDAO,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",136685.09,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in MakerDAO Governor contract,4.3,0.2956467942608618,audited
sc_3636,tx_origin,Medium,Curve,Governor,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",106263.37,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Curve Governor contract,6.1,0.27330175941450513,audited
sc_3637,dos_gas_limit,Medium,PancakeSwap,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15165.63,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap Vault contract,4.5,0.8320972904455394,unaudited
sc_3638,unchecked_call,Medium,MakerDAO,Bridge,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",203182.73,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in MakerDAO Bridge contract,4.4,0.594047547305009,audited
sc_3639,front_running,Medium,Euler,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30894.26,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Euler Factory contract,6.8,0.17736653464145585,unaudited
sc_3640,unchecked_call,Medium,Aave,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",227688.98,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave DEX contract,6.2,0.5891357827957158,audited
sc_3641,front_running,Medium,Uniswap,Governor,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53140.35,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Uniswap Governor contract,4.7,0.40184582914833655,unaudited
sc_3642,tx_origin,Medium,MakerDAO,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",240961.33,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in MakerDAO Farming contract,5.7,0.9868091074733607,audited
sc_3643,tx_origin,Medium,Frax,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64462.57,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Frax Governor contract,4.9,0.8605782910925008,audited
sc_3644,dos_gas_limit,Medium,Aave,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",333514.46,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Aave Router contract,5.1,0.4641233654854039,audited
sc_3645,timestamp_dependence,Medium,SushiSwap,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",103288.55,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in SushiSwap Bridge contract,5.0,0.5256045522491867,audited
sc_3646,short_address,Medium,Rari,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",60694.45,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Rari Proxy contract,5.8,0.8976937391836611,audited
sc_3647,random_weakness,High,MakerDAO,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",110403.26,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Governor contract,7.3,0.42104531698399916,audited
sc_3648,reentrancy,Critical,Aave,ERC20,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",253001.98,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave ERC20 contract,9.2,0.5801101127251449,audited
sc_3649,random_weakness,High,Alpha Homora,Oracle,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",18908.07,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Alpha Homora Oracle contract,7.5,0.26282247435922657,audited
sc_3650,unchecked_call,Medium,SushiSwap,Pool,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",129332.25,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in SushiSwap Pool contract,6.1,0.8067314258282062,unaudited
sc_3651,timestamp_dependence,Medium,Curve,ERC721,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",75890.2,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Curve ERC721 contract,4.7,0.6010236600198315,audited
sc_3652,front_running,Medium,Alpha Homora,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",74558.61,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Alpha Homora Lending contract,6.2,0.547634038555388,audited
sc_3653,random_weakness,High,Compound,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",121122.87,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Router contract,8.2,0.13733092544843756,audited
sc_3654,tx_origin,Medium,MakerDAO,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",91497.91,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO ERC721 contract,5.4,0.8431809825327953,audited
sc_3655,uninitialized_storage,High,Synthetix,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",87542.86,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix DEX contract,8.2,0.44630141917547494,audited
sc_3656,unchecked_call,Medium,Balancer,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",40572.1,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Balancer Farming contract,5.6,0.7217472915558361,unaudited
sc_3657,reentrancy,Critical,Balancer,Oracle,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",44317.31,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Oracle contract,9.5,0.31731262096194324,unaudited
sc_3658,random_weakness,High,Compound,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",394316.28,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Governor contract,7.1,0.1711340512811736,audited
sc_3659,dos_gas_limit,Medium,Balancer,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32204.06,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Balancer AMM contract,6.2,0.2826988961646744,audited
sc_3660,short_address,Medium,dYdX,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",72476.73,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in dYdX ERC1155 contract,4.0,0.4081954276017783,audited
sc_3661,delegatecall_injection,Critical,PancakeSwap,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",67718.14,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Strategy contract,9.7,0.3446687290210485,audited
sc_3662,front_running,Medium,Alpha Homora,ERC721,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46723.39,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Alpha Homora ERC721 contract,5.6,0.8255054392467861,audited
sc_3663,tx_origin,Medium,Alpha Homora,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",55157.79,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora Staking contract,4.3,0.7737115072164802,unaudited
sc_3664,short_address,Medium,Alpha Homora,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",69124.77,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Alpha Homora ERC721 contract,6.7,0.9698084367622632,audited
sc_3665,tx_origin,Medium,Alpha Homora,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15663.99,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora AMM contract,5.8,0.1989990238993264,audited
sc_3666,timestamp_dependence,Medium,Curve,DEX,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",165034.6,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Curve DEX contract,4.7,0.4626527988414574,unaudited
sc_3667,integer_overflow,High,Balancer,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",39855.1,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Balancer Timelock contract,8.2,0.10903558625067594,audited
sc_3668,front_running,Medium,Frax,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20797.46,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Frax Governor contract,4.5,0.6246964000097477,audited
sc_3669,access_control,High,Frax,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",51326.24,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Frax ERC1155 contract,7.9,0.12287629903404451,audited
sc_3670,integer_overflow,High,SushiSwap,Timelock,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",123247.08,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap Timelock contract,7.1,0.631597448647217,unaudited
sc_3671,random_weakness,High,SushiSwap,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",41860.35,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in SushiSwap Router contract,8.6,0.4857687423801439,unaudited
sc_3672,unchecked_call,Medium,Rari,Proxy,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",71521.01,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Rari Proxy contract,5.0,0.36436591455786016,audited
sc_3673,tx_origin,Medium,1inch,Timelock,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28529.7,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch Timelock contract,4.5,0.2785390586386589,audited
sc_3674,reentrancy,Critical,Alpha Homora,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",36923.4,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora ERC20 contract,9.3,0.7019738560365705,audited
sc_3675,short_address,Medium,MakerDAO,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",250421.64,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in MakerDAO AMM contract,4.6,0.9818516007400746,audited
sc_3676,random_weakness,High,dYdX,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",34753.73,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX ERC1155 contract,8.4,0.5254208454818483,audited
sc_3677,uninitialized_storage,High,Synthetix,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",81685.22,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix ERC20 contract,7.6,0.3587458655939795,audited
sc_3678,tx_origin,Medium,Balancer,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22667.35,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Balancer Router contract,6.4,0.5836457847318605,unaudited
sc_3679,access_control,High,Compound,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",434523.42,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound Timelock contract,7.2,0.9911325455668432,audited
sc_3680,timestamp_dependence,Medium,1inch,Router,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",8975.42,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in 1inch Router contract,4.2,0.4356093046640529,unaudited
sc_3681,random_weakness,High,PancakeSwap,DEX,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",94629.74,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap DEX contract,7.5,0.9478129362267445,audited
sc_3682,dos_gas_limit,Medium,Euler,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10619.34,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Euler Pool contract,6.2,0.7942781583862778,audited
sc_3683,tx_origin,Medium,Alpha Homora,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28081.62,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora Staking contract,6.8,0.8737452077164019,audited
sc_3684,access_control,High,dYdX,Factory,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",57184.13,13,0.26,0.8,2,0,1,1,High access_control vulnerability in dYdX Factory contract,7.7,0.9969041814725033,audited
sc_3685,integer_overflow,High,Compound,Factory,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",144553.51,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Compound Factory contract,7.8,0.3766709409779768,unaudited
sc_3686,timestamp_dependence,Medium,dYdX,Oracle,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",18015.3,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Oracle contract,4.1,0.4835733406297964,audited
sc_3687,reentrancy,Critical,Liquity,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",17482.13,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Liquity DEX contract,9.6,0.8651390816321596,audited
sc_3688,dos_gas_limit,Medium,Frax,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15405.08,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Frax Proxy contract,4.2,0.6764812117366493,audited
sc_3689,unchecked_call,Medium,1inch,AMM,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",23368.32,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch AMM contract,5.8,0.9744415124038038,audited
sc_3690,short_address,Medium,PancakeSwap,ERC20,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19528.98,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in PancakeSwap ERC20 contract,4.9,0.32398390677561895,audited
sc_3691,uninitialized_storage,High,1inch,Proxy,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",15695.62,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in 1inch Proxy contract,8.9,0.8762743159132144,audited
sc_3692,front_running,Medium,Balancer,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28549.98,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer Factory contract,4.4,0.6929157898868398,audited
sc_3693,front_running,Medium,PancakeSwap,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38054.12,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in PancakeSwap Factory contract,4.3,0.26253027533759365,unaudited
sc_3694,access_control,High,Rari,Proxy,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",6941.08,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Rari Proxy contract,7.7,0.2950455884339423,audited
sc_3695,delegatecall_injection,Critical,Synthetix,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",148371.98,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Synthetix ERC20 contract,9.2,0.7849667926084756,audited
sc_3696,unchecked_call,Medium,Balancer,DEX,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",43444.46,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer DEX contract,4.6,0.910723846392261,audited
sc_3697,dos_gas_limit,Medium,Convex,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",66789.97,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Convex Pool contract,6.5,0.6043897578169329,audited
sc_3698,unchecked_call,Medium,Synthetix,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",77244.65,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Synthetix Staking contract,6.7,0.492884882358154,unaudited
sc_3699,unchecked_call,Medium,Liquity,Farming,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",47951.28,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity Farming contract,6.3,0.19018431455072515,audited
sc_3700,reentrancy,Critical,MakerDAO,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",247287.68,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in MakerDAO AMM contract,9.5,0.7058175099162303,audited
sc_3701,reentrancy,Critical,Euler,ERC20,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",97446.1,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler ERC20 contract,9.5,0.5654988474528821,audited
sc_3702,short_address,Medium,Liquity,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46613.8,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Liquity Timelock contract,4.4,0.5032203178635404,audited
sc_3703,unchecked_call,Medium,PancakeSwap,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",13684.49,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in PancakeSwap Pool contract,5.2,0.9016028479445244,unaudited
sc_3704,timestamp_dependence,Medium,Synthetix,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",144212.87,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Synthetix Staking contract,6.2,0.4171658704344716,unaudited
sc_3705,timestamp_dependence,Medium,Aave,Bridge,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",92712.87,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Aave Bridge contract,5.6,0.7814749950739212,unaudited
sc_3706,short_address,Medium,Yearn,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34135.03,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn Governor contract,4.8,0.18036932490888793,audited
sc_3707,uninitialized_storage,High,Frax,Staking,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",68024.0,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax Staking contract,7.9,0.7542464270408925,audited
sc_3708,reentrancy,Critical,Balancer,Timelock,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",69459.48,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Timelock contract,9.8,0.9956987512104256,audited
sc_3709,dos_gas_limit,Medium,dYdX,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38633.17,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in dYdX AMM contract,4.1,0.3610251734292512,unaudited
sc_3710,uninitialized_storage,High,MakerDAO,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",159090.75,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO Bridge contract,8.8,0.336360081431031,audited
sc_3711,dos_gas_limit,Medium,Yearn,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52445.97,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn Staking contract,5.6,0.31126897963520817,audited
sc_3712,tx_origin,Medium,Euler,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56876.68,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Euler Vault contract,5.8,0.8170543799996756,unaudited
sc_3713,front_running,Medium,Liquity,Timelock,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37557.85,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Liquity Timelock contract,4.9,0.7795180635736538,audited
sc_3714,random_weakness,High,Euler,Vault,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",19677.24,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Euler Vault contract,8.3,0.791478469873401,audited
sc_3715,tx_origin,Medium,Yearn,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",111242.53,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Yearn Vault contract,6.5,0.10577647284333157,audited
sc_3716,unchecked_call,Medium,Convex,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",56224.85,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Convex Lending contract,5.7,0.5480838669763405,audited
sc_3717,timestamp_dependence,Medium,Aave,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",141646.25,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Aave AMM contract,4.9,0.38366344993202084,audited
sc_3718,delegatecall_injection,Critical,Balancer,Vault,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",63015.15,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Balancer Vault contract,9.4,0.9814906479725248,unaudited
sc_3719,reentrancy,Critical,Alpha Homora,DEX,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",30458.23,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora DEX contract,10.0,0.6264584621984953,audited
sc_3720,reentrancy,Critical,Balancer,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",63710.13,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Balancer AMM contract,9.0,0.6897717631054957,unaudited
sc_3721,random_weakness,High,Aave,Lending,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",218856.42,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Aave Lending contract,7.3,0.6463266952987884,audited
sc_3722,delegatecall_injection,Critical,1inch,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",17206.11,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch AMM contract,9.7,0.4671962218371578,unaudited
sc_3723,delegatecall_injection,Critical,1inch,AMM,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",46236.2,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in 1inch AMM contract,9.1,0.6414073524444062,unaudited
sc_3724,reentrancy,Critical,Alpha Homora,ERC721,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",38078.84,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Alpha Homora ERC721 contract,9.4,0.17961339801700194,unaudited
sc_3725,integer_overflow,High,Rari,AMM,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",37907.4,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari AMM contract,7.8,0.35777647492107123,unaudited
sc_3726,short_address,Medium,Synthetix,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",119863.56,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Lending contract,4.1,0.9784918641355091,audited
sc_3727,random_weakness,High,Aave,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",442743.09,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Aave Staking contract,8.7,0.2020602377658431,unaudited
sc_3728,reentrancy,Critical,Compound,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",428811.3,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Compound ERC721 contract,9.8,0.37409621676721205,unaudited
sc_3729,timestamp_dependence,Medium,PancakeSwap,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",42764.06,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Governor contract,5.4,0.2808048883026069,audited
sc_3730,uninitialized_storage,High,1inch,ERC721,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",37664.73,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in 1inch ERC721 contract,7.7,0.25932602665628013,unaudited
sc_3731,delegatecall_injection,Critical,Alpha Homora,Farming,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",49105.16,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Farming contract,9.5,0.688834382543853,audited
sc_3732,short_address,Medium,Balancer,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39630.81,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Balancer Oracle contract,6.6,0.6311665571752376,unaudited
sc_3733,reentrancy,Critical,Yearn,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",85654.92,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Yearn Pool contract,9.4,0.11200696423829364,audited
sc_3734,random_weakness,High,dYdX,Factory,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",46790.98,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX Factory contract,7.0,0.67006354573287,unaudited
sc_3735,delegatecall_injection,Critical,Aave,DEX,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",294442.39,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Aave DEX contract,9.1,0.4645450997986663,unaudited
sc_3736,access_control,High,Aave,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",52899.75,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave ERC20 contract,8.7,0.2619776200723436,audited
sc_3737,short_address,Medium,PancakeSwap,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37980.19,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in PancakeSwap Oracle contract,4.5,0.7115809763202604,audited
sc_3738,random_weakness,High,Yearn,Pool,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",81862.76,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Yearn Pool contract,8.9,0.6965647412127148,audited
sc_3739,front_running,Medium,Compound,Governor,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",203169.35,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound Governor contract,6.1,0.4376285180691962,audited
sc_3740,random_weakness,High,MakerDAO,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",108546.0,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Oracle contract,7.2,0.636639271122957,unaudited
sc_3741,reentrancy,Critical,MakerDAO,Governor,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",118782.52,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO Governor contract,9.1,0.7813584944784863,unaudited
sc_3742,unchecked_call,Medium,Compound,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",99923.71,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Compound Lending contract,4.6,0.7383302708056252,unaudited
sc_3743,random_weakness,High,SushiSwap,Staking,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",31990.24,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in SushiSwap Staking contract,7.3,0.34030678070241105,audited
sc_3744,delegatecall_injection,Critical,MakerDAO,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",583034.46,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in MakerDAO DEX contract,9.5,0.23698991943755296,audited
sc_3745,integer_overflow,High,MakerDAO,Pool,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",351570.06,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Pool contract,8.2,0.503333426907849,unaudited
sc_3746,reentrancy,Critical,dYdX,Proxy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",53683.78,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in dYdX Proxy contract,9.6,0.9170916932505261,audited
sc_3747,uninitialized_storage,High,Uniswap,Staking,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",205668.88,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Uniswap Staking contract,7.7,0.5578108058589663,unaudited
sc_3748,front_running,Medium,SushiSwap,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20625.81,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in SushiSwap DEX contract,4.0,0.66584104104066,audited
sc_3749,reentrancy,Critical,Liquity,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",17166.45,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Liquity Pool contract,9.5,0.9601887960331371,audited
sc_3750,tx_origin,Medium,Yearn,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",105168.78,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Bridge contract,6.4,0.20498667867362613,unaudited
sc_3751,front_running,Medium,Curve,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",103153.2,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Curve Staking contract,6.3,0.25725407163578445,unaudited
sc_3752,tx_origin,Medium,Yearn,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",81221.94,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Yearn Farming contract,6.2,0.7234661522489794,audited
sc_3753,timestamp_dependence,Medium,Aave,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",208650.93,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave Farming contract,5.7,0.9092020709976949,audited
sc_3754,integer_overflow,High,Liquity,Pool,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",87759.9,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Pool contract,8.5,0.45998765476022063,audited
sc_3755,uninitialized_storage,High,SushiSwap,Staking,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",122589.47,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in SushiSwap Staking contract,7.0,0.751367071013747,audited
sc_3756,random_weakness,High,Liquity,DEX,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",70526.33,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Liquity DEX contract,8.0,0.7882294504908326,audited
sc_3757,unchecked_call,Medium,PancakeSwap,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",6587.46,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in PancakeSwap Staking contract,6.4,0.7585989571789542,audited
sc_3758,timestamp_dependence,Medium,Uniswap,Farming,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",162173.44,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Uniswap Farming contract,6.0,0.7206980480879532,unaudited
sc_3759,random_weakness,High,Euler,Factory,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",57527.9,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Euler Factory contract,8.1,0.3902074389468785,unaudited
sc_3760,uninitialized_storage,High,Rari,AMM,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",16136.9,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Rari AMM contract,7.2,0.883711889269415,audited
sc_3761,tx_origin,Medium,PancakeSwap,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31652.49,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in PancakeSwap Proxy contract,6.4,0.2451255506365148,unaudited
sc_3762,reentrancy,Critical,MakerDAO,Lending,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",326427.4,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in MakerDAO Lending contract,9.3,0.8015254189466875,audited
sc_3763,dos_gas_limit,Medium,Alpha Homora,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15169.98,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Proxy contract,6.3,0.6663056969231984,unaudited
sc_3764,uninitialized_storage,High,Uniswap,Router,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",144137.36,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Uniswap Router contract,8.3,0.5201432791555646,unaudited
sc_3765,front_running,Medium,Euler,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38255.12,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Euler Lending contract,5.0,0.22862711289027926,unaudited
sc_3766,timestamp_dependence,Medium,dYdX,ERC721,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",34608.23,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX ERC721 contract,4.2,0.9671976844406509,audited
sc_3767,reentrancy,Critical,Frax,Farming,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",15344.47,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Frax Farming contract,9.7,0.335943608479084,unaudited
sc_3768,front_running,Medium,dYdX,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7230.89,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in dYdX Oracle contract,4.8,0.7470943939861273,audited
sc_3769,delegatecall_injection,Critical,Synthetix,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",204457.01,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Synthetix Proxy contract,9.5,0.4361221110772058,audited
sc_3770,random_weakness,High,Aave,Pool,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",75854.36,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Aave Pool contract,7.2,0.7227326416490226,unaudited
sc_3771,dos_gas_limit,Medium,Convex,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52556.61,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Convex AMM contract,4.7,0.6400493924690929,unaudited
sc_3772,front_running,Medium,SushiSwap,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",60365.79,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in SushiSwap Farming contract,4.5,0.8312142754815072,audited
sc_3773,dos_gas_limit,Medium,Curve,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22997.18,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Curve ERC1155 contract,4.5,0.49097143432831336,unaudited
sc_3774,random_weakness,High,Euler,Vault,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",50582.96,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Euler Vault contract,7.6,0.7141533076026071,unaudited
sc_3775,reentrancy,Critical,dYdX,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",11659.04,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in dYdX ERC20 contract,9.9,0.10256983543240261,audited
sc_3776,delegatecall_injection,Critical,Euler,ERC20,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",21015.87,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Euler ERC20 contract,9.4,0.16363791128147032,audited
sc_3777,timestamp_dependence,Medium,Euler,Bridge,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",52197.95,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Euler Bridge contract,5.5,0.36664681700578006,unaudited
sc_3778,short_address,Medium,Curve,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",167604.87,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Curve Strategy contract,4.6,0.6772133130041275,audited
sc_3779,reentrancy,Critical,Aave,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",286896.55,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Oracle contract,9.3,0.15206459477141618,audited
sc_3780,delegatecall_injection,Critical,Balancer,Proxy,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",11698.44,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Balancer Proxy contract,9.2,0.7620534262937653,audited
sc_3781,unchecked_call,Medium,Balancer,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",33814.02,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer Staking contract,5.6,0.7907249222999964,audited
sc_3782,tx_origin,Medium,Yearn,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40526.84,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Vault contract,4.4,0.6387529298554224,unaudited
sc_3783,access_control,High,dYdX,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",42300.89,13,0.26,0.8,2,0,1,1,High access_control vulnerability in dYdX Strategy contract,7.5,0.4969360374772195,audited
sc_3784,random_weakness,High,Balancer,ERC1155,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",46713.13,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer ERC1155 contract,8.1,0.744261484344561,audited
sc_3785,front_running,Medium,PancakeSwap,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57535.16,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in PancakeSwap Oracle contract,5.3,0.11168421279564851,audited
sc_3786,random_weakness,High,dYdX,AMM,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",28001.22,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX AMM contract,8.3,0.1724314959760694,audited
sc_3787,integer_overflow,High,Yearn,ERC721,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",160273.01,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Yearn ERC721 contract,8.7,0.2700693093130129,audited
sc_3788,front_running,Medium,Alpha Homora,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",11348.4,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Alpha Homora Bridge contract,6.2,0.814372020582144,audited
sc_3789,delegatecall_injection,Critical,Uniswap,ERC1155,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",258700.66,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Uniswap ERC1155 contract,9.5,0.9735873951765717,audited
sc_3790,access_control,High,Euler,Vault,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",54555.87,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Euler Vault contract,7.5,0.3179556829780758,audited
sc_3791,short_address,Medium,MakerDAO,ERC721,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",206667.51,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in MakerDAO ERC721 contract,5.8,0.684103667478391,unaudited
sc_3792,uninitialized_storage,High,Alpha Homora,ERC721,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",94729.78,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Alpha Homora ERC721 contract,8.6,0.5635721631946347,unaudited
sc_3793,short_address,Medium,SushiSwap,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",153486.14,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in SushiSwap Router contract,4.1,0.4725777318887189,audited
sc_3794,front_running,Medium,Euler,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45506.6,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Euler ERC1155 contract,6.6,0.8560190941318546,audited
sc_3795,short_address,Medium,Curve,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",68283.9,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve Lending contract,4.7,0.4562981521219208,audited
sc_3796,integer_overflow,High,Balancer,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",10743.87,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Balancer ERC20 contract,7.9,0.9211471085863584,audited
sc_3797,front_running,Medium,Liquity,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46514.79,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Liquity AMM contract,6.0,0.996701310074836,audited
sc_3798,integer_overflow,High,Euler,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",45864.19,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Euler Strategy contract,7.7,0.5919249510806405,audited
sc_3799,short_address,Medium,dYdX,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20089.31,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in dYdX Lending contract,6.2,0.21156146438294765,unaudited
sc_3800,unchecked_call,Medium,Balancer,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",14382.6,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Balancer Router contract,6.4,0.2114833103534163,audited
sc_3801,unchecked_call,Medium,Alpha Homora,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",39496.65,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora Farming contract,4.4,0.17545993885420824,unaudited
sc_3802,timestamp_dependence,Medium,dYdX,Governor,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",36579.3,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in dYdX Governor contract,5.0,0.11406744406757105,audited
sc_3803,tx_origin,Medium,Aave,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",272331.56,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave ERC20 contract,4.7,0.3673238947916768,audited
sc_3804,delegatecall_injection,Critical,SushiSwap,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",33866.18,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in SushiSwap ERC20 contract,9.8,0.6303787851645568,unaudited
sc_3805,short_address,Medium,Liquity,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38321.68,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Liquity Strategy contract,5.3,0.8457933908046459,audited
sc_3806,access_control,High,dYdX,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",53013.34,13,0.26,0.8,2,1,1,1,High access_control vulnerability in dYdX Oracle contract,8.3,0.8957907380546782,audited
sc_3807,front_running,Medium,Curve,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",90381.21,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Curve Strategy contract,4.7,0.5613864921694384,unaudited
sc_3808,random_weakness,High,Curve,Governor,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",31689.18,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Curve Governor contract,8.2,0.8394460635164014,unaudited
sc_3809,tx_origin,Medium,MakerDAO,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",214120.39,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO Factory contract,6.8,0.8414372914112126,unaudited
sc_3810,integer_overflow,High,MakerDAO,Staking,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",289959.88,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Staking contract,7.5,0.39821937860818846,audited
sc_3811,front_running,Medium,dYdX,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",69764.54,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in dYdX Strategy contract,6.5,0.6286613865280065,audited
sc_3812,random_weakness,High,Convex,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",76031.4,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Convex Vault contract,7.7,0.6937972931944494,audited
sc_3813,integer_overflow,High,Convex,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",87200.09,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Convex Pool contract,8.6,0.4929180087691363,unaudited
sc_3814,tx_origin,Medium,SushiSwap,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",118556.11,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in SushiSwap Lending contract,4.2,0.832614008854557,audited
sc_3815,delegatecall_injection,Critical,Liquity,Bridge,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",58452.68,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Liquity Bridge contract,10.0,0.22607814520724537,unaudited
sc_3816,timestamp_dependence,Medium,Frax,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",20457.56,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Frax Bridge contract,4.9,0.29347098804888416,unaudited
sc_3817,integer_overflow,High,Compound,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",353789.5,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Compound Pool contract,7.6,0.8086991321655684,unaudited
sc_3818,access_control,High,Balancer,Oracle,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",28920.89,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Balancer Oracle contract,7.4,0.8590663741935104,audited
sc_3819,unchecked_call,Medium,Synthetix,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",29535.07,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Synthetix Governor contract,6.9,0.2825710655644465,audited
sc_3820,unchecked_call,Medium,Rari,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",15495.82,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari DEX contract,4.0,0.46008888904514367,audited
sc_3821,integer_overflow,High,Compound,Factory,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",369143.82,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Compound Factory contract,7.4,0.5776294548425774,audited
sc_3822,tx_origin,Medium,Compound,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",158766.98,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Compound ERC1155 contract,5.0,0.9827392683885541,audited
sc_3823,unchecked_call,Medium,Compound,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",69782.72,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Compound ERC20 contract,4.1,0.3953421029636346,audited
sc_3824,random_weakness,High,Euler,Router,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",16868.6,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Euler Router contract,7.8,0.6262883144473962,audited
sc_3825,access_control,High,Frax,Lending,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",59088.97,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Frax Lending contract,8.0,0.5137644171683586,audited
sc_3826,integer_overflow,High,Liquity,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",67245.46,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Strategy contract,8.0,0.3532530564516534,audited
sc_3827,delegatecall_injection,Critical,Rari,Staking,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",30759.42,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari Staking contract,9.9,0.8338047813474428,unaudited
sc_3828,uninitialized_storage,High,Frax,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",77904.18,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax ERC20 contract,7.3,0.5955651811623215,audited
sc_3829,short_address,Medium,Balancer,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30219.17,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Balancer Farming contract,5.0,0.22526787035093124,audited
sc_3830,reentrancy,Critical,1inch,Factory,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",37358.93,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in 1inch Factory contract,9.9,0.4922723866349187,audited
sc_3831,integer_overflow,High,Rari,Router,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",74441.81,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari Router contract,7.4,0.5109391984705121,audited
sc_3832,uninitialized_storage,High,Euler,Staking,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",47247.22,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Euler Staking contract,7.8,0.28961638506866066,audited
sc_3833,uninitialized_storage,High,Yearn,ERC721,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",239673.93,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Yearn ERC721 contract,7.5,0.34895870926273576,audited
sc_3834,delegatecall_injection,Critical,PancakeSwap,Factory,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",71949.71,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Factory contract,9.8,0.8880356862106401,audited
sc_3835,delegatecall_injection,Critical,Alpha Homora,AMM,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",44693.92,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora AMM contract,9.6,0.7661277867754249,unaudited
sc_3836,reentrancy,Critical,PancakeSwap,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",47055.22,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in PancakeSwap Router contract,9.5,0.8719654129674842,unaudited
sc_3837,access_control,High,Frax,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",48345.6,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Frax Governor contract,7.2,0.3748892663167278,audited
sc_3838,dos_gas_limit,Medium,Balancer,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",26909.11,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Balancer Strategy contract,5.8,0.30536708341975927,audited
sc_3839,reentrancy,Critical,Aave,ERC20,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",208310.62,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave ERC20 contract,9.1,0.41078662726923854,audited
sc_3840,access_control,High,Curve,ERC20,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",241238.41,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Curve ERC20 contract,8.5,0.3367470874173262,audited
sc_3841,access_control,High,Uniswap,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",342643.95,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap Strategy contract,7.8,0.7287516461605118,unaudited
sc_3842,short_address,Medium,Convex,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12034.8,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex Oracle contract,4.6,0.2612476375090589,unaudited
sc_3843,delegatecall_injection,Critical,Balancer,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",84702.09,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Balancer Pool contract,9.5,0.14776555641167102,audited
sc_3844,unchecked_call,Medium,Balancer,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",46757.69,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer Bridge contract,5.4,0.821582308915954,audited
sc_3845,unchecked_call,Medium,Compound,Proxy,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",97325.85,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Compound Proxy contract,5.9,0.9130645532087929,unaudited
sc_3846,reentrancy,Critical,Synthetix,ERC721,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",64330.25,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Synthetix ERC721 contract,9.2,0.7288909979199014,audited
sc_3847,tx_origin,Medium,Yearn,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30461.82,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Yearn AMM contract,5.8,0.5945553115811163,audited
sc_3848,uninitialized_storage,High,Curve,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",98655.34,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Curve ERC721 contract,7.1,0.8689380528150429,audited
sc_3849,unchecked_call,Medium,dYdX,AMM,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",44602.65,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in dYdX AMM contract,5.9,0.7493712458693619,audited
sc_3850,timestamp_dependence,Medium,Uniswap,ERC721,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",32378.01,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Uniswap ERC721 contract,5.6,0.6475882533062306,audited
sc_3851,reentrancy,Critical,Euler,ERC1155,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",38866.77,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler ERC1155 contract,9.5,0.241497477530367,audited
sc_3852,unchecked_call,Medium,SushiSwap,Governor,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",42241.31,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in SushiSwap Governor contract,6.8,0.18611724745455666,audited
sc_3853,integer_overflow,High,Euler,Oracle,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",45950.54,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler Oracle contract,7.7,0.4896693440995341,audited
sc_3854,timestamp_dependence,Medium,Euler,Oracle,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",39402.02,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Euler Oracle contract,5.0,0.16924647209264587,unaudited
sc_3855,dos_gas_limit,Medium,SushiSwap,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38527.11,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in SushiSwap Proxy contract,4.4,0.3658311573726175,audited
sc_3856,access_control,High,Convex,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",22176.55,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Convex Staking contract,7.3,0.7119281505493693,audited
sc_3857,tx_origin,Medium,Yearn,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45342.3,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Yearn Governor contract,5.5,0.673532380459349,unaudited
sc_3858,random_weakness,High,MakerDAO,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",63025.58,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in MakerDAO Router contract,7.1,0.20798622882749845,audited
sc_3859,integer_overflow,High,Synthetix,Factory,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",34017.87,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Factory contract,7.3,0.9559750716124779,audited
sc_3860,short_address,Medium,Uniswap,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",97075.89,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Uniswap Strategy contract,6.7,0.39328181529711737,audited
sc_3861,unchecked_call,Medium,dYdX,ERC1155,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",64663.64,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in dYdX ERC1155 contract,5.1,0.5740627710893048,audited
sc_3862,delegatecall_injection,Critical,Compound,Router,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",129442.78,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Compound Router contract,10.0,0.4354158244810652,audited
sc_3863,tx_origin,Medium,Alpha Homora,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46888.84,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora Lending contract,6.7,0.25077618363126536,audited
sc_3864,integer_overflow,High,Balancer,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",28794.15,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Balancer ERC721 contract,7.8,0.8633805245221294,audited
sc_3865,access_control,High,dYdX,Factory,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",50182.19,13,0.26,0.8,2,0,1,1,High access_control vulnerability in dYdX Factory contract,8.6,0.2516647925232416,audited
sc_3866,dos_gas_limit,Medium,Frax,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46260.62,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Frax Governor contract,5.4,0.7750904534201039,unaudited
sc_3867,integer_overflow,High,Rari,ERC20,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",41434.53,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari ERC20 contract,8.0,0.5157135380159921,unaudited
sc_3868,reentrancy,Critical,Yearn,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",261542.84,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Yearn Lending contract,9.3,0.4604188743816925,unaudited
sc_3869,reentrancy,Critical,Frax,Lending,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",70151.51,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Frax Lending contract,9.4,0.4993153708972812,audited
sc_3870,delegatecall_injection,Critical,Yearn,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",173160.54,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Yearn Strategy contract,9.4,0.9241702100183369,audited
sc_3871,uninitialized_storage,High,Synthetix,Vault,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",166585.63,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Synthetix Vault contract,7.9,0.977187498244092,unaudited
sc_3872,random_weakness,High,1inch,Lending,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",39732.58,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in 1inch Lending contract,8.7,0.1665371942603111,audited
sc_3873,random_weakness,High,Liquity,Timelock,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",31610.2,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity Timelock contract,8.4,0.912366152708784,unaudited
sc_3874,random_weakness,High,Euler,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",15407.7,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Euler Strategy contract,7.3,0.18170929668911062,unaudited
sc_3875,integer_overflow,High,dYdX,ERC721,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",35073.65,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in dYdX ERC721 contract,7.1,0.11463107608383656,unaudited
sc_3876,front_running,Medium,Yearn,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",130244.83,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Yearn Factory contract,4.7,0.9850912738735065,audited
sc_3877,random_weakness,High,Liquity,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",88527.43,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity Oracle contract,7.4,0.9284134059809167,audited
sc_3878,timestamp_dependence,Medium,Uniswap,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",251792.23,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Uniswap ERC721 contract,4.8,0.35255634473575936,audited
sc_3879,dos_gas_limit,Medium,Synthetix,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",117679.17,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Synthetix ERC20 contract,5.2,0.33365585397552067,audited
sc_3880,timestamp_dependence,Medium,Liquity,ERC20,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",30616.82,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Liquity ERC20 contract,6.7,0.6579997177208774,audited
sc_3881,timestamp_dependence,Medium,dYdX,Staking,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",46835.52,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Staking contract,4.7,0.9345006566942315,unaudited
sc_3882,dos_gas_limit,Medium,Aave,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",170698.53,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Pool contract,5.6,0.349713159330559,unaudited
sc_3883,short_address,Medium,Uniswap,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",351838.45,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Uniswap Strategy contract,6.2,0.24573777357914736,unaudited
sc_3884,uninitialized_storage,High,Liquity,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",50279.33,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Liquity Router contract,8.6,0.8211851709787675,unaudited
sc_3885,dos_gas_limit,Medium,Rari,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29704.66,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Rari Lending contract,5.1,0.8346151990008922,audited
sc_3886,timestamp_dependence,Medium,Rari,Oracle,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",58468.2,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Rari Oracle contract,6.5,0.27926663003495644,audited
sc_3887,tx_origin,Medium,dYdX,Pool,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",27128.32,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX Pool contract,6.0,0.29762363662053004,audited
sc_3888,dos_gas_limit,Medium,Synthetix,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",105397.1,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Synthetix Vault contract,6.3,0.6051135373461692,audited
sc_3889,dos_gas_limit,Medium,Frax,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58251.87,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Frax ERC20 contract,4.4,0.14320636797912986,audited
sc_3890,dos_gas_limit,Medium,Synthetix,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20026.55,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Synthetix Governor contract,4.4,0.21627141833925717,audited
sc_3891,reentrancy,Critical,Convex,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",35815.16,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex Pool contract,9.8,0.9022677438760706,audited
sc_3892,integer_overflow,High,Euler,Vault,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",35248.0,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler Vault contract,7.3,0.2531833551450313,unaudited
sc_3893,access_control,High,Synthetix,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",90397.23,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Synthetix Bridge contract,8.8,0.6186492959967624,audited
sc_3894,random_weakness,High,PancakeSwap,Farming,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",81531.93,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in PancakeSwap Farming contract,7.5,0.33691956547466584,unaudited
sc_3895,reentrancy,Critical,Rari,Strategy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",10955.53,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Rari Strategy contract,9.6,0.16513315268102777,unaudited
sc_3896,access_control,High,Rari,Proxy,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",11807.66,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari Proxy contract,7.8,0.3266074942348883,audited
sc_3897,short_address,Medium,Uniswap,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",95455.52,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Uniswap Proxy contract,4.2,0.16747746063447938,audited
sc_3898,random_weakness,High,MakerDAO,Pool,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",340481.44,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in MakerDAO Pool contract,7.3,0.29172731362069837,audited
sc_3899,access_control,High,Convex,Oracle,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",43767.96,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Convex Oracle contract,8.9,0.3148991411766065,audited
sc_3900,dos_gas_limit,Medium,Synthetix,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",84583.26,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Synthetix Lending contract,4.3,0.1602361974908819,audited
sc_3901,random_weakness,High,Convex,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",64724.79,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Convex Router contract,8.0,0.2897318195329568,audited
sc_3902,integer_overflow,High,Alpha Homora,Farming,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",26720.92,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora Farming contract,7.8,0.5874962422161398,audited
sc_3903,dos_gas_limit,Medium,Rari,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16347.53,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Rari Bridge contract,4.0,0.5812346323269956,audited
sc_3904,access_control,High,Alpha Homora,Bridge,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",34364.47,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora Bridge contract,8.5,0.1969391048023309,audited
sc_3905,front_running,Medium,Compound,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",239292.08,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound Governor contract,4.2,0.1971724924758678,audited
sc_3906,tx_origin,Medium,Balancer,Pool,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64942.27,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Balancer Pool contract,5.7,0.7670156588918682,audited
sc_3907,random_weakness,High,Rari,Bridge,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",47190.65,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Rari Bridge contract,7.5,0.10594177707993166,audited
sc_3908,tx_origin,Medium,Euler,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42987.4,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Euler DEX contract,5.6,0.3603125671067715,audited
sc_3909,random_weakness,High,Curve,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",217669.93,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Curve Pool contract,7.2,0.8541558262518512,audited
sc_3910,uninitialized_storage,High,1inch,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",56333.03,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in 1inch Timelock contract,8.7,0.6631511475286126,audited
sc_3911,integer_overflow,High,Liquity,Vault,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",67394.23,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Vault contract,8.6,0.1120263876751916,audited
sc_3912,integer_overflow,High,SushiSwap,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",47435.39,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap ERC1155 contract,8.7,0.1698659717448112,unaudited
sc_3913,access_control,High,1inch,Farming,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",18378.92,13,0.26,0.8,2,0,1,2,High access_control vulnerability in 1inch Farming contract,8.1,0.14317723111483227,audited
sc_3914,reentrancy,Critical,1inch,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",28884.1,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch Oracle contract,9.1,0.6982076032956911,audited
sc_3915,random_weakness,High,PancakeSwap,Farming,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",35907.78,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap Farming contract,8.7,0.8456135435933854,audited
sc_3916,integer_overflow,High,Uniswap,ERC721,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",244230.71,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Uniswap ERC721 contract,7.8,0.38252709496693216,audited
sc_3917,uninitialized_storage,High,PancakeSwap,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",23114.08,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in PancakeSwap Router contract,8.3,0.5935655478177094,unaudited
sc_3918,random_weakness,High,MakerDAO,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",123657.2,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in MakerDAO ERC721 contract,7.8,0.6543738693920751,audited
sc_3919,random_weakness,High,Yearn,Governor,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",89932.78,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn Governor contract,8.0,0.6047601388674807,audited
sc_3920,delegatecall_injection,Critical,SushiSwap,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",39944.61,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in SushiSwap Vault contract,9.5,0.9239478689815663,unaudited
sc_3921,dos_gas_limit,Medium,Yearn,ERC721,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",169894.02,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Yearn ERC721 contract,6.1,0.19340320506626835,unaudited
sc_3922,front_running,Medium,Yearn,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",79126.47,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Yearn Lending contract,6.2,0.949726231285133,audited
sc_3923,uninitialized_storage,High,SushiSwap,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",69155.3,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in SushiSwap DEX contract,8.0,0.18295363672701281,audited
sc_3924,dos_gas_limit,Medium,Convex,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34413.26,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Convex Oracle contract,6.3,0.790473230037227,audited
sc_3925,random_weakness,High,Euler,ERC1155,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",31475.55,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Euler ERC1155 contract,8.3,0.7164617038326394,audited
sc_3926,delegatecall_injection,Critical,Synthetix,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",41834.81,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix Farming contract,9.0,0.9749881935684401,audited
sc_3927,timestamp_dependence,Medium,Compound,Governor,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",233528.19,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Compound Governor contract,5.6,0.8754929080770129,audited
sc_3928,integer_overflow,High,Balancer,Vault,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",50574.32,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Balancer Vault contract,7.3,0.9013267525360211,audited
sc_3929,delegatecall_injection,Critical,Curve,DEX,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",184172.96,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Curve DEX contract,9.2,0.6010395770150169,unaudited
sc_3930,integer_overflow,High,dYdX,Bridge,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",76312.73,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in dYdX Bridge contract,7.1,0.10339275929012912,unaudited
sc_3931,random_weakness,High,Euler,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",44054.91,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Euler Oracle contract,8.1,0.2157805284745628,audited
sc_3932,tx_origin,Medium,Yearn,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",176004.89,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Vault contract,5.6,0.9683546861730751,unaudited
sc_3933,front_running,Medium,Frax,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28396.36,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Frax Oracle contract,6.6,0.5541880910630651,audited
sc_3934,timestamp_dependence,Medium,Aave,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",167772.53,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave Lending contract,5.2,0.14325596758298104,audited
sc_3935,tx_origin,Medium,Uniswap,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",346042.32,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Staking contract,5.7,0.5491683909281055,unaudited
sc_3936,dos_gas_limit,Medium,Liquity,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",70008.61,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Liquity ERC20 contract,6.8,0.9434819797754441,audited
sc_3937,dos_gas_limit,Medium,Yearn,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",186089.55,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn Oracle contract,5.2,0.10188687174384609,unaudited
sc_3938,timestamp_dependence,Medium,Liquity,Proxy,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",43679.41,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity Proxy contract,5.7,0.7035590119264971,audited
sc_3939,delegatecall_injection,Critical,Rari,ERC721,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",57004.25,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari ERC721 contract,10.0,0.3435116232175003,unaudited
sc_3940,integer_overflow,High,Liquity,Staking,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",43089.11,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Staking contract,8.8,0.9778167840291062,unaudited
sc_3941,timestamp_dependence,Medium,Synthetix,DEX,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",131529.46,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Synthetix DEX contract,6.4,0.5828563526228893,audited
sc_3942,access_control,High,PancakeSwap,Vault,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",15048.72,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap Vault contract,7.8,0.6412198942646647,unaudited
sc_3943,unchecked_call,Medium,Euler,Governor,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",45309.22,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Euler Governor contract,6.8,0.15898445085703844,unaudited
sc_3944,dos_gas_limit,Medium,Rari,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45757.66,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Rari Timelock contract,5.4,0.5695882753861511,audited
sc_3945,unchecked_call,Medium,Alpha Homora,Governor,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",23813.18,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora Governor contract,6.3,0.9362410436119557,audited
sc_3946,reentrancy,Critical,SushiSwap,Proxy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",43745.73,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in SushiSwap Proxy contract,9.2,0.5119382166415042,audited
sc_3947,unchecked_call,Medium,SushiSwap,Vault,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",168697.17,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in SushiSwap Vault contract,4.8,0.9338894148607269,audited
sc_3948,unchecked_call,Medium,Curve,Vault,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",102816.36,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Curve Vault contract,4.1,0.12363241126101379,unaudited
sc_3949,unchecked_call,Medium,dYdX,Farming,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",13341.74,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in dYdX Farming contract,6.1,0.43659611661072917,unaudited
sc_3950,unchecked_call,Medium,Yearn,Strategy,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",135496.39,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn Strategy contract,4.8,0.5048756075400411,audited
sc_3951,unchecked_call,Medium,Rari,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",45846.84,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Rari Governor contract,5.6,0.29985145831574966,audited
sc_3952,uninitialized_storage,High,Yearn,ERC20,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",91075.05,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Yearn ERC20 contract,8.1,0.656337480398309,audited
sc_3953,tx_origin,Medium,Uniswap,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",318599.31,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Router contract,5.1,0.9788412286173882,audited
sc_3954,dos_gas_limit,Medium,MakerDAO,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",130551.87,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO Pool contract,6.1,0.7982968973794013,audited
sc_3955,random_weakness,High,Aave,Timelock,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",269698.19,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Aave Timelock contract,7.2,0.8372684915328262,audited
sc_3956,tx_origin,Medium,Aave,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",252407.92,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Aave ERC1155 contract,4.6,0.582307072449249,audited
sc_3957,tx_origin,Medium,Synthetix,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",89233.15,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix Router contract,6.7,0.6316940854287404,audited
sc_3958,reentrancy,Critical,Rari,Router,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",87471.34,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Rari Router contract,9.1,0.7506457859546861,audited
sc_3959,short_address,Medium,Aave,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",92418.6,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Aave ERC1155 contract,6.0,0.6591678579150394,unaudited
sc_3960,tx_origin,Medium,Aave,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",101468.24,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave ERC20 contract,6.5,0.1185171654376381,audited
sc_3961,delegatecall_injection,Critical,Aave,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",413676.36,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Aave ERC721 contract,9.2,0.5180096128071691,audited
sc_3962,front_running,Medium,Aave,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",125914.74,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Aave Farming contract,6.3,0.560461472974306,audited
sc_3963,short_address,Medium,Liquity,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",26567.93,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity Bridge contract,6.2,0.3056300117435957,audited
sc_3964,random_weakness,High,dYdX,Router,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",43575.76,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in dYdX Router contract,7.6,0.3691199080906594,unaudited
sc_3965,short_address,Medium,Aave,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",219059.49,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Aave ERC1155 contract,5.9,0.572773421555155,audited
sc_3966,integer_overflow,High,Synthetix,Factory,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",207570.81,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Factory contract,8.9,0.6929361118008854,unaudited
sc_3967,front_running,Medium,Frax,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29386.49,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Frax ERC721 contract,6.0,0.1614305077636359,unaudited
sc_3968,delegatecall_injection,Critical,Yearn,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",230960.51,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Yearn Router contract,10.0,0.2738629123631102,unaudited
sc_3969,timestamp_dependence,Medium,Synthetix,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",64765.67,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Synthetix Governor contract,5.3,0.6218718715934702,unaudited
sc_3970,timestamp_dependence,Medium,MakerDAO,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",100118.43,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in MakerDAO Router contract,6.7,0.8617410582421688,audited
sc_3971,short_address,Medium,Alpha Homora,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18424.61,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Alpha Homora Bridge contract,6.4,0.39203000715640324,audited
sc_3972,random_weakness,High,Yearn,Pool,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",36391.29,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Yearn Pool contract,7.1,0.7526874581421368,audited
sc_3973,tx_origin,Medium,1inch,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24435.77,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch Lending contract,5.6,0.7712629926536363,audited
sc_3974,reentrancy,Critical,Curve,Router,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",229356.79,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Curve Router contract,9.9,0.33985813760106254,unaudited
sc_3975,access_control,High,Aave,Farming,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",82160.43,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Farming contract,8.6,0.47728835500028755,audited
sc_3976,short_address,Medium,Convex,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22167.43,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex Farming contract,5.5,0.5231263397583289,audited
sc_3977,delegatecall_injection,Critical,Aave,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",496034.66,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Aave Pool contract,9.7,0.8574634814095226,audited
sc_3978,tx_origin,Medium,dYdX,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30571.9,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX Staking contract,6.4,0.7263063708318214,unaudited
sc_3979,dos_gas_limit,Medium,Liquity,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15372.32,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Liquity ERC1155 contract,4.7,0.7906725157972175,audited
sc_3980,integer_overflow,High,Synthetix,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",57627.27,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Synthetix Bridge contract,8.3,0.8565139667047336,audited
sc_3981,tx_origin,Medium,SushiSwap,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47393.07,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in SushiSwap Oracle contract,4.8,0.7750913164768627,unaudited
sc_3982,dos_gas_limit,Medium,Alpha Homora,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",25857.89,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Factory contract,6.7,0.6351091487869929,audited
sc_3983,random_weakness,High,Synthetix,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",33301.8,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Synthetix ERC721 contract,7.4,0.46124144872012207,unaudited
sc_3984,short_address,Medium,SushiSwap,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19001.53,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in SushiSwap Oracle contract,4.6,0.12929611129282653,unaudited
sc_3985,unchecked_call,Medium,Compound,ERC1155,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",121936.61,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Compound ERC1155 contract,6.0,0.17323717752493184,audited
sc_3986,integer_overflow,High,Compound,ERC20,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",205306.83,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Compound ERC20 contract,7.1,0.2030076068065304,audited
sc_3987,timestamp_dependence,Medium,Frax,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",15549.58,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Frax Governor contract,4.3,0.3494710461835785,unaudited
sc_3988,access_control,High,Balancer,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",33544.53,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Proxy contract,7.4,0.17178184559096588,unaudited
sc_3989,short_address,Medium,Liquity,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57500.0,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity Staking contract,6.6,0.24871993622196503,audited
sc_3990,random_weakness,High,Alpha Homora,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",65419.92,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Alpha Homora Strategy contract,7.7,0.2958410381310346,unaudited
sc_3991,random_weakness,High,Aave,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",125448.22,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Aave ERC20 contract,7.5,0.27714901914669354,audited
sc_3992,reentrancy,Critical,Rari,AMM,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",18924.3,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Rari AMM contract,9.6,0.8605100113042159,unaudited
sc_3993,unchecked_call,Medium,Frax,Factory,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",31109.99,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Frax Factory contract,4.8,0.4977028724404098,unaudited
sc_3994,short_address,Medium,Aave,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",155381.38,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Aave Lending contract,4.3,0.40202636952867143,audited
sc_3995,tx_origin,Medium,Yearn,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",145644.17,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Yearn Bridge contract,6.8,0.5694987550613086,unaudited
sc_3996,dos_gas_limit,Medium,Convex,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19663.31,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Convex ERC1155 contract,6.7,0.1452856377770409,audited
sc_3997,unchecked_call,Medium,MakerDAO,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",123394.81,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in MakerDAO DEX contract,4.5,0.3705652791847249,audited
sc_3998,access_control,High,Liquity,Factory,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",11935.54,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Liquity Factory contract,7.6,0.6599629363848274,unaudited
sc_3999,short_address,Medium,dYdX,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39123.42,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in dYdX Proxy contract,5.3,0.9428486642569167,audited
sc_4000,uninitialized_storage,High,Liquity,ERC20,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",56770.0,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Liquity ERC20 contract,8.9,0.5588953412638655,audited
sc_4001,reentrancy,Critical,Frax,Factory,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",114788.68,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Frax Factory contract,9.6,0.9431216485393565,audited
sc_4002,uninitialized_storage,High,Curve,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",34506.25,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve DEX contract,7.2,0.34585760797268456,audited
sc_4003,dos_gas_limit,Medium,Curve,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38133.7,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve Bridge contract,4.1,0.8198270312568423,unaudited
sc_4004,random_weakness,High,Convex,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",26475.49,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Convex Pool contract,8.0,0.817286832731766,audited
sc_4005,tx_origin,Medium,Liquity,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31839.58,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Liquity Governor contract,6.4,0.6636112584964952,audited
sc_4006,random_weakness,High,1inch,Strategy,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",14336.27,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in 1inch Strategy contract,8.2,0.2971432263402579,audited
sc_4007,integer_overflow,High,Curve,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",140957.84,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Curve Strategy contract,8.4,0.5575957865689288,audited
sc_4008,tx_origin,Medium,dYdX,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64395.02,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX Router contract,6.9,0.7564170148866989,audited
sc_4009,integer_overflow,High,Curve,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",110871.44,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Curve ERC721 contract,7.3,0.8419013417385797,unaudited
sc_4010,short_address,Medium,Convex,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7563.59,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Convex DEX contract,4.5,0.6796298562619731,unaudited
sc_4011,timestamp_dependence,Medium,Euler,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",45262.2,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Euler Farming contract,6.5,0.8876214548667644,audited
sc_4012,short_address,Medium,Aave,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",79842.67,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Aave AMM contract,5.4,0.43488598732247874,audited
sc_4013,access_control,High,PancakeSwap,Oracle,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",71640.04,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap Oracle contract,7.5,0.6221596307449179,unaudited
sc_4014,integer_overflow,High,Yearn,ERC20,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",65105.56,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Yearn ERC20 contract,7.1,0.7094082566929645,audited
sc_4015,delegatecall_injection,Critical,Frax,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",43252.46,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax Timelock contract,9.9,0.38794378891676606,unaudited
sc_4016,tx_origin,Medium,Euler,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15995.37,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Euler Oracle contract,6.6,0.81502995964369,unaudited
sc_4017,delegatecall_injection,Critical,dYdX,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",29200.59,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in dYdX Lending contract,9.6,0.9891882823375803,audited
sc_4018,delegatecall_injection,Critical,1inch,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",13806.77,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch Oracle contract,9.7,0.16224803325609752,audited
sc_4019,dos_gas_limit,Medium,Synthetix,Pool,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",163367.93,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Synthetix Pool contract,5.8,0.11852846297941079,audited
sc_4020,front_running,Medium,SushiSwap,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33969.15,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in SushiSwap DEX contract,4.6,0.998720379645512,audited
sc_4021,reentrancy,Critical,1inch,Strategy,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",70405.62,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch Strategy contract,9.2,0.7956467093596827,audited
sc_4022,tx_origin,Medium,Frax,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12238.48,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Frax Governor contract,4.0,0.9467107940096298,audited
sc_4023,short_address,Medium,Curve,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",148418.03,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve ERC1155 contract,6.6,0.6786665762793321,audited
sc_4024,random_weakness,High,Synthetix,Governor,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",177301.66,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Synthetix Governor contract,8.8,0.21464087756552347,audited
sc_4025,timestamp_dependence,Medium,Synthetix,Factory,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",81654.08,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Synthetix Factory contract,6.4,0.5347435493902184,audited
sc_4026,delegatecall_injection,Critical,Balancer,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",17174.67,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Balancer ERC20 contract,9.2,0.970756305764311,audited
sc_4027,integer_overflow,High,MakerDAO,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",295914.09,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Oracle contract,8.0,0.7580433588435985,audited
sc_4028,reentrancy,Critical,Convex,Factory,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",23367.33,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex Factory contract,9.1,0.3254906676756571,audited
sc_4029,delegatecall_injection,Critical,Liquity,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",81013.65,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity Pool contract,9.1,0.9104148257343954,unaudited
sc_4030,tx_origin,Medium,Curve,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",65263.79,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Curve ERC721 contract,6.9,0.2879342978329493,audited
sc_4031,short_address,Medium,1inch,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",11977.93,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch ERC721 contract,4.4,0.988429014963776,unaudited
sc_4032,random_weakness,High,Yearn,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",90328.94,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn Staking contract,8.1,0.6243071366019058,unaudited
sc_4033,access_control,High,Rari,ERC1155,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",93127.66,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari ERC1155 contract,7.5,0.11500641110860145,unaudited
sc_4034,integer_overflow,High,Frax,ERC721,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",55070.7,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Frax ERC721 contract,7.4,0.38413377797207304,unaudited
sc_4035,unchecked_call,Medium,Alpha Homora,Strategy,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",58470.58,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Alpha Homora Strategy contract,4.4,0.31031041527157255,audited
sc_4036,access_control,High,1inch,Lending,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",72827.9,13,0.26,0.8,2,0,1,2,High access_control vulnerability in 1inch Lending contract,7.4,0.6805384815688212,audited
sc_4037,reentrancy,Critical,Rari,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",82760.12,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Rari Staking contract,9.6,0.1523885624445681,audited
sc_4038,random_weakness,High,Yearn,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",186318.35,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Yearn Staking contract,7.3,0.27207096690415533,unaudited
sc_4039,integer_overflow,High,Compound,Oracle,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",171606.37,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Compound Oracle contract,7.8,0.586245554795689,unaudited
sc_4040,unchecked_call,Medium,Liquity,Governor,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",16870.41,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity Governor contract,4.3,0.818639354476271,unaudited
sc_4041,tx_origin,Medium,Liquity,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40626.04,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity Proxy contract,6.4,0.4165273838999244,audited
sc_4042,unchecked_call,Medium,PancakeSwap,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",44962.22,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in PancakeSwap ERC20 contract,4.3,0.6682746911818365,audited
sc_4043,unchecked_call,Medium,Frax,Router,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",34221.08,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Frax Router contract,6.6,0.2586878831507184,audited
sc_4044,short_address,Medium,Uniswap,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",212416.06,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Uniswap Timelock contract,5.9,0.4436289186310439,audited
sc_4045,unchecked_call,Medium,Yearn,ERC20,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",90290.02,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Yearn ERC20 contract,4.5,0.5525975164433666,audited
sc_4046,integer_overflow,High,SushiSwap,DEX,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",116696.06,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in SushiSwap DEX contract,7.6,0.9771901558426724,unaudited
sc_4047,short_address,Medium,Rari,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46716.62,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Rari DEX contract,6.7,0.2582508804594065,audited
sc_4048,timestamp_dependence,Medium,Yearn,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",126277.13,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn AMM contract,5.9,0.5338427239717236,audited
sc_4049,short_address,Medium,Compound,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57953.57,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Compound Factory contract,4.7,0.1918169049711806,audited
sc_4050,timestamp_dependence,Medium,Rari,ERC1155,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",17568.67,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Rari ERC1155 contract,5.8,0.9069773899757932,audited
sc_4051,random_weakness,High,dYdX,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",91762.27,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in dYdX Lending contract,8.3,0.4093578849432772,unaudited
sc_4052,short_address,Medium,PancakeSwap,Timelock,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46331.35,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in PancakeSwap Timelock contract,4.3,0.643085371872995,audited
sc_4053,reentrancy,Critical,1inch,ERC721,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",78750.56,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch ERC721 contract,9.3,0.7081568399749544,audited
sc_4054,random_weakness,High,Frax,Factory,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",56054.39,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax Factory contract,8.7,0.6011274910750303,audited
sc_4055,random_weakness,High,Synthetix,ERC721,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",133786.29,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Synthetix ERC721 contract,7.7,0.17883173215095632,audited
sc_4056,tx_origin,Medium,1inch,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",7423.32,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch Governor contract,6.4,0.27709414857798415,unaudited
sc_4057,timestamp_dependence,Medium,Rari,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",54084.11,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Rari AMM contract,4.8,0.3276337476760014,unaudited
sc_4058,integer_overflow,High,Alpha Homora,Oracle,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",43321.51,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora Oracle contract,8.5,0.6295883989176686,unaudited
sc_4059,short_address,Medium,Synthetix,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",97561.57,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix ERC721 contract,5.1,0.3234848103007789,unaudited
sc_4060,integer_overflow,High,Alpha Homora,Oracle,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",33431.95,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Alpha Homora Oracle contract,7.7,0.10231285570872055,audited
sc_4061,uninitialized_storage,High,Euler,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",39890.38,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Euler Router contract,8.5,0.7785054635545645,audited
sc_4062,uninitialized_storage,High,dYdX,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",34994.99,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in dYdX Factory contract,8.6,0.8139210363205422,audited
sc_4063,tx_origin,Medium,Rari,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22429.77,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Rari ERC1155 contract,4.4,0.7946412976615036,unaudited
sc_4064,access_control,High,SushiSwap,Vault,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",81190.76,13,0.26,0.8,2,0,1,1,High access_control vulnerability in SushiSwap Vault contract,8.7,0.7577083051803478,audited
sc_4065,short_address,Medium,Yearn,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31497.91,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn Router contract,4.1,0.9352534113389275,audited
sc_4066,front_running,Medium,Aave,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31864.1,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Aave ERC1155 contract,4.3,0.3921821987476559,audited
sc_4067,dos_gas_limit,Medium,MakerDAO,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",146707.7,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in MakerDAO Pool contract,5.8,0.874822347855936,audited
sc_4068,short_address,Medium,Compound,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",237746.66,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Compound Farming contract,6.7,0.49905193748917887,unaudited
sc_4069,access_control,High,Curve,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",146824.04,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Curve Pool contract,8.1,0.2791081714655083,audited
sc_4070,timestamp_dependence,Medium,dYdX,AMM,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",41499.74,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX AMM contract,6.5,0.12504024646258863,audited
sc_4071,random_weakness,High,1inch,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",50815.7,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in 1inch Farming contract,8.2,0.4581248895443297,audited
sc_4072,integer_overflow,High,Synthetix,Timelock,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",125359.28,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Synthetix Timelock contract,8.1,0.4650578806771791,audited
sc_4073,uninitialized_storage,High,Curve,DEX,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",155859.07,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Curve DEX contract,7.9,0.880471871536089,audited
sc_4074,front_running,Medium,Yearn,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",60593.07,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Yearn Vault contract,5.3,0.7250139210392638,audited
sc_4075,reentrancy,Critical,Curve,Router,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",91140.09,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Curve Router contract,9.8,0.3788093536596252,audited
sc_4076,reentrancy,Critical,Yearn,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",245333.76,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Yearn DEX contract,9.8,0.16581365603074882,audited
sc_4077,tx_origin,Medium,Aave,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",81751.11,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Aave Bridge contract,5.3,0.8372322942950007,unaudited
sc_4078,unchecked_call,Medium,Curve,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",31602.65,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve DEX contract,4.4,0.6128528120461171,audited
sc_4079,random_weakness,High,Yearn,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",136499.74,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn Strategy contract,8.3,0.5414647897522494,unaudited
sc_4080,reentrancy,Critical,Alpha Homora,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",16105.97,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora Staking contract,9.6,0.5619247884071074,unaudited
sc_4081,front_running,Medium,SushiSwap,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",141604.45,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in SushiSwap Vault contract,6.1,0.8313624230813729,unaudited
sc_4082,delegatecall_injection,Critical,PancakeSwap,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",16328.78,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Governor contract,9.6,0.6076214252429805,unaudited
sc_4083,front_running,Medium,Compound,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",257031.43,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Compound Lending contract,5.8,0.9747042313095473,unaudited
sc_4084,unchecked_call,Medium,Synthetix,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",168114.64,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Synthetix Strategy contract,4.7,0.3926135287937845,unaudited
sc_4085,reentrancy,Critical,Balancer,DEX,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",68118.87,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer DEX contract,9.3,0.6786918040675282,audited
sc_4086,reentrancy,Critical,Euler,Pool,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",52765.06,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Euler Pool contract,9.7,0.3456541416782086,audited
sc_4087,delegatecall_injection,Critical,Aave,Strategy,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",211957.06,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Aave Strategy contract,9.6,0.19187537592255055,audited
sc_4088,random_weakness,High,Balancer,Pool,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",19689.38,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Pool contract,8.4,0.38715550821391054,audited
sc_4089,tx_origin,Medium,Curve,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",155257.75,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Curve Bridge contract,6.9,0.12150825523852343,unaudited
sc_4090,timestamp_dependence,Medium,Rari,DEX,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",65999.77,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Rari DEX contract,4.7,0.24019760793485495,audited
sc_4091,short_address,Medium,Compound,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",142276.12,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Compound Farming contract,5.9,0.26267464770582555,audited
sc_4092,timestamp_dependence,Medium,PancakeSwap,Strategy,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",43376.69,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Strategy contract,5.0,0.34194230656042857,audited
sc_4093,unchecked_call,Medium,MakerDAO,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",209646.89,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in MakerDAO Vault contract,5.7,0.7141094142367046,audited
sc_4094,delegatecall_injection,Critical,Liquity,Farming,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",87374.39,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Liquity Farming contract,9.7,0.42668184574922596,audited
sc_4095,access_control,High,Rari,Proxy,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",19507.92,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari Proxy contract,7.9,0.7083538736172046,audited
sc_4096,unchecked_call,Medium,Alpha Homora,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",44076.0,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Alpha Homora ERC721 contract,5.1,0.2019340369547249,unaudited
sc_4097,timestamp_dependence,Medium,dYdX,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",26494.36,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in dYdX Vault contract,4.9,0.5290429616772458,unaudited
sc_4098,timestamp_dependence,Medium,Convex,Vault,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",53928.7,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Convex Vault contract,5.6,0.9095183621895474,unaudited
sc_4099,tx_origin,Medium,Aave,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",73221.47,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave Farming contract,6.1,0.24159538230984184,audited
sc_4100,reentrancy,Critical,PancakeSwap,ERC721,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",54985.31,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap ERC721 contract,9.9,0.3605747357388194,unaudited
sc_4101,tx_origin,Medium,Synthetix,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",27735.76,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Synthetix Factory contract,4.7,0.46973490362112036,audited
sc_4102,tx_origin,Medium,Compound,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",275561.04,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Compound Governor contract,6.0,0.6233100244850959,unaudited
sc_4103,uninitialized_storage,High,Convex,Pool,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",29038.02,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Convex Pool contract,7.7,0.2631669447805263,unaudited
sc_4104,dos_gas_limit,Medium,MakerDAO,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",209168.43,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in MakerDAO Router contract,6.8,0.3051451887476956,audited
sc_4105,dos_gas_limit,Medium,Synthetix,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",140752.14,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Synthetix Proxy contract,5.6,0.38495645965849823,audited
sc_4106,timestamp_dependence,Medium,Yearn,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",35002.85,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Yearn AMM contract,6.4,0.5063498114425282,audited
sc_4107,tx_origin,Medium,1inch,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34011.24,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch Factory contract,5.4,0.19968077536131162,audited
sc_4108,unchecked_call,Medium,Euler,DEX,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",29527.25,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Euler DEX contract,6.2,0.8615792319720085,audited
sc_4109,timestamp_dependence,Medium,PancakeSwap,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",51131.65,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Proxy contract,4.8,0.565693362088213,audited
sc_4110,short_address,Medium,Synthetix,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23494.48,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Lending contract,6.4,0.944672499906665,audited
sc_4111,access_control,High,Curve,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",37536.41,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Curve ERC721 contract,7.3,0.28891885688235075,audited
sc_4112,access_control,High,Convex,Lending,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",69587.77,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Convex Lending contract,8.8,0.1777912123159,audited
sc_4113,tx_origin,Medium,Synthetix,ERC721,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",74849.37,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Synthetix ERC721 contract,6.7,0.5778003827929665,audited
sc_4114,uninitialized_storage,High,PancakeSwap,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",34858.88,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in PancakeSwap Staking contract,8.9,0.43081939268281333,unaudited
sc_4115,integer_overflow,High,Aave,Bridge,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",207685.68,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Aave Bridge contract,7.7,0.6863328870575306,audited
sc_4116,tx_origin,Medium,Frax,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47445.04,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Factory contract,4.0,0.6518928417025986,audited
sc_4117,tx_origin,Medium,MakerDAO,Staking,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",106068.61,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO Staking contract,5.7,0.8698593195342328,audited
sc_4118,dos_gas_limit,Medium,Convex,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31376.41,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Convex ERC721 contract,5.3,0.5127692676141619,audited
sc_4119,delegatecall_injection,Critical,Compound,AMM,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",77363.31,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Compound AMM contract,9.1,0.5877518340744027,unaudited
sc_4120,tx_origin,Medium,1inch,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12407.04,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch Governor contract,5.9,0.8894027067445767,audited
sc_4121,random_weakness,High,Uniswap,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",150623.02,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Uniswap ERC1155 contract,8.6,0.8010016321789283,audited
sc_4122,tx_origin,Medium,Frax,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",6294.26,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Strategy contract,6.8,0.3284884893353758,audited
sc_4123,dos_gas_limit,Medium,Compound,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",133534.41,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Router contract,4.8,0.1733995905217962,audited
sc_4124,dos_gas_limit,Medium,Uniswap,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",118577.56,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Uniswap Proxy contract,4.2,0.33324903627757896,unaudited
sc_4125,tx_origin,Medium,1inch,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19144.76,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch DEX contract,5.0,0.8209074822771539,audited
sc_4126,access_control,High,Rari,Vault,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",46248.9,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari Vault contract,8.8,0.3375048146250597,audited
sc_4127,unchecked_call,Medium,Aave,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",252052.43,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave Bridge contract,4.2,0.9400614704722215,audited
sc_4128,reentrancy,Critical,Compound,ERC1155,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",163966.12,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Compound ERC1155 contract,10.0,0.8293297747295876,audited
sc_4129,access_control,High,Frax,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",28362.33,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Frax ERC721 contract,8.5,0.574265690057336,audited
sc_4130,front_running,Medium,Alpha Homora,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",26277.25,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Alpha Homora Factory contract,6.1,0.6087949494244246,unaudited
sc_4131,front_running,Medium,Alpha Homora,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38380.96,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Alpha Homora Pool contract,6.2,0.45396904682701467,audited
sc_4132,front_running,Medium,Curve,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57378.25,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Curve Timelock contract,5.3,0.7349545139037089,unaudited
sc_4133,reentrancy,Critical,Aave,Oracle,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",246714.48,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Oracle contract,9.6,0.8884667916402319,audited
sc_4134,access_control,High,Balancer,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",13221.51,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Balancer Bridge contract,8.7,0.6361901292041523,unaudited
sc_4135,timestamp_dependence,Medium,Frax,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",26833.57,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Frax Router contract,4.5,0.7356462972131151,audited
sc_4136,integer_overflow,High,Frax,Lending,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",24712.2,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Frax Lending contract,8.2,0.9798815332533761,unaudited
sc_4137,timestamp_dependence,Medium,Euler,ERC721,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",37598.26,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Euler ERC721 contract,5.9,0.1016717457058912,audited
sc_4138,timestamp_dependence,Medium,Aave,Staking,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",222290.39,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave Staking contract,6.6,0.6023941307930024,audited
sc_4139,reentrancy,Critical,Euler,ERC721,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",27543.67,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Euler ERC721 contract,9.5,0.5079915473229306,unaudited
sc_4140,reentrancy,Critical,Aave,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",195032.93,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Timelock contract,9.9,0.5985535879982896,audited
sc_4141,timestamp_dependence,Medium,Yearn,Router,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",84117.1,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn Router contract,5.0,0.4859850746985034,audited
sc_4142,unchecked_call,Medium,Aave,Oracle,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",104704.58,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave Oracle contract,4.6,0.6871066591760091,unaudited
sc_4143,reentrancy,Critical,dYdX,AMM,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",55042.87,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in dYdX AMM contract,9.5,0.8554558855914873,audited
sc_4144,integer_overflow,High,Curve,Pool,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",58791.38,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Curve Pool contract,8.9,0.3764869179927931,audited
sc_4145,integer_overflow,High,Liquity,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",26621.04,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Governor contract,7.7,0.3210904070020437,unaudited
sc_4146,timestamp_dependence,Medium,Yearn,Governor,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",81539.36,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Yearn Governor contract,4.6,0.9400047281831041,unaudited
sc_4147,random_weakness,High,Balancer,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",26901.74,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Lending contract,7.7,0.4561422729753032,audited
sc_4148,dos_gas_limit,Medium,Compound,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",266862.24,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Compound ERC721 contract,5.6,0.5585141878408073,unaudited
sc_4149,random_weakness,High,Frax,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",15083.51,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax ERC721 contract,7.8,0.10044313163918996,audited
sc_4150,unchecked_call,Medium,Yearn,Governor,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",30969.34,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn Governor contract,6.4,0.7955017222178915,audited
sc_4151,short_address,Medium,Liquity,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50227.67,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Liquity Strategy contract,5.6,0.4682902182991212,unaudited
sc_4152,tx_origin,Medium,Synthetix,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",76243.17,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix Bridge contract,4.3,0.2960424777696664,audited
sc_4153,delegatecall_injection,Critical,Uniswap,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",323409.48,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Uniswap ERC20 contract,9.7,0.8589281990544326,audited
sc_4154,dos_gas_limit,Medium,Compound,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",175687.98,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Compound Factory contract,4.8,0.29186723592494984,audited
sc_4155,random_weakness,High,1inch,Strategy,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",36377.33,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in 1inch Strategy contract,7.2,0.7378198078481235,audited
sc_4156,front_running,Medium,Euler,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38742.64,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Euler ERC1155 contract,5.0,0.20420481800438234,unaudited
sc_4157,short_address,Medium,Liquity,Timelock,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36103.64,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity Timelock contract,5.7,0.6075465227539802,unaudited
sc_4158,reentrancy,Critical,Convex,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",31815.06,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex Proxy contract,9.7,0.1138693761040991,unaudited
sc_4159,tx_origin,Medium,1inch,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50709.07,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in 1inch Router contract,5.0,0.669801127244818,audited
sc_4160,integer_overflow,High,MakerDAO,Bridge,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",364435.78,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Bridge contract,7.7,0.13172703189716115,audited
sc_4161,timestamp_dependence,Medium,Alpha Homora,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",23096.51,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Alpha Homora Vault contract,5.6,0.7097674192353275,unaudited
sc_4162,short_address,Medium,Yearn,Timelock,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",33455.52,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn Timelock contract,6.0,0.4088103780897321,audited
sc_4163,front_running,Medium,Curve,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58733.27,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Curve DEX contract,6.3,0.22862332694787948,audited
sc_4164,delegatecall_injection,Critical,Aave,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",600993.03,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Aave ERC20 contract,9.3,0.5197136114957971,audited
sc_4165,front_running,Medium,Compound,ERC20,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",219196.14,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound ERC20 contract,6.3,0.803902208686963,audited
sc_4166,integer_overflow,High,Uniswap,ERC721,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",162303.3,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Uniswap ERC721 contract,8.4,0.8700717289323332,audited
sc_4167,access_control,High,Curve,ERC1155,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",46196.72,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Curve ERC1155 contract,7.3,0.5033970130485932,audited
sc_4168,uninitialized_storage,High,Alpha Homora,Timelock,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",23881.96,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Alpha Homora Timelock contract,8.3,0.2744571443572731,audited
sc_4169,random_weakness,High,Rari,ERC1155,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",25212.44,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari ERC1155 contract,8.1,0.2901235619211856,audited
sc_4170,uninitialized_storage,High,Synthetix,Lending,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",102915.9,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix Lending contract,8.1,0.39913887126860026,unaudited
sc_4171,random_weakness,High,Alpha Homora,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",36575.33,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Alpha Homora Oracle contract,8.8,0.15008871405408428,unaudited
sc_4172,front_running,Medium,Alpha Homora,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49526.49,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Alpha Homora Oracle contract,4.5,0.7643435000481292,audited
sc_4173,dos_gas_limit,Medium,Euler,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",70133.9,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Euler ERC721 contract,4.6,0.4689424893864014,audited
sc_4174,front_running,Medium,Curve,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",67752.11,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve Strategy contract,4.5,0.9156290177586581,audited
sc_4175,unchecked_call,Medium,PancakeSwap,ERC721,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",23801.84,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in PancakeSwap ERC721 contract,5.2,0.9984929281103717,audited
sc_4176,random_weakness,High,1inch,DEX,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",78641.83,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in 1inch DEX contract,7.0,0.18952926985232638,audited
sc_4177,unchecked_call,Medium,Euler,Governor,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",11875.02,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Euler Governor contract,4.9,0.314727742509902,audited
sc_4178,access_control,High,Uniswap,Router,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",323210.93,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap Router contract,8.1,0.9042180678520679,unaudited
sc_4179,access_control,High,Rari,Oracle,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",13602.58,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari Oracle contract,8.1,0.8562684223266501,unaudited
sc_4180,delegatecall_injection,Critical,Frax,Farming,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",109393.46,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax Farming contract,9.3,0.28045709151726045,unaudited
sc_4181,timestamp_dependence,Medium,Yearn,Staking,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",141262.63,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn Staking contract,6.2,0.5506611659030469,audited
sc_4182,uninitialized_storage,High,MakerDAO,Lending,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",358502.39,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO Lending contract,7.2,0.27834377812584316,unaudited
sc_4183,access_control,High,MakerDAO,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",139550.67,13,0.26,0.8,2,0,1,1,High access_control vulnerability in MakerDAO Lending contract,8.4,0.5506366013441443,unaudited
sc_4184,front_running,Medium,1inch,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51776.19,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch DEX contract,5.2,0.8257658401286812,audited
sc_4185,tx_origin,Medium,SushiSwap,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",140186.51,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in SushiSwap Oracle contract,4.0,0.3609202823542338,audited
sc_4186,access_control,High,Frax,Proxy,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",64983.7,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Frax Proxy contract,8.7,0.9816115348888971,unaudited
sc_4187,access_control,High,Aave,Governor,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",155888.39,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Governor contract,7.1,0.8307989193592431,unaudited
sc_4188,integer_overflow,High,1inch,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",10988.32,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in 1inch Factory contract,7.6,0.699710056804284,unaudited
sc_4189,integer_overflow,High,SushiSwap,ERC721,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",122098.53,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap ERC721 contract,7.0,0.13359822258650172,audited
sc_4190,uninitialized_storage,High,Convex,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",69097.53,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Convex ERC20 contract,8.3,0.5878585762576779,audited
sc_4191,delegatecall_injection,Critical,Aave,Bridge,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",391162.37,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Aave Bridge contract,9.3,0.8412932977516631,audited
sc_4192,timestamp_dependence,Medium,Balancer,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",6338.62,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Balancer Bridge contract,4.3,0.3970770888266745,audited
sc_4193,tx_origin,Medium,Aave,ERC20,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",207074.75,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave ERC20 contract,6.6,0.8908964838025981,audited
sc_4194,unchecked_call,Medium,Alpha Homora,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",32019.72,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Alpha Homora Router contract,5.0,0.2801609730145848,audited
sc_4195,delegatecall_injection,Critical,Convex,Staking,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",23154.95,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex Staking contract,9.6,0.43175128406710417,unaudited
sc_4196,dos_gas_limit,Medium,Balancer,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46692.29,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Balancer Vault contract,5.1,0.38978385026761053,audited
sc_4197,uninitialized_storage,High,Euler,DEX,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",65169.42,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Euler DEX contract,8.7,0.45084140298092124,unaudited
sc_4198,reentrancy,Critical,Aave,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",592550.58,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave ERC721 contract,10.0,0.5340751051826876,unaudited
sc_4199,reentrancy,Critical,SushiSwap,Vault,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",177825.32,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in SushiSwap Vault contract,9.2,0.44427090353248533,audited
sc_4200,access_control,High,Compound,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",204378.25,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Compound Lending contract,7.0,0.7738415651682491,audited
sc_4201,timestamp_dependence,Medium,Rari,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",55028.98,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Rari Governor contract,5.4,0.6928580360789913,unaudited
sc_4202,delegatecall_injection,Critical,MakerDAO,Bridge,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",145832.3,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in MakerDAO Bridge contract,9.1,0.9524580088236528,audited
sc_4203,delegatecall_injection,Critical,Convex,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",22694.06,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex Farming contract,9.2,0.13063101475200464,audited
sc_4204,short_address,Medium,Liquity,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",10483.93,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity Router contract,4.2,0.8244205134271351,unaudited
sc_4205,delegatecall_injection,Critical,Balancer,ERC20,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",73134.02,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Balancer ERC20 contract,9.6,0.43449519326612007,audited
sc_4206,dos_gas_limit,Medium,PancakeSwap,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21052.37,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in PancakeSwap DEX contract,6.2,0.9487247055521421,audited
sc_4207,delegatecall_injection,Critical,Frax,AMM,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",29003.78,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax AMM contract,9.9,0.44793079763896637,unaudited
sc_4208,tx_origin,Medium,MakerDAO,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",184838.93,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in MakerDAO Timelock contract,4.9,0.15600259291238877,audited
sc_4209,tx_origin,Medium,Compound,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",83016.12,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Compound AMM contract,4.6,0.5416436264016481,audited
sc_4210,short_address,Medium,Frax,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15177.57,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Frax Timelock contract,4.7,0.47979001663235743,unaudited
sc_4211,short_address,Medium,1inch,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38526.73,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch Router contract,6.0,0.9269478555173275,audited
sc_4212,dos_gas_limit,Medium,Curve,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",80635.51,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Curve Governor contract,4.7,0.34066244429599446,unaudited
sc_4213,random_weakness,High,SushiSwap,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",126676.35,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in SushiSwap Pool contract,8.3,0.43300797089253995,audited
sc_4214,tx_origin,Medium,Rari,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13406.99,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Rari ERC1155 contract,4.5,0.18335157234381283,unaudited
sc_4215,short_address,Medium,Synthetix,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20446.4,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Synthetix Lending contract,6.4,0.8245854518072363,audited
sc_4216,front_running,Medium,MakerDAO,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",171395.06,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in MakerDAO Router contract,5.0,0.6347024122259611,audited
sc_4217,uninitialized_storage,High,Compound,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",278493.61,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Compound Timelock contract,8.0,0.41906335796989225,audited
sc_4218,reentrancy,Critical,Euler,AMM,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",20770.81,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Euler AMM contract,9.5,0.5201538842044183,audited
sc_4219,uninitialized_storage,High,Compound,Timelock,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",211627.18,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Compound Timelock contract,7.9,0.8200184391704125,audited
sc_4220,uninitialized_storage,High,Convex,Farming,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",63024.34,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Convex Farming contract,7.7,0.30887561545757647,unaudited
sc_4221,short_address,Medium,PancakeSwap,DEX,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39199.84,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in PancakeSwap DEX contract,4.7,0.35798407823212375,audited
sc_4222,access_control,High,Alpha Homora,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",44556.66,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora Timelock contract,7.7,0.9669737455372329,audited
sc_4223,random_weakness,High,Synthetix,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",120646.86,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Synthetix Strategy contract,7.5,0.6280451802197856,audited
sc_4224,random_weakness,High,Synthetix,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",85981.37,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Synthetix Oracle contract,8.7,0.877632069817214,audited
sc_4225,reentrancy,Critical,Synthetix,Factory,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",100541.34,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Synthetix Factory contract,9.3,0.10824709698516667,unaudited
sc_4226,timestamp_dependence,Medium,Uniswap,Vault,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",297136.06,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Uniswap Vault contract,6.8,0.9496603429980873,audited
sc_4227,unchecked_call,Medium,Curve,AMM,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",30978.85,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve AMM contract,4.7,0.9091884305265069,audited
sc_4228,delegatecall_injection,Critical,Alpha Homora,Router,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",70968.06,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Router contract,9.0,0.8893222875315997,audited
sc_4229,access_control,High,Compound,ERC20,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",284180.98,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Compound ERC20 contract,8.0,0.7668568422840009,unaudited
sc_4230,random_weakness,High,Rari,Farming,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",54750.66,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Rari Farming contract,8.2,0.5873904770839472,audited
sc_4231,uninitialized_storage,High,Synthetix,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",175987.11,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix AMM contract,7.6,0.4999491229759495,audited
sc_4232,dos_gas_limit,Medium,Aave,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",266962.25,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Aave Oracle contract,6.2,0.791782482216327,unaudited
sc_4233,uninitialized_storage,High,MakerDAO,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",201552.37,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in MakerDAO Oracle contract,8.3,0.7077759183381264,audited
sc_4234,short_address,Medium,Alpha Homora,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",41103.83,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Alpha Homora Governor contract,6.4,0.5762822692824825,unaudited
sc_4235,access_control,High,Liquity,Proxy,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",26066.08,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Liquity Proxy contract,7.2,0.672735354987151,audited
sc_4236,reentrancy,Critical,Uniswap,Lending,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",425340.93,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Uniswap Lending contract,9.4,0.3086470044101334,audited
sc_4237,random_weakness,High,Liquity,DEX,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",27908.24,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Liquity DEX contract,7.7,0.9491805473463855,audited
sc_4238,front_running,Medium,Frax,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14236.28,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax Lending contract,6.3,0.20392496263314427,unaudited
sc_4239,random_weakness,High,Yearn,Vault,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",103708.9,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn Vault contract,7.1,0.580179967120373,audited
sc_4240,uninitialized_storage,High,Frax,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",23519.2,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Frax AMM contract,8.2,0.8676166279609472,unaudited
sc_4241,front_running,Medium,dYdX,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49264.59,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in dYdX Pool contract,6.9,0.19372190846732415,audited
sc_4242,random_weakness,High,Convex,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",34779.59,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Convex ERC721 contract,7.6,0.15735342323090357,audited
sc_4243,dos_gas_limit,Medium,Synthetix,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",116445.28,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Synthetix ERC1155 contract,6.5,0.692668735739477,audited
sc_4244,timestamp_dependence,Medium,PancakeSwap,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",47355.79,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Proxy contract,4.6,0.544136091952199,audited
sc_4245,unchecked_call,Medium,Convex,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",44586.27,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Convex Factory contract,6.5,0.4970577161698134,audited
sc_4246,uninitialized_storage,High,dYdX,Vault,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",13148.7,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX Vault contract,8.4,0.9099263639626128,audited
sc_4247,delegatecall_injection,Critical,dYdX,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",25993.99,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX ERC20 contract,9.1,0.36805899879580617,audited
sc_4248,reentrancy,Critical,Convex,Strategy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",90899.51,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Convex Strategy contract,9.7,0.6437905103554703,audited
sc_4249,uninitialized_storage,High,Compound,Pool,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",228904.14,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Compound Pool contract,7.3,0.7032624955692951,audited
sc_4250,access_control,High,Yearn,Router,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",97494.77,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn Router contract,7.2,0.32133252661579254,unaudited
sc_4251,integer_overflow,High,Rari,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",66139.21,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Rari Governor contract,7.7,0.4168119473565616,audited
sc_4252,unchecked_call,Medium,Liquity,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",34771.05,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity Governor contract,5.5,0.8071832245586833,unaudited
sc_4253,integer_overflow,High,Synthetix,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",86906.67,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Synthetix AMM contract,8.6,0.7889029664532092,unaudited
sc_4254,timestamp_dependence,Medium,Liquity,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",51855.06,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Liquity Lending contract,6.6,0.1962009091200215,audited
sc_4255,random_weakness,High,Balancer,Proxy,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",30051.92,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Balancer Proxy contract,7.3,0.33935964272676145,audited
sc_4256,reentrancy,Critical,Curve,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",29131.23,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Curve Factory contract,9.2,0.7898894794016804,audited
sc_4257,short_address,Medium,Curve,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",69785.61,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve Proxy contract,6.4,0.5267028843345274,audited
sc_4258,access_control,High,Curve,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",245028.17,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Curve Proxy contract,7.8,0.6339732454220278,unaudited
sc_4259,front_running,Medium,Compound,Vault,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",132138.36,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound Vault contract,4.6,0.10308701596882841,audited
sc_4260,reentrancy,Critical,Curve,Vault,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",205470.04,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Curve Vault contract,9.0,0.86888185129008,unaudited
sc_4261,random_weakness,High,Compound,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",135292.5,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Vault contract,7.9,0.27102492976944703,audited
sc_4262,access_control,High,1inch,Factory,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",39763.37,13,0.26,0.8,2,0,1,1,High access_control vulnerability in 1inch Factory contract,8.5,0.253390483246536,audited
sc_4263,unchecked_call,Medium,Yearn,DEX,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",164260.6,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn DEX contract,6.7,0.7076569583717169,audited
sc_4264,tx_origin,Medium,Frax,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57068.75,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Farming contract,4.7,0.9999773273743765,audited
sc_4265,unchecked_call,Medium,SushiSwap,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",33643.83,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in SushiSwap Strategy contract,5.5,0.4736445200830671,audited
sc_4266,random_weakness,High,Frax,Staking,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",20326.97,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Frax Staking contract,7.4,0.6768601640595737,audited
sc_4267,unchecked_call,Medium,Alpha Homora,Factory,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",43893.01,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Alpha Homora Factory contract,6.5,0.7249522392938255,audited
sc_4268,uninitialized_storage,High,PancakeSwap,Lending,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",82720.12,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in PancakeSwap Lending contract,8.4,0.8976518309882778,audited
sc_4269,access_control,High,PancakeSwap,Timelock,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",56120.85,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap Timelock contract,7.7,0.45164554258785117,audited
sc_4270,random_weakness,High,1inch,Farming,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",17697.49,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in 1inch Farming contract,8.5,0.8554192175347697,unaudited
sc_4271,uninitialized_storage,High,Euler,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",41116.39,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Euler Factory contract,7.8,0.6577164374515878,audited
sc_4272,tx_origin,Medium,Balancer,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50982.71,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Balancer AMM contract,4.6,0.6414826242136669,audited
sc_4273,short_address,Medium,1inch,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15713.3,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch Proxy contract,6.1,0.4959640842181946,unaudited
sc_4274,dos_gas_limit,Medium,MakerDAO,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",89011.19,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO Factory contract,4.7,0.22495179900087492,audited
sc_4275,reentrancy,Critical,PancakeSwap,Proxy,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",106290.91,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap Proxy contract,9.4,0.36324202638603176,audited
sc_4276,front_running,Medium,1inch,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50810.09,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in 1inch ERC20 contract,6.4,0.5190752534473076,audited
sc_4277,access_control,High,PancakeSwap,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",80681.87,13,0.26,0.8,2,1,1,1,High access_control vulnerability in PancakeSwap AMM contract,8.2,0.436329132773733,audited
sc_4278,dos_gas_limit,Medium,MakerDAO,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",364543.2,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in MakerDAO Timelock contract,6.2,0.5810715399916571,audited
sc_4279,reentrancy,Critical,Compound,Factory,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",60379.54,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Compound Factory contract,9.6,0.32213166702711904,unaudited
sc_4280,uninitialized_storage,High,Curve,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",92003.76,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Curve ERC1155 contract,7.7,0.11455321419721438,unaudited
sc_4281,front_running,Medium,PancakeSwap,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20790.99,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in PancakeSwap ERC721 contract,6.3,0.7285583574190823,audited
sc_4282,delegatecall_injection,Critical,Alpha Homora,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",61621.94,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Governor contract,9.2,0.6418569436008892,unaudited
sc_4283,random_weakness,High,MakerDAO,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",334871.8,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Staking contract,7.7,0.7461509468790719,audited
sc_4284,front_running,Medium,Yearn,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",135558.39,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Yearn DEX contract,4.8,0.2279185623502191,audited
sc_4285,front_running,Medium,Uniswap,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35943.75,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Uniswap ERC721 contract,5.9,0.7413738562450436,audited
sc_4286,integer_overflow,High,Synthetix,DEX,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",20284.21,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Synthetix DEX contract,8.6,0.35002469310358675,audited
sc_4287,short_address,Medium,Synthetix,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",133045.57,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Farming contract,6.2,0.1437845598846689,audited
sc_4288,unchecked_call,Medium,Curve,Strategy,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",19749.21,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Strategy contract,5.7,0.7413989254098259,unaudited
sc_4289,short_address,Medium,Yearn,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",61034.82,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn ERC20 contract,4.3,0.8319584723197894,audited
sc_4290,reentrancy,Critical,Liquity,Bridge,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",75009.88,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Liquity Bridge contract,9.2,0.1003456614195567,audited
sc_4291,delegatecall_injection,Critical,Yearn,Router,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",148123.81,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Yearn Router contract,9.1,0.2548894850820212,audited
sc_4292,unchecked_call,Medium,Aave,AMM,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",57644.56,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave AMM contract,6.0,0.4215948705700987,audited
sc_4293,reentrancy,Critical,PancakeSwap,Lending,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",68555.73,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap Lending contract,9.5,0.5378843394979338,audited
sc_4294,short_address,Medium,Balancer,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",11269.62,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Balancer Router contract,6.2,0.8426540204111078,audited
sc_4295,unchecked_call,Medium,Alpha Homora,Factory,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",15802.33,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Alpha Homora Factory contract,5.0,0.3508743952826644,audited
sc_4296,front_running,Medium,Euler,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",38135.54,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Euler Router contract,6.8,0.11201039880234999,audited
sc_4297,front_running,Medium,Frax,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",17451.11,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax Lending contract,4.3,0.48999801609497173,audited
sc_4298,dos_gas_limit,Medium,dYdX,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13082.83,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in dYdX Pool contract,4.6,0.195560583549727,audited
sc_4299,short_address,Medium,dYdX,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31122.51,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in dYdX ERC1155 contract,4.2,0.6879986587853271,audited
sc_4300,front_running,Medium,Balancer,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24317.14,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Balancer Lending contract,5.8,0.19407170813748564,audited
sc_4301,timestamp_dependence,Medium,Yearn,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",48865.27,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Yearn Timelock contract,5.3,0.7372368933413868,audited
sc_4302,integer_overflow,High,Frax,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",46484.06,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Frax Strategy contract,7.0,0.2790763750387596,audited
sc_4303,random_weakness,High,Compound,Strategy,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",219685.49,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Strategy contract,7.8,0.13922018493138705,audited
sc_4304,delegatecall_injection,Critical,MakerDAO,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",329990.65,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in MakerDAO ERC721 contract,9.5,0.427855332748981,unaudited
sc_4305,uninitialized_storage,High,dYdX,Router,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",14136.22,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in dYdX Router contract,8.1,0.7793200670833196,audited
sc_4306,integer_overflow,High,Rari,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",44469.47,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari Proxy contract,7.8,0.11782373055915303,audited
sc_4307,integer_overflow,High,MakerDAO,Lending,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",302526.47,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Lending contract,7.9,0.9070390935087957,audited
sc_4308,reentrancy,Critical,Convex,AMM,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",73040.75,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Convex AMM contract,9.4,0.3665509717754152,audited
sc_4309,reentrancy,Critical,Curve,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",138233.85,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Curve Factory contract,9.1,0.13638752079384014,audited
sc_4310,access_control,High,MakerDAO,Lending,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",268765.98,13,0.26,0.8,2,0,1,1,High access_control vulnerability in MakerDAO Lending contract,8.2,0.36640817696998274,unaudited
sc_4311,delegatecall_injection,Critical,Yearn,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",251155.56,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Yearn Pool contract,9.7,0.6346714427333208,audited
sc_4312,random_weakness,High,Euler,Staking,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",13206.14,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Euler Staking contract,7.1,0.6523296550690006,unaudited
sc_4313,unchecked_call,Medium,MakerDAO,Farming,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",133357.26,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in MakerDAO Farming contract,4.6,0.8417642671170497,audited
sc_4314,reentrancy,Critical,Yearn,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",117664.13,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Yearn Proxy contract,9.8,0.10734084653376512,audited
sc_4315,access_control,High,PancakeSwap,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",15016.22,13,0.26,0.8,2,1,1,1,High access_control vulnerability in PancakeSwap ERC1155 contract,8.3,0.9616780781078907,unaudited
sc_4316,unchecked_call,Medium,Aave,ERC1155,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",162109.98,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave ERC1155 contract,5.0,0.47824889460934494,audited
sc_4317,uninitialized_storage,High,Synthetix,AMM,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",145984.26,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix AMM contract,8.3,0.9401796787638369,audited
sc_4318,delegatecall_injection,Critical,Convex,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",44738.67,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Convex Farming contract,9.1,0.3296797533426022,audited
sc_4319,short_address,Medium,Balancer,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46298.32,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Balancer Vault contract,6.5,0.16420502423402444,audited
sc_4320,tx_origin,Medium,Alpha Homora,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42566.02,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora DEX contract,5.1,0.7848622428909212,audited
sc_4321,front_running,Medium,Rari,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56980.81,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Rari Factory contract,6.2,0.7983185341570546,audited
sc_4322,dos_gas_limit,Medium,MakerDAO,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",211537.23,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in MakerDAO Pool contract,5.7,0.41286759417998453,audited
sc_4323,access_control,High,Compound,Vault,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",311750.38,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound Vault contract,7.1,0.5767675909885411,audited
sc_4324,unchecked_call,Medium,Compound,Factory,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",214098.89,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Compound Factory contract,5.5,0.25633734122124086,audited
sc_4325,integer_overflow,High,Yearn,Factory,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",64954.52,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Yearn Factory contract,7.9,0.49414706404153574,audited
sc_4326,timestamp_dependence,Medium,SushiSwap,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",79577.04,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in SushiSwap Oracle contract,6.4,0.4065981958918792,audited
sc_4327,delegatecall_injection,Critical,dYdX,ERC721,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",94593.53,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX ERC721 contract,10.0,0.5596373234480989,unaudited
sc_4328,uninitialized_storage,High,Synthetix,Oracle,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",109642.8,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Synthetix Oracle contract,7.1,0.39072729725628585,audited
sc_4329,dos_gas_limit,Medium,MakerDAO,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",162560.76,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in MakerDAO Proxy contract,6.7,0.9019431794781405,audited
sc_4330,uninitialized_storage,High,PancakeSwap,Strategy,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",71816.69,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in PancakeSwap Strategy contract,8.4,0.23108112776158604,audited
sc_4331,reentrancy,Critical,Frax,Bridge,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",27558.02,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Frax Bridge contract,9.8,0.5200745562603749,audited
sc_4332,uninitialized_storage,High,Yearn,Oracle,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",202404.24,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Yearn Oracle contract,8.7,0.8704940017918684,audited
sc_4333,tx_origin,Medium,Aave,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",103500.75,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Aave ERC1155 contract,6.0,0.49498376850715287,unaudited
sc_4334,short_address,Medium,Frax,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",17840.47,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Frax AMM contract,6.4,0.7097947098891592,unaudited
sc_4335,reentrancy,Critical,1inch,DEX,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",22007.88,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch DEX contract,9.3,0.9563822652053972,unaudited
sc_4336,access_control,High,Liquity,DEX,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",25959.78,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Liquity DEX contract,7.8,0.6308199851297746,audited
sc_4337,random_weakness,High,Balancer,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",15362.05,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Oracle contract,8.5,0.7887930290043595,unaudited
sc_4338,dos_gas_limit,Medium,MakerDAO,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",269035.73,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO Oracle contract,5.1,0.63556103747037,audited
sc_4339,front_running,Medium,Frax,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46655.13,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax ERC721 contract,6.7,0.5142350333114206,audited
sc_4340,front_running,Medium,1inch,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",64857.71,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in 1inch Lending contract,5.8,0.2227895675184362,audited
sc_4341,short_address,Medium,dYdX,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",76301.73,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in dYdX Factory contract,6.8,0.7422915379363901,audited
sc_4342,dos_gas_limit,Medium,1inch,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",11173.99,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in 1inch Router contract,6.7,0.7445613332370273,audited
sc_4343,unchecked_call,Medium,Euler,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",45887.08,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Euler AMM contract,4.2,0.43242221776850165,audited
sc_4344,random_weakness,High,Liquity,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",48306.58,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity ERC1155 contract,8.1,0.5411566048886894,unaudited
sc_4345,unchecked_call,Medium,Liquity,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",54759.21,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Liquity Vault contract,4.0,0.22514313335148356,audited
sc_4346,tx_origin,Medium,Balancer,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44078.11,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Balancer Lending contract,5.1,0.8915572848205522,audited
sc_4347,tx_origin,Medium,Euler,ERC20,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39698.52,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Euler ERC20 contract,6.1,0.8006669120673064,unaudited
sc_4348,random_weakness,High,1inch,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",48397.38,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in 1inch Vault contract,8.2,0.5295292330534889,audited
sc_4349,access_control,High,Liquity,Lending,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",53643.18,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Liquity Lending contract,8.8,0.9310994235586407,unaudited
sc_4350,unchecked_call,Medium,1inch,Staking,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",51689.96,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in 1inch Staking contract,4.5,0.48967540197936266,unaudited
sc_4351,random_weakness,High,1inch,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",53982.25,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in 1inch Farming contract,8.7,0.13930172438638436,audited
sc_4352,integer_overflow,High,Convex,Proxy,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",39409.2,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Convex Proxy contract,8.1,0.689977999717336,audited
sc_4353,delegatecall_injection,Critical,Convex,ERC20,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",67166.44,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex ERC20 contract,9.9,0.7202719312084026,unaudited
sc_4354,integer_overflow,High,1inch,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",82849.94,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in 1inch Factory contract,7.1,0.5082040252948684,audited
sc_4355,reentrancy,Critical,Frax,Oracle,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",43223.96,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Frax Oracle contract,9.9,0.5315912618153621,unaudited
sc_4356,short_address,Medium,Synthetix,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",104144.78,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Pool contract,6.3,0.28834753791252893,audited
sc_4357,delegatecall_injection,Critical,Yearn,Proxy,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",145098.91,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Yearn Proxy contract,9.4,0.6610789678310659,unaudited
sc_4358,reentrancy,Critical,Yearn,Pool,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",181034.77,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Yearn Pool contract,9.3,0.1655808455022585,audited
sc_4359,tx_origin,Medium,Frax,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42535.77,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax AMM contract,5.8,0.3300360038928467,unaudited
sc_4360,integer_overflow,High,Uniswap,ERC20,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",462948.17,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Uniswap ERC20 contract,8.9,0.9715279143352316,audited
sc_4361,front_running,Medium,Convex,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",41592.57,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Convex Governor contract,4.6,0.629235605234234,audited
sc_4362,front_running,Medium,PancakeSwap,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24169.33,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in PancakeSwap Lending contract,6.5,0.9066474623892566,unaudited
sc_4363,uninitialized_storage,High,PancakeSwap,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",53518.34,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in PancakeSwap Pool contract,8.2,0.1176407051094266,unaudited
sc_4364,reentrancy,Critical,Liquity,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",106500.96,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Liquity Oracle contract,9.1,0.6116794584587626,unaudited
sc_4365,front_running,Medium,Balancer,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",17891.22,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer Vault contract,6.7,0.21373675647374596,unaudited
sc_4366,front_running,Medium,Liquity,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12724.32,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Liquity Proxy contract,4.6,0.47400246725359707,unaudited
sc_4367,timestamp_dependence,Medium,Convex,Proxy,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",8913.57,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Convex Proxy contract,4.7,0.917983123640804,audited
sc_4368,delegatecall_injection,Critical,Curve,Vault,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",177122.24,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Curve Vault contract,9.4,0.903284117866887,audited
sc_4369,integer_overflow,High,Frax,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",45541.48,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Frax ERC1155 contract,7.3,0.54983416724656,unaudited
sc_4370,timestamp_dependence,Medium,Synthetix,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",130810.27,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Synthetix Timelock contract,5.4,0.23831513625621586,audited
sc_4371,random_weakness,High,MakerDAO,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",316700.31,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Staking contract,8.6,0.8078233009680217,unaudited
sc_4372,unchecked_call,Medium,Euler,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",22569.82,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Euler Farming contract,5.8,0.29219848764037193,audited
sc_4373,front_running,Medium,SushiSwap,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",80297.98,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in SushiSwap Bridge contract,6.7,0.306408031478242,unaudited
sc_4374,reentrancy,Critical,Synthetix,Governor,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",119029.58,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Synthetix Governor contract,9.7,0.7139855036186451,unaudited
sc_4375,short_address,Medium,Balancer,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45066.81,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Balancer Governor contract,5.9,0.1272095807288804,unaudited
sc_4376,random_weakness,High,Frax,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",28135.6,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax Router contract,7.0,0.41105300554662016,audited
sc_4377,access_control,High,Rari,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",35737.18,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Rari Lending contract,8.3,0.48727053264756104,audited
sc_4378,delegatecall_injection,Critical,Synthetix,Staking,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",218277.45,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Synthetix Staking contract,9.8,0.874634918430539,audited
sc_4379,timestamp_dependence,Medium,Rari,ERC1155,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",21064.57,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Rari ERC1155 contract,6.5,0.8428531083673921,audited
sc_4380,uninitialized_storage,High,Synthetix,ERC1155,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",206681.7,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix ERC1155 contract,8.2,0.8892139494432957,audited
sc_4381,access_control,High,Uniswap,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",480859.63,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap Governor contract,7.2,0.47250884034003315,unaudited
sc_4382,integer_overflow,High,SushiSwap,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",36740.66,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap Vault contract,7.6,0.7596474305797536,unaudited
sc_4383,short_address,Medium,Uniswap,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",166078.52,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Uniswap Bridge contract,4.5,0.4230691983757666,unaudited
sc_4384,unchecked_call,Medium,Rari,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",52042.06,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari Proxy contract,4.8,0.748297084547157,audited
sc_4385,unchecked_call,Medium,Euler,Lending,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",36471.34,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Euler Lending contract,5.2,0.379553783459353,audited
sc_4386,dos_gas_limit,Medium,Compound,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",63977.7,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Lending contract,6.5,0.15151985322662104,audited
sc_4387,delegatecall_injection,Critical,Rari,Governor,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",70227.83,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari Governor contract,9.2,0.9806743342748647,audited
sc_4388,delegatecall_injection,Critical,1inch,Timelock,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",48409.1,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch Timelock contract,9.2,0.4648142405504888,audited
sc_4389,random_weakness,High,Compound,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",91166.17,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Bridge contract,7.2,0.26053227022242276,audited
sc_4390,tx_origin,Medium,Synthetix,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",97348.69,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix Oracle contract,5.9,0.751897126750499,unaudited
sc_4391,dos_gas_limit,Medium,Compound,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42252.82,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Compound Lending contract,6.9,0.21276270809039155,audited
sc_4392,dos_gas_limit,Medium,SushiSwap,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",78939.73,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in SushiSwap Proxy contract,4.1,0.494210906828946,audited
sc_4393,reentrancy,Critical,MakerDAO,Strategy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",233426.22,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in MakerDAO Strategy contract,9.2,0.5821216841312179,unaudited
sc_4394,integer_overflow,High,Alpha Homora,Governor,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",70439.8,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Alpha Homora Governor contract,7.1,0.2935437714807918,unaudited
sc_4395,unchecked_call,Medium,Euler,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",8926.92,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Euler Farming contract,5.5,0.8889857681989337,audited
sc_4396,uninitialized_storage,High,Rari,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",26855.27,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Rari ERC1155 contract,7.3,0.7565469118235345,audited
sc_4397,dos_gas_limit,Medium,dYdX,Factory,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53955.83,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in dYdX Factory contract,4.6,0.7709474447198348,audited
sc_4398,random_weakness,High,Uniswap,Pool,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",181141.02,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Uniswap Pool contract,7.1,0.30850433036595976,audited
sc_4399,integer_overflow,High,PancakeSwap,Oracle,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",18970.26,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap Oracle contract,7.9,0.6606375783856195,unaudited
sc_4400,short_address,Medium,Synthetix,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51125.17,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Synthetix Router contract,5.6,0.281547736353743,audited
sc_4401,dos_gas_limit,Medium,Liquity,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22900.92,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Liquity AMM contract,4.8,0.5239981382759514,unaudited
sc_4402,unchecked_call,Medium,Yearn,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",92638.33,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn ERC20 contract,4.0,0.39925159917484165,unaudited
sc_4403,uninitialized_storage,High,SushiSwap,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",118760.27,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in SushiSwap Staking contract,8.4,0.9934532121418745,unaudited
sc_4404,tx_origin,Medium,Compound,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",254917.3,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Compound Router contract,5.9,0.22107716631854407,audited
sc_4405,delegatecall_injection,Critical,Frax,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",59173.89,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax Timelock contract,9.7,0.9264678855594193,audited
sc_4406,delegatecall_injection,Critical,Curve,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",220684.79,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Curve DEX contract,9.7,0.4958798001659056,unaudited
sc_4407,tx_origin,Medium,Frax,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53695.55,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Frax Farming contract,4.2,0.42564433540631585,audited
sc_4408,reentrancy,Critical,Curve,Timelock,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",256202.24,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Curve Timelock contract,9.7,0.7135715504046607,unaudited
sc_4409,timestamp_dependence,Medium,Synthetix,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",166880.99,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Synthetix Timelock contract,5.5,0.9053363977475858,unaudited
sc_4410,timestamp_dependence,Medium,Synthetix,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",52051.91,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Synthetix AMM contract,5.7,0.429116271684686,unaudited
sc_4411,tx_origin,Medium,1inch,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54105.86,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch Factory contract,5.1,0.32150366978300504,audited
sc_4412,reentrancy,Critical,Balancer,Router,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",56699.57,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Router contract,9.7,0.3342512200800659,audited
sc_4413,timestamp_dependence,Medium,PancakeSwap,AMM,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",10108.14,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap AMM contract,6.3,0.22607326878115794,audited
sc_4414,reentrancy,Critical,Synthetix,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",53240.35,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Synthetix DEX contract,9.5,0.8181201929683811,unaudited
sc_4415,unchecked_call,Medium,Convex,Strategy,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",54128.46,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Convex Strategy contract,6.2,0.18612773699857915,audited
sc_4416,random_weakness,High,Compound,Proxy,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",248193.63,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Proxy contract,8.8,0.4424640799079128,unaudited
sc_4417,random_weakness,High,Alpha Homora,ERC721,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",66357.61,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Alpha Homora ERC721 contract,8.8,0.7571567779043321,audited
sc_4418,uninitialized_storage,High,Euler,ERC20,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",17730.84,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Euler ERC20 contract,8.5,0.3254645146780981,unaudited
sc_4419,dos_gas_limit,Medium,Curve,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30519.74,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve ERC1155 contract,4.3,0.5358417424649817,audited
sc_4420,reentrancy,Critical,SushiSwap,Timelock,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",122007.21,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in SushiSwap Timelock contract,9.1,0.6324971656609499,audited
sc_4421,timestamp_dependence,Medium,dYdX,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",7598.09,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Oracle contract,5.9,0.8814949555247104,audited
sc_4422,dos_gas_limit,Medium,Frax,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16279.37,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Frax Vault contract,6.1,0.890001763115501,unaudited
sc_4423,random_weakness,High,MakerDAO,Governor,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",191869.95,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in MakerDAO Governor contract,7.9,0.661454250654529,unaudited
sc_4424,tx_origin,Medium,1inch,Vault,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",52147.92,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch Vault contract,6.6,0.25957444137527186,audited
sc_4425,access_control,High,SushiSwap,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",129513.68,13,0.26,0.8,2,1,1,1,High access_control vulnerability in SushiSwap Pool contract,7.8,0.26367926386971285,audited
sc_4426,reentrancy,Critical,Balancer,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",54050.49,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer AMM contract,9.6,0.988179694245778,unaudited
sc_4427,short_address,Medium,Synthetix,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",29858.72,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix ERC1155 contract,5.7,0.5862722871060557,audited
sc_4428,short_address,Medium,Convex,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",65828.58,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Convex DEX contract,4.5,0.2603414495508313,unaudited
sc_4429,access_control,High,Compound,Bridge,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",147347.33,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Compound Bridge contract,8.9,0.27551390228804085,audited
sc_4430,reentrancy,Critical,Compound,AMM,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",381406.09,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Compound AMM contract,9.5,0.8269901773121775,audited
sc_4431,access_control,High,1inch,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",57509.89,13,0.26,0.8,2,1,1,1,High access_control vulnerability in 1inch Governor contract,7.0,0.8897524631098731,audited
sc_4432,front_running,Medium,Aave,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",171063.48,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Aave ERC20 contract,6.4,0.2604835761486423,audited
sc_4433,timestamp_dependence,Medium,Curve,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",53822.41,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Curve Oracle contract,4.2,0.514344026101842,unaudited
sc_4434,access_control,High,Liquity,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",28524.98,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Liquity Proxy contract,8.7,0.5158056217458638,audited
sc_4435,access_control,High,dYdX,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",24898.41,13,0.26,0.8,2,1,1,1,High access_control vulnerability in dYdX Farming contract,8.5,0.3671648324061759,audited
sc_4436,reentrancy,Critical,SushiSwap,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",194409.71,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in SushiSwap Router contract,9.9,0.1332704649437876,audited
sc_4437,random_weakness,High,Euler,Vault,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",14204.02,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Euler Vault contract,8.8,0.5316842868487803,audited
sc_4438,front_running,Medium,Frax,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8122.44,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Frax Pool contract,5.0,0.8688427220963968,audited
sc_4439,tx_origin,Medium,1inch,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44272.71,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in 1inch Lending contract,6.5,0.6511876057252647,unaudited
sc_4440,random_weakness,High,Curve,Farming,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",76430.22,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Curve Farming contract,8.1,0.7662703513886302,audited
sc_4441,delegatecall_injection,Critical,Uniswap,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",385766.93,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Uniswap Staking contract,9.5,0.9912332267654993,unaudited
sc_4442,integer_overflow,High,Euler,Proxy,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",72027.06,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Euler Proxy contract,8.6,0.6315744535079844,audited
sc_4443,uninitialized_storage,High,Yearn,Staking,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",98782.4,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Yearn Staking contract,7.3,0.8973520923346858,audited
sc_4444,front_running,Medium,Rari,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49522.71,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Rari Governor contract,5.9,0.47095398742704586,audited
sc_4445,reentrancy,Critical,Synthetix,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",186229.31,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Synthetix Staking contract,9.6,0.7045564788017923,audited
sc_4446,tx_origin,Medium,Convex,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23721.33,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex Timelock contract,6.0,0.8641171662557193,audited
sc_4447,unchecked_call,Medium,Curve,ERC20,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",76700.38,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Curve ERC20 contract,5.0,0.926952582586844,audited
sc_4448,integer_overflow,High,PancakeSwap,Router,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",39617.07,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in PancakeSwap Router contract,8.5,0.8640393188945894,audited
sc_4449,random_weakness,High,PancakeSwap,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",37692.16,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in PancakeSwap DEX contract,7.9,0.9601233040850624,unaudited
sc_4450,short_address,Medium,MakerDAO,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",245425.5,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in MakerDAO Proxy contract,4.3,0.9219039882841916,unaudited
sc_4451,delegatecall_injection,Critical,Alpha Homora,Factory,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",76910.13,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Factory contract,9.0,0.3844050017480686,audited
sc_4452,tx_origin,Medium,PancakeSwap,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30092.8,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in PancakeSwap Lending contract,6.3,0.6924007515591518,audited
sc_4453,tx_origin,Medium,Alpha Homora,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51532.22,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora Strategy contract,6.3,0.5612360516212198,unaudited
sc_4454,tx_origin,Medium,dYdX,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",6926.79,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX Lending contract,4.9,0.1580412635256043,audited
sc_4455,dos_gas_limit,Medium,Convex,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12085.9,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Convex DEX contract,4.7,0.6457388898040444,audited
sc_4456,short_address,Medium,Convex,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44368.82,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex Oracle contract,5.9,0.42248479054902854,audited
sc_4457,front_running,Medium,SushiSwap,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",88458.22,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in SushiSwap Strategy contract,5.3,0.7702495968318775,audited
sc_4458,unchecked_call,Medium,SushiSwap,AMM,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",93992.96,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in SushiSwap AMM contract,6.2,0.8275707356109061,audited
sc_4459,integer_overflow,High,Alpha Homora,Lending,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",8626.48,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora Lending contract,8.5,0.7994370997728739,audited
sc_4460,delegatecall_injection,Critical,1inch,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",31859.13,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch Farming contract,9.5,0.22404231466252542,audited
sc_4461,front_running,Medium,Alpha Homora,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14244.12,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Alpha Homora Governor contract,6.4,0.1603779762808862,unaudited
sc_4462,timestamp_dependence,Medium,Compound,Router,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",368075.53,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Compound Router contract,5.6,0.5044997068978441,unaudited
sc_4463,front_running,Medium,MakerDAO,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",161072.08,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in MakerDAO AMM contract,4.7,0.8142672036429808,audited
sc_4464,uninitialized_storage,High,SushiSwap,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",167774.33,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in SushiSwap Proxy contract,7.4,0.280609315392475,unaudited
sc_4465,front_running,Medium,dYdX,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",27186.37,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in dYdX Lending contract,4.4,0.7943323140045294,unaudited
sc_4466,delegatecall_injection,Critical,Rari,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",22061.98,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Rari Bridge contract,9.8,0.4419440182237875,audited
sc_4467,access_control,High,SushiSwap,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",105086.56,13,0.26,0.8,2,1,1,1,High access_control vulnerability in SushiSwap Vault contract,8.9,0.10326645003041285,audited
sc_4468,uninitialized_storage,High,Alpha Homora,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",47658.34,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Alpha Homora Farming contract,8.3,0.9333269816479611,audited
sc_4469,access_control,High,Convex,Factory,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",65474.28,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Convex Factory contract,7.7,0.4205545444325145,audited
sc_4470,delegatecall_injection,Critical,Compound,Strategy,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",62650.46,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Compound Strategy contract,9.9,0.7207619117418425,unaudited
sc_4471,access_control,High,Compound,Farming,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",401327.84,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Compound Farming contract,7.0,0.9052757321621402,unaudited
sc_4472,front_running,Medium,Compound,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",160240.25,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Compound Lending contract,4.9,0.8050402334361688,audited
sc_4473,short_address,Medium,Convex,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",6001.45,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex ERC20 contract,5.6,0.3825549303341699,unaudited
sc_4474,dos_gas_limit,Medium,Rari,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54563.21,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Rari Oracle contract,5.5,0.5003043109675652,audited
sc_4475,uninitialized_storage,High,1inch,ERC20,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",65116.28,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in 1inch ERC20 contract,8.0,0.6071633773941444,audited
sc_4476,front_running,Medium,Balancer,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20815.97,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer Pool contract,6.4,0.4473320971223821,audited
sc_4477,tx_origin,Medium,Convex,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32037.75,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex Farming contract,4.7,0.27274063924855996,audited
sc_4478,front_running,Medium,PancakeSwap,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12518.26,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in PancakeSwap AMM contract,4.9,0.5527362261620558,unaudited
sc_4479,tx_origin,Medium,Liquity,Factory,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",9540.02,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity Factory contract,4.9,0.834300665341488,unaudited
sc_4480,tx_origin,Medium,Balancer,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50213.25,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Balancer Strategy contract,6.4,0.5451599308288577,audited
sc_4481,timestamp_dependence,Medium,Alpha Homora,Staking,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",69688.5,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Alpha Homora Staking contract,5.0,0.9265794118240124,audited
sc_4482,short_address,Medium,1inch,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22246.41,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch Staking contract,4.8,0.48243162133975803,unaudited
sc_4483,front_running,Medium,Uniswap,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",138734.74,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Uniswap Bridge contract,6.1,0.4157668920102042,audited
sc_4484,integer_overflow,High,Rari,Bridge,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",19154.56,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari Bridge contract,7.9,0.1262901989940521,audited
sc_4485,integer_overflow,High,Euler,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",74656.55,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Euler Staking contract,8.8,0.3649631370907094,unaudited
sc_4486,reentrancy,Critical,Balancer,AMM,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",63664.24,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer AMM contract,9.4,0.33867750232499105,unaudited
sc_4487,timestamp_dependence,Medium,Synthetix,ERC721,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",86642.34,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Synthetix ERC721 contract,5.8,0.49804792712203505,audited
sc_4488,random_weakness,High,Alpha Homora,Pool,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",12952.49,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Alpha Homora Pool contract,7.5,0.5711600821678797,unaudited
sc_4489,integer_overflow,High,Yearn,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",56188.68,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Yearn Factory contract,7.0,0.740249149915479,audited
sc_4490,timestamp_dependence,Medium,Uniswap,ERC1155,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",56708.09,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Uniswap ERC1155 contract,4.9,0.1788388838470263,unaudited
sc_4491,unchecked_call,Medium,Curve,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",63382.96,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Factory contract,4.9,0.2011440266197021,audited
sc_4492,integer_overflow,High,SushiSwap,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",123831.99,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap Oracle contract,7.2,0.5697130401091896,audited
sc_4493,timestamp_dependence,Medium,SushiSwap,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",109704.55,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap AMM contract,5.5,0.3255962258109548,audited
sc_4494,random_weakness,High,PancakeSwap,Governor,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",25229.27,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap Governor contract,7.3,0.5187698383542029,audited
sc_4495,delegatecall_injection,Critical,Convex,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",12848.87,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Convex ERC20 contract,9.7,0.25269666359063003,audited
sc_4496,integer_overflow,High,MakerDAO,Timelock,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",250279.44,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in MakerDAO Timelock contract,7.7,0.9124083113115246,audited
sc_4497,unchecked_call,Medium,Curve,Strategy,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",58788.29,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve Strategy contract,4.8,0.7609170396966453,unaudited
sc_4498,tx_origin,Medium,Rari,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",30726.41,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Rari Strategy contract,4.3,0.1345308300204379,unaudited
sc_4499,unchecked_call,Medium,Uniswap,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",306771.89,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Uniswap Pool contract,4.8,0.9131433624550275,audited
sc_4500,tx_origin,Medium,Curve,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",53094.77,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Curve Governor contract,6.9,0.3815737958985238,unaudited
sc_4501,unchecked_call,Medium,Euler,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",14495.78,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Euler Bridge contract,6.3,0.8067899439846955,audited
sc_4502,timestamp_dependence,Medium,Euler,Proxy,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",45760.4,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Euler Proxy contract,5.6,0.38691913276911194,audited
sc_4503,short_address,Medium,Liquity,ERC721,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",41435.58,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity ERC721 contract,4.7,0.44014117389024887,audited
sc_4504,reentrancy,Critical,SushiSwap,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",82532.61,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in SushiSwap AMM contract,9.2,0.49898241505576224,audited
sc_4505,short_address,Medium,Convex,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51056.55,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex Factory contract,6.4,0.4416422950237231,audited
sc_4506,integer_overflow,High,SushiSwap,ERC721,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",129116.87,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap ERC721 contract,8.0,0.4494448370061609,audited
sc_4507,random_weakness,High,Rari,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",81335.47,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Rari Oracle contract,8.8,0.6106361941529141,unaudited
sc_4508,timestamp_dependence,Medium,MakerDAO,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",98095.32,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Oracle contract,6.2,0.7187564711892739,unaudited
sc_4509,integer_overflow,High,Rari,DEX,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",88924.43,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari DEX contract,7.3,0.48448509155248953,audited
sc_4510,reentrancy,Critical,dYdX,Pool,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",13186.79,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in dYdX Pool contract,9.2,0.6660190053304765,audited
sc_4511,unchecked_call,Medium,Euler,Oracle,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",60694.96,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Euler Oracle contract,5.0,0.8598506082400444,audited
sc_4512,uninitialized_storage,High,Rari,DEX,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",72550.43,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Rari DEX contract,7.9,0.31222704419443714,audited
sc_4513,front_running,Medium,Frax,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8961.54,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Frax Farming contract,5.4,0.4893753057075837,audited
sc_4514,delegatecall_injection,Critical,dYdX,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",88751.42,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in dYdX Router contract,9.6,0.6952136746865402,audited
sc_4515,reentrancy,Critical,Alpha Homora,Oracle,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",87859.61,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Alpha Homora Oracle contract,9.1,0.24061818802145446,audited
sc_4516,access_control,High,1inch,Pool,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",46362.32,13,0.26,0.8,2,0,1,1,High access_control vulnerability in 1inch Pool contract,7.2,0.6422255912136678,audited
sc_4517,dos_gas_limit,Medium,PancakeSwap,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32938.24,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in PancakeSwap Farming contract,6.6,0.7833617908957229,audited
sc_4518,reentrancy,Critical,Aave,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",461379.36,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Staking contract,9.3,0.5982852236635681,unaudited
sc_4519,short_address,Medium,Liquity,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",17775.96,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Liquity Pool contract,4.5,0.9684672695000147,unaudited
sc_4520,random_weakness,High,Alpha Homora,Router,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",97740.55,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Alpha Homora Router contract,8.0,0.6680610526224174,unaudited
sc_4521,uninitialized_storage,High,PancakeSwap,Lending,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",41285.06,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in PancakeSwap Lending contract,7.4,0.9914673287964866,audited
sc_4522,access_control,High,1inch,Bridge,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",41716.3,13,0.26,0.8,2,0,1,2,High access_control vulnerability in 1inch Bridge contract,8.2,0.5828486168831291,audited
sc_4523,unchecked_call,Medium,Balancer,Pool,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",47858.52,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer Pool contract,4.2,0.9470758159219594,unaudited
sc_4524,access_control,High,MakerDAO,Timelock,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",368746.11,13,0.26,0.8,2,0,1,1,High access_control vulnerability in MakerDAO Timelock contract,7.8,0.14974275445357704,audited
sc_4525,front_running,Medium,Alpha Homora,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35358.58,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Alpha Homora Vault contract,5.9,0.8156060885650542,audited
sc_4526,short_address,Medium,PancakeSwap,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39066.89,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in PancakeSwap ERC721 contract,5.3,0.1797513264592937,audited
sc_4527,front_running,Medium,Synthetix,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",79975.38,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Synthetix Router contract,4.1,0.16205631747723367,unaudited
sc_4528,delegatecall_injection,Critical,Convex,Factory,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",40274.82,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex Factory contract,9.1,0.44701628955952466,unaudited
sc_4529,uninitialized_storage,High,Uniswap,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",51699.22,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Uniswap Lending contract,8.3,0.14821240813078598,unaudited
sc_4530,reentrancy,Critical,SushiSwap,Staking,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",144427.91,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in SushiSwap Staking contract,9.8,0.6876279777483243,audited
sc_4531,integer_overflow,High,Rari,Lending,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",60610.09,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Rari Lending contract,8.5,0.11097897041338893,audited
sc_4532,front_running,Medium,Frax,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49730.41,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax Bridge contract,5.2,0.3467952345716634,unaudited
sc_4533,short_address,Medium,Euler,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20196.69,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Euler Farming contract,4.8,0.797161908856788,audited
sc_4534,delegatecall_injection,Critical,Liquity,DEX,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",79700.19,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity DEX contract,9.5,0.39132933107736645,audited
sc_4535,reentrancy,Critical,1inch,Vault,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",14175.0,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch Vault contract,9.1,0.8412965039117415,audited
sc_4536,uninitialized_storage,High,Uniswap,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",186902.51,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Uniswap Timelock contract,8.2,0.20308772403285366,audited
sc_4537,integer_overflow,High,Balancer,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",32485.14,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Balancer Router contract,8.4,0.11718494869944207,unaudited
sc_4538,random_weakness,High,Uniswap,AMM,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",227537.27,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Uniswap AMM contract,7.7,0.8657186800907721,audited
sc_4539,access_control,High,Synthetix,Farming,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",177465.25,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Synthetix Farming contract,7.4,0.3804006402814044,unaudited
sc_4540,front_running,Medium,Curve,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",141096.04,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Curve Strategy contract,5.2,0.9128476397044037,audited
sc_4541,reentrancy,Critical,Euler,AMM,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",82519.67,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Euler AMM contract,9.3,0.8589734633112506,audited
sc_4542,short_address,Medium,dYdX,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24921.34,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in dYdX Factory contract,4.1,0.5657242727810883,audited
sc_4543,unchecked_call,Medium,MakerDAO,Bridge,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",50468.69,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in MakerDAO Bridge contract,6.6,0.41339159800122216,audited
sc_4544,timestamp_dependence,Medium,Uniswap,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",107495.34,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Uniswap ERC20 contract,6.0,0.2503152680864721,unaudited
sc_4545,unchecked_call,Medium,Liquity,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",39057.85,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity Pool contract,6.1,0.9054993497070571,audited
sc_4546,reentrancy,Critical,SushiSwap,Vault,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",167685.14,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in SushiSwap Vault contract,9.1,0.16811702630926656,audited
sc_4547,front_running,Medium,Rari,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34842.8,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Rari ERC721 contract,4.8,0.8808497744181407,audited
sc_4548,front_running,Medium,1inch,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32413.22,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch Governor contract,6.5,0.5036369914999969,audited
sc_4549,delegatecall_injection,Critical,Curve,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",73028.65,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Curve DEX contract,9.7,0.13655392956840673,audited
sc_4550,short_address,Medium,Aave,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",140106.72,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Aave ERC1155 contract,4.9,0.8805433207125254,unaudited
sc_4551,short_address,Medium,Euler,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22894.7,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Euler ERC1155 contract,6.7,0.12806875540269821,audited
sc_4552,uninitialized_storage,High,dYdX,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",87817.09,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in dYdX Timelock contract,8.3,0.7118159091525524,audited
sc_4553,dos_gas_limit,Medium,Aave,AMM,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",60470.98,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Aave AMM contract,5.6,0.9903419393990001,unaudited
sc_4554,random_weakness,High,Balancer,AMM,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",65197.84,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer AMM contract,8.6,0.12288922483943215,audited
sc_4555,front_running,Medium,1inch,AMM,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",61111.98,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch AMM contract,5.4,0.2783686255539538,audited
sc_4556,short_address,Medium,Liquity,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",61509.9,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity Oracle contract,4.6,0.6863099330261392,audited
sc_4557,access_control,High,Curve,Proxy,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",98636.27,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Curve Proxy contract,7.9,0.20969966608316098,unaudited
sc_4558,integer_overflow,High,Rari,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",67606.01,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Rari Factory contract,8.0,0.8976655716155646,audited
sc_4559,timestamp_dependence,Medium,Liquity,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",16460.53,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Liquity Farming contract,5.3,0.5665238356968317,unaudited
sc_4560,unchecked_call,Medium,Aave,Farming,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",75932.24,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave Farming contract,6.7,0.7958782951750494,audited
sc_4561,dos_gas_limit,Medium,dYdX,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",18689.83,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in dYdX Proxy contract,4.7,0.22550345077488518,audited
sc_4562,front_running,Medium,Aave,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",319066.6,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Aave ERC1155 contract,5.6,0.2113996880193143,unaudited
sc_4563,dos_gas_limit,Medium,Yearn,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",143948.99,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn Router contract,6.0,0.9927979416103945,audited
sc_4564,integer_overflow,High,Balancer,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",33942.32,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Balancer Staking contract,8.4,0.9125464307878394,audited
sc_4565,dos_gas_limit,Medium,Balancer,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50077.37,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Balancer ERC1155 contract,5.7,0.2549007506952865,audited
sc_4566,front_running,Medium,Balancer,Strategy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54869.16,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer Strategy contract,6.4,0.5065633258445817,unaudited
sc_4567,reentrancy,Critical,1inch,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",38821.75,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in 1inch Bridge contract,9.9,0.7414422442055928,audited
sc_4568,uninitialized_storage,High,Synthetix,DEX,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",186833.49,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix DEX contract,7.3,0.24613604221814872,unaudited
sc_4569,front_running,Medium,Liquity,Governor,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",42294.56,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Liquity Governor contract,5.2,0.7500594807846658,audited
sc_4570,uninitialized_storage,High,Compound,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",412245.22,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Compound ERC20 contract,7.1,0.3706041956297934,audited
sc_4571,delegatecall_injection,Critical,Aave,Staking,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",602382.17,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Aave Staking contract,9.0,0.904792683092831,audited
sc_4572,short_address,Medium,Euler,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31073.49,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Euler Bridge contract,5.6,0.6552265712658062,audited
sc_4573,short_address,Medium,dYdX,Timelock,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16178.25,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in dYdX Timelock contract,4.8,0.47741272978915916,unaudited
sc_4574,delegatecall_injection,Critical,Convex,ERC721,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",113677.49,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex ERC721 contract,9.2,0.7609967482355227,audited
sc_4575,uninitialized_storage,High,Yearn,Oracle,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",30587.99,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Yearn Oracle contract,7.4,0.925070046720723,unaudited
sc_4576,delegatecall_injection,Critical,MakerDAO,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",335362.32,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in MakerDAO ERC20 contract,9.6,0.8692523826913474,audited
sc_4577,delegatecall_injection,Critical,Compound,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",97773.01,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Compound Pool contract,9.2,0.7502637749103992,audited
sc_4578,dos_gas_limit,Medium,Frax,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54075.36,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Frax Staking contract,5.1,0.7331253286543079,audited
sc_4579,tx_origin,Medium,Liquity,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58067.26,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity Router contract,6.6,0.37813466638225945,audited
sc_4580,access_control,High,dYdX,Bridge,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",44090.83,13,0.26,0.8,2,0,1,1,High access_control vulnerability in dYdX Bridge contract,7.6,0.267564176781589,unaudited
sc_4581,uninitialized_storage,High,PancakeSwap,DEX,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",25643.8,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in PancakeSwap DEX contract,7.2,0.5761190349127665,audited
sc_4582,delegatecall_injection,Critical,Balancer,Vault,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",81949.07,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Balancer Vault contract,9.1,0.954671734961734,audited
sc_4583,tx_origin,Medium,Rari,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49696.88,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Rari Vault contract,4.0,0.19137218481900928,audited
sc_4584,delegatecall_injection,Critical,MakerDAO,ERC1155,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",535886.44,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in MakerDAO ERC1155 contract,9.9,0.934621987821996,audited
sc_4585,delegatecall_injection,Critical,dYdX,Lending,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",115318.41,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX Lending contract,9.3,0.6200229623194554,unaudited
sc_4586,delegatecall_injection,Critical,1inch,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",28466.39,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch Oracle contract,9.6,0.8606375541878153,audited
sc_4587,delegatecall_injection,Critical,PancakeSwap,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",66847.24,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in PancakeSwap Lending contract,9.9,0.7731285334622492,unaudited
sc_4588,front_running,Medium,Convex,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",34049.84,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Convex ERC20 contract,6.0,0.4222879279922761,unaudited
sc_4589,front_running,Medium,Compound,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",285765.33,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound Router contract,5.3,0.9617693406545065,audited
sc_4590,timestamp_dependence,Medium,dYdX,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",32293.6,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX Strategy contract,6.0,0.8290245699981775,unaudited
sc_4591,delegatecall_injection,Critical,Rari,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",94596.83,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Rari Pool contract,9.9,0.1319365118229644,audited
sc_4592,delegatecall_injection,Critical,Rari,Governor,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",70206.09,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Rari Governor contract,9.8,0.6991539305268043,unaudited
sc_4593,delegatecall_injection,Critical,Liquity,Proxy,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",68827.7,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Liquity Proxy contract,10.0,0.7919904407890731,audited
sc_4594,dos_gas_limit,Medium,Convex,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13332.47,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Convex Farming contract,6.2,0.764386012799643,unaudited
sc_4595,access_control,High,Rari,ERC1155,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",68191.27,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari ERC1155 contract,8.6,0.3952560069243156,unaudited
sc_4596,integer_overflow,High,Alpha Homora,Bridge,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",28276.59,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora Bridge contract,8.2,0.9045086494712754,audited
sc_4597,dos_gas_limit,Medium,Uniswap,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",220538.16,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Uniswap Pool contract,4.5,0.45164298459691565,unaudited
sc_4598,short_address,Medium,SushiSwap,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",117500.97,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in SushiSwap Proxy contract,5.7,0.5274677541765138,audited
sc_4599,access_control,High,PancakeSwap,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",31890.19,13,0.26,0.8,2,1,1,1,High access_control vulnerability in PancakeSwap AMM contract,8.6,0.6950762384753632,unaudited
sc_4600,integer_overflow,High,PancakeSwap,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",18982.43,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in PancakeSwap DEX contract,7.7,0.3011156053317958,audited
sc_4601,front_running,Medium,Compound,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32689.39,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Compound Staking contract,5.2,0.45686111538649277,audited
sc_4602,tx_origin,Medium,Convex,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37117.62,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex Strategy contract,5.8,0.83858147292265,audited
sc_4603,short_address,Medium,Balancer,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",15076.66,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Balancer Strategy contract,5.9,0.25667209717459083,unaudited
sc_4604,short_address,Medium,Uniswap,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",104065.67,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Uniswap Governor contract,4.2,0.12276403516268353,unaudited
sc_4605,uninitialized_storage,High,Alpha Homora,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",66322.39,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Alpha Homora Vault contract,7.2,0.17056936253369076,audited
sc_4606,front_running,Medium,Liquity,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",61670.21,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Liquity Staking contract,5.5,0.5323086870150644,audited
sc_4607,timestamp_dependence,Medium,1inch,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",6730.68,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in 1inch Factory contract,4.2,0.22592678186607082,audited
sc_4608,integer_overflow,High,Liquity,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",77018.38,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity Factory contract,7.8,0.8962636291820043,audited
sc_4609,reentrancy,Critical,Liquity,ERC721,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",108405.42,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Liquity ERC721 contract,9.4,0.6377123996604231,audited
sc_4610,random_weakness,High,Uniswap,ERC20,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",193623.14,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Uniswap ERC20 contract,8.8,0.30442762609988866,unaudited
sc_4611,timestamp_dependence,Medium,Convex,Proxy,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",17131.03,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Convex Proxy contract,5.4,0.7009717928439628,unaudited
sc_4612,delegatecall_injection,Critical,Euler,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",92393.78,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Euler Strategy contract,9.8,0.10788226865048345,audited
sc_4613,timestamp_dependence,Medium,Compound,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",227933.17,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Compound Farming contract,4.1,0.9811840290955605,audited
sc_4614,delegatecall_injection,Critical,Yearn,Lending,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",249236.43,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Yearn Lending contract,9.5,0.10948594390025665,audited
sc_4615,uninitialized_storage,High,Liquity,Strategy,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",63066.54,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Liquity Strategy contract,7.7,0.13960869997677075,audited
sc_4616,random_weakness,High,Frax,Proxy,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",72299.92,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax Proxy contract,7.0,0.2856943682174726,audited
sc_4617,reentrancy,Critical,Balancer,Proxy,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",55727.08,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Proxy contract,9.9,0.7487451987022438,audited
sc_4618,uninitialized_storage,High,MakerDAO,Bridge,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",66885.81,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO Bridge contract,7.3,0.2822268474969165,audited
sc_4619,integer_overflow,High,PancakeSwap,Timelock,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",27601.44,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in PancakeSwap Timelock contract,8.8,0.18092866391157741,audited
sc_4620,access_control,High,Aave,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",114804.89,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Aave Factory contract,7.9,0.8529936535482341,audited
sc_4621,integer_overflow,High,Uniswap,Pool,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",437543.38,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Uniswap Pool contract,8.3,0.49135521928539283,audited
sc_4622,unchecked_call,Medium,Yearn,Proxy,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",84579.78,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Yearn Proxy contract,6.0,0.6143872052068111,audited
sc_4623,dos_gas_limit,Medium,Compound,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",71378.23,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Compound Strategy contract,6.9,0.1367996638728306,audited
sc_4624,timestamp_dependence,Medium,SushiSwap,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",32968.24,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap Bridge contract,5.7,0.9615740043708502,audited
sc_4625,short_address,Medium,Synthetix,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35070.22,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Synthetix Pool contract,4.2,0.1474848551316858,audited
sc_4626,short_address,Medium,Rari,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13205.78,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Rari Lending contract,6.2,0.1744432213482702,audited
sc_4627,access_control,High,SushiSwap,Staking,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",70153.4,13,0.26,0.8,2,0,1,2,High access_control vulnerability in SushiSwap Staking contract,8.9,0.9518414011784317,audited
sc_4628,timestamp_dependence,Medium,Alpha Homora,ERC1155,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",7867.07,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Alpha Homora ERC1155 contract,6.7,0.9620873169258719,audited
sc_4629,tx_origin,Medium,Aave,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",167029.26,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave Pool contract,6.9,0.17570732012753287,audited
sc_4630,uninitialized_storage,High,Curve,Pool,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",29484.67,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Curve Pool contract,7.9,0.12019784925975804,unaudited
sc_4631,reentrancy,Critical,MakerDAO,Lending,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",471722.79,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO Lending contract,9.7,0.13340849597522064,audited
sc_4632,reentrancy,Critical,Aave,Lending,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",340907.55,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Lending contract,9.5,0.10152272548846349,audited
sc_4633,reentrancy,Critical,Uniswap,Farming,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",85575.98,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Uniswap Farming contract,9.2,0.3600233294705839,audited
sc_4634,random_weakness,High,Uniswap,ERC20,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",315067.51,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Uniswap ERC20 contract,8.6,0.7203587311766436,audited
sc_4635,access_control,High,Alpha Homora,Timelock,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",35837.64,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora Timelock contract,8.4,0.7840665660282014,audited
sc_4636,random_weakness,High,Frax,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",16572.36,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax Proxy contract,8.7,0.21725319980333874,audited
sc_4637,unchecked_call,Medium,Rari,Router,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",54488.82,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari Router contract,4.5,0.7534308940429336,unaudited
sc_4638,front_running,Medium,Balancer,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44474.16,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Balancer ERC20 contract,5.5,0.31806104271647107,audited
sc_4639,unchecked_call,Medium,1inch,Farming,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",29453.0,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Farming contract,5.0,0.20619871041902588,unaudited
sc_4640,unchecked_call,Medium,1inch,Farming,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",45966.07,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch Farming contract,5.7,0.8344799941434818,audited
sc_4641,short_address,Medium,PancakeSwap,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8254.44,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in PancakeSwap DEX contract,5.4,0.27339382612810026,audited
sc_4642,uninitialized_storage,High,Synthetix,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",29667.18,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Synthetix Bridge contract,8.9,0.6649853890090619,audited
sc_4643,delegatecall_injection,Critical,1inch,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",30211.73,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in 1inch Bridge contract,9.2,0.7505188583786334,audited
sc_4644,uninitialized_storage,High,Euler,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",14286.7,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Euler Factory contract,8.8,0.1595383562758319,audited
sc_4645,reentrancy,Critical,Yearn,Lending,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",122042.92,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Yearn Lending contract,9.0,0.4498629819287536,audited
sc_4646,unchecked_call,Medium,Curve,ERC721,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",91698.2,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Curve ERC721 contract,4.9,0.9213398886204341,audited
sc_4647,random_weakness,High,Yearn,AMM,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",122984.9,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn AMM contract,7.5,0.6713181190478276,audited
sc_4648,unchecked_call,Medium,Synthetix,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",134950.67,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Synthetix Proxy contract,5.9,0.36789318701189166,unaudited
sc_4649,tx_origin,Medium,Alpha Homora,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",9501.13,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Alpha Homora Proxy contract,4.0,0.6509397006123432,audited
sc_4650,unchecked_call,Medium,Alpha Homora,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",48944.93,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Alpha Homora Bridge contract,6.6,0.4905536071101896,audited
sc_4651,timestamp_dependence,Medium,SushiSwap,ERC20,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",109224.0,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in SushiSwap ERC20 contract,6.6,0.8999440903883378,unaudited
sc_4652,short_address,Medium,Balancer,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",65825.18,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Balancer Governor contract,6.6,0.618960784332165,audited
sc_4653,integer_overflow,High,Convex,Vault,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",66706.75,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Convex Vault contract,8.5,0.7921319876125864,audited
sc_4654,access_control,High,Rari,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",22714.14,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari AMM contract,7.3,0.40230561546589405,unaudited
sc_4655,access_control,High,Euler,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",9524.25,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Euler Staking contract,8.1,0.9942278989874538,audited
sc_4656,integer_overflow,High,Uniswap,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",436990.24,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Uniswap Governor contract,8.5,0.688802738138488,audited
sc_4657,uninitialized_storage,High,PancakeSwap,AMM,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",28011.49,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in PancakeSwap AMM contract,7.3,0.96055054309845,unaudited
sc_4658,random_weakness,High,1inch,Factory,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",46447.18,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in 1inch Factory contract,8.0,0.7291629268400011,unaudited
sc_4659,random_weakness,High,Frax,DEX,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",57631.9,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Frax DEX contract,7.6,0.7238647309232314,audited
sc_4660,short_address,Medium,Rari,Proxy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48270.21,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Rari Proxy contract,5.0,0.48387888900234055,audited
sc_4661,tx_origin,Medium,Convex,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44634.51,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Convex Router contract,4.8,0.6386785647909458,audited
sc_4662,random_weakness,High,Yearn,Vault,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",139453.43,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn Vault contract,8.6,0.8952815053856292,unaudited
sc_4663,dos_gas_limit,Medium,Aave,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",207969.66,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Aave Oracle contract,6.0,0.6541426510580417,unaudited
sc_4664,front_running,Medium,Convex,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21537.71,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Convex Bridge contract,6.1,0.583309030877883,audited
sc_4665,timestamp_dependence,Medium,MakerDAO,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",191343.23,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in MakerDAO ERC721 contract,6.3,0.8738936285703537,audited
sc_4666,random_weakness,High,Rari,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",83290.89,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Rari Proxy contract,8.4,0.9682865739704534,unaudited
sc_4667,dos_gas_limit,Medium,dYdX,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",62013.99,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in dYdX ERC20 contract,5.2,0.5482758682605777,audited
sc_4668,front_running,Medium,Compound,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",342224.91,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound Timelock contract,4.6,0.413922433470439,audited
sc_4669,reentrancy,Critical,SushiSwap,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",152560.58,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in SushiSwap Router contract,9.3,0.6720395303347891,audited
sc_4670,tx_origin,Medium,dYdX,Governor,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",69112.04,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in dYdX Governor contract,5.5,0.34582336109533296,audited
sc_4671,delegatecall_injection,Critical,Yearn,Lending,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",108394.54,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Yearn Lending contract,9.1,0.15712702342435353,unaudited
sc_4672,delegatecall_injection,Critical,Synthetix,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",83541.73,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Synthetix ERC1155 contract,10.0,0.8859098376323873,audited
sc_4673,random_weakness,High,Compound,Timelock,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",175605.15,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Timelock contract,8.7,0.13019722607334552,audited
sc_4674,short_address,Medium,Curve,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36148.8,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve Oracle contract,6.6,0.3100125460464771,audited
sc_4675,integer_overflow,High,SushiSwap,Router,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",60912.58,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap Router contract,7.4,0.7085564915454625,audited
sc_4676,integer_overflow,High,Uniswap,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",63410.4,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Uniswap Router contract,7.4,0.3258122968640303,audited
sc_4677,unchecked_call,Medium,MakerDAO,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",276759.71,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in MakerDAO Farming contract,4.7,0.8215038643488086,audited
sc_4678,timestamp_dependence,Medium,SushiSwap,Pool,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",90144.56,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap Pool contract,6.9,0.43388964867409585,unaudited
sc_4679,dos_gas_limit,Medium,Liquity,Factory,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47762.45,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Liquity Factory contract,4.5,0.765737534514192,audited
sc_4680,reentrancy,Critical,Uniswap,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",265653.0,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Uniswap DEX contract,9.6,0.8660889171280232,audited
sc_4681,uninitialized_storage,High,Aave,Lending,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",340851.04,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave Lending contract,7.8,0.8586352750723066,audited
sc_4682,integer_overflow,High,Compound,AMM,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",458721.8,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Compound AMM contract,7.1,0.5386062480708403,audited
sc_4683,delegatecall_injection,Critical,Compound,Proxy,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",326918.31,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Compound Proxy contract,9.3,0.2989629423528788,audited
sc_4684,delegatecall_injection,Critical,Synthetix,Oracle,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",240056.91,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Synthetix Oracle contract,9.6,0.35076136528745827,audited
sc_4685,integer_overflow,High,Aave,Staking,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",236883.25,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Aave Staking contract,7.2,0.4941724938670101,unaudited
sc_4686,unchecked_call,Medium,Alpha Homora,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",29551.26,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Alpha Homora Lending contract,5.8,0.5396318280022723,unaudited
sc_4687,uninitialized_storage,High,Rari,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",52186.08,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Rari DEX contract,7.9,0.7899562649902666,audited
sc_4688,uninitialized_storage,High,Frax,Pool,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",46466.01,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Frax Pool contract,7.4,0.2818891570187297,audited
sc_4689,tx_origin,Medium,PancakeSwap,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",16541.54,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in PancakeSwap ERC1155 contract,4.1,0.32390084460238494,unaudited
sc_4690,short_address,Medium,Yearn,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",150074.18,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn DEX contract,4.0,0.5888532423795638,unaudited
sc_4691,timestamp_dependence,Medium,Balancer,Vault,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",12679.69,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Balancer Vault contract,5.7,0.8741621258640797,audited
sc_4692,short_address,Medium,Yearn,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",90008.28,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn Timelock contract,5.2,0.2100990910437459,unaudited
sc_4693,integer_overflow,High,SushiSwap,Pool,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",95941.98,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap Pool contract,7.4,0.19146299840647427,audited
sc_4694,access_control,High,1inch,Bridge,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",65397.26,13,0.26,0.8,2,0,1,1,High access_control vulnerability in 1inch Bridge contract,7.8,0.9518674016275923,audited
sc_4695,unchecked_call,Medium,Liquity,Router,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",32380.12,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity Router contract,4.2,0.337922588807608,audited
sc_4696,tx_origin,Medium,Aave,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",107273.72,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Aave Bridge contract,4.8,0.7364714896503181,audited
sc_4697,reentrancy,Critical,Curve,Vault,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",138631.69,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Curve Vault contract,9.7,0.9085478098444927,audited
sc_4698,unchecked_call,Medium,Compound,Bridge,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",322544.53,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Compound Bridge contract,5.0,0.15793663685496642,audited
sc_4699,front_running,Medium,Balancer,Oracle,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32344.15,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Balancer Oracle contract,5.4,0.6106742231779891,audited
sc_4700,integer_overflow,High,Rari,ERC20,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",34441.15,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari ERC20 contract,8.6,0.942644839410207,audited
sc_4701,random_weakness,High,Frax,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",9705.7,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax AMM contract,7.7,0.8276225038796594,unaudited
sc_4702,uninitialized_storage,High,MakerDAO,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",335751.39,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO DEX contract,7.1,0.5752651913773179,audited
sc_4703,integer_overflow,High,Yearn,Factory,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",62391.97,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Yearn Factory contract,7.4,0.641477034492541,audited
sc_4704,uninitialized_storage,High,Liquity,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",85589.16,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Liquity Timelock contract,7.2,0.11421764140644378,unaudited
sc_4705,reentrancy,Critical,Curve,DEX,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",102018.31,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Curve DEX contract,9.3,0.33791842330849575,audited
sc_4706,front_running,Medium,Euler,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",65201.61,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Euler Router contract,4.6,0.30967139182345815,audited
sc_4707,dos_gas_limit,Medium,PancakeSwap,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",43528.45,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap ERC1155 contract,6.0,0.4438183817642146,audited
sc_4708,timestamp_dependence,Medium,Compound,ERC721,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",174772.94,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Compound ERC721 contract,4.3,0.9573859828341604,audited
sc_4709,integer_overflow,High,Aave,Vault,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",310701.16,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Aave Vault contract,8.3,0.9230774530118799,audited
sc_4710,access_control,High,MakerDAO,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",408472.98,13,0.26,0.8,2,0,1,1,High access_control vulnerability in MakerDAO DEX contract,8.3,0.4820472500367917,audited
sc_4711,timestamp_dependence,Medium,MakerDAO,Strategy,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",260680.51,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in MakerDAO Strategy contract,4.6,0.5984279735584832,unaudited
sc_4712,tx_origin,Medium,Liquity,ERC721,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31999.55,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity ERC721 contract,4.0,0.8605226904543277,unaudited
sc_4713,access_control,High,Yearn,Governor,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",51937.8,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Yearn Governor contract,7.4,0.830352090060325,audited
sc_4714,tx_origin,Medium,1inch,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32389.72,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch AMM contract,4.5,0.3833870258547334,unaudited
sc_4715,delegatecall_injection,Critical,PancakeSwap,AMM,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",91917.86,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in PancakeSwap AMM contract,9.2,0.7211781230589148,audited
sc_4716,reentrancy,Critical,Rari,DEX,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",105911.57,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Rari DEX contract,9.6,0.4257675132253792,audited
sc_4717,integer_overflow,High,Alpha Homora,Oracle,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",87288.73,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Alpha Homora Oracle contract,7.2,0.7436556989663431,audited
sc_4718,delegatecall_injection,Critical,Convex,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",35337.09,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Convex Pool contract,9.8,0.31864892303705467,audited
sc_4719,unchecked_call,Medium,Alpha Homora,Staking,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",50960.49,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Alpha Homora Staking contract,5.0,0.9576435474570621,audited
sc_4720,tx_origin,Medium,Synthetix,Staking,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",96166.92,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Synthetix Staking contract,4.7,0.22979124912718657,audited
sc_4721,front_running,Medium,Frax,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28037.98,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Frax Oracle contract,4.7,0.3293393498316777,audited
sc_4722,access_control,High,Rari,Pool,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",19796.36,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Rari Pool contract,8.6,0.1009433238572606,audited
sc_4723,integer_overflow,High,MakerDAO,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",131708.19,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in MakerDAO Router contract,7.4,0.6803064286400329,unaudited
sc_4724,uninitialized_storage,High,Rari,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",82818.84,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Rari Router contract,7.7,0.7313241420750399,unaudited
sc_4725,front_running,Medium,Euler,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45937.55,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Euler AMM contract,6.1,0.3718168197957449,unaudited
sc_4726,integer_overflow,High,Liquity,ERC721,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",57536.94,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Liquity ERC721 contract,8.2,0.4614280223561721,audited
sc_4727,access_control,High,dYdX,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",44784.68,13,0.26,0.8,2,1,1,1,High access_control vulnerability in dYdX DEX contract,7.2,0.4274345346647336,audited
sc_4728,random_weakness,High,1inch,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",12723.87,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in 1inch AMM contract,7.3,0.7945244312748878,audited
sc_4729,short_address,Medium,Yearn,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",82995.03,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Yearn Vault contract,6.7,0.9488626654978798,audited
sc_4730,random_weakness,High,SushiSwap,Timelock,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",161830.22,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in SushiSwap Timelock contract,8.5,0.26831980739838746,audited
sc_4731,reentrancy,Critical,Liquity,Router,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",72133.85,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Liquity Router contract,9.7,0.36015816380440835,audited
sc_4732,reentrancy,Critical,Synthetix,Proxy,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",64630.11,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Synthetix Proxy contract,9.8,0.23322930698449085,audited
sc_4733,random_weakness,High,Liquity,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",52936.66,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity Farming contract,8.0,0.9750349188450675,audited
sc_4734,uninitialized_storage,High,Balancer,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",22529.62,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Balancer ERC721 contract,8.7,0.4929894349334175,unaudited
sc_4735,reentrancy,Critical,Aave,Timelock,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",246237.16,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Aave Timelock contract,9.1,0.8085796210861116,unaudited
sc_4736,reentrancy,Critical,PancakeSwap,Router,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",25458.49,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap Router contract,9.9,0.7092039974142678,audited
sc_4737,integer_overflow,High,Convex,ERC20,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",21909.04,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Convex ERC20 contract,7.8,0.5478963713154086,unaudited
sc_4738,random_weakness,High,Frax,Proxy,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",11256.86,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax Proxy contract,8.3,0.4419981226319687,unaudited
sc_4739,front_running,Medium,Convex,Vault,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24169.49,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Convex Vault contract,6.5,0.14773589701163664,audited
sc_4740,tx_origin,Medium,Liquity,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",50620.21,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity Proxy contract,6.6,0.573689894752532,audited
sc_4741,timestamp_dependence,Medium,Aave,Lending,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",66966.79,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave Lending contract,4.8,0.1757224169807553,audited
sc_4742,timestamp_dependence,Medium,Balancer,Staking,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",54116.28,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Balancer Staking contract,4.9,0.503664657337132,audited
sc_4743,dos_gas_limit,Medium,MakerDAO,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",77049.7,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO Strategy contract,5.6,0.9933794904301825,audited
sc_4744,reentrancy,Critical,MakerDAO,AMM,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",75608.58,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in MakerDAO AMM contract,9.3,0.12856161305573685,audited
sc_4745,unchecked_call,Medium,1inch,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",22327.93,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch ERC20 contract,5.1,0.3348070278611132,unaudited
sc_4746,random_weakness,High,Convex,Strategy,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",59707.4,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Convex Strategy contract,7.8,0.12741874476077283,audited
sc_4747,uninitialized_storage,High,Frax,Router,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",72635.35,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax Router contract,7.6,0.6429801078396888,audited
sc_4748,unchecked_call,Medium,Alpha Homora,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",11226.6,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Alpha Homora Strategy contract,5.9,0.32746052439527396,audited
sc_4749,tx_origin,Medium,Rari,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",13630.51,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Rari Factory contract,6.4,0.2766568969386479,audited
sc_4750,random_weakness,High,Frax,Timelock,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",50823.47,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax Timelock contract,7.8,0.9809149191376232,audited
sc_4751,integer_overflow,High,dYdX,Router,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",33254.17,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in dYdX Router contract,7.8,0.234467450346532,audited
sc_4752,uninitialized_storage,High,MakerDAO,Router,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",417351.87,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in MakerDAO Router contract,7.3,0.6396375503839167,audited
sc_4753,unchecked_call,Medium,Convex,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",48102.45,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Convex Pool contract,4.4,0.30714302997798515,audited
sc_4754,short_address,Medium,Aave,DEX,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",107612.49,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Aave DEX contract,4.4,0.16030791055882915,unaudited
sc_4755,dos_gas_limit,Medium,Liquity,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37610.43,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Liquity Proxy contract,5.1,0.7582700021891644,audited
sc_4756,dos_gas_limit,Medium,Synthetix,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",62488.71,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Synthetix Lending contract,4.5,0.5131338581083489,unaudited
sc_4757,access_control,High,Balancer,Governor,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",59451.58,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Balancer Governor contract,7.5,0.823950872419311,unaudited
sc_4758,uninitialized_storage,High,Euler,DEX,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",10192.07,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Euler DEX contract,7.5,0.2791000312443281,unaudited
sc_4759,unchecked_call,Medium,MakerDAO,Vault,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",157314.83,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in MakerDAO Vault contract,6.4,0.6047756634679684,unaudited
sc_4760,delegatecall_injection,Critical,1inch,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",10270.23,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in 1inch Farming contract,9.6,0.4885186102202762,unaudited
sc_4761,integer_overflow,High,Aave,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",286586.89,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Aave Bridge contract,7.3,0.5368134266483167,audited
sc_4762,reentrancy,Critical,Convex,Proxy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",17793.7,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Convex Proxy contract,9.9,0.3007437654494266,audited
sc_4763,front_running,Medium,Compound,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",100890.77,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Compound Router contract,6.4,0.5883696957634436,audited
sc_4764,tx_origin,Medium,MakerDAO,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28887.45,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO AMM contract,5.4,0.44605549271594924,audited
sc_4765,integer_overflow,High,Uniswap,Farming,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",327674.25,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Uniswap Farming contract,8.1,0.2772929370635989,unaudited
sc_4766,short_address,Medium,1inch,Farming,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12338.21,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in 1inch Farming contract,6.6,0.2281681094539941,audited
sc_4767,integer_overflow,High,Convex,Proxy,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",60182.01,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Convex Proxy contract,7.8,0.3467515175993121,audited
sc_4768,uninitialized_storage,High,Compound,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",363583.91,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Compound ERC20 contract,8.0,0.9900861518616328,audited
sc_4769,short_address,Medium,Synthetix,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45775.6,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Synthetix Lending contract,4.6,0.9077151259303805,unaudited
sc_4770,delegatecall_injection,Critical,Balancer,AMM,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",15612.08,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Balancer AMM contract,9.5,0.9926563931361139,unaudited
sc_4771,tx_origin,Medium,Liquity,Vault,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14981.73,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Liquity Vault contract,6.4,0.3111074474859988,audited
sc_4772,tx_origin,Medium,Compound,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40347.07,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Compound Timelock contract,4.2,0.7492492450820627,audited
sc_4773,reentrancy,Critical,Rari,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",11112.58,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Rari Timelock contract,9.4,0.49555824009849114,audited
sc_4774,delegatecall_injection,Critical,dYdX,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",68787.61,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX Timelock contract,9.2,0.3675782863630508,unaudited
sc_4775,dos_gas_limit,Medium,Uniswap,ERC1155,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",155276.74,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Uniswap ERC1155 contract,4.5,0.9130687910385505,audited
sc_4776,uninitialized_storage,High,Frax,Factory,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",31712.4,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Frax Factory contract,7.8,0.21081013046343988,unaudited
sc_4777,timestamp_dependence,Medium,Yearn,Proxy,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",129488.81,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn Proxy contract,6.0,0.13664871668812795,audited
sc_4778,tx_origin,Medium,Liquity,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",57062.34,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Liquity AMM contract,5.6,0.11888447891570302,audited
sc_4779,access_control,High,PancakeSwap,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",87910.53,13,0.26,0.8,2,0,1,1,High access_control vulnerability in PancakeSwap Staking contract,7.8,0.8369117996583373,audited
sc_4780,access_control,High,Yearn,Bridge,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",239816.91,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Yearn Bridge contract,8.2,0.34913581924296744,audited
sc_4781,unchecked_call,Medium,Convex,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",32782.86,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Convex Router contract,6.8,0.8820375787434247,unaudited
sc_4782,delegatecall_injection,Critical,Aave,Strategy,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",296148.06,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Aave Strategy contract,9.8,0.45248402135528143,audited
sc_4783,uninitialized_storage,High,Aave,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",288827.39,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave Governor contract,8.2,0.8384945288025386,unaudited
sc_4784,reentrancy,Critical,Compound,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",427577.54,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Compound Vault contract,9.4,0.591606729995807,audited
sc_4785,reentrancy,Critical,Curve,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",70806.06,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Curve ERC721 contract,9.1,0.48347223098993886,audited
sc_4786,random_weakness,High,PancakeSwap,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",31516.59,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in PancakeSwap DEX contract,8.2,0.5744829713869707,audited
sc_4787,front_running,Medium,Liquity,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46586.85,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Liquity Vault contract,5.5,0.41945654181989733,audited
sc_4788,tx_origin,Medium,Yearn,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",77710.91,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Yearn Router contract,6.1,0.373269473801212,audited
sc_4789,tx_origin,Medium,SushiSwap,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",112174.8,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in SushiSwap ERC1155 contract,5.3,0.14552893665630773,audited
sc_4790,short_address,Medium,Yearn,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",71966.89,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn Router contract,5.3,0.8406962023172657,audited
sc_4791,dos_gas_limit,Medium,MakerDAO,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",165280.25,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO ERC1155 contract,4.7,0.3334290783934873,unaudited
sc_4792,short_address,Medium,SushiSwap,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",88462.39,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in SushiSwap Staking contract,6.3,0.1539858932917976,audited
sc_4793,tx_origin,Medium,SushiSwap,Bridge,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",177144.69,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in SushiSwap Bridge contract,4.8,0.4117188699380112,audited
sc_4794,timestamp_dependence,Medium,Yearn,ERC1155,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",100936.13,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Yearn ERC1155 contract,6.9,0.8114385347211897,unaudited
sc_4795,uninitialized_storage,High,Yearn,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",110631.83,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Yearn Strategy contract,8.7,0.13360149472718133,audited
sc_4796,front_running,Medium,Uniswap,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",212268.41,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Uniswap Pool contract,5.0,0.5337263011584643,audited
sc_4797,reentrancy,Critical,Uniswap,Pool,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",349667.18,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Uniswap Pool contract,9.9,0.4560660876032291,audited
sc_4798,reentrancy,Critical,Liquity,Staking,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",27217.52,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Liquity Staking contract,9.1,0.5959759299099562,audited
sc_4799,timestamp_dependence,Medium,Synthetix,ERC721,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",181333.26,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Synthetix ERC721 contract,5.6,0.9416504813821149,audited
sc_4800,reentrancy,Critical,MakerDAO,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",324208.73,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO Staking contract,9.1,0.4319695661025468,unaudited
sc_4801,random_weakness,High,Uniswap,AMM,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",92739.2,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Uniswap AMM contract,7.3,0.49242412965009275,audited
sc_4802,front_running,Medium,Frax,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21092.76,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax ERC1155 contract,4.7,0.3891687037150643,unaudited
sc_4803,short_address,Medium,Aave,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",126977.16,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Aave ERC721 contract,6.3,0.6675736062411664,unaudited
sc_4804,timestamp_dependence,Medium,Alpha Homora,Pool,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",52370.29,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Alpha Homora Pool contract,5.4,0.6597387897934566,audited
sc_4805,reentrancy,Critical,Yearn,Staking,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",172006.16,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Yearn Staking contract,9.6,0.999487257072313,audited
sc_4806,access_control,High,Alpha Homora,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",44277.93,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Alpha Homora ERC20 contract,8.7,0.7653651277733612,audited
sc_4807,random_weakness,High,Liquity,Timelock,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",45100.57,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Liquity Timelock contract,8.5,0.5753872989543081,unaudited
sc_4808,delegatecall_injection,Critical,dYdX,Oracle,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",93363.25,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX Oracle contract,9.7,0.7557450185462942,audited
sc_4809,dos_gas_limit,Medium,Euler,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",27166.04,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Euler Governor contract,4.1,0.6042492099796548,unaudited
sc_4810,dos_gas_limit,Medium,SushiSwap,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",23034.34,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in SushiSwap Timelock contract,6.9,0.3940475765518401,audited
sc_4811,front_running,Medium,Balancer,ERC20,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54576.2,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Balancer ERC20 contract,6.0,0.7837482597748717,audited
sc_4812,uninitialized_storage,High,Alpha Homora,Bridge,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",32950.98,14,0.28,0.8,1,1,0,0,High uninitialized_storage vulnerability in Alpha Homora Bridge contract,7.2,0.21064311979614914,audited
sc_4813,short_address,Medium,Alpha Homora,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",24683.74,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Alpha Homora Pool contract,6.3,0.19442806308982896,audited
sc_4814,short_address,Medium,Aave,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",49126.81,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Aave Pool contract,6.5,0.21696951410361037,audited
sc_4815,integer_overflow,High,SushiSwap,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",84943.4,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in SushiSwap Router contract,7.5,0.8860994070801193,unaudited
sc_4816,dos_gas_limit,Medium,Euler,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20906.71,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Euler Bridge contract,6.4,0.5249995080782165,audited
sc_4817,tx_origin,Medium,PancakeSwap,Strategy,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56134.46,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in PancakeSwap Strategy contract,6.7,0.10616257350400489,audited
sc_4818,random_weakness,High,Euler,Vault,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",24503.75,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Euler Vault contract,7.3,0.2981409036862115,audited
sc_4819,random_weakness,High,Frax,Governor,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",44796.18,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Frax Governor contract,8.4,0.31926389846861514,audited
sc_4820,random_weakness,High,Balancer,Staking,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",24311.88,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Staking contract,8.8,0.3419772061263491,unaudited
sc_4821,access_control,High,dYdX,Router,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",75794.65,13,0.26,0.8,2,0,1,1,High access_control vulnerability in dYdX Router contract,8.0,0.8979303120205924,unaudited
sc_4822,delegatecall_injection,Critical,MakerDAO,DEX,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",413110.44,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in MakerDAO DEX contract,9.9,0.6776688376313705,audited
sc_4823,access_control,High,Rari,Farming,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",49682.25,13,0.26,0.8,2,1,1,1,High access_control vulnerability in Rari Farming contract,8.0,0.5792478941187846,unaudited
sc_4824,dos_gas_limit,Medium,MakerDAO,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",132992.98,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in MakerDAO Lending contract,5.3,0.7513276080939233,audited
sc_4825,random_weakness,High,PancakeSwap,Lending,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",80997.35,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in PancakeSwap Lending contract,8.2,0.5014567928367548,audited
sc_4826,access_control,High,Euler,ERC721,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",29685.58,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Euler ERC721 contract,7.8,0.12493318040047624,audited
sc_4827,timestamp_dependence,Medium,Convex,Timelock,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",14062.84,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Convex Timelock contract,4.8,0.19116680361238125,unaudited
sc_4828,short_address,Medium,Compound,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",242357.34,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in Compound ERC721 contract,5.3,0.5621127102858562,audited
sc_4829,front_running,Medium,Rari,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",62542.44,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Rari Staking contract,6.5,0.3918521814686563,audited
sc_4830,random_weakness,High,Balancer,Governor,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",42379.3,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Governor contract,8.8,0.9031901924737252,audited
sc_4831,short_address,Medium,Liquity,Timelock,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48214.08,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Liquity Timelock contract,6.0,0.4669902683576237,unaudited
sc_4832,delegatecall_injection,Critical,SushiSwap,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",121743.56,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in SushiSwap Strategy contract,9.1,0.37480008392013864,audited
sc_4833,reentrancy,Critical,dYdX,Factory,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",98092.62,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in dYdX Factory contract,9.1,0.4545966166048028,audited
sc_4834,unchecked_call,Medium,Rari,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",12832.31,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Rari Timelock contract,5.3,0.7573544360210386,audited
sc_4835,integer_overflow,High,Liquity,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",39926.37,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Liquity Strategy contract,7.2,0.58694797891046,audited
sc_4836,tx_origin,Medium,1inch,Governor,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",6896.92,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in 1inch Governor contract,6.6,0.9523895942724567,unaudited
sc_4837,integer_overflow,High,Liquity,Lending,"address public immutable FACTORY;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",91384.43,12,0.24,0.8,1,0,0,1,High integer_overflow vulnerability in Liquity Lending contract,7.5,0.9527101666189776,audited
sc_4838,timestamp_dependence,Medium,MakerDAO,Oracle,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",212614.81,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in MakerDAO Oracle contract,5.6,0.6263916266428963,unaudited
sc_4839,integer_overflow,High,Rari,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",14493.95,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Rari ERC721 contract,8.6,0.373164091404125,audited
sc_4840,random_weakness,High,Yearn,ERC20,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",37161.69,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Yearn ERC20 contract,7.5,0.36267254946328153,audited
sc_4841,short_address,Medium,SushiSwap,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",113640.33,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in SushiSwap Timelock contract,4.3,0.33405939812531615,audited
sc_4842,tx_origin,Medium,Uniswap,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",122071.45,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Uniswap Governor contract,4.5,0.37737127375880286,audited
sc_4843,unchecked_call,Medium,Rari,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",49812.32,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Rari Factory contract,5.4,0.8500447667871923,audited
sc_4844,front_running,Medium,Alpha Homora,Oracle,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",27489.59,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Alpha Homora Oracle contract,6.7,0.7808392368490024,audited
sc_4845,short_address,Medium,Frax,Farming,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",68621.57,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Frax Farming contract,6.3,0.571323987955863,unaudited
sc_4846,integer_overflow,High,1inch,Router,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",35827.42,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in 1inch Router contract,8.2,0.4638967938544897,audited
sc_4847,reentrancy,Critical,Convex,Oracle,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",54886.49,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Convex Oracle contract,9.3,0.25909472342332707,audited
sc_4848,random_weakness,High,Compound,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",254451.13,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Compound Router contract,8.7,0.5930334103620429,unaudited
sc_4849,front_running,Medium,Frax,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28993.99,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax DEX contract,6.1,0.9184819718295221,audited
sc_4850,access_control,High,MakerDAO,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",85137.54,13,0.26,0.8,2,1,1,1,High access_control vulnerability in MakerDAO Router contract,7.7,0.7560904482316568,audited
sc_4851,tx_origin,Medium,SushiSwap,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",31850.19,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in SushiSwap Pool contract,6.2,0.8828682380745508,audited
sc_4852,reentrancy,Critical,Aave,ERC20,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",159762.6,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Aave ERC20 contract,10.0,0.20537192757749997,audited
sc_4853,unchecked_call,Medium,Balancer,ERC1155,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",42644.23,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Balancer ERC1155 contract,5.5,0.27119796934430107,audited
sc_4854,short_address,Medium,Aave,DEX,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",69371.82,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Aave DEX contract,6.8,0.6708976976719228,audited
sc_4855,tx_origin,Medium,PancakeSwap,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",46169.85,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in PancakeSwap ERC20 contract,6.1,0.3011726172538865,audited
sc_4856,reentrancy,Critical,Balancer,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",94629.0,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Balancer Oracle contract,9.7,0.8071135896396459,audited
sc_4857,tx_origin,Medium,Frax,DEX,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48579.06,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Frax DEX contract,6.3,0.9792004534145639,unaudited
sc_4858,random_weakness,High,dYdX,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",42602.52,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in dYdX ERC20 contract,8.2,0.1652541325666418,unaudited
sc_4859,timestamp_dependence,Medium,SushiSwap,Factory,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",112656.1,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in SushiSwap Factory contract,5.8,0.29705863217525147,unaudited
sc_4860,timestamp_dependence,Medium,dYdX,Pool,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",31172.4,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in dYdX Pool contract,4.9,0.9440649237886684,unaudited
sc_4861,short_address,Medium,Liquity,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",37216.62,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Liquity ERC1155 contract,5.1,0.23551429710436672,audited
sc_4862,timestamp_dependence,Medium,Alpha Homora,Bridge,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",37395.1,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in Alpha Homora Bridge contract,6.1,0.8570466740639014,audited
sc_4863,dos_gas_limit,Medium,Curve,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",62312.05,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in Curve Router contract,5.9,0.15073005200837702,audited
sc_4864,random_weakness,High,Curve,Proxy,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",59081.47,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Curve Proxy contract,8.0,0.4773533803997039,audited
sc_4865,unchecked_call,Medium,Convex,AMM,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",44539.08,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Convex AMM contract,5.8,0.14784616557087693,audited
sc_4866,dos_gas_limit,Medium,1inch,Farming,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48082.07,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in 1inch Farming contract,5.1,0.6998134711206615,unaudited
sc_4867,unchecked_call,Medium,Liquity,Farming,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",19507.16,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity Farming contract,5.3,0.5288578815443509,unaudited
sc_4868,short_address,Medium,Euler,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56492.15,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Euler Strategy contract,4.0,0.8303222579723027,unaudited
sc_4869,unchecked_call,Medium,Frax,Vault,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",28085.59,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Frax Vault contract,6.1,0.5402811293268641,audited
sc_4870,short_address,Medium,Alpha Homora,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",32400.59,12,0.24,0.6,2,0,0,1,Medium short_address vulnerability in Alpha Homora Router contract,5.4,0.8277976378778428,unaudited
sc_4871,integer_overflow,High,Frax,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",18233.88,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Frax Timelock contract,7.9,0.290677001269952,audited
sc_4872,tx_origin,Medium,Euler,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56187.4,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Euler Vault contract,5.4,0.3099761500545889,unaudited
sc_4873,uninitialized_storage,High,Convex,Lending,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",57356.14,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Convex Lending contract,8.1,0.40795146095332124,audited
sc_4874,random_weakness,High,Uniswap,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",291680.9,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Uniswap Strategy contract,7.4,0.3356227396780306,audited
sc_4875,front_running,Medium,Convex,ERC20,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",56738.62,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Convex ERC20 contract,5.6,0.3229805585557313,unaudited
sc_4876,timestamp_dependence,Medium,Uniswap,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",97219.84,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Uniswap Router contract,4.2,0.9224496757587511,unaudited
sc_4877,timestamp_dependence,Medium,PancakeSwap,Pool,"// Additional comment for variation

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",31793.12,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Pool contract,4.4,0.7905341802260043,unaudited
sc_4878,random_weakness,High,Convex,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",33135.9,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Convex Oracle contract,7.8,0.33568883011523487,unaudited
sc_4879,unchecked_call,Medium,Liquity,ERC721,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",49234.33,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Liquity ERC721 contract,4.4,0.4825540788990641,unaudited
sc_4880,uninitialized_storage,High,PancakeSwap,ERC20,"// Additional comment for variation

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",24262.96,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in PancakeSwap ERC20 contract,8.8,0.7957109301287246,audited
sc_4881,reentrancy,Critical,Liquity,ERC721,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",9292.95,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Liquity ERC721 contract,9.9,0.7185495105499627,audited
sc_4882,unchecked_call,Medium,Yearn,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",115726.24,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn Farming contract,6.6,0.5142288900000628,audited
sc_4883,integer_overflow,High,Aave,Lending,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",165290.6,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Aave Lending contract,7.3,0.1990177766842722,audited
sc_4884,reentrancy,Critical,Yearn,Router,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",44158.25,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Yearn Router contract,9.5,0.3178230894868881,audited
sc_4885,dos_gas_limit,Medium,Yearn,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",107134.12,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Yearn Pool contract,6.6,0.830622898577017,unaudited
sc_4886,tx_origin,Medium,Rari,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",59760.03,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in Rari Router contract,5.4,0.13268969041941228,unaudited
sc_4887,reentrancy,Critical,Balancer,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",8800.6,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Balancer Factory contract,9.4,0.7597847856127855,audited
sc_4888,integer_overflow,High,dYdX,ERC20,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",36790.57,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in dYdX ERC20 contract,8.1,0.5568132116399517,audited
sc_4889,timestamp_dependence,Medium,dYdX,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",30554.47,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in dYdX DEX contract,5.7,0.4499097132561368,unaudited
sc_4890,random_weakness,High,MakerDAO,Farming,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",230807.81,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in MakerDAO Farming contract,8.1,0.16001103667971814,audited
sc_4891,short_address,Medium,Curve,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",106667.12,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Curve Governor contract,5.6,0.5774729145606838,audited
sc_4892,dos_gas_limit,Medium,Alpha Homora,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",44124.61,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Factory contract,5.6,0.4145363319659978,audited
sc_4893,uninitialized_storage,High,Uniswap,DEX,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",302164.63,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Uniswap DEX contract,7.4,0.9067110340739876,audited
sc_4894,front_running,Medium,Euler,Proxy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",17864.18,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Euler Proxy contract,6.9,0.46745816254473826,audited
sc_4895,unchecked_call,Medium,1inch,ERC20,"uint256 constant MULTIPLIER = 1000;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",45899.62,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in 1inch ERC20 contract,4.5,0.11454260439906484,audited
sc_4896,front_running,Medium,Rari,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47215.52,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Rari Governor contract,5.0,0.4446565863696712,audited
sc_4897,integer_overflow,High,dYdX,Vault,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",22507.71,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in dYdX Vault contract,8.9,0.9612912662046005,audited
sc_4898,front_running,Medium,MakerDAO,Pool,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",161386.34,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in MakerDAO Pool contract,4.1,0.34203790916591176,unaudited
sc_4899,reentrancy,Critical,1inch,Factory,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",41130.08,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in 1inch Factory contract,9.9,0.9849860378226569,audited
sc_4900,tx_origin,Medium,Synthetix,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",58559.24,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Synthetix Router contract,5.5,0.8080353368048798,audited
sc_4901,delegatecall_injection,Critical,SushiSwap,Vault,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",30760.67,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in SushiSwap Vault contract,9.7,0.15971865737350868,unaudited
sc_4902,random_weakness,High,Euler,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",59391.61,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Euler Factory contract,8.2,0.37495414295034,audited
sc_4903,dos_gas_limit,Medium,Curve,Proxy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",22882.55,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Curve Proxy contract,5.9,0.4504890419159414,audited
sc_4904,integer_overflow,High,Yearn,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",90379.64,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Yearn ERC1155 contract,7.9,0.19651787702846368,audited
sc_4905,front_running,Medium,dYdX,Bridge,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",26426.54,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in dYdX Bridge contract,5.5,0.837278366962762,audited
sc_4906,access_control,High,Convex,ERC20,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",22015.72,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Convex ERC20 contract,8.0,0.6395115480274911,audited
sc_4907,tx_origin,Medium,PancakeSwap,Lending,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21951.39,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in PancakeSwap Lending contract,5.6,0.8675518793854887,unaudited
sc_4908,reentrancy,Critical,Alpha Homora,AMM,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",89427.74,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in Alpha Homora AMM contract,9.0,0.7186455386791657,audited
sc_4909,unchecked_call,Medium,Aave,DEX,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",129892.13,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Aave DEX contract,4.6,0.5932758602980168,audited
sc_4910,short_address,Medium,dYdX,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",35738.57,12,0.24,0.6,2,1,0,0,Medium short_address vulnerability in dYdX Vault contract,4.5,0.6803386161691857,audited
sc_4911,reentrancy,Critical,Frax,ERC721,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",48555.82,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Frax ERC721 contract,9.9,0.22314980957744412,audited
sc_4912,tx_origin,Medium,SushiSwap,Proxy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",91661.75,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in SushiSwap Proxy contract,6.0,0.9913101011059154,audited
sc_4913,timestamp_dependence,Medium,Liquity,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",53195.83,15,0.3,0.6,1,1,1,1,Medium timestamp_dependence vulnerability in Liquity Governor contract,5.4,0.8586285435629395,audited
sc_4914,short_address,Medium,Convex,Staking,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39534.59,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex Staking contract,5.9,0.2356039838235591,audited
sc_4915,random_weakness,High,Balancer,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",17866.09,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Balancer Farming contract,8.0,0.5873501290965596,unaudited
sc_4916,tx_origin,Medium,1inch,Pool,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",71398.42,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in 1inch Pool contract,5.8,0.3142678470388761,audited
sc_4917,reentrancy,Critical,dYdX,Strategy,"address public immutable FACTORY;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",28280.19,15,0.3,1.0,1,0,0,2,Critical reentrancy vulnerability in dYdX Strategy contract,9.6,0.9607965371390342,audited
sc_4918,front_running,Medium,Liquity,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",45468.62,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Liquity Governor contract,6.2,0.17185618351829418,audited
sc_4919,integer_overflow,High,Curve,Staking,"uint256 constant MULTIPLIER = 1000;

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",68377.06,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Curve Staking contract,7.5,0.2254145524446791,audited
sc_4920,delegatecall_injection,Critical,Balancer,Pool,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",38795.33,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Balancer Pool contract,9.6,0.7123044929087454,unaudited
sc_4921,front_running,Medium,Curve,Oracle,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",92843.04,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Curve Oracle contract,6.7,0.7292084312967202,unaudited
sc_4922,access_control,High,dYdX,ERC1155,"// Additional comment for variation

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",27671.11,13,0.26,0.8,2,0,1,1,High access_control vulnerability in dYdX ERC1155 contract,8.7,0.17027412478439977,audited
sc_4923,random_weakness,High,Balancer,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",80741.4,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Balancer Vault contract,7.1,0.9154549805364598,unaudited
sc_4924,tx_origin,Medium,MakerDAO,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",158388.65,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in MakerDAO Governor contract,6.3,0.29989178150845974,audited
sc_4925,front_running,Medium,Yearn,Bridge,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20812.99,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Yearn Bridge contract,4.4,0.7682949956097215,audited
sc_4926,short_address,Medium,Aave,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",136560.76,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Aave Governor contract,4.8,0.8169609643947372,unaudited
sc_4927,reentrancy,Critical,PancakeSwap,ERC1155,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",101106.44,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in PancakeSwap ERC1155 contract,9.6,0.9925925747549662,audited
sc_4928,delegatecall_injection,Critical,Compound,DEX,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",194203.0,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Compound DEX contract,9.4,0.36399286561426736,audited
sc_4929,front_running,Medium,Convex,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",8209.3,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Convex Factory contract,5.0,0.4293842473205234,audited
sc_4930,uninitialized_storage,High,Aave,AMM,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",179799.46,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave AMM contract,8.0,0.912710632652016,unaudited
sc_4931,front_running,Medium,1inch,Vault,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",14300.7,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in 1inch Vault contract,5.4,0.7072973628876622,audited
sc_4932,dos_gas_limit,Medium,Aave,ERC20,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",122709.46,12,0.24,0.6,2,1,0,0,Medium dos_gas_limit vulnerability in Aave ERC20 contract,5.4,0.7633479881078211,audited
sc_4933,delegatecall_injection,Critical,Frax,Router,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",58755.29,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax Router contract,9.6,0.16456745846557674,audited
sc_4934,random_weakness,High,Synthetix,Bridge,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",178790.6,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Synthetix Bridge contract,7.1,0.37680031760723665,audited
sc_4935,timestamp_dependence,Medium,1inch,Farming,"address public immutable FACTORY;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",16085.07,15,0.3,0.6,1,0,1,2,Medium timestamp_dependence vulnerability in 1inch Farming contract,6.3,0.15206714597388946,unaudited
sc_4936,delegatecall_injection,Critical,dYdX,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",29829.52,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in dYdX Timelock contract,9.3,0.7387694355947154,audited
sc_4937,front_running,Medium,MakerDAO,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",224567.12,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in MakerDAO Factory contract,6.1,0.14775811927790988,audited
sc_4938,delegatecall_injection,Critical,Liquity,Farming,"uint256 constant MULTIPLIER = 1000;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",100422.91,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Liquity Farming contract,9.2,0.8533708800122345,unaudited
sc_4939,front_running,Medium,Synthetix,Router,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",95539.69,12,0.24,0.6,2,0,0,1,Medium front_running vulnerability in Synthetix Router contract,5.8,0.39390761245227013,audited
sc_4940,delegatecall_injection,Critical,1inch,Strategy,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",93350.32,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in 1inch Strategy contract,9.3,0.5134874533453337,audited
sc_4941,integer_overflow,High,Frax,Vault,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",43891.21,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Frax Vault contract,8.2,0.20247081615236695,audited
sc_4942,unchecked_call,Medium,Balancer,Timelock,"address public immutable FACTORY;

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",9717.23,12,0.24,0.6,1,1,1,1,Medium unchecked_call vulnerability in Balancer Timelock contract,4.4,0.33135481191356436,unaudited
sc_4943,dos_gas_limit,Medium,SushiSwap,Bridge,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",174407.37,12,0.24,0.6,2,0,0,1,Medium dos_gas_limit vulnerability in SushiSwap Bridge contract,6.6,0.42187116545430425,audited
sc_4944,integer_overflow,High,Yearn,ERC721,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",138161.36,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Yearn ERC721 contract,8.0,0.44409204785314116,audited
sc_4945,timestamp_dependence,Medium,PancakeSwap,Governor,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",18148.95,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in PancakeSwap Governor contract,5.9,0.34259833984595833,audited
sc_4946,timestamp_dependence,Medium,Synthetix,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",94840.35,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Synthetix ERC20 contract,4.4,0.22763197742615063,unaudited
sc_4947,reentrancy,Critical,MakerDAO,Farming,"event VulnerabilityTriggered(address indexed user, uint256 value);

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",307161.3,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in MakerDAO Farming contract,9.5,0.3352609258915503,unaudited
sc_4948,reentrancy,Critical,Curve,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",217943.7,15,0.3,1.0,1,1,0,1,Critical reentrancy vulnerability in Curve Governor contract,9.7,0.6347003099857674,audited
sc_4949,random_weakness,High,Aave,Timelock,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",211944.24,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Aave Timelock contract,7.3,0.5544004441775603,unaudited
sc_4950,uninitialized_storage,High,1inch,Governor,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",89827.1,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in 1inch Governor contract,7.8,0.5881586032711269,audited
sc_4951,tx_origin,Medium,Alpha Homora,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",47094.52,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Alpha Homora Governor contract,4.2,0.23690258576395654,unaudited
sc_4952,unchecked_call,Medium,Curve,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",71305.82,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in Curve Vault contract,4.6,0.801047408094616,audited
sc_4953,timestamp_dependence,Medium,Aave,Oracle,"event VulnerabilityTriggered(address indexed user, uint256 value);

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",227600.74,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave Oracle contract,4.4,0.4436607128411778,unaudited
sc_4954,random_weakness,High,Liquity,ERC20,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",52019.16,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Liquity ERC20 contract,7.9,0.19623941535541975,audited
sc_4955,random_weakness,High,Synthetix,ERC20,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",50178.21,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in Synthetix ERC20 contract,7.8,0.7633401430540246,audited
sc_4956,front_running,Medium,Rari,ERC1155,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",5488.59,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Rari ERC1155 contract,6.6,0.8298875062780092,audited
sc_4957,uninitialized_storage,High,MakerDAO,Router,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",103366.34,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in MakerDAO Router contract,8.6,0.4807237024565546,audited
sc_4958,dos_gas_limit,Medium,Euler,Router,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",54924.82,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Euler Router contract,6.5,0.6378415069674841,audited
sc_4959,random_weakness,High,Curve,Lending,"uint256 constant MULTIPLIER = 1000;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",65419.82,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Curve Lending contract,7.9,0.40099062418059495,unaudited
sc_4960,delegatecall_injection,Critical,Convex,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",123205.65,21,0.42,1.0,1,1,0,1,Critical delegatecall_injection vulnerability in Convex Vault contract,9.8,0.28949688545811375,audited
sc_4961,random_weakness,High,Compound,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",333400.67,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Compound Governor contract,7.5,0.4588407116797676,audited
sc_4962,random_weakness,High,Alpha Homora,Oracle,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",59661.65,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Alpha Homora Oracle contract,7.7,0.18704756165108646,unaudited
sc_4963,dos_gas_limit,Medium,1inch,Lending,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",12912.83,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in 1inch Lending contract,5.4,0.5948015296761882,unaudited
sc_4964,delegatecall_injection,Critical,Alpha Homora,Lending,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",59186.6,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Alpha Homora Lending contract,9.7,0.9348467624379175,audited
sc_4965,random_weakness,High,PancakeSwap,ERC721,"address public immutable FACTORY;

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",66348.46,19,0.38,0.8,2,0,1,1,High random_weakness vulnerability in PancakeSwap ERC721 contract,8.7,0.7499844474154632,audited
sc_4966,unchecked_call,Medium,Yearn,AMM,"event VulnerabilityTriggered(address indexed user, uint256 value);

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",104741.28,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Yearn AMM contract,6.7,0.35258483849388067,audited
sc_4967,delegatecall_injection,Critical,SushiSwap,ERC1155,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",87754.56,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in SushiSwap ERC1155 contract,9.5,0.9919490455018275,unaudited
sc_4968,short_address,Medium,Yearn,Bridge,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",157431.74,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Yearn Bridge contract,5.3,0.834727590347428,unaudited
sc_4969,tx_origin,Medium,1inch,Strategy,"address public immutable FACTORY;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",19134.56,12,0.24,0.6,2,0,0,1,Medium tx_origin vulnerability in 1inch Strategy contract,4.5,0.6113363368773717,unaudited
sc_4970,access_control,High,Uniswap,Farming,"uint256 constant MULTIPLIER = 1000;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",259994.38,13,0.26,0.8,2,0,1,1,High access_control vulnerability in Uniswap Farming contract,8.1,0.514584396312629,unaudited
sc_4971,uninitialized_storage,High,Euler,Governor,"address public immutable FACTORY;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",44595.73,14,0.28,0.8,1,0,0,1,High uninitialized_storage vulnerability in Euler Governor contract,8.4,0.24299584612218567,audited
sc_4972,tx_origin,Medium,SushiSwap,AMM,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",20557.1,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in SushiSwap AMM contract,4.2,0.2509061816183004,audited
sc_4973,reentrancy,Critical,Curve,Farming,"uint256 constant MULTIPLIER = 1000;

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",194369.52,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in Curve Farming contract,9.3,0.8308962226508975,audited
sc_4974,integer_overflow,High,Liquity,Governor,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",85720.18,12,0.24,0.8,1,1,0,0,High integer_overflow vulnerability in Liquity Governor contract,7.2,0.29282681415378653,audited
sc_4975,uninitialized_storage,High,Euler,Timelock,"uint256 constant MULTIPLIER = 1000;

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",32047.56,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Euler Timelock contract,8.9,0.5594530409907025,audited
sc_4976,random_weakness,High,Compound,Oracle,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",364205.98,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Compound Oracle contract,8.0,0.2366957446653804,audited
sc_4977,front_running,Medium,Frax,Timelock,"event VulnerabilityTriggered(address indexed user, uint256 value);

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",48961.89,12,0.24,0.6,2,0,0,0,Medium front_running vulnerability in Frax Timelock contract,5.2,0.5455627550199339,audited
sc_4978,delegatecall_injection,Critical,Frax,Factory,"// Additional comment for variation

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",31579.78,21,0.42,1.0,1,0,0,1,Critical delegatecall_injection vulnerability in Frax Factory contract,9.9,0.41159742057688975,audited
sc_4979,unchecked_call,Medium,dYdX,Strategy,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",40451.43,12,0.24,0.6,1,2,1,0,Medium unchecked_call vulnerability in dYdX Strategy contract,5.3,0.7416340692757271,audited
sc_4980,reentrancy,Critical,SushiSwap,Farming,"// Additional comment for variation

function withdraw(uint256 amount) public {
    require(balances[msg.sender] >= amount, ""Insufficient balance"");

    (bool success, ) = msg.sender.call{value: amount}("""");
    require(success, ""Transfer failed"");

    balances[msg.sender] -= amount;
    totalSupply -= amount;
}

mapping(address => uint256) public balances;
uint256 public totalSupply;
            ",71907.94,15,0.3,1.0,1,0,0,1,Critical reentrancy vulnerability in SushiSwap Farming contract,9.3,0.1912939827789621,unaudited
sc_4981,unchecked_call,Medium,Aave,ERC1155,"// Additional comment for variation

function executeTransaction(address target, bytes memory data) public onlyOwner {
    target.call(data);
    emit TransactionExecuted(target, data);
}

modifier onlyOwner() {
    require(msg.sender == owner, ""Not owner"");
    _;
}
            ",78256.0,12,0.24,0.6,1,1,1,0,Medium unchecked_call vulnerability in Aave ERC1155 contract,5.4,0.6046819098233767,unaudited
sc_4982,random_weakness,High,Aave,Vault,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",389507.02,19,0.38,0.8,2,1,1,0,High random_weakness vulnerability in Aave Vault contract,7.6,0.6615746836660462,audited
sc_4983,random_weakness,High,PancakeSwap,Factory,"event VulnerabilityTriggered(address indexed user, uint256 value);

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",35300.07,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in PancakeSwap Factory contract,7.4,0.36425583861791877,audited
sc_4984,short_address,Medium,dYdX,DEX,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",21865.98,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in dYdX DEX contract,5.4,0.5806237872992327,audited
sc_4985,short_address,Medium,Convex,ERC1155,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",28455.46,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Convex ERC1155 contract,5.5,0.6324109717517445,audited
sc_4986,access_control,High,Balancer,Strategy,"address public immutable FACTORY;

function changeOwner(address newOwner) public {
    owner = newOwner;
    emit OwnerChanged(owner, newOwner);
}

function withdraw() public {
    payable(msg.sender).transfer(address(this).balance);
}

address public owner;
            ",55331.37,13,0.26,0.8,2,0,1,2,High access_control vulnerability in Balancer Strategy contract,7.4,0.6662343614716093,unaudited
sc_4987,integer_overflow,High,Balancer,Lending,"// Additional comment for variation

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",41135.44,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Balancer Lending contract,7.5,0.2941697466586381,unaudited
sc_4988,short_address,Medium,Frax,Timelock,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",39369.25,12,0.24,0.6,2,0,0,0,Medium short_address vulnerability in Frax Timelock contract,5.3,0.43658793155831077,audited
sc_4989,tx_origin,Medium,Euler,Proxy,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40176.23,12,0.24,0.6,2,0,0,0,Medium tx_origin vulnerability in Euler Proxy contract,6.2,0.3504357805523146,audited
sc_4990,random_weakness,High,Frax,DEX,"// Additional comment for variation

function generateRandom() public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
        block.timestamp,
        block.difficulty,
        msg.sender
    ))) % 100;
}

function lottery() public payable {
    require(msg.value >= 0.1 ether, ""Minimum bet required"");

    uint256 random = generateRandom();
    if (random < 50) {
        payable(msg.sender).transfer(msg.value * 2);
    }
}
            ",26624.5,19,0.38,0.8,2,0,1,0,High random_weakness vulnerability in Frax DEX contract,7.6,0.6137343783827066,audited
sc_4991,dos_gas_limit,Medium,PancakeSwap,Governor,"// Additional comment for variation

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36904.89,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in PancakeSwap Governor contract,6.7,0.19301527678705913,unaudited
sc_4992,delegatecall_injection,Critical,Convex,Factory,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",18812.84,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Convex Factory contract,10.0,0.13085430903504716,audited
sc_4993,dos_gas_limit,Medium,Alpha Homora,Lending,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",40099.97,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in Alpha Homora Lending contract,4.1,0.6283497558927664,audited
sc_4994,timestamp_dependence,Medium,Aave,Farming,"uint256 constant MULTIPLIER = 1000;

function claimReward() public {
    require(block.timestamp > lastClaimTime[msg.sender] + 1 days, ""Too early"");
    require(rewardPool > 0, ""No rewards available"");

    uint256 reward = calculateReward(msg.sender);
    lastClaimTime[msg.sender] = block.timestamp;

    payable(msg.sender).transfer(reward);
}

mapping(address => uint256) public lastClaimTime;
uint256 public rewardPool;
            ",99243.96,15,0.3,0.6,1,0,1,1,Medium timestamp_dependence vulnerability in Aave Farming contract,5.0,0.13795071441444284,unaudited
sc_4995,uninitialized_storage,High,Aave,Strategy,"event VulnerabilityTriggered(address indexed user, uint256 value);

function processArray(uint256[] memory data) public {
    uint256[] storage localArray;

    for (uint i = 0; i < data.length; i++) {
        localArray.push(data[i]);
    }

    emit ArrayProcessed(localArray.length);
}

uint256[] public storedData;
            ",287458.03,14,0.28,0.8,1,0,0,0,High uninitialized_storage vulnerability in Aave Strategy contract,7.6,0.12959345670544628,unaudited
sc_4996,front_running,Medium,Curve,ERC1155,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",73083.57,12,0.24,0.6,2,1,0,0,Medium front_running vulnerability in Curve ERC1155 contract,4.2,0.22995896322036044,audited
sc_4997,delegatecall_injection,Critical,Liquity,Factory,"address public immutable FACTORY;

function upgrade(address newImplementation) public onlyOwner {
    implementation = newImplementation;
}

fallback() external payable {
    address impl = implementation;
    assembly {
        calldatacopy(0, 0, calldatasize())
        let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)
        returndatacopy(0, 0, returndatasize())

        switch result
        case 0 { revert(0, returndatasize()) }
        default { return(0, returndatasize()) }
    }
}

address public implementation;
            ",56999.38,21,0.42,1.0,1,0,0,2,Critical delegatecall_injection vulnerability in Liquity Factory contract,9.2,0.7629603456838678,audited
sc_4998,dos_gas_limit,Medium,1inch,Router,"uint256 constant MULTIPLIER = 1000;

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",36836.23,12,0.24,0.6,2,0,0,0,Medium dos_gas_limit vulnerability in 1inch Router contract,6.1,0.5049158717307957,audited
sc_4999,integer_overflow,High,Aave,Bridge,"event VulnerabilityTriggered(address indexed user, uint256 value);

function transfer(address to, uint256 value) public returns (bool) {
    balances[msg.sender] -= value;
    balances[to] += value;

    emit Transfer(msg.sender, to, value);
    return true;
}

mapping(address => uint256) public balances;
            ",208333.83,12,0.24,0.8,1,0,0,0,High integer_overflow vulnerability in Aave Bridge contract,8.5,0.5231731075207097,audited
sc_5000,tx_origin,Medium,Euler,Factory,"modifier whenNotPaused() { require(!paused, ""Paused""); _; }

function vulnerableFunction() public {
    // Generic vulnerable function
    require(msg.sender != address(0), ""Invalid sender"");

    uint256 value = someCalculation();
    balances[msg.sender] += value;
}

mapping(address => uint256) public balances;
        ",51715.03,12,0.24,0.6,2,1,0,0,Medium tx_origin vulnerability in Euler Factory contract,6.9,0.58631944907233,unaudited
