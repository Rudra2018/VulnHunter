#!/usr/bin/env python3
"""
Comprehensive Vulnerability Taxonomy and Classification System

This module provides an extensive taxonomy of vulnerability types based on:
- OWASP Top 10 (2021)
- CWE (Common Weakness Enumeration)
- CVE patterns
- NIST cybersecurity framework
- Industry-specific vulnerability patterns

Includes mapping to severity levels, exploitability scores, and mitigation strategies.
"""

from typing import Dict, List, Optional, Tuple, Union
from dataclasses import dataclass
from enum import Enum
import json


class VulnerabilityCategory(Enum):
    """High-level vulnerability categories"""
    INJECTION = "injection"
    AUTHENTICATION = "authentication"
    AUTHORIZATION = "authorization"
    CRYPTOGRAPHIC = "cryptographic"
    INPUT_VALIDATION = "input_validation"
    MEMORY_SAFETY = "memory_safety"
    CONFIGURATION = "configuration"
    BUSINESS_LOGIC = "business_logic"
    API_SECURITY = "api_security"
    SUPPLY_CHAIN = "supply_chain"
    INFRASTRUCTURE = "infrastructure"
    MOBILE = "mobile"
    IOT = "iot"


class SeverityLevel(Enum):
    """CVSS-based severity levels"""
    NONE = 0.0      # 0.0
    LOW = 0.1       # 0.1-3.9
    MEDIUM = 0.4    # 4.0-6.9
    HIGH = 0.7      # 7.0-8.9
    CRITICAL = 0.9  # 9.0-10.0


class ExploitabilityLevel(Enum):
    """Exploitability assessment"""
    THEORETICAL = 0.1
    PROOF_OF_CONCEPT = 0.3
    FUNCTIONAL = 0.5
    HIGH = 0.7
    WEAPONIZED = 0.9


@dataclass
class VulnerabilityType:
    """Comprehensive vulnerability type definition"""
    id: int
    name: str
    category: VulnerabilityCategory
    cwe_id: Optional[int]
    owasp_category: Optional[str]
    description: str
    severity: SeverityLevel
    exploitability: ExploitabilityLevel
    affected_languages: List[str]
    detection_patterns: List[str]
    mitigation_strategies: List[str]
    references: List[str]


class VulnerabilityTaxonomy:
    """Comprehensive vulnerability taxonomy"""

    def __init__(self):
        self.vulnerability_types = self._initialize_vulnerability_types()
        self.id_to_type = {vt.id: vt for vt in self.vulnerability_types}
        self.name_to_id = {vt.name: vt.id for vt in self.vulnerability_types}
        self.category_mapping = self._create_category_mapping()

    def _initialize_vulnerability_types(self) -> List[VulnerabilityType]:
        """Initialize comprehensive vulnerability types"""

        return [
            # 1. INJECTION VULNERABILITIES
            VulnerabilityType(
                id=0, name="sql_injection", category=VulnerabilityCategory.INJECTION,
                cwe_id=89, owasp_category="A03:2021 - Injection",
                description="SQL code injection through unsanitized input",
                severity=SeverityLevel.CRITICAL, exploitability=ExploitabilityLevel.HIGH,
                affected_languages=["java", "python", "php", "javascript", "c#"],
                detection_patterns=["SELECT", "INSERT", "UPDATE", "DELETE", "UNION", "OR 1=1"],
                mitigation_strategies=["Parameterized queries", "Input validation", "WAF"],
                references=["CWE-89", "OWASP-A03-2021"]
            ),

            VulnerabilityType(
                id=1, name="nosql_injection", category=VulnerabilityCategory.INJECTION,
                cwe_id=943, owasp_category="A03:2021 - Injection",
                description="NoSQL injection through unsanitized input",
                severity=SeverityLevel.HIGH, exploitability=ExploitabilityLevel.HIGH,
                affected_languages=["javascript", "python", "java"],
                detection_patterns=["$where", "$ne", "$gt", "$regex"],
                mitigation_strategies=["Input validation", "Parameterized queries", "Schema validation"],
                references=["CWE-943"]
            ),

            VulnerabilityType(
                id=2, name="command_injection", category=VulnerabilityCategory.INJECTION,
                cwe_id=78, owasp_category="A03:2021 - Injection",
                description="OS command injection through unsanitized input",
                severity=SeverityLevel.CRITICAL, exploitability=ExploitabilityLevel.HIGH,
                affected_languages=["python", "java", "php", "c", "cpp"],
                detection_patterns=["system", "exec", "shell_exec", "popen", ";", "&&", "||", "|"],
                mitigation_strategies=["Input sanitization", "Whitelist validation", "Sandboxing"],
                references=["CWE-78", "OWASP-A03-2021"]
            ),

            VulnerabilityType(
                id=3, name="ldap_injection", category=VulnerabilityCategory.INJECTION,
                cwe_id=90, owasp_category="A03:2021 - Injection",
                description="LDAP injection through unsanitized input",
                severity=SeverityLevel.HIGH, exploitability=ExploitabilityLevel.FUNCTIONAL,
                affected_languages=["java", "c#", "python"],
                detection_patterns=["ldap://", "(&", "(|", "*)(", "admin*"],
                mitigation_strategies=["Input validation", "LDAP escaping", "Least privilege"],
                references=["CWE-90"]
            ),

            VulnerabilityType(
                id=4, name="xpath_injection", category=VulnerabilityCategory.INJECTION,
                cwe_id=643, owasp_category="A03:2021 - Injection",
                description="XPath injection in XML queries",
                severity=SeverityLevel.MEDIUM, exploitability=ExploitabilityLevel.FUNCTIONAL,
                affected_languages=["java", "c#", "python", "javascript"],
                detection_patterns=["xpath", "//", "or", "and", "1=1"],
                mitigation_strategies=["Input validation", "Parameterized XPath", "XML schema validation"],
                references=["CWE-643"]
            ),

            # 2. CROSS-SITE SCRIPTING (XSS)
            VulnerabilityType(
                id=5, name="reflected_xss", category=VulnerabilityCategory.INJECTION,
                cwe_id=79, owasp_category="A03:2021 - Injection",
                description="Reflected cross-site scripting",
                severity=SeverityLevel.MEDIUM, exploitability=ExploitabilityLevel.HIGH,
                affected_languages=["javascript", "php", "java", "python"],
                detection_patterns=["<script>", "javascript:", "onload=", "onerror=", "eval("],
                mitigation_strategies=["Output encoding", "CSP headers", "Input validation"],
                references=["CWE-79", "OWASP-A03-2021"]
            ),

            VulnerabilityType(
                id=6, name="stored_xss", category=VulnerabilityCategory.INJECTION,
                cwe_id=79, owasp_category="A03:2021 - Injection",
                description="Stored/persistent cross-site scripting",
                severity=SeverityLevel.HIGH, exploitability=ExploitabilityLevel.HIGH,
                affected_languages=["javascript", "php", "java", "python"],
                detection_patterns=["<script>", "javascript:", "innerHTML", "document.write"],
                mitigation_strategies=["Output encoding", "Content sanitization", "CSP"],
                references=["CWE-79", "OWASP-A03-2021"]
            ),

            VulnerabilityType(
                id=7, name="dom_xss", category=VulnerabilityCategory.INJECTION,
                cwe_id=79, owasp_category="A03:2021 - Injection",
                description="DOM-based cross-site scripting",
                severity=SeverityLevel.MEDIUM, exploitability=ExploitabilityLevel.FUNCTIONAL,
                affected_languages=["javascript"],
                detection_patterns=["document.location", "window.location", "innerHTML", "eval"],
                mitigation_strategies=["Safe DOM manipulation", "Input validation", "CSP"],
                references=["CWE-79"]
            ),

            # 3. AUTHENTICATION & SESSION MANAGEMENT
            VulnerabilityType(
                id=8, name="broken_authentication", category=VulnerabilityCategory.AUTHENTICATION,
                cwe_id=287, owasp_category="A07:2021 - Identification and Authentication Failures",
                description="Broken authentication mechanisms",
                severity=SeverityLevel.HIGH, exploitability=ExploitabilityLevel.HIGH,
                affected_languages=["all"],
                detection_patterns=["hardcoded password", "weak hash", "session fixation"],
                mitigation_strategies=["MFA", "Strong password policy", "Secure session management"],
                references=["CWE-287", "OWASP-A07-2021"]
            ),

            VulnerabilityType(
                id=9, name="session_fixation", category=VulnerabilityCategory.AUTHENTICATION,
                cwe_id=384, owasp_category="A07:2021 - Identification and Authentication Failures",
                description="Session fixation vulnerability",
                severity=SeverityLevel.MEDIUM, exploitability=ExploitabilityLevel.FUNCTIONAL,
                affected_languages=["php", "java", "python", "javascript"],
                detection_patterns=["session_id", "JSESSIONID", "PHPSESSID"],
                mitigation_strategies=["Session regeneration", "Secure session attributes"],
                references=["CWE-384"]
            ),

            VulnerabilityType(
                id=10, name="weak_password_recovery", category=VulnerabilityCategory.AUTHENTICATION,
                cwe_id=640, owasp_category="A07:2021 - Identification and Authentication Failures",
                description="Weak password recovery mechanism",
                severity=SeverityLevel.MEDIUM, exploitability=ExploitabilityLevel.FUNCTIONAL,
                affected_languages=["all"],
                detection_patterns=["password reset", "forgot password", "security question"],
                mitigation_strategies=["Secure tokens", "Multi-step verification", "Rate limiting"],
                references=["CWE-640"]
            ),

            # 4. AUTHORIZATION & ACCESS CONTROL
            VulnerabilityType(
                id=11, name="idor", category=VulnerabilityCategory.AUTHORIZATION,
                cwe_id=639, owasp_category="A01:2021 - Broken Access Control",
                description="Insecure Direct Object References",
                severity=SeverityLevel.HIGH, exploitability=ExploitabilityLevel.HIGH,
                affected_languages=["all"],
                detection_patterns=["user_id=", "account=", "file_id=", "/user/123"],
                mitigation_strategies=["Access control checks", "Indirect references", "Authorization matrix"],
                references=["CWE-639", "OWASP-A01-2021"]
            ),

            VulnerabilityType(
                id=12, name="privilege_escalation", category=VulnerabilityCategory.AUTHORIZATION,
                cwe_id=269, owasp_category="A01:2021 - Broken Access Control",
                description="Privilege escalation vulnerability",
                severity=SeverityLevel.CRITICAL, exploitability=ExploitabilityLevel.FUNCTIONAL,
                affected_languages=["all"],
                detection_patterns=["admin", "root", "elevate", "privilege"],
                mitigation_strategies=["Principle of least privilege", "Role-based access", "Regular audits"],
                references=["CWE-269", "OWASP-A01-2021"]
            ),

            VulnerabilityType(
                id=13, name="path_traversal", category=VulnerabilityCategory.AUTHORIZATION,
                cwe_id=22, owasp_category="A01:2021 - Broken Access Control",
                description="Path traversal/directory traversal",
                severity=SeverityLevel.HIGH, exploitability=ExploitabilityLevel.HIGH,
                affected_languages=["all"],
                detection_patterns=["../", "..\\", "%2e%2e", "....//"],
                mitigation_strategies=["Input validation", "Chroot jail", "Whitelist directories"],
                references=["CWE-22", "OWASP-A01-2021"]
            ),

            # 5. CRYPTOGRAPHIC FAILURES
            VulnerabilityType(
                id=14, name="weak_cryptography", category=VulnerabilityCategory.CRYPTOGRAPHIC,
                cwe_id=327, owasp_category="A02:2021 - Cryptographic Failures",
                description="Use of weak cryptographic algorithms",
                severity=SeverityLevel.HIGH, exploitability=ExploitabilityLevel.FUNCTIONAL,
                affected_languages=["all"],
                detection_patterns=["MD5", "SHA1", "DES", "RC4", "ECB"],
                mitigation_strategies=["Strong algorithms", "Regular updates", "Key management"],
                references=["CWE-327", "OWASP-A02-2021"]
            ),

            VulnerabilityType(
                id=15, name="hardcoded_credentials", category=VulnerabilityCategory.CRYPTOGRAPHIC,
                cwe_id=798, owasp_category="A02:2021 - Cryptographic Failures",
                description="Hardcoded passwords or keys",
                severity=SeverityLevel.CRITICAL, exploitability=ExploitabilityLevel.HIGH,
                affected_languages=["all"],
                detection_patterns=["password=", "key=", "secret=", "api_key"],
                mitigation_strategies=["Environment variables", "Key vaults", "Configuration management"],
                references=["CWE-798", "OWASP-A02-2021"]
            ),

            VulnerabilityType(
                id=16, name="insufficient_entropy", category=VulnerabilityCategory.CRYPTOGRAPHIC,
                cwe_id=331, owasp_category="A02:2021 - Cryptographic Failures",
                description="Insufficient entropy in random generation",
                severity=SeverityLevel.MEDIUM, exploitability=ExploitabilityLevel.PROOF_OF_CONCEPT,
                affected_languages=["all"],
                detection_patterns=["rand()", "random()", "time()", "predictable"],
                mitigation_strategies=["Cryptographically secure RNG", "Proper seeding"],
                references=["CWE-331"]
            ),

            # 6. INPUT VALIDATION
            VulnerabilityType(
                id=17, name="buffer_overflow", category=VulnerabilityCategory.MEMORY_SAFETY,
                cwe_id=120, owasp_category="A06:2021 - Vulnerable Components",
                description="Buffer overflow vulnerability",
                severity=SeverityLevel.CRITICAL, exploitability=ExploitabilityLevel.FUNCTIONAL,
                affected_languages=["c", "cpp"],
                detection_patterns=["strcpy", "strcat", "sprintf", "gets", "memcpy"],
                mitigation_strategies=["Safe functions", "Bounds checking", "Stack canaries"],
                references=["CWE-120"]
            ),

            VulnerabilityType(
                id=18, name="integer_overflow", category=VulnerabilityCategory.MEMORY_SAFETY,
                cwe_id=190, owasp_category="A06:2021 - Vulnerable Components",
                description="Integer overflow vulnerability",
                severity=SeverityLevel.MEDIUM, exploitability=ExploitabilityLevel.FUNCTIONAL,
                affected_languages=["c", "cpp", "java"],
                detection_patterns=["int overflow", "arithmetic", "multiplication", "addition"],
                mitigation_strategies=["Range checking", "Safe arithmetic libraries", "Static analysis"],
                references=["CWE-190"]
            ),

            VulnerabilityType(
                id=19, name="format_string", category=VulnerabilityCategory.MEMORY_SAFETY,
                cwe_id=134, owasp_category="A06:2021 - Vulnerable Components",
                description="Format string vulnerability",
                severity=SeverityLevel.HIGH, exploitability=ExploitabilityLevel.FUNCTIONAL,
                affected_languages=["c", "cpp"],
                detection_patterns=["printf", "sprintf", "fprintf", "%s", "%x"],
                mitigation_strategies=["Format string validation", "Safe printf variants"],
                references=["CWE-134"]
            ),

            # 7. DESERIALIZATION
            VulnerabilityType(
                id=20, name="insecure_deserialization", category=VulnerabilityCategory.INJECTION,
                cwe_id=502, owasp_category="A08:2021 - Software and Data Integrity Failures",
                description="Insecure deserialization of untrusted data",
                severity=SeverityLevel.CRITICAL, exploitability=ExploitabilityLevel.FUNCTIONAL,
                affected_languages=["java", "python", "php", "javascript"],
                detection_patterns=["pickle", "serialize", "ObjectInputStream", "unserialize"],
                mitigation_strategies=["Input validation", "Signed serialization", "Restricted deserialization"],
                references=["CWE-502", "OWASP-A08-2021"]
            ),

            # 8. XML EXTERNAL ENTITIES (XXE)
            VulnerabilityType(
                id=21, name="xxe", category=VulnerabilityCategory.INJECTION,
                cwe_id=611, owasp_category="A05:2021 - Security Misconfiguration",
                description="XML External Entity (XXE) injection",
                severity=SeverityLevel.HIGH, exploitability=ExploitabilityLevel.FUNCTIONAL,
                affected_languages=["java", "c#", "php", "python"],
                detection_patterns=["<!ENTITY", "SYSTEM", "PUBLIC", "file://"],
                mitigation_strategies=["Disable external entities", "XML parsers configuration", "Input validation"],
                references=["CWE-611", "OWASP-A05-2021"]
            ),

            # 9. SECURITY MISCONFIGURATION
            VulnerabilityType(
                id=22, name="security_misconfiguration", category=VulnerabilityCategory.CONFIGURATION,
                cwe_id=16, owasp_category="A05:2021 - Security Misconfiguration",
                description="Security misconfiguration",
                severity=SeverityLevel.MEDIUM, exploitability=ExploitabilityLevel.HIGH,
                affected_languages=["all"],
                detection_patterns=["debug=true", "default password", "directory listing"],
                mitigation_strategies=["Security hardening", "Regular updates", "Configuration review"],
                references=["CWE-16", "OWASP-A05-2021"]
            ),

            # 10. CROSS-SITE REQUEST FORGERY (CSRF)
            VulnerabilityType(
                id=23, name="csrf", category=VulnerabilityCategory.AUTHENTICATION,
                cwe_id=352, owasp_category="A01:2021 - Broken Access Control",
                description="Cross-Site Request Forgery",
                severity=SeverityLevel.MEDIUM, exploitability=ExploitabilityLevel.HIGH,
                affected_languages=["all"],
                detection_patterns=["POST", "PUT", "DELETE", "state-changing"],
                mitigation_strategies=["CSRF tokens", "SameSite cookies", "Custom headers"],
                references=["CWE-352", "OWASP-A01-2021"]
            ),

            # 11. RACE CONDITIONS
            VulnerabilityType(
                id=24, name="race_condition", category=VulnerabilityCategory.BUSINESS_LOGIC,
                cwe_id=362, owasp_category="A04:2021 - Insecure Design",
                description="Race condition vulnerability",
                severity=SeverityLevel.MEDIUM, exploitability=ExploitabilityLevel.PROOF_OF_CONCEPT,
                affected_languages=["java", "c", "cpp", "python"],
                detection_patterns=["thread", "concurrent", "synchronize", "lock"],
                mitigation_strategies=["Proper synchronization", "Atomic operations", "Lock ordering"],
                references=["CWE-362"]
            ),

            # 12. SERVER-SIDE REQUEST FORGERY (SSRF)
            VulnerabilityType(
                id=25, name="ssrf", category=VulnerabilityCategory.INJECTION,
                cwe_id=918, owasp_category="A10:2021 - Server-Side Request Forgery",
                description="Server-Side Request Forgery",
                severity=SeverityLevel.HIGH, exploitability=ExploitabilityLevel.HIGH,
                affected_languages=["all"],
                detection_patterns=["http://", "https://", "ftp://", "localhost", "127.0.0.1"],
                mitigation_strategies=["URL validation", "Whitelist domains", "Network segmentation"],
                references=["CWE-918", "OWASP-A10-2021"]
            ),

            # 13. BUSINESS LOGIC VULNERABILITIES
            VulnerabilityType(
                id=26, name="business_logic_flaw", category=VulnerabilityCategory.BUSINESS_LOGIC,
                cwe_id=840, owasp_category="A04:2021 - Insecure Design",
                description="Business logic vulnerability",
                severity=SeverityLevel.MEDIUM, exploitability=ExploitabilityLevel.FUNCTIONAL,
                affected_languages=["all"],
                detection_patterns=["price manipulation", "workflow bypass", "logic error"],
                mitigation_strategies=["Business rules validation", "State machine design", "Testing"],
                references=["CWE-840", "OWASP-A04-2021"]
            ),

            # 14. API SECURITY
            VulnerabilityType(
                id=27, name="api_security_flaw", category=VulnerabilityCategory.API_SECURITY,
                cwe_id=285, owasp_category="A01:2021 - Broken Access Control",
                description="API security vulnerability",
                severity=SeverityLevel.HIGH, exploitability=ExploitabilityLevel.HIGH,
                affected_languages=["all"],
                detection_patterns=["REST", "GraphQL", "API key", "rate limiting"],
                mitigation_strategies=["API gateway", "Rate limiting", "Authentication", "Input validation"],
                references=["CWE-285", "OWASP-API-Security"]
            ),

            # 15. SUPPLY CHAIN
            VulnerabilityType(
                id=28, name="supply_chain_attack", category=VulnerabilityCategory.SUPPLY_CHAIN,
                cwe_id=1329, owasp_category="A06:2021 - Vulnerable Components",
                description="Supply chain attack vulnerability",
                severity=SeverityLevel.CRITICAL, exploitability=ExploitabilityLevel.WEAPONIZED,
                affected_languages=["all"],
                detection_patterns=["dependency", "third-party", "package", "library"],
                mitigation_strategies=["Dependency scanning", "SCA tools", "Signed packages", "SBOM"],
                references=["CWE-1329", "OWASP-A06-2021"]
            ),

            # Add placeholder for "none" class
            VulnerabilityType(
                id=29, name="none", category=VulnerabilityCategory.CONFIGURATION,
                cwe_id=None, owasp_category=None,
                description="No vulnerability detected",
                severity=SeverityLevel.NONE, exploitability=ExploitabilityLevel.THEORETICAL,
                affected_languages=["all"],
                detection_patterns=[],
                mitigation_strategies=[],
                references=[]
            )
        ]

    def _create_category_mapping(self) -> Dict[VulnerabilityCategory, List[int]]:
        """Create mapping from categories to vulnerability type IDs"""
        mapping = {}
        for vt in self.vulnerability_types:
            if vt.category not in mapping:
                mapping[vt.category] = []
            mapping[vt.category].append(vt.id)
        return mapping

    def get_vulnerability_by_id(self, vuln_id: int) -> Optional[VulnerabilityType]:
        """Get vulnerability type by ID"""
        return self.id_to_type.get(vuln_id)

    def get_vulnerability_by_name(self, name: str) -> Optional[VulnerabilityType]:
        """Get vulnerability type by name"""
        vuln_id = self.name_to_id.get(name)
        return self.id_to_type.get(vuln_id) if vuln_id is not None else None

    def get_vulnerabilities_by_category(self, category: VulnerabilityCategory) -> List[VulnerabilityType]:
        """Get all vulnerability types in a category"""
        vuln_ids = self.category_mapping.get(category, [])
        return [self.id_to_type[vid] for vid in vuln_ids]

    def get_severity_distribution(self) -> Dict[str, int]:
        """Get distribution of vulnerabilities by severity"""
        distribution = {}
        for vt in self.vulnerability_types:
            severity_name = vt.severity.name
            distribution[severity_name] = distribution.get(severity_name, 0) + 1
        return distribution

    def get_language_coverage(self) -> Dict[str, List[str]]:
        """Get vulnerability coverage by programming language"""
        coverage = {}
        for vt in self.vulnerability_types:
            for lang in vt.affected_languages:
                if lang not in coverage:
                    coverage[lang] = []
                coverage[lang].append(vt.name)
        return coverage

    def export_to_json(self, filepath: str):
        """Export vulnerability taxonomy to JSON"""
        data = {
            'vulnerability_types': [],
            'categories': [cat.value for cat in VulnerabilityCategory],
            'severity_levels': [sev.name for sev in SeverityLevel],
            'total_vulnerabilities': len(self.vulnerability_types)
        }

        for vt in self.vulnerability_types:
            vt_data = {
                'id': vt.id,
                'name': vt.name,
                'category': vt.category.value,
                'cwe_id': vt.cwe_id,
                'owasp_category': vt.owasp_category,
                'description': vt.description,
                'severity': vt.severity.name,
                'severity_score': vt.severity.value,
                'exploitability': vt.exploitability.name,
                'exploitability_score': vt.exploitability.value,
                'affected_languages': vt.affected_languages,
                'detection_patterns': vt.detection_patterns,
                'mitigation_strategies': vt.mitigation_strategies,
                'references': vt.references
            }
            data['vulnerability_types'].append(vt_data)

        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)

    def get_class_names(self) -> List[str]:
        """Get list of all vulnerability class names for model training"""
        return [vt.name for vt in self.vulnerability_types]

    def get_num_classes(self) -> int:
        """Get total number of vulnerability classes"""
        return len(self.vulnerability_types)

    def get_class_weights(self) -> Dict[int, float]:
        """Get class weights for imbalanced learning (can be updated based on dataset statistics)"""
        # Default weights - should be updated based on actual dataset distribution
        base_weight = 1.0
        weights = {}

        for vt in self.vulnerability_types:
            # Higher weight for critical vulnerabilities
            if vt.severity == SeverityLevel.CRITICAL:
                weights[vt.id] = base_weight * 1.5
            elif vt.severity == SeverityLevel.HIGH:
                weights[vt.id] = base_weight * 1.2
            elif vt.severity == SeverityLevel.NONE:
                weights[vt.id] = base_weight * 0.5  # Lower weight for "none" class
            else:
                weights[vt.id] = base_weight

        return weights

    def print_taxonomy_summary(self):
        """Print a summary of the vulnerability taxonomy"""
        print("=" * 60)
        print("VULNERABILITY TAXONOMY SUMMARY")
        print("=" * 60)
        print(f"Total Vulnerability Types: {len(self.vulnerability_types)}")
        print(f"Categories: {len(self.category_mapping)}")
        print()

        print("SEVERITY DISTRIBUTION:")
        severity_dist = self.get_severity_distribution()
        for severity, count in severity_dist.items():
            print(f"  {severity}: {count}")
        print()

        print("CATEGORY DISTRIBUTION:")
        for category, vuln_ids in self.category_mapping.items():
            print(f"  {category.value}: {len(vuln_ids)} vulnerabilities")
        print()

        print("LANGUAGE COVERAGE:")
        lang_coverage = self.get_language_coverage()
        for lang, vulns in lang_coverage.items():
            if lang != "all":
                print(f"  {lang}: {len(vulns)} vulnerability types")
        print("=" * 60)


# Global instance
VULNERABILITY_TAXONOMY = VulnerabilityTaxonomy()


def test_taxonomy():
    """Test the vulnerability taxonomy"""
    print("Testing Vulnerability Taxonomy...")

    # Print summary
    VULNERABILITY_TAXONOMY.print_taxonomy_summary()

    # Test specific queries
    print("\nTEST QUERIES:")

    # Get specific vulnerability
    sql_injection = VULNERABILITY_TAXONOMY.get_vulnerability_by_name("sql_injection")
    print(f"SQL Injection Severity: {sql_injection.severity.name}")

    # Get vulnerabilities by category
    injection_vulns = VULNERABILITY_TAXONOMY.get_vulnerabilities_by_category(
        VulnerabilityCategory.INJECTION
    )
    print(f"Injection vulnerabilities: {len(injection_vulns)}")

    # Get class names for ML model
    class_names = VULNERABILITY_TAXONOMY.get_class_names()
    print(f"Total classes for ML model: {len(class_names)}")

    # Export to JSON
    VULNERABILITY_TAXONOMY.export_to_json("/tmp/vulnerability_taxonomy.json")
    print("Taxonomy exported to /tmp/vulnerability_taxonomy.json")

    print("\nTaxonomy test completed!")


if __name__ == "__main__":
    test_taxonomy()