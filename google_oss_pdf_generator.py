#!/usr/bin/env python3
"""
Google OSS Analysis - PDF Report Generator
Creates comprehensive PDF reports from analysis results
"""

import json
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import (
    SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak,
    Image, KeepTogether
)
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT

class GoogleOSSPDFGenerator:
    """Generate comprehensive PDF reports for Google OSS analysis"""

    def __init__(self, analysis_dir: str):
        """Initialize PDF generator"""
        self.analysis_dir = Path(analysis_dir)
        self.results_dir = self.analysis_dir / "results"

        # Load master report
        master_reports = list(self.analysis_dir.glob("google_oss_master_report_*.json"))
        if not master_reports:
            raise ValueError(f"No master report found in {self.analysis_dir}")

        with open(master_reports[0]) as f:
            self.master_report = json.load(f)

        # Styles
        self.styles = getSampleStyleSheet()

        # Custom styles
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            textColor=colors.HexColor('#1a73e8'),
            spaceAfter=30,
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        )

        self.heading1_style = ParagraphStyle(
            'CustomHeading1',
            parent=self.styles['Heading1'],
            fontSize=16,
            textColor=colors.HexColor('#1a73e8'),
            spaceAfter=12,
            spaceBefore=12,
            fontName='Helvetica-Bold'
        )

        self.heading2_style = ParagraphStyle(
            'CustomHeading2',
            parent=self.styles['Heading2'],
            fontSize=14,
            textColor=colors.HexColor('#5f6368'),
            spaceAfter=10,
            spaceBefore=10,
            fontName='Helvetica-Bold'
        )

    def create_cover_page(self) -> List:
        """Create report cover page"""
        elements = []

        # Title
        elements.append(Spacer(1, 2*inch))
        elements.append(Paragraph("Google Open Source Projects", self.title_style))
        elements.append(Spacer(1, 0.3*inch))
        elements.append(Paragraph("Security Analysis Report", self.title_style))

        elements.append(Spacer(1, 1*inch))

        # Analysis info table
        analysis_date = datetime.fromisoformat(self.master_report['analysis_timestamp'])

        info_data = [
            ['Analysis Date:', analysis_date.strftime('%B %d, %Y at %H:%M:%S')],
            ['Projects Analyzed:', str(self.master_report['total_projects_analyzed'])],
            ['Total Files:', f"{self.master_report['summary']['total_files_analyzed']:,}"],
            ['Total Lines of Code:', f"{self.master_report['summary']['total_lines_analyzed']:,}"],
            ['Analysis Tool:', 'VulnHunter ML Security Suite']
        ]

        info_table = Table(info_data, colWidths=[2.5*inch, 3.5*inch])
        info_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f1f3f4')),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (0, -1), 'RIGHT'),
            ('ALIGN', (1, 0), (1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 11),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('LEFTPADDING', (0, 0), (-1, -1), 12),
            ('RIGHTPADDING', (0, 0), (-1, -1), 12),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ]))

        elements.append(info_table)
        elements.append(Spacer(1, 1*inch))

        # Footer
        footer_style = ParagraphStyle(
            'Footer',
            parent=self.styles['Normal'],
            fontSize=10,
            textColor=colors.grey,
            alignment=TA_CENTER
        )
        elements.append(Paragraph("Generated by VulnHunter Security Analysis Suite", footer_style))
        elements.append(PageBreak())

        return elements

    def create_executive_summary(self) -> List:
        """Create executive summary section"""
        elements = []

        elements.append(Paragraph("Executive Summary", self.heading1_style))
        elements.append(Spacer(1, 0.2*inch))

        # Overview text
        summary_text = f"""
        This report presents a comprehensive security analysis of {self.master_report['total_projects_analyzed']}
        high-priority Google open source projects. The analysis examined {self.master_report['summary']['total_files_analyzed']:,}
        files containing {self.master_report['summary']['total_lines_analyzed']:,} lines of code across multiple
        programming languages and frameworks.
        """
        elements.append(Paragraph(summary_text, self.styles['Normal']))
        elements.append(Spacer(1, 0.2*inch))

        # Risk distribution
        elements.append(Paragraph("Security Risk Distribution", self.heading2_style))

        risk_data = [['Risk Level', 'Projects', 'Percentage']]
        total = self.master_report['total_projects_analyzed']

        for severity in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']:
            count = self.master_report['summary']['by_severity'][severity]
            if count > 0:
                percentage = (count / total) * 100
                risk_data.append([severity, str(count), f"{percentage:.1f}%"])

        risk_table = Table(risk_data, colWidths=[2*inch, 1.5*inch, 1.5*inch])
        risk_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1a73e8')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
        ]))

        elements.append(risk_table)
        elements.append(Spacer(1, 0.3*inch))

        # Category distribution
        elements.append(Paragraph("Project Categories", self.heading2_style))

        cat_data = [['Category', 'Projects']]
        for category, count in sorted(self.master_report['summary']['by_category'].items()):
            cat_data.append([category, str(count)])

        cat_table = Table(cat_data, colWidths=[3*inch, 2*inch])
        cat_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1a73e8')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
        ]))

        elements.append(cat_table)
        elements.append(PageBreak())

        return elements

    def create_project_details(self) -> List:
        """Create detailed section for each project"""
        elements = []

        elements.append(Paragraph("Detailed Project Analysis", self.heading1_style))
        elements.append(Spacer(1, 0.2*inch))

        # Sort projects by name
        projects = sorted(
            self.master_report['projects'].items(),
            key=lambda x: x[0]
        )

        for idx, (project_name, report) in enumerate(projects, 1):
            # Project header
            project_header = f"{idx}. {project_name}"
            elements.append(Paragraph(project_header, self.heading2_style))

            # Basic info
            project_info = report['project']
            info_text = f"""
            <b>Category:</b> {project_info['category']}<br/>
            <b>Description:</b> {project_info['description']}<br/>
            <b>Languages:</b> {', '.join(project_info['languages'])}<br/>
            <b>GitHub:</b> {project_info['github_url']}
            """
            elements.append(Paragraph(info_text, self.styles['Normal']))
            elements.append(Spacer(1, 0.15*inch))

            # Risk assessment
            risk = report['risk_assessment']
            risk_color = self.get_risk_color(risk['severity'])

            risk_data = [
                ['Risk Score', 'Severity', 'Status'],
                [f"{risk['score']}/100", risk['severity'], '⚠️' if risk['severity'] in ['HIGH', 'CRITICAL'] else '✓']
            ]

            risk_table = Table(risk_data, colWidths=[1.5*inch, 1.5*inch, 1.5*inch])
            risk_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1a73e8')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 11),
                ('BACKGROUND', (0, 1), (-1, 1), risk_color),
                ('FONTNAME', (0, 1), (-1, 1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 1), (-1, 1), 12),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ]))

            elements.append(risk_table)
            elements.append(Spacer(1, 0.15*inch))

            # Code statistics
            structure = report['structure']
            stats_data = [
                ['Metric', 'Value'],
                ['Total Files', f"{structure['total_files']:,}"],
                ['Total Lines', f"{structure['total_lines']:,}"],
                ['Directories', f"{structure['directory_count']:,}"],
            ]

            stats_table = Table(stats_data, colWidths=[2.5*inch, 2*inch])
            stats_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (0, -1), 'LEFT'),
                ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ]))

            elements.append(stats_table)
            elements.append(Spacer(1, 0.15*inch))

            # Security findings
            findings = risk['findings_summary']
            findings_data = [
                ['Finding Type', 'Count'],
                ['Hardcoded Secrets', str(findings.get('hardcoded_secrets', 0))],
                ['Dangerous Functions', str(findings.get('dangerous_functions', 0))],
                ['Weak Cryptography', str(findings.get('weak_crypto', 0))],
            ]

            findings_table = Table(findings_data, colWidths=[2.5*inch, 2*inch])
            findings_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#ea4335')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (0, -1), 'LEFT'),
                ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ]))

            elements.append(findings_table)

            # Top file types
            if structure.get('file_types'):
                elements.append(Spacer(1, 0.15*inch))
                elements.append(Paragraph("Top File Types:", self.styles['Heading4']))

                # Get top 5 file types
                file_types = sorted(
                    structure['file_types'].items(),
                    key=lambda x: x[1],
                    reverse=True
                )[:5]

                ft_data = [['Extension', 'Count']]
                for ext, count in file_types:
                    ft_data.append([ext or '(no extension)', str(count)])

                ft_table = Table(ft_data, colWidths=[2*inch, 1.5*inch])
                ft_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
                    ('ALIGN', (0, 0), (0, -1), 'LEFT'),
                    ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 9),
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
                ]))

                elements.append(ft_table)

            elements.append(Spacer(1, 0.3*inch))

            # Page break after each project except last
            if idx < len(projects):
                elements.append(PageBreak())

        return elements

    def create_recommendations(self) -> List:
        """Create recommendations section"""
        elements = []

        elements.append(PageBreak())
        elements.append(Paragraph("Recommendations", self.heading1_style))
        elements.append(Spacer(1, 0.2*inch))

        recommendations = [
            ("Code Review", "Conduct thorough security code reviews focusing on areas with dangerous function usage and weak cryptographic implementations."),
            ("Cryptography Upgrade", "Replace weak cryptographic algorithms (MD5, SHA1) with modern alternatives (SHA-256, SHA-3)."),
            ("Static Analysis", "Integrate automated static analysis tools into CI/CD pipelines to catch security issues early."),
            ("Dependency Scanning", "Implement continuous dependency scanning to identify and update vulnerable third-party libraries."),
            ("Security Training", "Provide security awareness training to development teams on secure coding practices."),
            ("Penetration Testing", "Conduct regular penetration testing to validate security controls and identify vulnerabilities."),
        ]

        for title, desc in recommendations:
            elements.append(Paragraph(f"<b>• {title}:</b> {desc}", self.styles['Normal']))
            elements.append(Spacer(1, 0.1*inch))

        return elements

    def get_risk_color(self, severity: str) -> colors.Color:
        """Get color for risk severity"""
        color_map = {
            'CRITICAL': colors.HexColor('#ea4335'),  # Red
            'HIGH': colors.HexColor('#fbbc04'),      # Yellow
            'MEDIUM': colors.HexColor('#34a853'),    # Green (light)
            'LOW': colors.HexColor('#1a73e8')        # Blue
        }
        return color_map.get(severity, colors.grey)

    def generate_pdf(self, output_path: str):
        """Generate the complete PDF report"""
        print(f"📄 Generating PDF report...")

        # Create PDF
        doc = SimpleDocTemplate(
            output_path,
            pagesize=letter,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=72
        )

        # Build content
        story = []

        # Cover page
        story.extend(self.create_cover_page())

        # Executive summary
        story.extend(self.create_executive_summary())

        # Project details
        story.extend(self.create_project_details())

        # Recommendations
        story.extend(self.create_recommendations())

        # Build PDF
        doc.build(story)

        print(f"✓ PDF report generated: {output_path}")
        return output_path

def main():
    """Main entry point"""
    import sys

    if len(sys.argv) < 2:
        print("Usage: python3 google_oss_pdf_generator.py <analysis_dir> [output_pdf]")
        sys.exit(1)

    analysis_dir = sys.argv[1]
    output_pdf = sys.argv[2] if len(sys.argv) > 2 else f"{analysis_dir}/Google_OSS_Security_Report.pdf"

    generator = GoogleOSSPDFGenerator(analysis_dir)
    generator.generate_pdf(output_pdf)

    print("\n✅ PDF generation complete!")
    print(f"📄 Report: {output_pdf}")

if __name__ == "__main__":
    main()
