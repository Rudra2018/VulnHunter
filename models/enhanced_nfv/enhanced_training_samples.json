[
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 432",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 0,
    "creation_timestamp": "2025-11-01T15:51:03.910385"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 469",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1,
    "creation_timestamp": "2025-11-01T15:51:03.910402"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 489",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2,
    "creation_timestamp": "2025-11-01T15:51:03.910405"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 219",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 3,
    "creation_timestamp": "2025-11-01T15:51:03.910406"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 36",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 4,
    "creation_timestamp": "2025-11-01T15:51:03.910408"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 89",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 5,
    "creation_timestamp": "2025-11-01T15:51:03.910410"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 680",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 6,
    "creation_timestamp": "2025-11-01T15:51:03.910411"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 13",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 7,
    "creation_timestamp": "2025-11-01T15:51:03.910413"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 199",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 8,
    "creation_timestamp": "2025-11-01T15:51:03.910414"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 321",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 9,
    "creation_timestamp": "2025-11-01T15:51:03.910416"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 229",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 10,
    "creation_timestamp": "2025-11-01T15:51:03.910417"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 value = fundss[msg.sender];\n                        require(value > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 326",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 11,
    "creation_timestamp": "2025-11-01T15:51:03.910419"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 38",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 12,
    "creation_timestamp": "2025-11-01T15:51:03.910421"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 71",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 13,
    "creation_timestamp": "2025-11-01T15:51:03.910422"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 48",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 14,
    "creation_timestamp": "2025-11-01T15:51:03.910423"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 139",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 15,
    "creation_timestamp": "2025-11-01T15:51:03.910425"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 789",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 16,
    "creation_timestamp": "2025-11-01T15:51:03.910426"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 72",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 17,
    "creation_timestamp": "2025-11-01T15:51:03.910428"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 478",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 18,
    "creation_timestamp": "2025-11-01T15:51:03.910429"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 10",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 19,
    "creation_timestamp": "2025-11-01T15:51:03.910431"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 440",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 20,
    "creation_timestamp": "2025-11-01T15:51:03.910432"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 54",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 21,
    "creation_timestamp": "2025-11-01T15:51:03.910434"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 428",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 22,
    "creation_timestamp": "2025-11-01T15:51:03.910435"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 543",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 23,
    "creation_timestamp": "2025-11-01T15:51:03.910437"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 157",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 24,
    "creation_timestamp": "2025-11-01T15:51:03.910438"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        assert(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 246",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 25,
    "creation_timestamp": "2025-11-01T15:51:03.910439"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 399",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 26,
    "creation_timestamp": "2025-11-01T15:51:03.910443"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 415",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 27,
    "creation_timestamp": "2025-11-01T15:51:03.910444"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 36",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 28,
    "creation_timestamp": "2025-11-01T15:51:03.910446"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 225",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 29,
    "creation_timestamp": "2025-11-01T15:51:03.910447"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 289",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 30,
    "creation_timestamp": "2025-11-01T15:51:03.910449"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 463",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 31,
    "creation_timestamp": "2025-11-01T15:51:03.910450"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 142",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 32,
    "creation_timestamp": "2025-11-01T15:51:03.910452"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 601",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 33,
    "creation_timestamp": "2025-11-01T15:51:03.910453"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 117",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 34,
    "creation_timestamp": "2025-11-01T15:51:03.910455"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 265",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 35,
    "creation_timestamp": "2025-11-01T15:51:03.910456"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 25",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 36,
    "creation_timestamp": "2025-11-01T15:51:03.910457"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 305",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 37,
    "creation_timestamp": "2025-11-01T15:51:03.910459"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 438",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 38,
    "creation_timestamp": "2025-11-01T15:51:03.910460"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 783",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 39,
    "creation_timestamp": "2025-11-01T15:51:03.910462"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 464",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 40,
    "creation_timestamp": "2025-11-01T15:51:03.910463"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 6",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 41,
    "creation_timestamp": "2025-11-01T15:51:03.910465"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 260",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 42,
    "creation_timestamp": "2025-11-01T15:51:03.910466"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 157",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 43,
    "creation_timestamp": "2025-11-01T15:51:03.910468"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 362",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 44,
    "creation_timestamp": "2025-11-01T15:51:03.910469"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 382",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 45,
    "creation_timestamp": "2025-11-01T15:51:03.910470"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 359",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 46,
    "creation_timestamp": "2025-11-01T15:51:03.910472"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 561",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 47,
    "creation_timestamp": "2025-11-01T15:51:03.910473"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 363",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 48,
    "creation_timestamp": "2025-11-01T15:51:03.910475"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 300",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 49,
    "creation_timestamp": "2025-11-01T15:51:03.910476"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 57",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 50,
    "creation_timestamp": "2025-11-01T15:51:03.910477"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 83",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 51,
    "creation_timestamp": "2025-11-01T15:51:03.910479"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 99",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 52,
    "creation_timestamp": "2025-11-01T15:51:03.910480"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 181",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 53,
    "creation_timestamp": "2025-11-01T15:51:03.910482"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 64",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 54,
    "creation_timestamp": "2025-11-01T15:51:03.910483"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 787",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 55,
    "creation_timestamp": "2025-11-01T15:51:03.910484"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 713",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 56,
    "creation_timestamp": "2025-11-01T15:51:03.910486"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 328",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 57,
    "creation_timestamp": "2025-11-01T15:51:03.910487"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 264",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 58,
    "creation_timestamp": "2025-11-01T15:51:03.910489"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 397",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 59,
    "creation_timestamp": "2025-11-01T15:51:03.910490"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 79",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 60,
    "creation_timestamp": "2025-11-01T15:51:03.910491"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 113",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 61,
    "creation_timestamp": "2025-11-01T15:51:03.910493"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 262",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 62,
    "creation_timestamp": "2025-11-01T15:51:03.910494"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 221",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 63,
    "creation_timestamp": "2025-11-01T15:51:03.910496"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 405",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 64,
    "creation_timestamp": "2025-11-01T15:51:03.910497"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 227",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 65,
    "creation_timestamp": "2025-11-01T15:51:03.910498"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 291",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 66,
    "creation_timestamp": "2025-11-01T15:51:03.910500"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 718",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 67,
    "creation_timestamp": "2025-11-01T15:51:03.910501"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 3",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 68,
    "creation_timestamp": "2025-11-01T15:51:03.910503"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 35",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 69,
    "creation_timestamp": "2025-11-01T15:51:03.910504"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 338",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 70,
    "creation_timestamp": "2025-11-01T15:51:03.910505"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 339",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 71,
    "creation_timestamp": "2025-11-01T15:51:03.910507"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 175",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 72,
    "creation_timestamp": "2025-11-01T15:51:03.910508"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 69",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 73,
    "creation_timestamp": "2025-11-01T15:51:03.910510"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 139",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 74,
    "creation_timestamp": "2025-11-01T15:51:03.910511"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 88",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 75,
    "creation_timestamp": "2025-11-01T15:51:03.910513"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 180",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 76,
    "creation_timestamp": "2025-11-01T15:51:03.910515"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 241",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 77,
    "creation_timestamp": "2025-11-01T15:51:03.910516"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 162",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 78,
    "creation_timestamp": "2025-11-01T15:51:03.910518"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 176",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 79,
    "creation_timestamp": "2025-11-01T15:51:03.910519"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 448",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 80,
    "creation_timestamp": "2025-11-01T15:51:03.910520"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 432",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 81,
    "creation_timestamp": "2025-11-01T15:51:03.910522"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 254",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 82,
    "creation_timestamp": "2025-11-01T15:51:03.910523"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 774",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 83,
    "creation_timestamp": "2025-11-01T15:51:03.910525"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 462",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 84,
    "creation_timestamp": "2025-11-01T15:51:03.910526"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 364",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 85,
    "creation_timestamp": "2025-11-01T15:51:03.910527"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 460",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 86,
    "creation_timestamp": "2025-11-01T15:51:03.910529"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 534",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 87,
    "creation_timestamp": "2025-11-01T15:51:03.910530"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 508",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 88,
    "creation_timestamp": "2025-11-01T15:51:03.910531"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 711",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 89,
    "creation_timestamp": "2025-11-01T15:51:03.910533"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 111",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 90,
    "creation_timestamp": "2025-11-01T15:51:03.910534"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 27",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 91,
    "creation_timestamp": "2025-11-01T15:51:03.910536"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 181",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 92,
    "creation_timestamp": "2025-11-01T15:51:03.910537"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 497",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 93,
    "creation_timestamp": "2025-11-01T15:51:03.910538"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 535",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 94,
    "creation_timestamp": "2025-11-01T15:51:03.910540"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 16",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 95,
    "creation_timestamp": "2025-11-01T15:51:03.910541"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 163",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 96,
    "creation_timestamp": "2025-11-01T15:51:03.910543"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 608",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 97,
    "creation_timestamp": "2025-11-01T15:51:03.910544"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 167",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 98,
    "creation_timestamp": "2025-11-01T15:51:03.910546"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 value = fundss[msg.sender];\n                        require(value > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 186",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 99,
    "creation_timestamp": "2025-11-01T15:51:03.910547"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 297",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 100,
    "creation_timestamp": "2025-11-01T15:51:03.910549"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 1",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 101,
    "creation_timestamp": "2025-11-01T15:51:03.910550"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 468",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 102,
    "creation_timestamp": "2025-11-01T15:51:03.910552"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 67",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 103,
    "creation_timestamp": "2025-11-01T15:51:03.910553"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 751",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 104,
    "creation_timestamp": "2025-11-01T15:51:03.910555"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 694",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 105,
    "creation_timestamp": "2025-11-01T15:51:03.910556"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 336",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 106,
    "creation_timestamp": "2025-11-01T15:51:03.910558"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 726",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 107,
    "creation_timestamp": "2025-11-01T15:51:03.910559"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 430",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 108,
    "creation_timestamp": "2025-11-01T15:51:03.910561"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 518",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 109,
    "creation_timestamp": "2025-11-01T15:51:03.910562"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 65",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 110,
    "creation_timestamp": "2025-11-01T15:51:03.910563"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 125",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 111,
    "creation_timestamp": "2025-11-01T15:51:03.910565"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 121",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 112,
    "creation_timestamp": "2025-11-01T15:51:03.910566"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 413",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 113,
    "creation_timestamp": "2025-11-01T15:51:03.910568"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 472",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 114,
    "creation_timestamp": "2025-11-01T15:51:03.910569"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 89",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 115,
    "creation_timestamp": "2025-11-01T15:51:03.910571"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 322",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 116,
    "creation_timestamp": "2025-11-01T15:51:03.910572"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 587",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 117,
    "creation_timestamp": "2025-11-01T15:51:03.910573"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 548",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 118,
    "creation_timestamp": "2025-11-01T15:51:03.910575"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 160",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 119,
    "creation_timestamp": "2025-11-01T15:51:03.910576"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 483",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 120,
    "creation_timestamp": "2025-11-01T15:51:03.910578"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 423",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 121,
    "creation_timestamp": "2025-11-01T15:51:03.910579"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 107",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 122,
    "creation_timestamp": "2025-11-01T15:51:03.910581"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 576",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 123,
    "creation_timestamp": "2025-11-01T15:51:03.910582"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 512",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 124,
    "creation_timestamp": "2025-11-01T15:51:03.910583"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 238",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 125,
    "creation_timestamp": "2025-11-01T15:51:03.910585"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 471",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 126,
    "creation_timestamp": "2025-11-01T15:51:03.910586"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 10",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 127,
    "creation_timestamp": "2025-11-01T15:51:03.910587"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 389",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 128,
    "creation_timestamp": "2025-11-01T15:51:03.910590"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 297",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 129,
    "creation_timestamp": "2025-11-01T15:51:03.910592"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 734",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 130,
    "creation_timestamp": "2025-11-01T15:51:03.910593"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 279",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 131,
    "creation_timestamp": "2025-11-01T15:51:03.910595"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 181",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 132,
    "creation_timestamp": "2025-11-01T15:51:03.910596"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 201",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 133,
    "creation_timestamp": "2025-11-01T15:51:03.910598"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 203",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 134,
    "creation_timestamp": "2025-11-01T15:51:03.910599"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 351",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 135,
    "creation_timestamp": "2025-11-01T15:51:03.910601"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 98",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 136,
    "creation_timestamp": "2025-11-01T15:51:03.910602"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 114",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 137,
    "creation_timestamp": "2025-11-01T15:51:03.910604"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 298",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 138,
    "creation_timestamp": "2025-11-01T15:51:03.910605"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 205",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 139,
    "creation_timestamp": "2025-11-01T15:51:03.910606"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 273",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 140,
    "creation_timestamp": "2025-11-01T15:51:03.910608"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 216",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 141,
    "creation_timestamp": "2025-11-01T15:51:03.910609"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 312",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 142,
    "creation_timestamp": "2025-11-01T15:51:03.910611"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 12",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 143,
    "creation_timestamp": "2025-11-01T15:51:03.910612"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 354",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 144,
    "creation_timestamp": "2025-11-01T15:51:03.910613"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(value * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 139",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 145,
    "creation_timestamp": "2025-11-01T15:51:03.910615"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 586",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 146,
    "creation_timestamp": "2025-11-01T15:51:03.910616"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 624",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 147,
    "creation_timestamp": "2025-11-01T15:51:03.910618"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 122",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 148,
    "creation_timestamp": "2025-11-01T15:51:03.910619"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 123",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 149,
    "creation_timestamp": "2025-11-01T15:51:03.910620"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 33",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 150,
    "creation_timestamp": "2025-11-01T15:51:03.910622"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 663",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 151,
    "creation_timestamp": "2025-11-01T15:51:03.910623"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 463",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 152,
    "creation_timestamp": "2025-11-01T15:51:03.910625"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 287",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 153,
    "creation_timestamp": "2025-11-01T15:51:03.910626"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 641",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 154,
    "creation_timestamp": "2025-11-01T15:51:03.910628"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 166",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 155,
    "creation_timestamp": "2025-11-01T15:51:03.910629"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 514",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 156,
    "creation_timestamp": "2025-11-01T15:51:03.910631"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 358",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 157,
    "creation_timestamp": "2025-11-01T15:51:03.910632"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 348",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 158,
    "creation_timestamp": "2025-11-01T15:51:03.910634"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 296",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 159,
    "creation_timestamp": "2025-11-01T15:51:03.910635"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 232",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 160,
    "creation_timestamp": "2025-11-01T15:51:03.910636"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 164",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 161,
    "creation_timestamp": "2025-11-01T15:51:03.910638"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 97",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 162,
    "creation_timestamp": "2025-11-01T15:51:03.910639"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 97",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 163,
    "creation_timestamp": "2025-11-01T15:51:03.910641"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 104",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 164,
    "creation_timestamp": "2025-11-01T15:51:03.910642"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 526",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 165,
    "creation_timestamp": "2025-11-01T15:51:03.910643"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 593",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 166,
    "creation_timestamp": "2025-11-01T15:51:03.910645"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 value = fundss[msg.sender];\n                        require(value > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 56",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 167,
    "creation_timestamp": "2025-11-01T15:51:03.910647"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[tx.origin];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 251",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 168,
    "creation_timestamp": "2025-11-01T15:51:03.910648"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 387",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 169,
    "creation_timestamp": "2025-11-01T15:51:03.910649"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 529",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 170,
    "creation_timestamp": "2025-11-01T15:51:03.910651"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 30",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 171,
    "creation_timestamp": "2025-11-01T15:51:03.910652"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 83",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 172,
    "creation_timestamp": "2025-11-01T15:51:03.910654"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 455",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 173,
    "creation_timestamp": "2025-11-01T15:51:03.910655"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 238",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 174,
    "creation_timestamp": "2025-11-01T15:51:03.910657"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 419",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 175,
    "creation_timestamp": "2025-11-01T15:51:03.910658"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 363",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 176,
    "creation_timestamp": "2025-11-01T15:51:03.910660"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 281",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 177,
    "creation_timestamp": "2025-11-01T15:51:03.910661"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 456",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 178,
    "creation_timestamp": "2025-11-01T15:51:03.910662"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 675",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 179,
    "creation_timestamp": "2025-11-01T15:51:03.910665"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 382",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 180,
    "creation_timestamp": "2025-11-01T15:51:03.910667"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 43",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 181,
    "creation_timestamp": "2025-11-01T15:51:03.910668"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 322",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 182,
    "creation_timestamp": "2025-11-01T15:51:03.910669"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 350",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 183,
    "creation_timestamp": "2025-11-01T15:51:03.910671"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 82",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 184,
    "creation_timestamp": "2025-11-01T15:51:03.910672"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 318",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 185,
    "creation_timestamp": "2025-11-01T15:51:03.910674"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 374",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 186,
    "creation_timestamp": "2025-11-01T15:51:03.910675"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 130",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 187,
    "creation_timestamp": "2025-11-01T15:51:03.910677"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 740",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 188,
    "creation_timestamp": "2025-11-01T15:51:03.910678"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 9",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 189,
    "creation_timestamp": "2025-11-01T15:51:03.910680"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 420",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 190,
    "creation_timestamp": "2025-11-01T15:51:03.910681"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 191",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 191,
    "creation_timestamp": "2025-11-01T15:51:03.910682"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 452",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 192,
    "creation_timestamp": "2025-11-01T15:51:03.910684"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 199",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 193,
    "creation_timestamp": "2025-11-01T15:51:03.910685"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[tx.origin];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 316",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 194,
    "creation_timestamp": "2025-11-01T15:51:03.910687"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 63",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 195,
    "creation_timestamp": "2025-11-01T15:51:03.910688"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 471",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 196,
    "creation_timestamp": "2025-11-01T15:51:03.910689"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 485",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 197,
    "creation_timestamp": "2025-11-01T15:51:03.910691"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 323",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 198,
    "creation_timestamp": "2025-11-01T15:51:03.910692"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 739",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 199,
    "creation_timestamp": "2025-11-01T15:51:03.910694"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 336",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 200,
    "creation_timestamp": "2025-11-01T15:51:03.910695"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 600",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 201,
    "creation_timestamp": "2025-11-01T15:51:03.910697"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 697",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 202,
    "creation_timestamp": "2025-11-01T15:51:03.910698"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 528",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 203,
    "creation_timestamp": "2025-11-01T15:51:03.910699"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 342",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 204,
    "creation_timestamp": "2025-11-01T15:51:03.910701"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 154",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 205,
    "creation_timestamp": "2025-11-01T15:51:03.910703"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 275",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 206,
    "creation_timestamp": "2025-11-01T15:51:03.910704"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 82",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 207,
    "creation_timestamp": "2025-11-01T15:51:03.910705"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 208",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 208,
    "creation_timestamp": "2025-11-01T15:51:03.910707"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 572",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 209,
    "creation_timestamp": "2025-11-01T15:51:03.910708"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 156",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 210,
    "creation_timestamp": "2025-11-01T15:51:03.910710"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 730",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 211,
    "creation_timestamp": "2025-11-01T15:51:03.910711"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 185",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 212,
    "creation_timestamp": "2025-11-01T15:51:03.910713"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 191",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 213,
    "creation_timestamp": "2025-11-01T15:51:03.910714"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 554",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 214,
    "creation_timestamp": "2025-11-01T15:51:03.910715"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 91",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 215,
    "creation_timestamp": "2025-11-01T15:51:03.910717"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 37",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 216,
    "creation_timestamp": "2025-11-01T15:51:03.910718"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 100",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 217,
    "creation_timestamp": "2025-11-01T15:51:03.910720"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 58",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 218,
    "creation_timestamp": "2025-11-01T15:51:03.910721"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 643",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 219,
    "creation_timestamp": "2025-11-01T15:51:03.910723"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 108",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 220,
    "creation_timestamp": "2025-11-01T15:51:03.910724"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 127",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 221,
    "creation_timestamp": "2025-11-01T15:51:03.910725"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 36",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 222,
    "creation_timestamp": "2025-11-01T15:51:03.910727"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 73",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 223,
    "creation_timestamp": "2025-11-01T15:51:03.910728"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 414",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 224,
    "creation_timestamp": "2025-11-01T15:51:03.910730"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 73",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 225,
    "creation_timestamp": "2025-11-01T15:51:03.910731"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 701",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 226,
    "creation_timestamp": "2025-11-01T15:51:03.910733"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 567",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 227,
    "creation_timestamp": "2025-11-01T15:51:03.910734"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 5",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 228,
    "creation_timestamp": "2025-11-01T15:51:03.910735"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 792",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 229,
    "creation_timestamp": "2025-11-01T15:51:03.910737"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 615",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 230,
    "creation_timestamp": "2025-11-01T15:51:03.910739"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 252",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 231,
    "creation_timestamp": "2025-11-01T15:51:03.910741"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 757",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 232,
    "creation_timestamp": "2025-11-01T15:51:03.910743"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 486",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 233,
    "creation_timestamp": "2025-11-01T15:51:03.910744"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 434",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 234,
    "creation_timestamp": "2025-11-01T15:51:03.910745"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 362",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 235,
    "creation_timestamp": "2025-11-01T15:51:03.910747"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 170",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 236,
    "creation_timestamp": "2025-11-01T15:51:03.910748"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 684",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 237,
    "creation_timestamp": "2025-11-01T15:51:03.910750"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        assert(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 386",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 238,
    "creation_timestamp": "2025-11-01T15:51:03.910751"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 135",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 239,
    "creation_timestamp": "2025-11-01T15:51:03.910753"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[tx.origin];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 36",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 240,
    "creation_timestamp": "2025-11-01T15:51:03.910754"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 502",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 241,
    "creation_timestamp": "2025-11-01T15:51:03.910755"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 149",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 242,
    "creation_timestamp": "2025-11-01T15:51:03.910757"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 302",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 243,
    "creation_timestamp": "2025-11-01T15:51:03.910758"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 381",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 244,
    "creation_timestamp": "2025-11-01T15:51:03.910760"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 68",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 245,
    "creation_timestamp": "2025-11-01T15:51:03.910761"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 408",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 246,
    "creation_timestamp": "2025-11-01T15:51:03.910762"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 54",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 247,
    "creation_timestamp": "2025-11-01T15:51:03.910764"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 417",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 248,
    "creation_timestamp": "2025-11-01T15:51:03.910765"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 279",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 249,
    "creation_timestamp": "2025-11-01T15:51:03.910767"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 239",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 250,
    "creation_timestamp": "2025-11-01T15:51:03.910768"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 233",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 251,
    "creation_timestamp": "2025-11-01T15:51:03.910770"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 123",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 252,
    "creation_timestamp": "2025-11-01T15:51:03.910771"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 548",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 253,
    "creation_timestamp": "2025-11-01T15:51:03.910773"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 138",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 254,
    "creation_timestamp": "2025-11-01T15:51:03.910774"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 397",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 255,
    "creation_timestamp": "2025-11-01T15:51:03.910776"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 149",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 256,
    "creation_timestamp": "2025-11-01T15:51:03.910777"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 59",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 257,
    "creation_timestamp": "2025-11-01T15:51:03.910778"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 311",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 258,
    "creation_timestamp": "2025-11-01T15:51:03.910780"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 235",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 259,
    "creation_timestamp": "2025-11-01T15:51:03.910781"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 324",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 260,
    "creation_timestamp": "2025-11-01T15:51:03.910783"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 488",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 261,
    "creation_timestamp": "2025-11-01T15:51:03.910784"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 118",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 262,
    "creation_timestamp": "2025-11-01T15:51:03.910786"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 7",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 263,
    "creation_timestamp": "2025-11-01T15:51:03.910787"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 539",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 264,
    "creation_timestamp": "2025-11-01T15:51:03.910789"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 602",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 265,
    "creation_timestamp": "2025-11-01T15:51:03.910790"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 162",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 266,
    "creation_timestamp": "2025-11-01T15:51:03.910792"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 101",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 267,
    "creation_timestamp": "2025-11-01T15:51:03.910793"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 131",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 268,
    "creation_timestamp": "2025-11-01T15:51:03.910794"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 166",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 269,
    "creation_timestamp": "2025-11-01T15:51:03.910796"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 385",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 270,
    "creation_timestamp": "2025-11-01T15:51:03.910797"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 67",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 271,
    "creation_timestamp": "2025-11-01T15:51:03.910799"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 72",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 272,
    "creation_timestamp": "2025-11-01T15:51:03.910800"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 44",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 273,
    "creation_timestamp": "2025-11-01T15:51:03.910802"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 430",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 274,
    "creation_timestamp": "2025-11-01T15:51:03.910803"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 147",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 275,
    "creation_timestamp": "2025-11-01T15:51:03.910805"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 373",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 276,
    "creation_timestamp": "2025-11-01T15:51:03.910806"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 198",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 277,
    "creation_timestamp": "2025-11-01T15:51:03.910808"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 299",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 278,
    "creation_timestamp": "2025-11-01T15:51:03.910809"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 140",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 279,
    "creation_timestamp": "2025-11-01T15:51:03.910810"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 163",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 280,
    "creation_timestamp": "2025-11-01T15:51:03.910812"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 366",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 281,
    "creation_timestamp": "2025-11-01T15:51:03.910813"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 368",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 282,
    "creation_timestamp": "2025-11-01T15:51:03.910816"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 209",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 283,
    "creation_timestamp": "2025-11-01T15:51:03.910818"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 169",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 284,
    "creation_timestamp": "2025-11-01T15:51:03.910819"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 229",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 285,
    "creation_timestamp": "2025-11-01T15:51:03.910820"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 13",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 286,
    "creation_timestamp": "2025-11-01T15:51:03.910822"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 269",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 287,
    "creation_timestamp": "2025-11-01T15:51:03.910823"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 301",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 288,
    "creation_timestamp": "2025-11-01T15:51:03.910825"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 120",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 289,
    "creation_timestamp": "2025-11-01T15:51:03.910826"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 345",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 290,
    "creation_timestamp": "2025-11-01T15:51:03.910828"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 251",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 291,
    "creation_timestamp": "2025-11-01T15:51:03.910829"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 268",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 292,
    "creation_timestamp": "2025-11-01T15:51:03.910831"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 68",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 293,
    "creation_timestamp": "2025-11-01T15:51:03.910832"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 506",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 294,
    "creation_timestamp": "2025-11-01T15:51:03.910833"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 118",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 295,
    "creation_timestamp": "2025-11-01T15:51:03.910835"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 631",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 296,
    "creation_timestamp": "2025-11-01T15:51:03.910836"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 224",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 297,
    "creation_timestamp": "2025-11-01T15:51:03.910838"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 158",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 298,
    "creation_timestamp": "2025-11-01T15:51:03.910839"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 347",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 299,
    "creation_timestamp": "2025-11-01T15:51:03.910841"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 747",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 300,
    "creation_timestamp": "2025-11-01T15:51:03.910842"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 390",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 301,
    "creation_timestamp": "2025-11-01T15:51:03.910843"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 54",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 302,
    "creation_timestamp": "2025-11-01T15:51:03.910845"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 107",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 303,
    "creation_timestamp": "2025-11-01T15:51:03.910848"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 271",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 304,
    "creation_timestamp": "2025-11-01T15:51:03.910849"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 610",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 305,
    "creation_timestamp": "2025-11-01T15:51:03.910851"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 241",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 306,
    "creation_timestamp": "2025-11-01T15:51:03.910852"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 32",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 307,
    "creation_timestamp": "2025-11-01T15:51:03.910854"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 52",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 308,
    "creation_timestamp": "2025-11-01T15:51:03.910855"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 491",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 309,
    "creation_timestamp": "2025-11-01T15:51:03.910857"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 604",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 310,
    "creation_timestamp": "2025-11-01T15:51:03.910858"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 19",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 311,
    "creation_timestamp": "2025-11-01T15:51:03.910859"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 42",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 312,
    "creation_timestamp": "2025-11-01T15:51:03.910861"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 596",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 313,
    "creation_timestamp": "2025-11-01T15:51:03.910862"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 339",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 314,
    "creation_timestamp": "2025-11-01T15:51:03.910864"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 192",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 315,
    "creation_timestamp": "2025-11-01T15:51:03.910866"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 421",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 316,
    "creation_timestamp": "2025-11-01T15:51:03.910867"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 393",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 317,
    "creation_timestamp": "2025-11-01T15:51:03.910869"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 660",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 318,
    "creation_timestamp": "2025-11-01T15:51:03.910870"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 520",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 319,
    "creation_timestamp": "2025-11-01T15:51:03.910871"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 525",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 320,
    "creation_timestamp": "2025-11-01T15:51:03.910873"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 22",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 321,
    "creation_timestamp": "2025-11-01T15:51:03.910874"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 396",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 322,
    "creation_timestamp": "2025-11-01T15:51:03.910876"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        assert(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 121",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 323,
    "creation_timestamp": "2025-11-01T15:51:03.910877"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 2",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 324,
    "creation_timestamp": "2025-11-01T15:51:03.910879"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 334",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 325,
    "creation_timestamp": "2025-11-01T15:51:03.910880"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 383",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 326,
    "creation_timestamp": "2025-11-01T15:51:03.910881"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 761",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 327,
    "creation_timestamp": "2025-11-01T15:51:03.910883"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 372",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 328,
    "creation_timestamp": "2025-11-01T15:51:03.910884"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 17",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 329,
    "creation_timestamp": "2025-11-01T15:51:03.910886"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 77",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 330,
    "creation_timestamp": "2025-11-01T15:51:03.910887"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 138",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 331,
    "creation_timestamp": "2025-11-01T15:51:03.910889"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 434",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 332,
    "creation_timestamp": "2025-11-01T15:51:03.910892"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 4",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 333,
    "creation_timestamp": "2025-11-01T15:51:03.910893"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 437",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 334,
    "creation_timestamp": "2025-11-01T15:51:03.910895"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 454",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 335,
    "creation_timestamp": "2025-11-01T15:51:03.910896"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 3",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 336,
    "creation_timestamp": "2025-11-01T15:51:03.910897"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 407",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 337,
    "creation_timestamp": "2025-11-01T15:51:03.910899"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 265",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 338,
    "creation_timestamp": "2025-11-01T15:51:03.910900"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 33",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 339,
    "creation_timestamp": "2025-11-01T15:51:03.910902"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 562",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 340,
    "creation_timestamp": "2025-11-01T15:51:03.910903"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 417",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 341,
    "creation_timestamp": "2025-11-01T15:51:03.910905"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 263",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 342,
    "creation_timestamp": "2025-11-01T15:51:03.910906"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 435",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 343,
    "creation_timestamp": "2025-11-01T15:51:03.910907"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 450",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 344,
    "creation_timestamp": "2025-11-01T15:51:03.910909"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 103",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 345,
    "creation_timestamp": "2025-11-01T15:51:03.910910"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 564",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 346,
    "creation_timestamp": "2025-11-01T15:51:03.910912"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 156",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 347,
    "creation_timestamp": "2025-11-01T15:51:03.910913"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 313",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 348,
    "creation_timestamp": "2025-11-01T15:51:03.910914"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 581",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 349,
    "creation_timestamp": "2025-11-01T15:51:03.910916"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 724",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 350,
    "creation_timestamp": "2025-11-01T15:51:03.910917"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 302",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 351,
    "creation_timestamp": "2025-11-01T15:51:03.910919"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 698",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 352,
    "creation_timestamp": "2025-11-01T15:51:03.910920"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 10",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 353,
    "creation_timestamp": "2025-11-01T15:51:03.910922"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 170",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 354,
    "creation_timestamp": "2025-11-01T15:51:03.910923"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 49",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 355,
    "creation_timestamp": "2025-11-01T15:51:03.910924"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 517",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 356,
    "creation_timestamp": "2025-11-01T15:51:03.910926"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 348",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 357,
    "creation_timestamp": "2025-11-01T15:51:03.910927"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 752",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 358,
    "creation_timestamp": "2025-11-01T15:51:03.910929"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 501",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 359,
    "creation_timestamp": "2025-11-01T15:51:03.910930"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 211",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 360,
    "creation_timestamp": "2025-11-01T15:51:03.910931"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 474",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 361,
    "creation_timestamp": "2025-11-01T15:51:03.910933"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 51",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 362,
    "creation_timestamp": "2025-11-01T15:51:03.910934"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 267",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 363,
    "creation_timestamp": "2025-11-01T15:51:03.910935"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 111",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 364,
    "creation_timestamp": "2025-11-01T15:51:03.910937"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 225",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 365,
    "creation_timestamp": "2025-11-01T15:51:03.910938"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 311",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 366,
    "creation_timestamp": "2025-11-01T15:51:03.910940"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 104",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 367,
    "creation_timestamp": "2025-11-01T15:51:03.910941"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 285",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 368,
    "creation_timestamp": "2025-11-01T15:51:03.910943"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 value = fundss[msg.sender];\n                        require(value > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 71",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 369,
    "creation_timestamp": "2025-11-01T15:51:03.910944"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 210",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 370,
    "creation_timestamp": "2025-11-01T15:51:03.910945"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 765",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 371,
    "creation_timestamp": "2025-11-01T15:51:03.910947"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 377",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 372,
    "creation_timestamp": "2025-11-01T15:51:03.910948"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 310",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 373,
    "creation_timestamp": "2025-11-01T15:51:03.910950"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 250",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 374,
    "creation_timestamp": "2025-11-01T15:51:03.910951"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 594",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 375,
    "creation_timestamp": "2025-11-01T15:51:03.910953"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 422",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 376,
    "creation_timestamp": "2025-11-01T15:51:03.910954"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 143",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 377,
    "creation_timestamp": "2025-11-01T15:51:03.910955"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 507",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 378,
    "creation_timestamp": "2025-11-01T15:51:03.910957"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 222",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 379,
    "creation_timestamp": "2025-11-01T15:51:03.910958"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 76",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 380,
    "creation_timestamp": "2025-11-01T15:51:03.910960"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 28",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 381,
    "creation_timestamp": "2025-11-01T15:51:03.910962"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 532",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 382,
    "creation_timestamp": "2025-11-01T15:51:03.910963"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 137",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 383,
    "creation_timestamp": "2025-11-01T15:51:03.910966"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 18",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 384,
    "creation_timestamp": "2025-11-01T15:51:03.910967"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 118",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 385,
    "creation_timestamp": "2025-11-01T15:51:03.910969"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 791",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 386,
    "creation_timestamp": "2025-11-01T15:51:03.910970"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 261",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 387,
    "creation_timestamp": "2025-11-01T15:51:03.910972"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 591",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 388,
    "creation_timestamp": "2025-11-01T15:51:03.910973"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 213",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 389,
    "creation_timestamp": "2025-11-01T15:51:03.910974"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 122",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 390,
    "creation_timestamp": "2025-11-01T15:51:03.910976"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 226",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 391,
    "creation_timestamp": "2025-11-01T15:51:03.910977"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 574",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 392,
    "creation_timestamp": "2025-11-01T15:51:03.910979"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 236",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 393,
    "creation_timestamp": "2025-11-01T15:51:03.910980"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 59",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 394,
    "creation_timestamp": "2025-11-01T15:51:03.910982"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 29",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 395,
    "creation_timestamp": "2025-11-01T15:51:03.910983"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 75",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 396,
    "creation_timestamp": "2025-11-01T15:51:03.910985"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 298",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 397,
    "creation_timestamp": "2025-11-01T15:51:03.910986"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 32",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 398,
    "creation_timestamp": "2025-11-01T15:51:03.910987"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 494",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 399,
    "creation_timestamp": "2025-11-01T15:51:03.910989"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 17",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 400,
    "creation_timestamp": "2025-11-01T15:51:03.910991"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 61",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 401,
    "creation_timestamp": "2025-11-01T15:51:03.910992"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 132",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 402,
    "creation_timestamp": "2025-11-01T15:51:03.910993"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 457",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 403,
    "creation_timestamp": "2025-11-01T15:51:03.910995"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 124",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 404,
    "creation_timestamp": "2025-11-01T15:51:03.910996"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 128",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 405,
    "creation_timestamp": "2025-11-01T15:51:03.910998"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 763",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 406,
    "creation_timestamp": "2025-11-01T15:51:03.910999"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 103",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 407,
    "creation_timestamp": "2025-11-01T15:51:03.911001"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 174",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 408,
    "creation_timestamp": "2025-11-01T15:51:03.911002"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 367",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 409,
    "creation_timestamp": "2025-11-01T15:51:03.911004"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 315",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 410,
    "creation_timestamp": "2025-11-01T15:51:03.911005"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 452",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 411,
    "creation_timestamp": "2025-11-01T15:51:03.911006"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        assert(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 346",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 412,
    "creation_timestamp": "2025-11-01T15:51:03.911008"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 784",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 413,
    "creation_timestamp": "2025-11-01T15:51:03.911009"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 70",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 414,
    "creation_timestamp": "2025-11-01T15:51:03.911011"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 123",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 415,
    "creation_timestamp": "2025-11-01T15:51:03.911012"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 317",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 416,
    "creation_timestamp": "2025-11-01T15:51:03.911014"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 409",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 417,
    "creation_timestamp": "2025-11-01T15:51:03.911015"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 163",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 418,
    "creation_timestamp": "2025-11-01T15:51:03.911017"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 582",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 419,
    "creation_timestamp": "2025-11-01T15:51:03.911018"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 484",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 420,
    "creation_timestamp": "2025-11-01T15:51:03.911019"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 388",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 421,
    "creation_timestamp": "2025-11-01T15:51:03.911021"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 32",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 422,
    "creation_timestamp": "2025-11-01T15:51:03.911022"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 176",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 423,
    "creation_timestamp": "2025-11-01T15:51:03.911024"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 6",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 424,
    "creation_timestamp": "2025-11-01T15:51:03.911025"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 207",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 425,
    "creation_timestamp": "2025-11-01T15:51:03.911027"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 383",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 426,
    "creation_timestamp": "2025-11-01T15:51:03.911028"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 264",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 427,
    "creation_timestamp": "2025-11-01T15:51:03.911029"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 372",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 428,
    "creation_timestamp": "2025-11-01T15:51:03.911031"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 306",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 429,
    "creation_timestamp": "2025-11-01T15:51:03.911032"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 275",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 430,
    "creation_timestamp": "2025-11-01T15:51:03.911034"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 74",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 431,
    "creation_timestamp": "2025-11-01T15:51:03.911037"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 399",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 432,
    "creation_timestamp": "2025-11-01T15:51:03.911038"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 607",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 433,
    "creation_timestamp": "2025-11-01T15:51:03.911040"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 197",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 434,
    "creation_timestamp": "2025-11-01T15:51:03.911042"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 473",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 435,
    "creation_timestamp": "2025-11-01T15:51:03.911044"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 773",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 436,
    "creation_timestamp": "2025-11-01T15:51:03.911045"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 558",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 437,
    "creation_timestamp": "2025-11-01T15:51:03.911047"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 590",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 438,
    "creation_timestamp": "2025-11-01T15:51:03.911048"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 422",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 439,
    "creation_timestamp": "2025-11-01T15:51:03.911050"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 566",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 440,
    "creation_timestamp": "2025-11-01T15:51:03.911051"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 101",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 441,
    "creation_timestamp": "2025-11-01T15:51:03.911053"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 646",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 442,
    "creation_timestamp": "2025-11-01T15:51:03.911054"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 355",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 443,
    "creation_timestamp": "2025-11-01T15:51:03.911056"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 57",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 444,
    "creation_timestamp": "2025-11-01T15:51:03.911057"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 117",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 445,
    "creation_timestamp": "2025-11-01T15:51:03.911059"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 60",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 446,
    "creation_timestamp": "2025-11-01T15:51:03.911060"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 96",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 447,
    "creation_timestamp": "2025-11-01T15:51:03.911061"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 559",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 448,
    "creation_timestamp": "2025-11-01T15:51:03.911063"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 142",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 449,
    "creation_timestamp": "2025-11-01T15:51:03.911064"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 64",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 450,
    "creation_timestamp": "2025-11-01T15:51:03.911066"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 46",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 451,
    "creation_timestamp": "2025-11-01T15:51:03.911067"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 337",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 452,
    "creation_timestamp": "2025-11-01T15:51:03.911068"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 46",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 453,
    "creation_timestamp": "2025-11-01T15:51:03.911070"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 270",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 454,
    "creation_timestamp": "2025-11-01T15:51:03.911071"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 220",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 455,
    "creation_timestamp": "2025-11-01T15:51:03.911073"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 461",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 456,
    "creation_timestamp": "2025-11-01T15:51:03.911074"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 226",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 457,
    "creation_timestamp": "2025-11-01T15:51:03.911076"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 253",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 458,
    "creation_timestamp": "2025-11-01T15:51:03.911077"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[tx.origin];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 76",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 459,
    "creation_timestamp": "2025-11-01T15:51:03.911079"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 499",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 460,
    "creation_timestamp": "2025-11-01T15:51:03.911080"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 94",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 461,
    "creation_timestamp": "2025-11-01T15:51:03.911082"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 516",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 462,
    "creation_timestamp": "2025-11-01T15:51:03.911083"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 248",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 463,
    "creation_timestamp": "2025-11-01T15:51:03.911084"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 412",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 464,
    "creation_timestamp": "2025-11-01T15:51:03.911086"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 487",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 465,
    "creation_timestamp": "2025-11-01T15:51:03.911087"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 116",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 466,
    "creation_timestamp": "2025-11-01T15:51:03.911089"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 479",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 467,
    "creation_timestamp": "2025-11-01T15:51:03.911090"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 245",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 468,
    "creation_timestamp": "2025-11-01T15:51:03.911091"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 2",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 469,
    "creation_timestamp": "2025-11-01T15:51:03.911093"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 125",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 470,
    "creation_timestamp": "2025-11-01T15:51:03.911094"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 500",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 471,
    "creation_timestamp": "2025-11-01T15:51:03.911096"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 518",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 472,
    "creation_timestamp": "2025-11-01T15:51:03.911097"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 477",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 473,
    "creation_timestamp": "2025-11-01T15:51:03.911098"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 20",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 474,
    "creation_timestamp": "2025-11-01T15:51:03.911100"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 149",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 475,
    "creation_timestamp": "2025-11-01T15:51:03.911101"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 527",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 476,
    "creation_timestamp": "2025-11-01T15:51:03.911103"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 375",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 477,
    "creation_timestamp": "2025-11-01T15:51:03.911104"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 436",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 478,
    "creation_timestamp": "2025-11-01T15:51:03.911106"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 204",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 479,
    "creation_timestamp": "2025-11-01T15:51:03.911107"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 285",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 480,
    "creation_timestamp": "2025-11-01T15:51:03.911109"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 9",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 481,
    "creation_timestamp": "2025-11-01T15:51:03.911110"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 87",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 482,
    "creation_timestamp": "2025-11-01T15:51:03.911112"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 595",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 483,
    "creation_timestamp": "2025-11-01T15:51:03.911113"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 45",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 484,
    "creation_timestamp": "2025-11-01T15:51:03.911114"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 134",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 485,
    "creation_timestamp": "2025-11-01T15:51:03.911116"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 545",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 486,
    "creation_timestamp": "2025-11-01T15:51:03.911119"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 194",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 487,
    "creation_timestamp": "2025-11-01T15:51:03.911120"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 45",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 488,
    "creation_timestamp": "2025-11-01T15:51:03.911122"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 180",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 489,
    "creation_timestamp": "2025-11-01T15:51:03.911123"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 546",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 490,
    "creation_timestamp": "2025-11-01T15:51:03.911125"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 23",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 491,
    "creation_timestamp": "2025-11-01T15:51:03.911126"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 334",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 492,
    "creation_timestamp": "2025-11-01T15:51:03.911128"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 605",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 493,
    "creation_timestamp": "2025-11-01T15:51:03.911129"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 332",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 494,
    "creation_timestamp": "2025-11-01T15:51:03.911131"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 322",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 495,
    "creation_timestamp": "2025-11-01T15:51:03.911132"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 43",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 496,
    "creation_timestamp": "2025-11-01T15:51:03.911133"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 513",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 497,
    "creation_timestamp": "2025-11-01T15:51:03.911135"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 115",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 498,
    "creation_timestamp": "2025-11-01T15:51:03.911136"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 50",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 499,
    "creation_timestamp": "2025-11-01T15:51:03.911138"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 365",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 500,
    "creation_timestamp": "2025-11-01T15:51:03.911139"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 174",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 501,
    "creation_timestamp": "2025-11-01T15:51:03.911141"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 244",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 502,
    "creation_timestamp": "2025-11-01T15:51:03.911142"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 278",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 503,
    "creation_timestamp": "2025-11-01T15:51:03.911144"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 415",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 504,
    "creation_timestamp": "2025-11-01T15:51:03.911145"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 170",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 505,
    "creation_timestamp": "2025-11-01T15:51:03.911147"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 678",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 506,
    "creation_timestamp": "2025-11-01T15:51:03.911148"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 187",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 507,
    "creation_timestamp": "2025-11-01T15:51:03.911150"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 715",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 508,
    "creation_timestamp": "2025-11-01T15:51:03.911151"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 80",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 509,
    "creation_timestamp": "2025-11-01T15:51:03.911153"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 164",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 510,
    "creation_timestamp": "2025-11-01T15:51:03.911154"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 529",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 511,
    "creation_timestamp": "2025-11-01T15:51:03.911156"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 182",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 512,
    "creation_timestamp": "2025-11-01T15:51:03.911157"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 26",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 513,
    "creation_timestamp": "2025-11-01T15:51:03.911159"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 335",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 514,
    "creation_timestamp": "2025-11-01T15:51:03.911160"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 383",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 515,
    "creation_timestamp": "2025-11-01T15:51:03.911161"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 287",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 516,
    "creation_timestamp": "2025-11-01T15:51:03.911163"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 593",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 517,
    "creation_timestamp": "2025-11-01T15:51:03.911164"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 14",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 518,
    "creation_timestamp": "2025-11-01T15:51:03.911166"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 349",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 519,
    "creation_timestamp": "2025-11-01T15:51:03.911167"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 126",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 520,
    "creation_timestamp": "2025-11-01T15:51:03.911168"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 151",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 521,
    "creation_timestamp": "2025-11-01T15:51:03.911170"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 29",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 522,
    "creation_timestamp": "2025-11-01T15:51:03.911171"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 65",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 523,
    "creation_timestamp": "2025-11-01T15:51:03.911173"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 378",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 524,
    "creation_timestamp": "2025-11-01T15:51:03.911174"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 330",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 525,
    "creation_timestamp": "2025-11-01T15:51:03.911176"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 246",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 526,
    "creation_timestamp": "2025-11-01T15:51:03.911177"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 567",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 527,
    "creation_timestamp": "2025-11-01T15:51:03.911178"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 24",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 528,
    "creation_timestamp": "2025-11-01T15:51:03.911180"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 419",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 529,
    "creation_timestamp": "2025-11-01T15:51:03.911181"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 578",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 530,
    "creation_timestamp": "2025-11-01T15:51:03.911183"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 230",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 531,
    "creation_timestamp": "2025-11-01T15:51:03.911184"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 172",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 532,
    "creation_timestamp": "2025-11-01T15:51:03.911186"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 19",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 533,
    "creation_timestamp": "2025-11-01T15:51:03.911187"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 130",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 534,
    "creation_timestamp": "2025-11-01T15:51:03.911189"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 109",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 535,
    "creation_timestamp": "2025-11-01T15:51:03.911190"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 481",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 536,
    "creation_timestamp": "2025-11-01T15:51:03.911193"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 73",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 537,
    "creation_timestamp": "2025-11-01T15:51:03.911194"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        assert(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 26",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 538,
    "creation_timestamp": "2025-11-01T15:51:03.911196"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 760",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 539,
    "creation_timestamp": "2025-11-01T15:51:03.911197"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 137",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 540,
    "creation_timestamp": "2025-11-01T15:51:03.911199"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 213",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 541,
    "creation_timestamp": "2025-11-01T15:51:03.911200"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 462",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 542,
    "creation_timestamp": "2025-11-01T15:51:03.911202"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 135",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 543,
    "creation_timestamp": "2025-11-01T15:51:03.911203"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 356",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 544,
    "creation_timestamp": "2025-11-01T15:51:03.911204"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 70",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 545,
    "creation_timestamp": "2025-11-01T15:51:03.911206"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 392",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 546,
    "creation_timestamp": "2025-11-01T15:51:03.911207"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 49",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 547,
    "creation_timestamp": "2025-11-01T15:51:03.911209"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 3",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 548,
    "creation_timestamp": "2025-11-01T15:51:03.911210"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 148",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 549,
    "creation_timestamp": "2025-11-01T15:51:03.911212"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 136",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 550,
    "creation_timestamp": "2025-11-01T15:51:03.911213"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 465",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 551,
    "creation_timestamp": "2025-11-01T15:51:03.911214"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 565",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 552,
    "creation_timestamp": "2025-11-01T15:51:03.911216"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 11",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 553,
    "creation_timestamp": "2025-11-01T15:51:03.911217"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 230",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 554,
    "creation_timestamp": "2025-11-01T15:51:03.911219"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 102",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 555,
    "creation_timestamp": "2025-11-01T15:51:03.911220"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 134",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 556,
    "creation_timestamp": "2025-11-01T15:51:03.911222"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 214",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 557,
    "creation_timestamp": "2025-11-01T15:51:03.911223"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 464",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 558,
    "creation_timestamp": "2025-11-01T15:51:03.911224"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 700",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 559,
    "creation_timestamp": "2025-11-01T15:51:03.911227"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 255",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 560,
    "creation_timestamp": "2025-11-01T15:51:03.911228"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 294",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 561,
    "creation_timestamp": "2025-11-01T15:51:03.911230"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 93",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 562,
    "creation_timestamp": "2025-11-01T15:51:03.911231"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 115",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 563,
    "creation_timestamp": "2025-11-01T15:51:03.911233"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 496",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 564,
    "creation_timestamp": "2025-11-01T15:51:03.911234"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 302",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 565,
    "creation_timestamp": "2025-11-01T15:51:03.911236"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 75",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 566,
    "creation_timestamp": "2025-11-01T15:51:03.911237"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 414",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 567,
    "creation_timestamp": "2025-11-01T15:51:03.911239"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[tx.origin];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 51",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 568,
    "creation_timestamp": "2025-11-01T15:51:03.911240"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 273",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 569,
    "creation_timestamp": "2025-11-01T15:51:03.911242"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 411",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 570,
    "creation_timestamp": "2025-11-01T15:51:03.911243"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 430",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 571,
    "creation_timestamp": "2025-11-01T15:51:03.911244"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 78",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 572,
    "creation_timestamp": "2025-11-01T15:51:03.911246"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 489",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 573,
    "creation_timestamp": "2025-11-01T15:51:03.911248"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 369",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 574,
    "creation_timestamp": "2025-11-01T15:51:03.911249"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 689",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 575,
    "creation_timestamp": "2025-11-01T15:51:03.911250"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 163",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 576,
    "creation_timestamp": "2025-11-01T15:51:03.911252"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 405",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 577,
    "creation_timestamp": "2025-11-01T15:51:03.911253"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 284",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 578,
    "creation_timestamp": "2025-11-01T15:51:03.911255"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 423",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 579,
    "creation_timestamp": "2025-11-01T15:51:03.911256"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 738",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 580,
    "creation_timestamp": "2025-11-01T15:51:03.911258"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 179",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 581,
    "creation_timestamp": "2025-11-01T15:51:03.911259"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 538",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 582,
    "creation_timestamp": "2025-11-01T15:51:03.911260"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 199",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 583,
    "creation_timestamp": "2025-11-01T15:51:03.911262"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 171",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 584,
    "creation_timestamp": "2025-11-01T15:51:03.911263"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 448",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 585,
    "creation_timestamp": "2025-11-01T15:51:03.911265"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 682",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 586,
    "creation_timestamp": "2025-11-01T15:51:03.911266"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 126",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 587,
    "creation_timestamp": "2025-11-01T15:51:03.911269"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 111",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 588,
    "creation_timestamp": "2025-11-01T15:51:03.911271"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 205",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 589,
    "creation_timestamp": "2025-11-01T15:51:03.911272"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 116",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 590,
    "creation_timestamp": "2025-11-01T15:51:03.911273"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 429",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 591,
    "creation_timestamp": "2025-11-01T15:51:03.911275"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 183",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 592,
    "creation_timestamp": "2025-11-01T15:51:03.911276"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 597",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 593,
    "creation_timestamp": "2025-11-01T15:51:03.911278"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 27",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 594,
    "creation_timestamp": "2025-11-01T15:51:03.911279"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 21",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 595,
    "creation_timestamp": "2025-11-01T15:51:03.911281"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 101",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 596,
    "creation_timestamp": "2025-11-01T15:51:03.911282"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 64",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 597,
    "creation_timestamp": "2025-11-01T15:51:03.911283"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 131",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 598,
    "creation_timestamp": "2025-11-01T15:51:03.911285"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 247",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 599,
    "creation_timestamp": "2025-11-01T15:51:03.911286"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 77",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 600,
    "creation_timestamp": "2025-11-01T15:51:03.911288"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 184",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 601,
    "creation_timestamp": "2025-11-01T15:51:03.911289"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 238",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 602,
    "creation_timestamp": "2025-11-01T15:51:03.911291"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 331",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 603,
    "creation_timestamp": "2025-11-01T15:51:03.911292"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 259",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 604,
    "creation_timestamp": "2025-11-01T15:51:03.911293"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 479",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 605,
    "creation_timestamp": "2025-11-01T15:51:03.911295"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 361",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 606,
    "creation_timestamp": "2025-11-01T15:51:03.911296"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 284",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 607,
    "creation_timestamp": "2025-11-01T15:51:03.911298"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 517",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 608,
    "creation_timestamp": "2025-11-01T15:51:03.911299"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 476",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 609,
    "creation_timestamp": "2025-11-01T15:51:03.911301"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 493",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 610,
    "creation_timestamp": "2025-11-01T15:51:03.911302"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 475",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 611,
    "creation_timestamp": "2025-11-01T15:51:03.911304"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 404",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 612,
    "creation_timestamp": "2025-11-01T15:51:03.911305"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 598",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 613,
    "creation_timestamp": "2025-11-01T15:51:03.911307"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 358",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 614,
    "creation_timestamp": "2025-11-01T15:51:03.911308"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 746",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 615,
    "creation_timestamp": "2025-11-01T15:51:03.911309"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 86",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 616,
    "creation_timestamp": "2025-11-01T15:51:03.911311"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 392",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 617,
    "creation_timestamp": "2025-11-01T15:51:03.911312"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 215",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 618,
    "creation_timestamp": "2025-11-01T15:51:03.911314"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 155",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 619,
    "creation_timestamp": "2025-11-01T15:51:03.911315"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 337",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 620,
    "creation_timestamp": "2025-11-01T15:51:03.911317"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 208",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 621,
    "creation_timestamp": "2025-11-01T15:51:03.911318"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 157",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 622,
    "creation_timestamp": "2025-11-01T15:51:03.911319"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 768",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 623,
    "creation_timestamp": "2025-11-01T15:51:03.911321"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 342",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 624,
    "creation_timestamp": "2025-11-01T15:51:03.911322"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 487",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 625,
    "creation_timestamp": "2025-11-01T15:51:03.911324"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 433",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 626,
    "creation_timestamp": "2025-11-01T15:51:03.911325"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 494",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 627,
    "creation_timestamp": "2025-11-01T15:51:03.911326"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 168",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 628,
    "creation_timestamp": "2025-11-01T15:51:03.911328"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 11",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 629,
    "creation_timestamp": "2025-11-01T15:51:03.911329"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 179",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 630,
    "creation_timestamp": "2025-11-01T15:51:03.911331"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 621",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 631,
    "creation_timestamp": "2025-11-01T15:51:03.911332"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 7",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 632,
    "creation_timestamp": "2025-11-01T15:51:03.911334"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 474",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 633,
    "creation_timestamp": "2025-11-01T15:51:03.911335"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 113",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 634,
    "creation_timestamp": "2025-11-01T15:51:03.911336"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 16",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 635,
    "creation_timestamp": "2025-11-01T15:51:03.911338"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 275",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 636,
    "creation_timestamp": "2025-11-01T15:51:03.911339"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 352",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 637,
    "creation_timestamp": "2025-11-01T15:51:03.911341"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 151",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 638,
    "creation_timestamp": "2025-11-01T15:51:03.911344"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 132",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 639,
    "creation_timestamp": "2025-11-01T15:51:03.911345"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 138",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 640,
    "creation_timestamp": "2025-11-01T15:51:03.911346"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 393",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 641,
    "creation_timestamp": "2025-11-01T15:51:03.911348"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 35",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 642,
    "creation_timestamp": "2025-11-01T15:51:03.911349"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 298",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 643,
    "creation_timestamp": "2025-11-01T15:51:03.911351"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 669",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 644,
    "creation_timestamp": "2025-11-01T15:51:03.911352"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 438",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 645,
    "creation_timestamp": "2025-11-01T15:51:03.911354"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 339",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 646,
    "creation_timestamp": "2025-11-01T15:51:03.911355"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 507",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 647,
    "creation_timestamp": "2025-11-01T15:51:03.911357"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 190",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 648,
    "creation_timestamp": "2025-11-01T15:51:03.911358"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 577",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 649,
    "creation_timestamp": "2025-11-01T15:51:03.911359"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 556",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 650,
    "creation_timestamp": "2025-11-01T15:51:03.911361"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 193",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 651,
    "creation_timestamp": "2025-11-01T15:51:03.911362"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 240",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 652,
    "creation_timestamp": "2025-11-01T15:51:03.911364"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 215",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 653,
    "creation_timestamp": "2025-11-01T15:51:03.911365"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 85",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 654,
    "creation_timestamp": "2025-11-01T15:51:03.911367"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 542",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 655,
    "creation_timestamp": "2025-11-01T15:51:03.911368"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 492",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 656,
    "creation_timestamp": "2025-11-01T15:51:03.911370"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        assert(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 276",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 657,
    "creation_timestamp": "2025-11-01T15:51:03.911371"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 759",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 658,
    "creation_timestamp": "2025-11-01T15:51:03.911373"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 145",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 659,
    "creation_timestamp": "2025-11-01T15:51:03.911374"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 142",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 660,
    "creation_timestamp": "2025-11-01T15:51:03.911375"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 132",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 661,
    "creation_timestamp": "2025-11-01T15:51:03.911377"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 350",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 662,
    "creation_timestamp": "2025-11-01T15:51:03.911378"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 632",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 663,
    "creation_timestamp": "2025-11-01T15:51:03.911380"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 242",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 664,
    "creation_timestamp": "2025-11-01T15:51:03.911381"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 144",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 665,
    "creation_timestamp": "2025-11-01T15:51:03.911382"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 579",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 666,
    "creation_timestamp": "2025-11-01T15:51:03.911384"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 237",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 667,
    "creation_timestamp": "2025-11-01T15:51:03.911385"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 192",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 668,
    "creation_timestamp": "2025-11-01T15:51:03.911387"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 97",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 669,
    "creation_timestamp": "2025-11-01T15:51:03.911388"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 357",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 670,
    "creation_timestamp": "2025-11-01T15:51:03.911390"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 569",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 671,
    "creation_timestamp": "2025-11-01T15:51:03.911392"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 41",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 672,
    "creation_timestamp": "2025-11-01T15:51:03.911393"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 100",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 673,
    "creation_timestamp": "2025-11-01T15:51:03.911394"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 201",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 674,
    "creation_timestamp": "2025-11-01T15:51:03.911396"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 620",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 675,
    "creation_timestamp": "2025-11-01T15:51:03.911397"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 129",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 676,
    "creation_timestamp": "2025-11-01T15:51:03.911399"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 396",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 677,
    "creation_timestamp": "2025-11-01T15:51:03.911400"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 16",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 678,
    "creation_timestamp": "2025-11-01T15:51:03.911402"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 545",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 679,
    "creation_timestamp": "2025-11-01T15:51:03.911403"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 143",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 680,
    "creation_timestamp": "2025-11-01T15:51:03.911405"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 141",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 681,
    "creation_timestamp": "2025-11-01T15:51:03.911406"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 59",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 682,
    "creation_timestamp": "2025-11-01T15:51:03.911407"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 785",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 683,
    "creation_timestamp": "2025-11-01T15:51:03.911409"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 331",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 684,
    "creation_timestamp": "2025-11-01T15:51:03.911410"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 24",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 685,
    "creation_timestamp": "2025-11-01T15:51:03.911412"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 148",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 686,
    "creation_timestamp": "2025-11-01T15:51:03.911413"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 668",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 687,
    "creation_timestamp": "2025-11-01T15:51:03.911416"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 271",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 688,
    "creation_timestamp": "2025-11-01T15:51:03.911417"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 28",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 689,
    "creation_timestamp": "2025-11-01T15:51:03.911419"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 446",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 690,
    "creation_timestamp": "2025-11-01T15:51:03.911422"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 405",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 691,
    "creation_timestamp": "2025-11-01T15:51:03.911423"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 187",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 692,
    "creation_timestamp": "2025-11-01T15:51:03.911425"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 115",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 693,
    "creation_timestamp": "2025-11-01T15:51:03.911426"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 248",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 694,
    "creation_timestamp": "2025-11-01T15:51:03.911428"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 257",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 695,
    "creation_timestamp": "2025-11-01T15:51:03.911429"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 394",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 696,
    "creation_timestamp": "2025-11-01T15:51:03.911430"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 657",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 697,
    "creation_timestamp": "2025-11-01T15:51:03.911432"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 754",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 698,
    "creation_timestamp": "2025-11-01T15:51:03.911433"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 276",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 699,
    "creation_timestamp": "2025-11-01T15:51:03.911435"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 146",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 700,
    "creation_timestamp": "2025-11-01T15:51:03.911436"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 236",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 701,
    "creation_timestamp": "2025-11-01T15:51:03.911438"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 479",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 702,
    "creation_timestamp": "2025-11-01T15:51:03.911440"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 435",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 703,
    "creation_timestamp": "2025-11-01T15:51:03.911441"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 52",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 704,
    "creation_timestamp": "2025-11-01T15:51:03.911443"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 223",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 705,
    "creation_timestamp": "2025-11-01T15:51:03.911446"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 394",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 706,
    "creation_timestamp": "2025-11-01T15:51:03.911447"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 793",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 707,
    "creation_timestamp": "2025-11-01T15:51:03.911449"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 133",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 708,
    "creation_timestamp": "2025-11-01T15:51:03.911450"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 525",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 709,
    "creation_timestamp": "2025-11-01T15:51:03.911452"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 397",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 710,
    "creation_timestamp": "2025-11-01T15:51:03.911453"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 37",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 711,
    "creation_timestamp": "2025-11-01T15:51:03.911454"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 95",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 712,
    "creation_timestamp": "2025-11-01T15:51:03.911456"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 197",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 713,
    "creation_timestamp": "2025-11-01T15:51:03.911457"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 15",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 714,
    "creation_timestamp": "2025-11-01T15:51:03.911459"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 19",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 715,
    "creation_timestamp": "2025-11-01T15:51:03.911460"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 105",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 716,
    "creation_timestamp": "2025-11-01T15:51:03.911462"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 95",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 717,
    "creation_timestamp": "2025-11-01T15:51:03.911463"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 526",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 718,
    "creation_timestamp": "2025-11-01T15:51:03.911464"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 55",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 719,
    "creation_timestamp": "2025-11-01T15:51:03.911466"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 177",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 720,
    "creation_timestamp": "2025-11-01T15:51:03.911467"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 583",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 721,
    "creation_timestamp": "2025-11-01T15:51:03.911469"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 672",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 722,
    "creation_timestamp": "2025-11-01T15:51:03.911470"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 313",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 723,
    "creation_timestamp": "2025-11-01T15:51:03.911472"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 777",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 724,
    "creation_timestamp": "2025-11-01T15:51:03.911473"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 365",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 725,
    "creation_timestamp": "2025-11-01T15:51:03.911475"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 703",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 726,
    "creation_timestamp": "2025-11-01T15:51:03.911476"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 93",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 727,
    "creation_timestamp": "2025-11-01T15:51:03.911477"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 442",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 728,
    "creation_timestamp": "2025-11-01T15:51:03.911479"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 51",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 729,
    "creation_timestamp": "2025-11-01T15:51:03.911480"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 528",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 730,
    "creation_timestamp": "2025-11-01T15:51:03.911482"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 649",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 731,
    "creation_timestamp": "2025-11-01T15:51:03.911483"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 542",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 732,
    "creation_timestamp": "2025-11-01T15:51:03.911485"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 141",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 733,
    "creation_timestamp": "2025-11-01T15:51:03.911486"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 308",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 734,
    "creation_timestamp": "2025-11-01T15:51:03.911488"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 178",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 735,
    "creation_timestamp": "2025-11-01T15:51:03.911489"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 35",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 736,
    "creation_timestamp": "2025-11-01T15:51:03.911490"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 104",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 737,
    "creation_timestamp": "2025-11-01T15:51:03.911492"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 422",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 738,
    "creation_timestamp": "2025-11-01T15:51:03.911493"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 403",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 739,
    "creation_timestamp": "2025-11-01T15:51:03.911495"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 5",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 740,
    "creation_timestamp": "2025-11-01T15:51:03.911498"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 353",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 741,
    "creation_timestamp": "2025-11-01T15:51:03.911499"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 210",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 742,
    "creation_timestamp": "2025-11-01T15:51:03.911501"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 257",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 743,
    "creation_timestamp": "2025-11-01T15:51:03.911502"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 395",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 744,
    "creation_timestamp": "2025-11-01T15:51:03.911503"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 401",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 745,
    "creation_timestamp": "2025-11-01T15:51:03.911505"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 362",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 746,
    "creation_timestamp": "2025-11-01T15:51:03.911506"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 693",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 747,
    "creation_timestamp": "2025-11-01T15:51:03.911508"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 377",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 748,
    "creation_timestamp": "2025-11-01T15:51:03.911509"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 280",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 749,
    "creation_timestamp": "2025-11-01T15:51:03.911511"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 589",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 750,
    "creation_timestamp": "2025-11-01T15:51:03.911512"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 352",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 751,
    "creation_timestamp": "2025-11-01T15:51:03.911513"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 50",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 752,
    "creation_timestamp": "2025-11-01T15:51:03.911515"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 363",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 753,
    "creation_timestamp": "2025-11-01T15:51:03.911516"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 22",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 754,
    "creation_timestamp": "2025-11-01T15:51:03.911518"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 483",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 755,
    "creation_timestamp": "2025-11-01T15:51:03.911519"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 40",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 756,
    "creation_timestamp": "2025-11-01T15:51:03.911521"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 465",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 757,
    "creation_timestamp": "2025-11-01T15:51:03.911522"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 49",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 758,
    "creation_timestamp": "2025-11-01T15:51:03.911524"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 466",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 759,
    "creation_timestamp": "2025-11-01T15:51:03.911525"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 155",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 760,
    "creation_timestamp": "2025-11-01T15:51:03.911526"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 571",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 761,
    "creation_timestamp": "2025-11-01T15:51:03.911528"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 327",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 762,
    "creation_timestamp": "2025-11-01T15:51:03.911530"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 374",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 763,
    "creation_timestamp": "2025-11-01T15:51:03.911531"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 581",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 764,
    "creation_timestamp": "2025-11-01T15:51:03.911532"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 26",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 765,
    "creation_timestamp": "2025-11-01T15:51:03.911534"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 451",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 766,
    "creation_timestamp": "2025-11-01T15:51:03.911535"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 274",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 767,
    "creation_timestamp": "2025-11-01T15:51:03.911537"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 469",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 768,
    "creation_timestamp": "2025-11-01T15:51:03.911538"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 185",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 769,
    "creation_timestamp": "2025-11-01T15:51:03.911539"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 76",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 770,
    "creation_timestamp": "2025-11-01T15:51:03.911541"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 445",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 771,
    "creation_timestamp": "2025-11-01T15:51:03.911542"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 11",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 772,
    "creation_timestamp": "2025-11-01T15:51:03.911544"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(value * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 299",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 773,
    "creation_timestamp": "2025-11-01T15:51:03.911545"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 519",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 774,
    "creation_timestamp": "2025-11-01T15:51:03.911547"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 172",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 775,
    "creation_timestamp": "2025-11-01T15:51:03.911548"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 258",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 776,
    "creation_timestamp": "2025-11-01T15:51:03.911550"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 566",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 777,
    "creation_timestamp": "2025-11-01T15:51:03.911551"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 277",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 778,
    "creation_timestamp": "2025-11-01T15:51:03.911552"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 162",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 779,
    "creation_timestamp": "2025-11-01T15:51:03.911554"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 282",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 780,
    "creation_timestamp": "2025-11-01T15:51:03.911555"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 316",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 781,
    "creation_timestamp": "2025-11-01T15:51:03.911557"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 18",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 782,
    "creation_timestamp": "2025-11-01T15:51:03.911558"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 213",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 783,
    "creation_timestamp": "2025-11-01T15:51:03.911560"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 190",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 784,
    "creation_timestamp": "2025-11-01T15:51:03.911561"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 344",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 785,
    "creation_timestamp": "2025-11-01T15:51:03.911563"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 266",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 786,
    "creation_timestamp": "2025-11-01T15:51:03.911564"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 187",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 787,
    "creation_timestamp": "2025-11-01T15:51:03.911565"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 531",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 788,
    "creation_timestamp": "2025-11-01T15:51:03.911567"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 533",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 789,
    "creation_timestamp": "2025-11-01T15:51:03.911568"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 120",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 790,
    "creation_timestamp": "2025-11-01T15:51:03.911570"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 495",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 791,
    "creation_timestamp": "2025-11-01T15:51:03.911572"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 504",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 792,
    "creation_timestamp": "2025-11-01T15:51:03.911574"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 480",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 793,
    "creation_timestamp": "2025-11-01T15:51:03.911575"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 443",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 794,
    "creation_timestamp": "2025-11-01T15:51:03.911577"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 value = fundss[msg.sender];\n                        require(value > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 131",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 795,
    "creation_timestamp": "2025-11-01T15:51:03.911578"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 91",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 796,
    "creation_timestamp": "2025-11-01T15:51:03.911580"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 86",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 797,
    "creation_timestamp": "2025-11-01T15:51:03.911581"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 346",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 798,
    "creation_timestamp": "2025-11-01T15:51:03.911582"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 447",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 799,
    "creation_timestamp": "2025-11-01T15:51:03.911584"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 465",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 800,
    "creation_timestamp": "2025-11-01T15:51:03.911585"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 696",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 801,
    "creation_timestamp": "2025-11-01T15:51:03.911587"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 313",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 802,
    "creation_timestamp": "2025-11-01T15:51:03.911588"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 505",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 803,
    "creation_timestamp": "2025-11-01T15:51:03.911589"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 330",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 804,
    "creation_timestamp": "2025-11-01T15:51:03.911591"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        assert(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 106",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 805,
    "creation_timestamp": "2025-11-01T15:51:03.911592"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 442",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 806,
    "creation_timestamp": "2025-11-01T15:51:03.911594"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 216",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 807,
    "creation_timestamp": "2025-11-01T15:51:03.911595"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 501",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 808,
    "creation_timestamp": "2025-11-01T15:51:03.911597"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 222",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 809,
    "creation_timestamp": "2025-11-01T15:51:03.911598"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 320",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 810,
    "creation_timestamp": "2025-11-01T15:51:03.911599"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 459",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 811,
    "creation_timestamp": "2025-11-01T15:51:03.911601"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 184",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 812,
    "creation_timestamp": "2025-11-01T15:51:03.911602"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 551",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 813,
    "creation_timestamp": "2025-11-01T15:51:03.911605"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 568",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 814,
    "creation_timestamp": "2025-11-01T15:51:03.911607"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 294",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 815,
    "creation_timestamp": "2025-11-01T15:51:03.911608"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 75",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 816,
    "creation_timestamp": "2025-11-01T15:51:03.911609"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        assert(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 91",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 817,
    "creation_timestamp": "2025-11-01T15:51:03.911611"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 130",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 818,
    "creation_timestamp": "2025-11-01T15:51:03.911612"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 767",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 819,
    "creation_timestamp": "2025-11-01T15:51:03.911614"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 198",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 820,
    "creation_timestamp": "2025-11-01T15:51:03.911615"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 406",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 821,
    "creation_timestamp": "2025-11-01T15:51:03.911617"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 460",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 822,
    "creation_timestamp": "2025-11-01T15:51:03.911618"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 717",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 823,
    "creation_timestamp": "2025-11-01T15:51:03.911620"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 184",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 824,
    "creation_timestamp": "2025-11-01T15:51:03.911621"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 626",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 825,
    "creation_timestamp": "2025-11-01T15:51:03.911622"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 69",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 826,
    "creation_timestamp": "2025-11-01T15:51:03.911624"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 133",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 827,
    "creation_timestamp": "2025-11-01T15:51:03.911625"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 200",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 828,
    "creation_timestamp": "2025-11-01T15:51:03.911627"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 537",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 829,
    "creation_timestamp": "2025-11-01T15:51:03.911628"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 191",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 830,
    "creation_timestamp": "2025-11-01T15:51:03.911630"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 179",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 831,
    "creation_timestamp": "2025-11-01T15:51:03.911631"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 68",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 832,
    "creation_timestamp": "2025-11-01T15:51:03.911633"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 510",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 833,
    "creation_timestamp": "2025-11-01T15:51:03.911634"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 403",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 834,
    "creation_timestamp": "2025-11-01T15:51:03.911636"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 771",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 835,
    "creation_timestamp": "2025-11-01T15:51:03.911637"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 402",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 836,
    "creation_timestamp": "2025-11-01T15:51:03.911639"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 16",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 837,
    "creation_timestamp": "2025-11-01T15:51:03.911640"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 521",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 838,
    "creation_timestamp": "2025-11-01T15:51:03.911641"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 200",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 839,
    "creation_timestamp": "2025-11-01T15:51:03.911643"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 31",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 840,
    "creation_timestamp": "2025-11-01T15:51:03.911644"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 57",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 841,
    "creation_timestamp": "2025-11-01T15:51:03.911646"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 530",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 842,
    "creation_timestamp": "2025-11-01T15:51:03.911648"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 386",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 843,
    "creation_timestamp": "2025-11-01T15:51:03.911650"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 447",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 844,
    "creation_timestamp": "2025-11-01T15:51:03.911651"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 398",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 845,
    "creation_timestamp": "2025-11-01T15:51:03.911653"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 169",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 846,
    "creation_timestamp": "2025-11-01T15:51:03.911654"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 500",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 847,
    "creation_timestamp": "2025-11-01T15:51:03.911656"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 648",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 848,
    "creation_timestamp": "2025-11-01T15:51:03.911657"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 388",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 849,
    "creation_timestamp": "2025-11-01T15:51:03.911658"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 6",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 850,
    "creation_timestamp": "2025-11-01T15:51:03.911660"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 449",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 851,
    "creation_timestamp": "2025-11-01T15:51:03.911661"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 401",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 852,
    "creation_timestamp": "2025-11-01T15:51:03.911663"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 686",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 853,
    "creation_timestamp": "2025-11-01T15:51:03.911664"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 166",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 854,
    "creation_timestamp": "2025-11-01T15:51:03.911666"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 47",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 855,
    "creation_timestamp": "2025-11-01T15:51:03.911667"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 180",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 856,
    "creation_timestamp": "2025-11-01T15:51:03.911668"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 368",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 857,
    "creation_timestamp": "2025-11-01T15:51:03.911670"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 258",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 858,
    "creation_timestamp": "2025-11-01T15:51:03.911671"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 721",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 859,
    "creation_timestamp": "2025-11-01T15:51:03.911673"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 196",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 860,
    "creation_timestamp": "2025-11-01T15:51:03.911674"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 54",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 861,
    "creation_timestamp": "2025-11-01T15:51:03.911675"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 143",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 862,
    "creation_timestamp": "2025-11-01T15:51:03.911677"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 245",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 863,
    "creation_timestamp": "2025-11-01T15:51:03.911678"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 114",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 864,
    "creation_timestamp": "2025-11-01T15:51:03.911680"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 692",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 865,
    "creation_timestamp": "2025-11-01T15:51:03.911681"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 220",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 866,
    "creation_timestamp": "2025-11-01T15:51:03.911683"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 267",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 867,
    "creation_timestamp": "2025-11-01T15:51:03.911684"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 270",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 868,
    "creation_timestamp": "2025-11-01T15:51:03.911685"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 273",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 869,
    "creation_timestamp": "2025-11-01T15:51:03.911687"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 603",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 870,
    "creation_timestamp": "2025-11-01T15:51:03.911688"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 564",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 871,
    "creation_timestamp": "2025-11-01T15:51:03.911690"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 139",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 872,
    "creation_timestamp": "2025-11-01T15:51:03.911691"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 376",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 873,
    "creation_timestamp": "2025-11-01T15:51:03.911693"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 569",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 874,
    "creation_timestamp": "2025-11-01T15:51:03.911694"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 442",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 875,
    "creation_timestamp": "2025-11-01T15:51:03.911695"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 74",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 876,
    "creation_timestamp": "2025-11-01T15:51:03.911697"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 429",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 877,
    "creation_timestamp": "2025-11-01T15:51:03.911698"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 74",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 878,
    "creation_timestamp": "2025-11-01T15:51:03.911700"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 42",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 879,
    "creation_timestamp": "2025-11-01T15:51:03.911701"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 420",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 880,
    "creation_timestamp": "2025-11-01T15:51:03.911702"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 428",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 881,
    "creation_timestamp": "2025-11-01T15:51:03.911704"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 469",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 882,
    "creation_timestamp": "2025-11-01T15:51:03.911705"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 329",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 883,
    "creation_timestamp": "2025-11-01T15:51:03.911707"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 189",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 884,
    "creation_timestamp": "2025-11-01T15:51:03.911708"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 29",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 885,
    "creation_timestamp": "2025-11-01T15:51:03.911710"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 482",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 886,
    "creation_timestamp": "2025-11-01T15:51:03.911711"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 444",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 887,
    "creation_timestamp": "2025-11-01T15:51:03.911713"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 380",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 888,
    "creation_timestamp": "2025-11-01T15:51:03.911714"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 392",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 889,
    "creation_timestamp": "2025-11-01T15:51:03.911716"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 119",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 890,
    "creation_timestamp": "2025-11-01T15:51:03.911717"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 450",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 891,
    "creation_timestamp": "2025-11-01T15:51:03.911719"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 145",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 892,
    "creation_timestamp": "2025-11-01T15:51:03.911720"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 206",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 893,
    "creation_timestamp": "2025-11-01T15:51:03.911721"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 198",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 894,
    "creation_timestamp": "2025-11-01T15:51:03.911725"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 333",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 895,
    "creation_timestamp": "2025-11-01T15:51:03.911726"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 147",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 896,
    "creation_timestamp": "2025-11-01T15:51:03.911727"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 53",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 897,
    "creation_timestamp": "2025-11-01T15:51:03.911729"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 240",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 898,
    "creation_timestamp": "2025-11-01T15:51:03.911730"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 255",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 899,
    "creation_timestamp": "2025-11-01T15:51:03.911732"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 355",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 900,
    "creation_timestamp": "2025-11-01T15:51:03.911733"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 209",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 901,
    "creation_timestamp": "2025-11-01T15:51:03.911735"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 690",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 902,
    "creation_timestamp": "2025-11-01T15:51:03.911736"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 109",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 903,
    "creation_timestamp": "2025-11-01T15:51:03.911737"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 160",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 904,
    "creation_timestamp": "2025-11-01T15:51:03.911739"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 374",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 905,
    "creation_timestamp": "2025-11-01T15:51:03.911741"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 425",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 906,
    "creation_timestamp": "2025-11-01T15:51:03.911742"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 303",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 907,
    "creation_timestamp": "2025-11-01T15:51:03.911743"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 30",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 908,
    "creation_timestamp": "2025-11-01T15:51:03.911745"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 25",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 909,
    "creation_timestamp": "2025-11-01T15:51:03.911746"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 404",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 910,
    "creation_timestamp": "2025-11-01T15:51:03.911748"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 157",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 911,
    "creation_timestamp": "2025-11-01T15:51:03.911749"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 208",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 912,
    "creation_timestamp": "2025-11-01T15:51:03.911751"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 308",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 913,
    "creation_timestamp": "2025-11-01T15:51:03.911752"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 319",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 914,
    "creation_timestamp": "2025-11-01T15:51:03.911753"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 84",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 915,
    "creation_timestamp": "2025-11-01T15:51:03.911755"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 127",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 916,
    "creation_timestamp": "2025-11-01T15:51:03.911757"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 434",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 917,
    "creation_timestamp": "2025-11-01T15:51:03.911758"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 651",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 918,
    "creation_timestamp": "2025-11-01T15:51:03.911759"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 456",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 919,
    "creation_timestamp": "2025-11-01T15:51:03.911761"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 338",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 920,
    "creation_timestamp": "2025-11-01T15:51:03.911762"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 150",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 921,
    "creation_timestamp": "2025-11-01T15:51:03.911764"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 292",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 922,
    "creation_timestamp": "2025-11-01T15:51:03.911765"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 174",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 923,
    "creation_timestamp": "2025-11-01T15:51:03.911767"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 103",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 924,
    "creation_timestamp": "2025-11-01T15:51:03.911768"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 417",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 925,
    "creation_timestamp": "2025-11-01T15:51:03.911769"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 410",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 926,
    "creation_timestamp": "2025-11-01T15:51:03.911771"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 190",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 927,
    "creation_timestamp": "2025-11-01T15:51:03.911772"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 289",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 928,
    "creation_timestamp": "2025-11-01T15:51:03.911774"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 261",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 929,
    "creation_timestamp": "2025-11-01T15:51:03.911775"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 744",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 930,
    "creation_timestamp": "2025-11-01T15:51:03.911777"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 200",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 931,
    "creation_timestamp": "2025-11-01T15:51:03.911778"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 455",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 932,
    "creation_timestamp": "2025-11-01T15:51:03.911780"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 762",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 933,
    "creation_timestamp": "2025-11-01T15:51:03.911781"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 171",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 934,
    "creation_timestamp": "2025-11-01T15:51:03.911783"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 486",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 935,
    "creation_timestamp": "2025-11-01T15:51:03.911784"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 282",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 936,
    "creation_timestamp": "2025-11-01T15:51:03.911785"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 1",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 937,
    "creation_timestamp": "2025-11-01T15:51:03.911787"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 578",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 938,
    "creation_timestamp": "2025-11-01T15:51:03.911788"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 379",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 939,
    "creation_timestamp": "2025-11-01T15:51:03.911790"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 4",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 940,
    "creation_timestamp": "2025-11-01T15:51:03.911791"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 281",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 941,
    "creation_timestamp": "2025-11-01T15:51:03.911794"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 164",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 942,
    "creation_timestamp": "2025-11-01T15:51:03.911796"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 459",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 943,
    "creation_timestamp": "2025-11-01T15:51:03.911797"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 186",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 944,
    "creation_timestamp": "2025-11-01T15:51:03.911800"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 325",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 945,
    "creation_timestamp": "2025-11-01T15:51:03.911801"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 323",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 946,
    "creation_timestamp": "2025-11-01T15:51:03.911803"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 1",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 947,
    "creation_timestamp": "2025-11-01T15:51:03.911804"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 454",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 948,
    "creation_timestamp": "2025-11-01T15:51:03.911806"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 295",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 949,
    "creation_timestamp": "2025-11-01T15:51:03.911807"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 255",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 950,
    "creation_timestamp": "2025-11-01T15:51:03.911809"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 136",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 951,
    "creation_timestamp": "2025-11-01T15:51:03.911810"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 328",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 952,
    "creation_timestamp": "2025-11-01T15:51:03.911811"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 489",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 953,
    "creation_timestamp": "2025-11-01T15:51:03.911813"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 251",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 954,
    "creation_timestamp": "2025-11-01T15:51:03.911814"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 124",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 955,
    "creation_timestamp": "2025-11-01T15:51:03.911816"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 56",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 956,
    "creation_timestamp": "2025-11-01T15:51:03.911817"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 798",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 957,
    "creation_timestamp": "2025-11-01T15:51:03.911818"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 188",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 958,
    "creation_timestamp": "2025-11-01T15:51:03.911820"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 45",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 959,
    "creation_timestamp": "2025-11-01T15:51:03.911821"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 387",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 960,
    "creation_timestamp": "2025-11-01T15:51:03.911823"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 92",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 961,
    "creation_timestamp": "2025-11-01T15:51:03.911824"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 347",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 962,
    "creation_timestamp": "2025-11-01T15:51:03.911825"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 175",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 963,
    "creation_timestamp": "2025-11-01T15:51:03.911827"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 424",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 964,
    "creation_timestamp": "2025-11-01T15:51:03.911828"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 99",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 965,
    "creation_timestamp": "2025-11-01T15:51:03.911830"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 129",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 966,
    "creation_timestamp": "2025-11-01T15:51:03.911831"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 11",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 967,
    "creation_timestamp": "2025-11-01T15:51:03.911833"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 127",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 968,
    "creation_timestamp": "2025-11-01T15:51:03.911834"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 39",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 969,
    "creation_timestamp": "2025-11-01T15:51:03.911836"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 451",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 970,
    "creation_timestamp": "2025-11-01T15:51:03.911837"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 270",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 971,
    "creation_timestamp": "2025-11-01T15:51:03.911839"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 546",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 972,
    "creation_timestamp": "2025-11-01T15:51:03.911840"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 217",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 973,
    "creation_timestamp": "2025-11-01T15:51:03.911841"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 242",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 974,
    "creation_timestamp": "2025-11-01T15:51:03.911843"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 195",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 975,
    "creation_timestamp": "2025-11-01T15:51:03.911844"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 755",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 976,
    "creation_timestamp": "2025-11-01T15:51:03.911846"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        assert(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 391",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 977,
    "creation_timestamp": "2025-11-01T15:51:03.911847"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 55",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 978,
    "creation_timestamp": "2025-11-01T15:51:03.911849"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 599",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 979,
    "creation_timestamp": "2025-11-01T15:51:03.911850"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 677",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 980,
    "creation_timestamp": "2025-11-01T15:51:03.911852"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 78",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 981,
    "creation_timestamp": "2025-11-01T15:51:03.911853"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 220",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 982,
    "creation_timestamp": "2025-11-01T15:51:03.911855"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 17",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 983,
    "creation_timestamp": "2025-11-01T15:51:03.911856"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 30",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 984,
    "creation_timestamp": "2025-11-01T15:51:03.911857"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 307",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 985,
    "creation_timestamp": "2025-11-01T15:51:03.911859"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 524",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 986,
    "creation_timestamp": "2025-11-01T15:51:03.911860"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 530",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 987,
    "creation_timestamp": "2025-11-01T15:51:03.911862"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 221",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 988,
    "creation_timestamp": "2025-11-01T15:51:03.911863"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 112",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 989,
    "creation_timestamp": "2025-11-01T15:51:03.911864"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 80",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 990,
    "creation_timestamp": "2025-11-01T15:51:03.911866"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 268",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 991,
    "creation_timestamp": "2025-11-01T15:51:03.911867"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 681",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 992,
    "creation_timestamp": "2025-11-01T15:51:03.911869"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 202",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 993,
    "creation_timestamp": "2025-11-01T15:51:03.911870"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 130",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 994,
    "creation_timestamp": "2025-11-01T15:51:03.911871"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 152",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 995,
    "creation_timestamp": "2025-11-01T15:51:03.911875"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 19",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 996,
    "creation_timestamp": "2025-11-01T15:51:03.911876"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 475",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 997,
    "creation_timestamp": "2025-11-01T15:51:03.911878"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 153",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 998,
    "creation_timestamp": "2025-11-01T15:51:03.911879"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 683",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 999,
    "creation_timestamp": "2025-11-01T15:51:03.911881"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 260",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1000,
    "creation_timestamp": "2025-11-01T15:51:03.911882"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 475",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1001,
    "creation_timestamp": "2025-11-01T15:51:03.911883"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 562",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1002,
    "creation_timestamp": "2025-11-01T15:51:03.911885"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 725",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1003,
    "creation_timestamp": "2025-11-01T15:51:03.911886"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 716",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1004,
    "creation_timestamp": "2025-11-01T15:51:03.911888"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 654",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1005,
    "creation_timestamp": "2025-11-01T15:51:03.911889"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 292",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1006,
    "creation_timestamp": "2025-11-01T15:51:03.911891"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 455",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1007,
    "creation_timestamp": "2025-11-01T15:51:03.911892"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 416",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1008,
    "creation_timestamp": "2025-11-01T15:51:03.911893"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 485",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1009,
    "creation_timestamp": "2025-11-01T15:51:03.911895"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 110",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1010,
    "creation_timestamp": "2025-11-01T15:51:03.911896"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 514",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1011,
    "creation_timestamp": "2025-11-01T15:51:03.911898"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 274",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1012,
    "creation_timestamp": "2025-11-01T15:51:03.911899"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 393",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1013,
    "creation_timestamp": "2025-11-01T15:51:03.911901"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 464",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1014,
    "creation_timestamp": "2025-11-01T15:51:03.911902"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 431",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1015,
    "creation_timestamp": "2025-11-01T15:51:03.911904"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 121",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1016,
    "creation_timestamp": "2025-11-01T15:51:03.911905"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 205",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1017,
    "creation_timestamp": "2025-11-01T15:51:03.911906"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 228",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1018,
    "creation_timestamp": "2025-11-01T15:51:03.911908"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 323",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1019,
    "creation_timestamp": "2025-11-01T15:51:03.911909"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 153",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1020,
    "creation_timestamp": "2025-11-01T15:51:03.911911"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 204",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1021,
    "creation_timestamp": "2025-11-01T15:51:03.911912"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 343",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1022,
    "creation_timestamp": "2025-11-01T15:51:03.911913"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 165",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1023,
    "creation_timestamp": "2025-11-01T15:51:03.911915"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 472",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1024,
    "creation_timestamp": "2025-11-01T15:51:03.911916"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 590",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1025,
    "creation_timestamp": "2025-11-01T15:51:03.911918"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 173",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1026,
    "creation_timestamp": "2025-11-01T15:51:03.911919"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 128",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1027,
    "creation_timestamp": "2025-11-01T15:51:03.911920"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 729",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1028,
    "creation_timestamp": "2025-11-01T15:51:03.911922"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 412",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1029,
    "creation_timestamp": "2025-11-01T15:51:03.911923"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 234",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1030,
    "creation_timestamp": "2025-11-01T15:51:03.911925"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 59",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1031,
    "creation_timestamp": "2025-11-01T15:51:03.911926"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 153",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1032,
    "creation_timestamp": "2025-11-01T15:51:03.911931"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 67",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1033,
    "creation_timestamp": "2025-11-01T15:51:03.911932"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 416",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1034,
    "creation_timestamp": "2025-11-01T15:51:03.911934"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 484",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1035,
    "creation_timestamp": "2025-11-01T15:51:03.911935"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 278",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1036,
    "creation_timestamp": "2025-11-01T15:51:03.911936"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 635",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1037,
    "creation_timestamp": "2025-11-01T15:51:03.911938"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 234",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1038,
    "creation_timestamp": "2025-11-01T15:51:03.911939"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 13",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1039,
    "creation_timestamp": "2025-11-01T15:51:03.911941"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 618",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1040,
    "creation_timestamp": "2025-11-01T15:51:03.911943"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 495",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1041,
    "creation_timestamp": "2025-11-01T15:51:03.911944"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 592",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1042,
    "creation_timestamp": "2025-11-01T15:51:03.911946"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 185",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1043,
    "creation_timestamp": "2025-11-01T15:51:03.911947"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 598",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1044,
    "creation_timestamp": "2025-11-01T15:51:03.911948"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 482",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1045,
    "creation_timestamp": "2025-11-01T15:51:03.911950"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 186",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1046,
    "creation_timestamp": "2025-11-01T15:51:03.911953"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 62",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1047,
    "creation_timestamp": "2025-11-01T15:51:03.911954"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 520",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1048,
    "creation_timestamp": "2025-11-01T15:51:03.911956"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 398",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1049,
    "creation_timestamp": "2025-11-01T15:51:03.911957"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 304",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1050,
    "creation_timestamp": "2025-11-01T15:51:03.911958"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 value = fundss[tx.origin];\n                        require(value > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 426",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1051,
    "creation_timestamp": "2025-11-01T15:51:03.911960"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 584",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1052,
    "creation_timestamp": "2025-11-01T15:51:03.911962"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 438",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1053,
    "creation_timestamp": "2025-11-01T15:51:03.911963"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 286",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1054,
    "creation_timestamp": "2025-11-01T15:51:03.911964"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        assert(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 301",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1055,
    "creation_timestamp": "2025-11-01T15:51:03.911966"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 412",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1056,
    "creation_timestamp": "2025-11-01T15:51:03.911967"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 81",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1057,
    "creation_timestamp": "2025-11-01T15:51:03.911969"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 309",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1058,
    "creation_timestamp": "2025-11-01T15:51:03.911970"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 596",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1059,
    "creation_timestamp": "2025-11-01T15:51:03.911972"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 145",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1060,
    "creation_timestamp": "2025-11-01T15:51:03.911973"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 224",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1061,
    "creation_timestamp": "2025-11-01T15:51:03.912002"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 244",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1062,
    "creation_timestamp": "2025-11-01T15:51:03.912003"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 249",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1063,
    "creation_timestamp": "2025-11-01T15:51:03.912005"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 21",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1064,
    "creation_timestamp": "2025-11-01T15:51:03.912006"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 540",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1065,
    "creation_timestamp": "2025-11-01T15:51:03.912008"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 5",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1066,
    "creation_timestamp": "2025-11-01T15:51:03.912009"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 497",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1067,
    "creation_timestamp": "2025-11-01T15:51:03.912011"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 92",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1068,
    "creation_timestamp": "2025-11-01T15:51:03.912012"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 95",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1069,
    "creation_timestamp": "2025-11-01T15:51:03.912038"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 233",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1070,
    "creation_timestamp": "2025-11-01T15:51:03.912039"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 515",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1071,
    "creation_timestamp": "2025-11-01T15:51:03.912041"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 72",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1072,
    "creation_timestamp": "2025-11-01T15:51:03.912042"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 13",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1073,
    "creation_timestamp": "2025-11-01T15:51:03.912044"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 223",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1074,
    "creation_timestamp": "2025-11-01T15:51:03.912046"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 283",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1075,
    "creation_timestamp": "2025-11-01T15:51:03.912065"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 134",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1076,
    "creation_timestamp": "2025-11-01T15:51:03.912066"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 46",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1077,
    "creation_timestamp": "2025-11-01T15:51:03.912068"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 85",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1078,
    "creation_timestamp": "2025-11-01T15:51:03.912069"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 453",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1079,
    "creation_timestamp": "2025-11-01T15:51:03.912071"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 34",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1080,
    "creation_timestamp": "2025-11-01T15:51:03.912072"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 62",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1081,
    "creation_timestamp": "2025-11-01T15:51:03.912096"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[tx.origin];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 231",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1082,
    "creation_timestamp": "2025-11-01T15:51:03.912098"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 230",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1083,
    "creation_timestamp": "2025-11-01T15:51:03.912099"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 583",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1084,
    "creation_timestamp": "2025-11-01T15:51:03.912101"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 108",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1085,
    "creation_timestamp": "2025-11-01T15:51:03.912102"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 50",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1086,
    "creation_timestamp": "2025-11-01T15:51:03.912104"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 499",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1087,
    "creation_timestamp": "2025-11-01T15:51:03.912106"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 295",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1088,
    "creation_timestamp": "2025-11-01T15:51:03.912107"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 96",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1089,
    "creation_timestamp": "2025-11-01T15:51:03.912109"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 407",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1090,
    "creation_timestamp": "2025-11-01T15:51:03.912110"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 424",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1091,
    "creation_timestamp": "2025-11-01T15:51:03.912112"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 321",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1092,
    "creation_timestamp": "2025-11-01T15:51:03.912114"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 420",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1093,
    "creation_timestamp": "2025-11-01T15:51:03.912115"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 360",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1094,
    "creation_timestamp": "2025-11-01T15:51:03.912117"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 111",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1095,
    "creation_timestamp": "2025-11-01T15:51:03.912118"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 414",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1096,
    "creation_timestamp": "2025-11-01T15:51:03.912120"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 123",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1097,
    "creation_timestamp": "2025-11-01T15:51:03.912121"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 283",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1098,
    "creation_timestamp": "2025-11-01T15:51:03.912125"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 376",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1099,
    "creation_timestamp": "2025-11-01T15:51:03.912145"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 173",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1100,
    "creation_timestamp": "2025-11-01T15:51:03.912146"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 477",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1101,
    "creation_timestamp": "2025-11-01T15:51:03.912148"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 79",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1102,
    "creation_timestamp": "2025-11-01T15:51:03.912149"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 399",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1103,
    "creation_timestamp": "2025-11-01T15:51:03.912151"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 737",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1104,
    "creation_timestamp": "2025-11-01T15:51:03.912152"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 307",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1105,
    "creation_timestamp": "2025-11-01T15:51:03.912154"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 158",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1106,
    "creation_timestamp": "2025-11-01T15:51:03.912155"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 782",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1107,
    "creation_timestamp": "2025-11-01T15:51:03.912157"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 30",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1108,
    "creation_timestamp": "2025-11-01T15:51:03.912158"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 387",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1109,
    "creation_timestamp": "2025-11-01T15:51:03.912159"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 355",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1110,
    "creation_timestamp": "2025-11-01T15:51:03.912161"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 780",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1111,
    "creation_timestamp": "2025-11-01T15:51:03.912163"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 588",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1112,
    "creation_timestamp": "2025-11-01T15:51:03.912164"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 28",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1113,
    "creation_timestamp": "2025-11-01T15:51:03.912165"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 272",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1114,
    "creation_timestamp": "2025-11-01T15:51:03.912167"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 476",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1115,
    "creation_timestamp": "2025-11-01T15:51:03.912169"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 260",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1116,
    "creation_timestamp": "2025-11-01T15:51:03.912170"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 661",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1117,
    "creation_timestamp": "2025-11-01T15:51:03.912171"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 133",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1118,
    "creation_timestamp": "2025-11-01T15:51:03.912173"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 326",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1119,
    "creation_timestamp": "2025-11-01T15:51:03.912174"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 328",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1120,
    "creation_timestamp": "2025-11-01T15:51:03.912176"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 61",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1121,
    "creation_timestamp": "2025-11-01T15:51:03.912177"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 113",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1122,
    "creation_timestamp": "2025-11-01T15:51:03.912179"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 629",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1123,
    "creation_timestamp": "2025-11-01T15:51:03.912180"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 492",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1124,
    "creation_timestamp": "2025-11-01T15:51:03.912182"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 556",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1125,
    "creation_timestamp": "2025-11-01T15:51:03.912183"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 100",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1126,
    "creation_timestamp": "2025-11-01T15:51:03.912185"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 723",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1127,
    "creation_timestamp": "2025-11-01T15:51:03.912209"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 228",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1128,
    "creation_timestamp": "2025-11-01T15:51:03.912211"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 436",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1129,
    "creation_timestamp": "2025-11-01T15:51:03.912212"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 426",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1130,
    "creation_timestamp": "2025-11-01T15:51:03.912214"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 413",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1131,
    "creation_timestamp": "2025-11-01T15:51:03.912215"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 116",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1132,
    "creation_timestamp": "2025-11-01T15:51:03.912217"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 467",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1133,
    "creation_timestamp": "2025-11-01T15:51:03.912218"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 79",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1134,
    "creation_timestamp": "2025-11-01T15:51:03.912220"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 12",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1135,
    "creation_timestamp": "2025-11-01T15:51:03.912222"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 347",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1136,
    "creation_timestamp": "2025-11-01T15:51:03.912223"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 194",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1137,
    "creation_timestamp": "2025-11-01T15:51:03.912225"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 232",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1138,
    "creation_timestamp": "2025-11-01T15:51:03.912226"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 341",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1139,
    "creation_timestamp": "2025-11-01T15:51:03.912228"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 74",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1140,
    "creation_timestamp": "2025-11-01T15:51:03.912229"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 745",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1141,
    "creation_timestamp": "2025-11-01T15:51:03.912231"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 468",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1142,
    "creation_timestamp": "2025-11-01T15:51:03.912232"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 77",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1143,
    "creation_timestamp": "2025-11-01T15:51:03.912234"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 146",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1144,
    "creation_timestamp": "2025-11-01T15:51:03.912235"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 188",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1145,
    "creation_timestamp": "2025-11-01T15:51:03.912255"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 199",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1146,
    "creation_timestamp": "2025-11-01T15:51:03.912256"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 437",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1147,
    "creation_timestamp": "2025-11-01T15:51:03.912258"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 179",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1148,
    "creation_timestamp": "2025-11-01T15:51:03.912261"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 262",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1149,
    "creation_timestamp": "2025-11-01T15:51:03.912262"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 391",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1150,
    "creation_timestamp": "2025-11-01T15:51:03.912290"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 281",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1151,
    "creation_timestamp": "2025-11-01T15:51:03.912291"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 510",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1152,
    "creation_timestamp": "2025-11-01T15:51:03.912293"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 106",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1153,
    "creation_timestamp": "2025-11-01T15:51:03.912294"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(value * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 449",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1154,
    "creation_timestamp": "2025-11-01T15:51:03.912296"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 295",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1155,
    "creation_timestamp": "2025-11-01T15:51:03.912298"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 146",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1156,
    "creation_timestamp": "2025-11-01T15:51:03.912300"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 345",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1157,
    "creation_timestamp": "2025-11-01T15:51:03.912301"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 70",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1158,
    "creation_timestamp": "2025-11-01T15:51:03.912303"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 667",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1159,
    "creation_timestamp": "2025-11-01T15:51:03.912304"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 87",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1160,
    "creation_timestamp": "2025-11-01T15:51:03.912306"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 309",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1161,
    "creation_timestamp": "2025-11-01T15:51:03.912308"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 476",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1162,
    "creation_timestamp": "2025-11-01T15:51:03.912309"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 27",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1163,
    "creation_timestamp": "2025-11-01T15:51:03.912311"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 666",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1164,
    "creation_timestamp": "2025-11-01T15:51:03.912312"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 443",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1165,
    "creation_timestamp": "2025-11-01T15:51:03.912314"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 527",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1166,
    "creation_timestamp": "2025-11-01T15:51:03.912315"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 105",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1167,
    "creation_timestamp": "2025-11-01T15:51:03.912335"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 96",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1168,
    "creation_timestamp": "2025-11-01T15:51:03.912336"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 576",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1169,
    "creation_timestamp": "2025-11-01T15:51:03.912338"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 152",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1170,
    "creation_timestamp": "2025-11-01T15:51:03.912339"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 158",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1171,
    "creation_timestamp": "2025-11-01T15:51:03.912341"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 227",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1172,
    "creation_timestamp": "2025-11-01T15:51:03.912342"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 170",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1173,
    "creation_timestamp": "2025-11-01T15:51:03.912344"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 742",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1174,
    "creation_timestamp": "2025-11-01T15:51:03.912363"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 300",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1175,
    "creation_timestamp": "2025-11-01T15:51:03.912364"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 560",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1176,
    "creation_timestamp": "2025-11-01T15:51:03.912366"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 137",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1177,
    "creation_timestamp": "2025-11-01T15:51:03.912367"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 26",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1178,
    "creation_timestamp": "2025-11-01T15:51:03.912369"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 460",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1179,
    "creation_timestamp": "2025-11-01T15:51:03.912370"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 308",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1180,
    "creation_timestamp": "2025-11-01T15:51:03.912372"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 141",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1181,
    "creation_timestamp": "2025-11-01T15:51:03.912395"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 189",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1182,
    "creation_timestamp": "2025-11-01T15:51:03.912397"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 41",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1183,
    "creation_timestamp": "2025-11-01T15:51:03.912398"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 735",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1184,
    "creation_timestamp": "2025-11-01T15:51:03.912400"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 117",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1185,
    "creation_timestamp": "2025-11-01T15:51:03.912401"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 334",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1186,
    "creation_timestamp": "2025-11-01T15:51:03.912402"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 332",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1187,
    "creation_timestamp": "2025-11-01T15:51:03.912426"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 48",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1188,
    "creation_timestamp": "2025-11-01T15:51:03.912428"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 633",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1189,
    "creation_timestamp": "2025-11-01T15:51:03.912430"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 704",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1190,
    "creation_timestamp": "2025-11-01T15:51:03.912431"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        assert(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 196",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1191,
    "creation_timestamp": "2025-11-01T15:51:03.912433"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 150",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1192,
    "creation_timestamp": "2025-11-01T15:51:03.912435"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 284",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1193,
    "creation_timestamp": "2025-11-01T15:51:03.912436"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 407",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1194,
    "creation_timestamp": "2025-11-01T15:51:03.912438"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 80",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1195,
    "creation_timestamp": "2025-11-01T15:51:03.912439"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 523",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1196,
    "creation_timestamp": "2025-11-01T15:51:03.912441"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 304",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1197,
    "creation_timestamp": "2025-11-01T15:51:03.912444"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 39",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1198,
    "creation_timestamp": "2025-11-01T15:51:03.912446"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 343",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1199,
    "creation_timestamp": "2025-11-01T15:51:03.912449"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 402",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1200,
    "creation_timestamp": "2025-11-01T15:51:03.912451"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 676",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1201,
    "creation_timestamp": "2025-11-01T15:51:03.912453"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 276",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1202,
    "creation_timestamp": "2025-11-01T15:51:03.912454"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 249",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1203,
    "creation_timestamp": "2025-11-01T15:51:03.912456"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 653",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1204,
    "creation_timestamp": "2025-11-01T15:51:03.912458"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 536",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1205,
    "creation_timestamp": "2025-11-01T15:51:03.912459"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 433",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1206,
    "creation_timestamp": "2025-11-01T15:51:03.912461"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 88",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1207,
    "creation_timestamp": "2025-11-01T15:51:03.912462"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 290",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1208,
    "creation_timestamp": "2025-11-01T15:51:03.912464"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 433",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1209,
    "creation_timestamp": "2025-11-01T15:51:03.912466"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 155",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1210,
    "creation_timestamp": "2025-11-01T15:51:03.912467"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 40",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1211,
    "creation_timestamp": "2025-11-01T15:51:03.912469"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 492",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1212,
    "creation_timestamp": "2025-11-01T15:51:03.912470"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 45",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1213,
    "creation_timestamp": "2025-11-01T15:51:03.912472"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 444",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1214,
    "creation_timestamp": "2025-11-01T15:51:03.912473"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 252",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1215,
    "creation_timestamp": "2025-11-01T15:51:03.912475"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 233",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1216,
    "creation_timestamp": "2025-11-01T15:51:03.912477"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 549",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1217,
    "creation_timestamp": "2025-11-01T15:51:03.912478"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 286",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1218,
    "creation_timestamp": "2025-11-01T15:51:03.912480"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 511",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1219,
    "creation_timestamp": "2025-11-01T15:51:03.912499"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 687",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1220,
    "creation_timestamp": "2025-11-01T15:51:03.912500"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 372",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1221,
    "creation_timestamp": "2025-11-01T15:51:03.912502"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 524",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1222,
    "creation_timestamp": "2025-11-01T15:51:03.912503"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 522",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1223,
    "creation_timestamp": "2025-11-01T15:51:03.912505"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 616",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1224,
    "creation_timestamp": "2025-11-01T15:51:03.912506"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 772",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1225,
    "creation_timestamp": "2025-11-01T15:51:03.912507"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 386",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1226,
    "creation_timestamp": "2025-11-01T15:51:03.912509"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 450",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1227,
    "creation_timestamp": "2025-11-01T15:51:03.912510"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 736",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1228,
    "creation_timestamp": "2025-11-01T15:51:03.912512"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 42",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1229,
    "creation_timestamp": "2025-11-01T15:51:03.912513"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 354",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1230,
    "creation_timestamp": "2025-11-01T15:51:03.912515"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 219",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1231,
    "creation_timestamp": "2025-11-01T15:51:03.912516"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 594",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1232,
    "creation_timestamp": "2025-11-01T15:51:03.912518"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 98",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1233,
    "creation_timestamp": "2025-11-01T15:51:03.912519"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 586",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1234,
    "creation_timestamp": "2025-11-01T15:51:03.912521"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 127",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1235,
    "creation_timestamp": "2025-11-01T15:51:03.912522"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 197",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1236,
    "creation_timestamp": "2025-11-01T15:51:03.912524"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 263",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1237,
    "creation_timestamp": "2025-11-01T15:51:03.912525"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 24",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1238,
    "creation_timestamp": "2025-11-01T15:51:03.912554"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 478",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1239,
    "creation_timestamp": "2025-11-01T15:51:03.912556"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 84",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1240,
    "creation_timestamp": "2025-11-01T15:51:03.912558"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 395",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1241,
    "creation_timestamp": "2025-11-01T15:51:03.912559"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 714",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1242,
    "creation_timestamp": "2025-11-01T15:51:03.912561"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 380",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1243,
    "creation_timestamp": "2025-11-01T15:51:03.912562"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 344",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1244,
    "creation_timestamp": "2025-11-01T15:51:03.912564"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 786",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1245,
    "creation_timestamp": "2025-11-01T15:51:03.912565"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 254",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1246,
    "creation_timestamp": "2025-11-01T15:51:03.912567"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 352",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1247,
    "creation_timestamp": "2025-11-01T15:51:03.912569"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 245",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1248,
    "creation_timestamp": "2025-11-01T15:51:03.912570"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 280",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1249,
    "creation_timestamp": "2025-11-01T15:51:03.912572"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 87",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1250,
    "creation_timestamp": "2025-11-01T15:51:03.912575"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 52",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1251,
    "creation_timestamp": "2025-11-01T15:51:03.912577"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 15",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1252,
    "creation_timestamp": "2025-11-01T15:51:03.912578"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 125",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1253,
    "creation_timestamp": "2025-11-01T15:51:03.912580"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 22",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1254,
    "creation_timestamp": "2025-11-01T15:51:03.912581"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 200",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1255,
    "creation_timestamp": "2025-11-01T15:51:03.912583"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 349",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1256,
    "creation_timestamp": "2025-11-01T15:51:03.912585"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 425",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1257,
    "creation_timestamp": "2025-11-01T15:51:03.912586"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 202",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1258,
    "creation_timestamp": "2025-11-01T15:51:03.912588"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 182",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1259,
    "creation_timestamp": "2025-11-01T15:51:03.912589"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 519",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1260,
    "creation_timestamp": "2025-11-01T15:51:03.912591"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 126",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1261,
    "creation_timestamp": "2025-11-01T15:51:03.912593"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 141",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1262,
    "creation_timestamp": "2025-11-01T15:51:03.912594"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 317",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1263,
    "creation_timestamp": "2025-11-01T15:51:03.912596"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 150",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1264,
    "creation_timestamp": "2025-11-01T15:51:03.912597"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 480",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1265,
    "creation_timestamp": "2025-11-01T15:51:03.912599"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(value * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 64",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1266,
    "creation_timestamp": "2025-11-01T15:51:03.912600"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 34",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1267,
    "creation_timestamp": "2025-11-01T15:51:03.912602"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 91",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1268,
    "creation_timestamp": "2025-11-01T15:51:03.912604"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 532",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1269,
    "creation_timestamp": "2025-11-01T15:51:03.912605"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 110",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1270,
    "creation_timestamp": "2025-11-01T15:51:03.912626"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 451",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1271,
    "creation_timestamp": "2025-11-01T15:51:03.912627"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 190",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1272,
    "creation_timestamp": "2025-11-01T15:51:03.912629"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 47",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1273,
    "creation_timestamp": "2025-11-01T15:51:03.912630"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 129",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1274,
    "creation_timestamp": "2025-11-01T15:51:03.912632"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 66",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1275,
    "creation_timestamp": "2025-11-01T15:51:03.912633"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 147",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1276,
    "creation_timestamp": "2025-11-01T15:51:03.912635"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 value = fundss[msg.sender];\n                        assert(value > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 296",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1277,
    "creation_timestamp": "2025-11-01T15:51:03.912636"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 467",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1278,
    "creation_timestamp": "2025-11-01T15:51:03.912638"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 311",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1279,
    "creation_timestamp": "2025-11-01T15:51:03.912639"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 472",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1280,
    "creation_timestamp": "2025-11-01T15:51:03.912641"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 182",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1281,
    "creation_timestamp": "2025-11-01T15:51:03.912642"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 31",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1282,
    "creation_timestamp": "2025-11-01T15:51:03.912644"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 140",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1283,
    "creation_timestamp": "2025-11-01T15:51:03.912645"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 712",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1284,
    "creation_timestamp": "2025-11-01T15:51:03.912647"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 211",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1285,
    "creation_timestamp": "2025-11-01T15:51:03.912648"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 371",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1286,
    "creation_timestamp": "2025-11-01T15:51:03.912650"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 470",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1287,
    "creation_timestamp": "2025-11-01T15:51:03.912651"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 89",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1288,
    "creation_timestamp": "2025-11-01T15:51:03.912653"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 207",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1289,
    "creation_timestamp": "2025-11-01T15:51:03.912654"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 429",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1290,
    "creation_timestamp": "2025-11-01T15:51:03.912656"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 266",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1291,
    "creation_timestamp": "2025-11-01T15:51:03.912657"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 612",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1292,
    "creation_timestamp": "2025-11-01T15:51:03.912659"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 226",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1293,
    "creation_timestamp": "2025-11-01T15:51:03.912660"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 103",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1294,
    "creation_timestamp": "2025-11-01T15:51:03.912662"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 80",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1295,
    "creation_timestamp": "2025-11-01T15:51:03.912663"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 314",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1296,
    "creation_timestamp": "2025-11-01T15:51:03.912664"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 98",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1297,
    "creation_timestamp": "2025-11-01T15:51:03.912666"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 196",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1298,
    "creation_timestamp": "2025-11-01T15:51:03.912667"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 69",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1299,
    "creation_timestamp": "2025-11-01T15:51:03.912669"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 484",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1300,
    "creation_timestamp": "2025-11-01T15:51:03.912670"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 40",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1301,
    "creation_timestamp": "2025-11-01T15:51:03.912672"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 749",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1302,
    "creation_timestamp": "2025-11-01T15:51:03.912675"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 584",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1303,
    "creation_timestamp": "2025-11-01T15:51:03.912676"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 148",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1304,
    "creation_timestamp": "2025-11-01T15:51:03.912678"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 441",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1305,
    "creation_timestamp": "2025-11-01T15:51:03.912679"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 282",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1306,
    "creation_timestamp": "2025-11-01T15:51:03.912681"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 628",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1307,
    "creation_timestamp": "2025-11-01T15:51:03.912682"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 267",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1308,
    "creation_timestamp": "2025-11-01T15:51:03.912684"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 182",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1309,
    "creation_timestamp": "2025-11-01T15:51:03.912685"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 778",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1310,
    "creation_timestamp": "2025-11-01T15:51:03.912687"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 385",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1311,
    "creation_timestamp": "2025-11-01T15:51:03.912688"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 536",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1312,
    "creation_timestamp": "2025-11-01T15:51:03.912690"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 138",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1313,
    "creation_timestamp": "2025-11-01T15:51:03.912691"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 670",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1314,
    "creation_timestamp": "2025-11-01T15:51:03.912693"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 491",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1315,
    "creation_timestamp": "2025-11-01T15:51:03.912694"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 56",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1316,
    "creation_timestamp": "2025-11-01T15:51:03.912696"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 490",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1317,
    "creation_timestamp": "2025-11-01T15:51:03.912697"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 114",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1318,
    "creation_timestamp": "2025-11-01T15:51:03.912699"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 496",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1319,
    "creation_timestamp": "2025-11-01T15:51:03.912700"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 154",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1320,
    "creation_timestamp": "2025-11-01T15:51:03.912702"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 332",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1321,
    "creation_timestamp": "2025-11-01T15:51:03.912703"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 23",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1322,
    "creation_timestamp": "2025-11-01T15:51:03.912705"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 364",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1323,
    "creation_timestamp": "2025-11-01T15:51:03.912707"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 368",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1324,
    "creation_timestamp": "2025-11-01T15:51:03.912709"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 210",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1325,
    "creation_timestamp": "2025-11-01T15:51:03.912711"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 543",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1326,
    "creation_timestamp": "2025-11-01T15:51:03.912712"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 437",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1327,
    "creation_timestamp": "2025-11-01T15:51:03.912714"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 486",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1328,
    "creation_timestamp": "2025-11-01T15:51:03.912715"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 340",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1329,
    "creation_timestamp": "2025-11-01T15:51:03.912716"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 674",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1330,
    "creation_timestamp": "2025-11-01T15:51:03.912718"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 293",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1331,
    "creation_timestamp": "2025-11-01T15:51:03.912719"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 371",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1332,
    "creation_timestamp": "2025-11-01T15:51:03.912721"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 541",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1333,
    "creation_timestamp": "2025-11-01T15:51:03.912722"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 380",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1334,
    "creation_timestamp": "2025-11-01T15:51:03.912724"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 418",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1335,
    "creation_timestamp": "2025-11-01T15:51:03.912725"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 28",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1336,
    "creation_timestamp": "2025-11-01T15:51:03.912727"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 88",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1337,
    "creation_timestamp": "2025-11-01T15:51:03.912728"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 538",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1338,
    "creation_timestamp": "2025-11-01T15:51:03.912730"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 257",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1339,
    "creation_timestamp": "2025-11-01T15:51:03.912731"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 107",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1340,
    "creation_timestamp": "2025-11-01T15:51:03.912732"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 310",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1341,
    "creation_timestamp": "2025-11-01T15:51:03.912734"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 100",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1342,
    "creation_timestamp": "2025-11-01T15:51:03.912735"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 135",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1343,
    "creation_timestamp": "2025-11-01T15:51:03.912737"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 413",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1344,
    "creation_timestamp": "2025-11-01T15:51:03.912739"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 279",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1345,
    "creation_timestamp": "2025-11-01T15:51:03.912740"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 410",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1346,
    "creation_timestamp": "2025-11-01T15:51:03.912741"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 623",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1347,
    "creation_timestamp": "2025-11-01T15:51:03.912743"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 378",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1348,
    "creation_timestamp": "2025-11-01T15:51:03.912744"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 523",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1349,
    "creation_timestamp": "2025-11-01T15:51:03.912746"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 388",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1350,
    "creation_timestamp": "2025-11-01T15:51:03.912747"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 81",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1351,
    "creation_timestamp": "2025-11-01T15:51:03.912749"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 61",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1352,
    "creation_timestamp": "2025-11-01T15:51:03.912752"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 5",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1353,
    "creation_timestamp": "2025-11-01T15:51:03.912753"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 440",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1354,
    "creation_timestamp": "2025-11-01T15:51:03.912755"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 128",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1355,
    "creation_timestamp": "2025-11-01T15:51:03.912756"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 445",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1356,
    "creation_timestamp": "2025-11-01T15:51:03.912758"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 248",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1357,
    "creation_timestamp": "2025-11-01T15:51:03.912759"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 491",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1358,
    "creation_timestamp": "2025-11-01T15:51:03.912761"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 753",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1359,
    "creation_timestamp": "2025-11-01T15:51:03.912762"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 215",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1360,
    "creation_timestamp": "2025-11-01T15:51:03.912764"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 120",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1361,
    "creation_timestamp": "2025-11-01T15:51:03.912765"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 481",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1362,
    "creation_timestamp": "2025-11-01T15:51:03.912767"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 81",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1363,
    "creation_timestamp": "2025-11-01T15:51:03.912768"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 756",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1364,
    "creation_timestamp": "2025-11-01T15:51:03.912770"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 570",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1365,
    "creation_timestamp": "2025-11-01T15:51:03.912771"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 331",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1366,
    "creation_timestamp": "2025-11-01T15:51:03.912773"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 124",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1367,
    "creation_timestamp": "2025-11-01T15:51:03.912774"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 102",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1368,
    "creation_timestamp": "2025-11-01T15:51:03.912776"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 369",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1369,
    "creation_timestamp": "2025-11-01T15:51:03.912777"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 33",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1370,
    "creation_timestamp": "2025-11-01T15:51:03.912779"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 144",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1371,
    "creation_timestamp": "2025-11-01T15:51:03.912780"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 423",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1372,
    "creation_timestamp": "2025-11-01T15:51:03.912782"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 378",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1373,
    "creation_timestamp": "2025-11-01T15:51:03.912783"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 421",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1374,
    "creation_timestamp": "2025-11-01T15:51:03.912785"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 699",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1375,
    "creation_timestamp": "2025-11-01T15:51:03.912786"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 243",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1376,
    "creation_timestamp": "2025-11-01T15:51:03.912787"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 367",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1377,
    "creation_timestamp": "2025-11-01T15:51:03.912789"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 732",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1378,
    "creation_timestamp": "2025-11-01T15:51:03.912790"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 152",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1379,
    "creation_timestamp": "2025-11-01T15:51:03.912792"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 183",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1380,
    "creation_timestamp": "2025-11-01T15:51:03.912793"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 60",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1381,
    "creation_timestamp": "2025-11-01T15:51:03.912795"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 498",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1382,
    "creation_timestamp": "2025-11-01T15:51:03.912796"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 20",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1383,
    "creation_timestamp": "2025-11-01T15:51:03.912798"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 521",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1384,
    "creation_timestamp": "2025-11-01T15:51:03.912799"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 329",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1385,
    "creation_timestamp": "2025-11-01T15:51:03.912801"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 473",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1386,
    "creation_timestamp": "2025-11-01T15:51:03.912802"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 67",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1387,
    "creation_timestamp": "2025-11-01T15:51:03.912804"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 158",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1388,
    "creation_timestamp": "2025-11-01T15:51:03.912805"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 82",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1389,
    "creation_timestamp": "2025-11-01T15:51:03.912807"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 185",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1390,
    "creation_timestamp": "2025-11-01T15:51:03.912808"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 252",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1391,
    "creation_timestamp": "2025-11-01T15:51:03.912810"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 109",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1392,
    "creation_timestamp": "2025-11-01T15:51:03.912811"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 463",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1393,
    "creation_timestamp": "2025-11-01T15:51:03.912813"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 314",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1394,
    "creation_timestamp": "2025-11-01T15:51:03.912814"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 496",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1395,
    "creation_timestamp": "2025-11-01T15:51:03.912816"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 223",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1396,
    "creation_timestamp": "2025-11-01T15:51:03.912817"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 483",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1397,
    "creation_timestamp": "2025-11-01T15:51:03.912819"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 320",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1398,
    "creation_timestamp": "2025-11-01T15:51:03.912820"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 258",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1399,
    "creation_timestamp": "2025-11-01T15:51:03.912821"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 196",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1400,
    "creation_timestamp": "2025-11-01T15:51:03.912823"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 445",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1401,
    "creation_timestamp": "2025-11-01T15:51:03.912824"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 473",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1402,
    "creation_timestamp": "2025-11-01T15:51:03.912826"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 108",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1403,
    "creation_timestamp": "2025-11-01T15:51:03.912829"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 235",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1404,
    "creation_timestamp": "2025-11-01T15:51:03.912831"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 86",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1405,
    "creation_timestamp": "2025-11-01T15:51:03.912832"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 78",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1406,
    "creation_timestamp": "2025-11-01T15:51:03.912834"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 453",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1407,
    "creation_timestamp": "2025-11-01T15:51:03.912835"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 154",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1408,
    "creation_timestamp": "2025-11-01T15:51:03.912837"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 217",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1409,
    "creation_timestamp": "2025-11-01T15:51:03.912838"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 467",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1410,
    "creation_timestamp": "2025-11-01T15:51:03.912840"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 231",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1411,
    "creation_timestamp": "2025-11-01T15:51:03.912841"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 320",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1412,
    "creation_timestamp": "2025-11-01T15:51:03.912843"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 261",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1413,
    "creation_timestamp": "2025-11-01T15:51:03.912844"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 41",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1414,
    "creation_timestamp": "2025-11-01T15:51:03.912846"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 627",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1415,
    "creation_timestamp": "2025-11-01T15:51:03.912847"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 161",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1416,
    "creation_timestamp": "2025-11-01T15:51:03.912849"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 48",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1417,
    "creation_timestamp": "2025-11-01T15:51:03.912850"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 8",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1418,
    "creation_timestamp": "2025-11-01T15:51:03.912852"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 375",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1419,
    "creation_timestamp": "2025-11-01T15:51:03.912853"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 53",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1420,
    "creation_timestamp": "2025-11-01T15:51:03.912855"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 154",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1421,
    "creation_timestamp": "2025-11-01T15:51:03.912856"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 613",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1422,
    "creation_timestamp": "2025-11-01T15:51:03.912858"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 568",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1423,
    "creation_timestamp": "2025-11-01T15:51:03.912859"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 25",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1424,
    "creation_timestamp": "2025-11-01T15:51:03.912860"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 65",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1425,
    "creation_timestamp": "2025-11-01T15:51:03.912862"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 329",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1426,
    "creation_timestamp": "2025-11-01T15:51:03.912863"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 321",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1427,
    "creation_timestamp": "2025-11-01T15:51:03.912865"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 69",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1428,
    "creation_timestamp": "2025-11-01T15:51:03.912866"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 212",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1429,
    "creation_timestamp": "2025-11-01T15:51:03.912868"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 398",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1430,
    "creation_timestamp": "2025-11-01T15:51:03.912869"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 63",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1431,
    "creation_timestamp": "2025-11-01T15:51:03.912871"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 558",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1432,
    "creation_timestamp": "2025-11-01T15:51:03.912872"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 356",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1433,
    "creation_timestamp": "2025-11-01T15:51:03.912874"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 269",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1434,
    "creation_timestamp": "2025-11-01T15:51:03.912875"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 198",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1435,
    "creation_timestamp": "2025-11-01T15:51:03.912877"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 316",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1436,
    "creation_timestamp": "2025-11-01T15:51:03.912878"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 457",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1437,
    "creation_timestamp": "2025-11-01T15:51:03.912880"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 183",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1438,
    "creation_timestamp": "2025-11-01T15:51:03.912881"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 766",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1439,
    "creation_timestamp": "2025-11-01T15:51:03.912882"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 788",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1440,
    "creation_timestamp": "2025-11-01T15:51:03.912884"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 557",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1441,
    "creation_timestamp": "2025-11-01T15:51:03.912885"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 333",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1442,
    "creation_timestamp": "2025-11-01T15:51:03.912887"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 318",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1443,
    "creation_timestamp": "2025-11-01T15:51:03.912888"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 288",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1444,
    "creation_timestamp": "2025-11-01T15:51:03.912890"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 83",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1445,
    "creation_timestamp": "2025-11-01T15:51:03.912892"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 244",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1446,
    "creation_timestamp": "2025-11-01T15:51:03.912893"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 539",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1447,
    "creation_timestamp": "2025-11-01T15:51:03.912895"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 24",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1448,
    "creation_timestamp": "2025-11-01T15:51:03.912896"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 214",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1449,
    "creation_timestamp": "2025-11-01T15:51:03.912898"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 500",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1450,
    "creation_timestamp": "2025-11-01T15:51:03.912899"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 152",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1451,
    "creation_timestamp": "2025-11-01T15:51:03.912902"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 194",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1452,
    "creation_timestamp": "2025-11-01T15:51:03.912904"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 164",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1453,
    "creation_timestamp": "2025-11-01T15:51:03.912905"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 214",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1454,
    "creation_timestamp": "2025-11-01T15:51:03.912908"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 175",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1455,
    "creation_timestamp": "2025-11-01T15:51:03.912910"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 503",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1456,
    "creation_timestamp": "2025-11-01T15:51:03.912911"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 563",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1457,
    "creation_timestamp": "2025-11-01T15:51:03.912913"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 46",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1458,
    "creation_timestamp": "2025-11-01T15:51:03.912915"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 186",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1459,
    "creation_timestamp": "2025-11-01T15:51:03.912916"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 579",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1460,
    "creation_timestamp": "2025-11-01T15:51:03.912918"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 758",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1461,
    "creation_timestamp": "2025-11-01T15:51:03.912919"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 99",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1462,
    "creation_timestamp": "2025-11-01T15:51:03.912921"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 116",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1463,
    "creation_timestamp": "2025-11-01T15:51:03.912922"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 458",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1464,
    "creation_timestamp": "2025-11-01T15:51:03.912924"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 364",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1465,
    "creation_timestamp": "2025-11-01T15:51:03.912925"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 702",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1466,
    "creation_timestamp": "2025-11-01T15:51:03.912927"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 577",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1467,
    "creation_timestamp": "2025-11-01T15:51:03.912928"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 value = fundss[msg.sender];\n                        require(value > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 286",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1468,
    "creation_timestamp": "2025-11-01T15:51:03.912929"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 195",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1469,
    "creation_timestamp": "2025-11-01T15:51:03.912931"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 250",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1470,
    "creation_timestamp": "2025-11-01T15:51:03.912932"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 99",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1471,
    "creation_timestamp": "2025-11-01T15:51:03.912934"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 136",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1472,
    "creation_timestamp": "2025-11-01T15:51:03.912935"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 77",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1473,
    "creation_timestamp": "2025-11-01T15:51:03.912937"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 119",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1474,
    "creation_timestamp": "2025-11-01T15:51:03.912939"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 731",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1475,
    "creation_timestamp": "2025-11-01T15:51:03.912940"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 115",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1476,
    "creation_timestamp": "2025-11-01T15:51:03.912941"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 228",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1477,
    "creation_timestamp": "2025-11-01T15:51:03.912943"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 1",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1478,
    "creation_timestamp": "2025-11-01T15:51:03.912944"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 688",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1479,
    "creation_timestamp": "2025-11-01T15:51:03.912946"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 573",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1480,
    "creation_timestamp": "2025-11-01T15:51:03.912947"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 174",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1481,
    "creation_timestamp": "2025-11-01T15:51:03.912949"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 201",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1482,
    "creation_timestamp": "2025-11-01T15:51:03.912950"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 4",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1483,
    "creation_timestamp": "2025-11-01T15:51:03.912952"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 547",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1484,
    "creation_timestamp": "2025-11-01T15:51:03.912954"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 431",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1485,
    "creation_timestamp": "2025-11-01T15:51:03.912955"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 406",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1486,
    "creation_timestamp": "2025-11-01T15:51:03.912957"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 384",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1487,
    "creation_timestamp": "2025-11-01T15:51:03.912958"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 440",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1488,
    "creation_timestamp": "2025-11-01T15:51:03.912960"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 124",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1489,
    "creation_timestamp": "2025-11-01T15:51:03.912961"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 90",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1490,
    "creation_timestamp": "2025-11-01T15:51:03.912962"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 439",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1491,
    "creation_timestamp": "2025-11-01T15:51:03.912964"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 137",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1492,
    "creation_timestamp": "2025-11-01T15:51:03.912965"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 136",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1493,
    "creation_timestamp": "2025-11-01T15:51:03.912967"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 580",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1494,
    "creation_timestamp": "2025-11-01T15:51:03.912969"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 207",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1495,
    "creation_timestamp": "2025-11-01T15:51:03.912970"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 408",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1496,
    "creation_timestamp": "2025-11-01T15:51:03.912971"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 269",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1497,
    "creation_timestamp": "2025-11-01T15:51:03.912973"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 79",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1498,
    "creation_timestamp": "2025-11-01T15:51:03.912974"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 247",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1499,
    "creation_timestamp": "2025-11-01T15:51:03.912976"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 93",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1500,
    "creation_timestamp": "2025-11-01T15:51:03.912978"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 133",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1501,
    "creation_timestamp": "2025-11-01T15:51:03.912979"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 488",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1502,
    "creation_timestamp": "2025-11-01T15:51:03.912980"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 178",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1503,
    "creation_timestamp": "2025-11-01T15:51:03.912982"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 297",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1504,
    "creation_timestamp": "2025-11-01T15:51:03.912984"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 367",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1505,
    "creation_timestamp": "2025-11-01T15:51:03.912985"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 82",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1506,
    "creation_timestamp": "2025-11-01T15:51:03.912988"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 140",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1507,
    "creation_timestamp": "2025-11-01T15:51:03.912990"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 90",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1508,
    "creation_timestamp": "2025-11-01T15:51:03.912991"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 169",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1509,
    "creation_timestamp": "2025-11-01T15:51:03.912993"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 497",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1510,
    "creation_timestamp": "2025-11-01T15:51:03.913012"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 119",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1511,
    "creation_timestamp": "2025-11-01T15:51:03.913013"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 58",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1512,
    "creation_timestamp": "2025-11-01T15:51:03.913015"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 169",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1513,
    "creation_timestamp": "2025-11-01T15:51:03.913016"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 560",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1514,
    "creation_timestamp": "2025-11-01T15:51:03.913017"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 427",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1515,
    "creation_timestamp": "2025-11-01T15:51:03.913019"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 381",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1516,
    "creation_timestamp": "2025-11-01T15:51:03.913020"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 168",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1517,
    "creation_timestamp": "2025-11-01T15:51:03.913021"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 75",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1518,
    "creation_timestamp": "2025-11-01T15:51:03.913023"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 283",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1519,
    "creation_timestamp": "2025-11-01T15:51:03.913024"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 90",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1520,
    "creation_timestamp": "2025-11-01T15:51:03.913026"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 449",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1521,
    "creation_timestamp": "2025-11-01T15:51:03.913027"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 385",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1522,
    "creation_timestamp": "2025-11-01T15:51:03.913029"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 622",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1523,
    "creation_timestamp": "2025-11-01T15:51:03.913030"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 288",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1524,
    "creation_timestamp": "2025-11-01T15:51:03.913032"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 396",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1525,
    "creation_timestamp": "2025-11-01T15:51:03.913033"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 105",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1526,
    "creation_timestamp": "2025-11-01T15:51:03.913035"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 151",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1527,
    "creation_timestamp": "2025-11-01T15:51:03.913036"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 259",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1528,
    "creation_timestamp": "2025-11-01T15:51:03.913037"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 592",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1529,
    "creation_timestamp": "2025-11-01T15:51:03.913039"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 426",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1530,
    "creation_timestamp": "2025-11-01T15:51:03.913040"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 685",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1531,
    "creation_timestamp": "2025-11-01T15:51:03.913041"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 88",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1532,
    "creation_timestamp": "2025-11-01T15:51:03.913043"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 748",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1533,
    "creation_timestamp": "2025-11-01T15:51:03.913044"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 147",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1534,
    "creation_timestamp": "2025-11-01T15:51:03.913046"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 301",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1535,
    "creation_timestamp": "2025-11-01T15:51:03.913047"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 160",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1536,
    "creation_timestamp": "2025-11-01T15:51:03.913048"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 770",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1537,
    "creation_timestamp": "2025-11-01T15:51:03.913050"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 118",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1538,
    "creation_timestamp": "2025-11-01T15:51:03.913051"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 341",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1539,
    "creation_timestamp": "2025-11-01T15:51:03.913053"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 361",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1540,
    "creation_timestamp": "2025-11-01T15:51:03.913054"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 294",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1541,
    "creation_timestamp": "2025-11-01T15:51:03.913056"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 148",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1542,
    "creation_timestamp": "2025-11-01T15:51:03.913057"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 39",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1543,
    "creation_timestamp": "2025-11-01T15:51:03.913058"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 34",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1544,
    "creation_timestamp": "2025-11-01T15:51:03.913060"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 366",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1545,
    "creation_timestamp": "2025-11-01T15:51:03.913061"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 253",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1546,
    "creation_timestamp": "2025-11-01T15:51:03.913062"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 330",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1547,
    "creation_timestamp": "2025-11-01T15:51:03.913064"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 345",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1548,
    "creation_timestamp": "2025-11-01T15:51:03.913065"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 4",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1549,
    "creation_timestamp": "2025-11-01T15:51:03.913067"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 490",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1550,
    "creation_timestamp": "2025-11-01T15:51:03.913068"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 708",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1551,
    "creation_timestamp": "2025-11-01T15:51:03.913070"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 66",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1552,
    "creation_timestamp": "2025-11-01T15:51:03.913071"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 580",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1553,
    "creation_timestamp": "2025-11-01T15:51:03.913073"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[tx.origin];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 446",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1554,
    "creation_timestamp": "2025-11-01T15:51:03.913074"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 389",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1555,
    "creation_timestamp": "2025-11-01T15:51:03.913075"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 470",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1556,
    "creation_timestamp": "2025-11-01T15:51:03.913078"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 650",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1557,
    "creation_timestamp": "2025-11-01T15:51:03.913080"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 769",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1558,
    "creation_timestamp": "2025-11-01T15:51:03.913081"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 488",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1559,
    "creation_timestamp": "2025-11-01T15:51:03.913082"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 370",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1560,
    "creation_timestamp": "2025-11-01T15:51:03.913084"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 44",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1561,
    "creation_timestamp": "2025-11-01T15:51:03.913085"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 390",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1562,
    "creation_timestamp": "2025-11-01T15:51:03.913087"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 289",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1563,
    "creation_timestamp": "2025-11-01T15:51:03.913088"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 231",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1564,
    "creation_timestamp": "2025-11-01T15:51:03.913090"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 312",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1565,
    "creation_timestamp": "2025-11-01T15:51:03.913091"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 504",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1566,
    "creation_timestamp": "2025-11-01T15:51:03.913093"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 263",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1567,
    "creation_timestamp": "2025-11-01T15:51:03.913094"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 229",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1568,
    "creation_timestamp": "2025-11-01T15:51:03.913095"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        assert(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 171",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1569,
    "creation_timestamp": "2025-11-01T15:51:03.913097"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 456",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1570,
    "creation_timestamp": "2025-11-01T15:51:03.913098"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 427",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1571,
    "creation_timestamp": "2025-11-01T15:51:03.913100"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 165",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1572,
    "creation_timestamp": "2025-11-01T15:51:03.913101"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 432",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1573,
    "creation_timestamp": "2025-11-01T15:51:03.913102"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 55",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1574,
    "creation_timestamp": "2025-11-01T15:51:03.913104"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        assert(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 41",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1575,
    "creation_timestamp": "2025-11-01T15:51:03.913127"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 695",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1576,
    "creation_timestamp": "2025-11-01T15:51:03.913129"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 537",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1577,
    "creation_timestamp": "2025-11-01T15:51:03.913130"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 315",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1578,
    "creation_timestamp": "2025-11-01T15:51:03.913131"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 359",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1579,
    "creation_timestamp": "2025-11-01T15:51:03.913134"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 400",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1580,
    "creation_timestamp": "2025-11-01T15:51:03.913136"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 360",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1581,
    "creation_timestamp": "2025-11-01T15:51:03.913137"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 188",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1582,
    "creation_timestamp": "2025-11-01T15:51:03.913139"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 750",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1583,
    "creation_timestamp": "2025-11-01T15:51:03.913140"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 15",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1584,
    "creation_timestamp": "2025-11-01T15:51:03.913142"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 799",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1585,
    "creation_timestamp": "2025-11-01T15:51:03.913143"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 96",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1586,
    "creation_timestamp": "2025-11-01T15:51:03.913145"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 573",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1587,
    "creation_timestamp": "2025-11-01T15:51:03.913146"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 441",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1588,
    "creation_timestamp": "2025-11-01T15:51:03.913147"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 409",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1589,
    "creation_timestamp": "2025-11-01T15:51:03.913149"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 188",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1590,
    "creation_timestamp": "2025-11-01T15:51:03.913150"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 29",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1591,
    "creation_timestamp": "2025-11-01T15:51:03.913152"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 105",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1592,
    "creation_timestamp": "2025-11-01T15:51:03.913153"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 48",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1593,
    "creation_timestamp": "2025-11-01T15:51:03.913155"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 727",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1594,
    "creation_timestamp": "2025-11-01T15:51:03.913156"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 193",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1595,
    "creation_timestamp": "2025-11-01T15:51:03.913158"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 218",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1596,
    "creation_timestamp": "2025-11-01T15:51:03.913159"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 2",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1597,
    "creation_timestamp": "2025-11-01T15:51:03.913161"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 84",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1598,
    "creation_timestamp": "2025-11-01T15:51:03.913162"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 485",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1599,
    "creation_timestamp": "2025-11-01T15:51:03.913163"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 219",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1600,
    "creation_timestamp": "2025-11-01T15:51:03.913165"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 312",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1601,
    "creation_timestamp": "2025-11-01T15:51:03.913184"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 66",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1602,
    "creation_timestamp": "2025-11-01T15:51:03.913185"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 153",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1603,
    "creation_timestamp": "2025-11-01T15:51:03.913187"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 107",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1604,
    "creation_timestamp": "2025-11-01T15:51:03.913188"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 92",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1605,
    "creation_timestamp": "2025-11-01T15:51:03.913189"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 428",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1606,
    "creation_timestamp": "2025-11-01T15:51:03.913191"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        assert(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 481",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1607,
    "creation_timestamp": "2025-11-01T15:51:03.913194"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 300",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1608,
    "creation_timestamp": "2025-11-01T15:51:03.913195"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 180",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1609,
    "creation_timestamp": "2025-11-01T15:51:03.913197"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 256",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1610,
    "creation_timestamp": "2025-11-01T15:51:03.913198"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 55",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1611,
    "creation_timestamp": "2025-11-01T15:51:03.913200"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 411",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1612,
    "creation_timestamp": "2025-11-01T15:51:03.913201"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 338",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1613,
    "creation_timestamp": "2025-11-01T15:51:03.913202"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 21",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1614,
    "creation_timestamp": "2025-11-01T15:51:03.913204"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 585",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1615,
    "creation_timestamp": "2025-11-01T15:51:03.913205"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 570",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1616,
    "creation_timestamp": "2025-11-01T15:51:03.913207"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 39",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1617,
    "creation_timestamp": "2025-11-01T15:51:03.913208"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 733",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1618,
    "creation_timestamp": "2025-11-01T15:51:03.913210"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 122",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1619,
    "creation_timestamp": "2025-11-01T15:51:03.913211"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 477",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1620,
    "creation_timestamp": "2025-11-01T15:51:03.913212"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 493",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1621,
    "creation_timestamp": "2025-11-01T15:51:03.913214"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 513",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1622,
    "creation_timestamp": "2025-11-01T15:51:03.913215"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 617",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1623,
    "creation_timestamp": "2025-11-01T15:51:03.913217"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 25",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1624,
    "creation_timestamp": "2025-11-01T15:51:03.913218"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 319",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1625,
    "creation_timestamp": "2025-11-01T15:51:03.913219"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 236",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1626,
    "creation_timestamp": "2025-11-01T15:51:03.913221"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 490",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1627,
    "creation_timestamp": "2025-11-01T15:51:03.913222"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 535",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1628,
    "creation_timestamp": "2025-11-01T15:51:03.913224"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 418",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1629,
    "creation_timestamp": "2025-11-01T15:51:03.913225"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 502",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1630,
    "creation_timestamp": "2025-11-01T15:51:03.913227"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 639",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1631,
    "creation_timestamp": "2025-11-01T15:51:03.913228"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 193",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1632,
    "creation_timestamp": "2025-11-01T15:51:03.913230"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 70",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1633,
    "creation_timestamp": "2025-11-01T15:51:03.913231"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 400",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1634,
    "creation_timestamp": "2025-11-01T15:51:03.913232"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 505",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1635,
    "creation_timestamp": "2025-11-01T15:51:03.913234"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 246",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1636,
    "creation_timestamp": "2025-11-01T15:51:03.913235"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 204",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1637,
    "creation_timestamp": "2025-11-01T15:51:03.913237"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 461",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1638,
    "creation_timestamp": "2025-11-01T15:51:03.913238"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 299",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1639,
    "creation_timestamp": "2025-11-01T15:51:03.913239"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 575",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1640,
    "creation_timestamp": "2025-11-01T15:51:03.913241"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 232",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1641,
    "creation_timestamp": "2025-11-01T15:51:03.913242"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 317",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1642,
    "creation_timestamp": "2025-11-01T15:51:03.913244"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 325",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1643,
    "creation_timestamp": "2025-11-01T15:51:03.913245"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 606",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1644,
    "creation_timestamp": "2025-11-01T15:51:03.913247"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 370",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1645,
    "creation_timestamp": "2025-11-01T15:51:03.913248"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 781",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1646,
    "creation_timestamp": "2025-11-01T15:51:03.913249"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 106",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1647,
    "creation_timestamp": "2025-11-01T15:51:03.913251"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 743",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1648,
    "creation_timestamp": "2025-11-01T15:51:03.913252"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 31",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1649,
    "creation_timestamp": "2025-11-01T15:51:03.913254"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 544",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1650,
    "creation_timestamp": "2025-11-01T15:51:03.913255"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 710",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1651,
    "creation_timestamp": "2025-11-01T15:51:03.913257"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 333",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1652,
    "creation_timestamp": "2025-11-01T15:51:03.913258"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 585",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1653,
    "creation_timestamp": "2025-11-01T15:51:03.913259"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 552",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1654,
    "creation_timestamp": "2025-11-01T15:51:03.913261"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 129",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1655,
    "creation_timestamp": "2025-11-01T15:51:03.913262"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 609",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1656,
    "creation_timestamp": "2025-11-01T15:51:03.913264"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 540",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1657,
    "creation_timestamp": "2025-11-01T15:51:03.913265"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 794",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1658,
    "creation_timestamp": "2025-11-01T15:51:03.913268"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 384",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1659,
    "creation_timestamp": "2025-11-01T15:51:03.913270"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 221",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1660,
    "creation_timestamp": "2025-11-01T15:51:03.913271"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 33",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1661,
    "creation_timestamp": "2025-11-01T15:51:03.913273"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 290",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1662,
    "creation_timestamp": "2025-11-01T15:51:03.913274"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 365",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1663,
    "creation_timestamp": "2025-11-01T15:51:03.913275"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 340",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1664,
    "creation_timestamp": "2025-11-01T15:51:03.913277"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 344",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1665,
    "creation_timestamp": "2025-11-01T15:51:03.913278"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 390",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1666,
    "creation_timestamp": "2025-11-01T15:51:03.913280"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 439",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1667,
    "creation_timestamp": "2025-11-01T15:51:03.913281"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 351",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1668,
    "creation_timestamp": "2025-11-01T15:51:03.913283"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 20",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1669,
    "creation_timestamp": "2025-11-01T15:51:03.913285"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 84",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1670,
    "creation_timestamp": "2025-11-01T15:51:03.913286"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 353",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1671,
    "creation_timestamp": "2025-11-01T15:51:03.913287"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 120",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1672,
    "creation_timestamp": "2025-11-01T15:51:03.913289"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 140",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1673,
    "creation_timestamp": "2025-11-01T15:51:03.913312"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 76",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1674,
    "creation_timestamp": "2025-11-01T15:51:03.913314"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 291",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1675,
    "creation_timestamp": "2025-11-01T15:51:03.913315"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 240",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1676,
    "creation_timestamp": "2025-11-01T15:51:03.913317"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 404",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1677,
    "creation_timestamp": "2025-11-01T15:51:03.913318"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 109",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1678,
    "creation_timestamp": "2025-11-01T15:51:03.913320"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 287",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1679,
    "creation_timestamp": "2025-11-01T15:51:03.913321"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 37",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1680,
    "creation_timestamp": "2025-11-01T15:51:03.913323"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 582",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1681,
    "creation_timestamp": "2025-11-01T15:51:03.913324"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 63",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1682,
    "creation_timestamp": "2025-11-01T15:51:03.913325"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 56",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1683,
    "creation_timestamp": "2025-11-01T15:51:03.913327"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 293",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1684,
    "creation_timestamp": "2025-11-01T15:51:03.913328"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 291",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1685,
    "creation_timestamp": "2025-11-01T15:51:03.913330"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 554",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1686,
    "creation_timestamp": "2025-11-01T15:51:03.913331"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 305",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1687,
    "creation_timestamp": "2025-11-01T15:51:03.913333"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 498",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1688,
    "creation_timestamp": "2025-11-01T15:51:03.913334"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 212",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1689,
    "creation_timestamp": "2025-11-01T15:51:03.913336"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 346",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1690,
    "creation_timestamp": "2025-11-01T15:51:03.913337"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 722",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1691,
    "creation_timestamp": "2025-11-01T15:51:03.913339"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 741",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1692,
    "creation_timestamp": "2025-11-01T15:51:03.913340"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 515",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1693,
    "creation_timestamp": "2025-11-01T15:51:03.913342"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 503",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1694,
    "creation_timestamp": "2025-11-01T15:51:03.913343"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 553",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1695,
    "creation_timestamp": "2025-11-01T15:51:03.913345"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 value = fundss[tx.origin];\n                        require(value > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 211",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1696,
    "creation_timestamp": "2025-11-01T15:51:03.913346"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 216",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1697,
    "creation_timestamp": "2025-11-01T15:51:03.913347"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 95",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1698,
    "creation_timestamp": "2025-11-01T15:51:03.913349"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 171",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1699,
    "creation_timestamp": "2025-11-01T15:51:03.913350"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 315",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1700,
    "creation_timestamp": "2025-11-01T15:51:03.913352"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 265",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1701,
    "creation_timestamp": "2025-11-01T15:51:03.913353"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 468",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1702,
    "creation_timestamp": "2025-11-01T15:51:03.913355"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 134",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1703,
    "creation_timestamp": "2025-11-01T15:51:03.913356"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 384",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1704,
    "creation_timestamp": "2025-11-01T15:51:03.913358"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 764",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1705,
    "creation_timestamp": "2025-11-01T15:51:03.913359"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 176",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1706,
    "creation_timestamp": "2025-11-01T15:51:03.913361"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 195",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1707,
    "creation_timestamp": "2025-11-01T15:51:03.913364"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 427",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1708,
    "creation_timestamp": "2025-11-01T15:51:03.913365"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 102",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1709,
    "creation_timestamp": "2025-11-01T15:51:03.913367"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 7",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1710,
    "creation_timestamp": "2025-11-01T15:51:03.913370"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 575",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1711,
    "creation_timestamp": "2025-11-01T15:51:03.913371"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 516",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1712,
    "creation_timestamp": "2025-11-01T15:51:03.913373"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 480",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1713,
    "creation_timestamp": "2025-11-01T15:51:03.913374"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 292",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1714,
    "creation_timestamp": "2025-11-01T15:51:03.913376"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 549",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1715,
    "creation_timestamp": "2025-11-01T15:51:03.913377"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 436",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1716,
    "creation_timestamp": "2025-11-01T15:51:03.913379"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 572",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1717,
    "creation_timestamp": "2025-11-01T15:51:03.913380"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 559",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1718,
    "creation_timestamp": "2025-11-01T15:51:03.913382"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 541",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1719,
    "creation_timestamp": "2025-11-01T15:51:03.913383"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 309",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1720,
    "creation_timestamp": "2025-11-01T15:51:03.913385"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 90",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1721,
    "creation_timestamp": "2025-11-01T15:51:03.913386"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 296",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1722,
    "creation_timestamp": "2025-11-01T15:51:03.913388"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 591",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1723,
    "creation_timestamp": "2025-11-01T15:51:03.913389"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 108",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1724,
    "creation_timestamp": "2025-11-01T15:51:03.913390"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 192",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1725,
    "creation_timestamp": "2025-11-01T15:51:03.913392"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 237",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1726,
    "creation_timestamp": "2025-11-01T15:51:03.913393"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 value = fundss[tx.origin];\n                        assert(value > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: value}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        fundss[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 126",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1727,
    "creation_timestamp": "2025-11-01T15:51:03.913395"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 52",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1728,
    "creation_timestamp": "2025-11-01T15:51:03.913396"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 561",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1729,
    "creation_timestamp": "2025-11-01T15:51:03.913398"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 709",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1730,
    "creation_timestamp": "2025-11-01T15:51:03.913399"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 128",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1731,
    "creation_timestamp": "2025-11-01T15:51:03.913401"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 272",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1732,
    "creation_timestamp": "2025-11-01T15:51:03.913402"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 457",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1733,
    "creation_timestamp": "2025-11-01T15:51:03.913403"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 57",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1734,
    "creation_timestamp": "2025-11-01T15:51:03.913405"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 161",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1735,
    "creation_timestamp": "2025-11-01T15:51:03.913406"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 800",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1736,
    "creation_timestamp": "2025-11-01T15:51:03.913408"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 262",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1737,
    "creation_timestamp": "2025-11-01T15:51:03.913409"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 110",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1738,
    "creation_timestamp": "2025-11-01T15:51:03.913411"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 27",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1739,
    "creation_timestamp": "2025-11-01T15:51:03.913430"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 664",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1740,
    "creation_timestamp": "2025-11-01T15:51:03.913431"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 117",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1741,
    "creation_timestamp": "2025-11-01T15:51:03.913432"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 131",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1742,
    "creation_timestamp": "2025-11-01T15:51:03.913434"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        assert(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 256",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1743,
    "creation_timestamp": "2025-11-01T15:51:03.913435"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 361",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1744,
    "creation_timestamp": "2025-11-01T15:51:03.913437"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 706",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1745,
    "creation_timestamp": "2025-11-01T15:51:03.913438"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 326",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1746,
    "creation_timestamp": "2025-11-01T15:51:03.913440"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 350",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1747,
    "creation_timestamp": "2025-11-01T15:51:03.913441"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 250",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1748,
    "creation_timestamp": "2025-11-01T15:51:03.913443"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 382",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1749,
    "creation_timestamp": "2025-11-01T15:51:03.913444"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 14",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1750,
    "creation_timestamp": "2025-11-01T15:51:03.913446"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 728",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1751,
    "creation_timestamp": "2025-11-01T15:51:03.913447"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 360",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1752,
    "creation_timestamp": "2025-11-01T15:51:03.913448"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 14",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1753,
    "creation_timestamp": "2025-11-01T15:51:03.913450"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 551",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1754,
    "creation_timestamp": "2025-11-01T15:51:03.913451"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 177",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1755,
    "creation_timestamp": "2025-11-01T15:51:03.913453"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 97",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1756,
    "creation_timestamp": "2025-11-01T15:51:03.913454"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 114",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1757,
    "creation_timestamp": "2025-11-01T15:51:03.913455"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 555",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1758,
    "creation_timestamp": "2025-11-01T15:51:03.913457"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 461",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1759,
    "creation_timestamp": "2025-11-01T15:51:03.913458"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 178",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1760,
    "creation_timestamp": "2025-11-01T15:51:03.913462"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 441",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1761,
    "creation_timestamp": "2025-11-01T15:51:03.913463"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 377",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1762,
    "creation_timestamp": "2025-11-01T15:51:03.913486"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 18",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1763,
    "creation_timestamp": "2025-11-01T15:51:03.913488"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 371",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1764,
    "creation_timestamp": "2025-11-01T15:51:03.913489"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 172",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1765,
    "creation_timestamp": "2025-11-01T15:51:03.913491"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 243",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1766,
    "creation_timestamp": "2025-11-01T15:51:03.913492"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 411",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1767,
    "creation_timestamp": "2025-11-01T15:51:03.913494"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 373",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1768,
    "creation_timestamp": "2025-11-01T15:51:03.913495"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 303",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1769,
    "creation_timestamp": "2025-11-01T15:51:03.913497"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 790",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1770,
    "creation_timestamp": "2025-11-01T15:51:03.913498"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 462",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1771,
    "creation_timestamp": "2025-11-01T15:51:03.913500"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 17",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1772,
    "creation_timestamp": "2025-11-01T15:51:03.913501"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 241",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1773,
    "creation_timestamp": "2025-11-01T15:51:03.913503"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 425",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1774,
    "creation_timestamp": "2025-11-01T15:51:03.913505"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 271",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1775,
    "creation_timestamp": "2025-11-01T15:51:03.913507"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 175",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1776,
    "creation_timestamp": "2025-11-01T15:51:03.913508"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 369",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1777,
    "creation_timestamp": "2025-11-01T15:51:03.913510"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 494",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1778,
    "creation_timestamp": "2025-11-01T15:51:03.913511"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 176",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1779,
    "creation_timestamp": "2025-11-01T15:51:03.913513"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 217",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1780,
    "creation_timestamp": "2025-11-01T15:51:03.913514"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 191",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1781,
    "creation_timestamp": "2025-11-01T15:51:03.913516"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 161",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1782,
    "creation_timestamp": "2025-11-01T15:51:03.913517"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 167",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1783,
    "creation_timestamp": "2025-11-01T15:51:03.913519"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 256",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1784,
    "creation_timestamp": "2025-11-01T15:51:03.913520"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 value = fundss[msg.sender];\n                        require(value > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 166",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1785,
    "creation_timestamp": "2025-11-01T15:51:03.913522"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 719",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1786,
    "creation_timestamp": "2025-11-01T15:51:03.913541"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 375",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1787,
    "creation_timestamp": "2025-11-01T15:51:03.913542"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 448",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1788,
    "creation_timestamp": "2025-11-01T15:51:03.913544"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 335",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1789,
    "creation_timestamp": "2025-11-01T15:51:03.913545"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 53",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1790,
    "creation_timestamp": "2025-11-01T15:51:03.913547"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 599",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1791,
    "creation_timestamp": "2025-11-01T15:51:03.913548"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 177",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1792,
    "creation_timestamp": "2025-11-01T15:51:03.913549"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 62",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1793,
    "creation_timestamp": "2025-11-01T15:51:03.913551"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 408",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1794,
    "creation_timestamp": "2025-11-01T15:51:03.913574"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 218",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1795,
    "creation_timestamp": "2025-11-01T15:51:03.913576"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 531",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1796,
    "creation_timestamp": "2025-11-01T15:51:03.913577"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 655",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1797,
    "creation_timestamp": "2025-11-01T15:51:03.913579"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 38",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1798,
    "creation_timestamp": "2025-11-01T15:51:03.913581"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 357",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1799,
    "creation_timestamp": "2025-11-01T15:51:03.913582"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 50",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1800,
    "creation_timestamp": "2025-11-01T15:51:03.913584"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 14",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1801,
    "creation_timestamp": "2025-11-01T15:51:03.913585"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 319",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1802,
    "creation_timestamp": "2025-11-01T15:51:03.913586"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 557",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1803,
    "creation_timestamp": "2025-11-01T15:51:03.913588"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 379",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1804,
    "creation_timestamp": "2025-11-01T15:51:03.913590"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 89",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1805,
    "creation_timestamp": "2025-11-01T15:51:03.913591"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 589",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1806,
    "creation_timestamp": "2025-11-01T15:51:03.913593"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 662",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1807,
    "creation_timestamp": "2025-11-01T15:51:03.913594"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 625",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1808,
    "creation_timestamp": "2025-11-01T15:51:03.913596"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 691",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1809,
    "creation_timestamp": "2025-11-01T15:51:03.913597"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 9",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1810,
    "creation_timestamp": "2025-11-01T15:51:03.913599"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 474",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1811,
    "creation_timestamp": "2025-11-01T15:51:03.913601"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 101",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1812,
    "creation_timestamp": "2025-11-01T15:51:03.913603"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 452",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1813,
    "creation_timestamp": "2025-11-01T15:51:03.913622"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 135",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1814,
    "creation_timestamp": "2025-11-01T15:51:03.913623"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 638",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1815,
    "creation_timestamp": "2025-11-01T15:51:03.913625"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 395",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1816,
    "creation_timestamp": "2025-11-01T15:51:03.913626"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 588",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1817,
    "creation_timestamp": "2025-11-01T15:51:03.913628"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 43",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1818,
    "creation_timestamp": "2025-11-01T15:51:03.913629"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 98",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1819,
    "creation_timestamp": "2025-11-01T15:51:03.913630"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 113",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1820,
    "creation_timestamp": "2025-11-01T15:51:03.913632"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 165",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1821,
    "creation_timestamp": "2025-11-01T15:51:03.913633"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 87",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1822,
    "creation_timestamp": "2025-11-01T15:51:03.913635"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 235",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1823,
    "creation_timestamp": "2025-11-01T15:51:03.913636"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 160",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1824,
    "creation_timestamp": "2025-11-01T15:51:03.913637"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 253",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1825,
    "creation_timestamp": "2025-11-01T15:51:03.913639"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 310",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1826,
    "creation_timestamp": "2025-11-01T15:51:03.913640"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 285",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1827,
    "creation_timestamp": "2025-11-01T15:51:03.913642"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 187",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1828,
    "creation_timestamp": "2025-11-01T15:51:03.913643"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 72",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1829,
    "creation_timestamp": "2025-11-01T15:51:03.913645"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 665",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1830,
    "creation_timestamp": "2025-11-01T15:51:03.913646"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 359",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1831,
    "creation_timestamp": "2025-11-01T15:51:03.913648"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        assert(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 381",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1832,
    "creation_timestamp": "2025-11-01T15:51:03.913649"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 511",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1833,
    "creation_timestamp": "2025-11-01T15:51:03.913652"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 243",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1834,
    "creation_timestamp": "2025-11-01T15:51:03.913675"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 94",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1835,
    "creation_timestamp": "2025-11-01T15:51:03.913676"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 10",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1836,
    "creation_timestamp": "2025-11-01T15:51:03.913678"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 71",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1837,
    "creation_timestamp": "2025-11-01T15:51:03.913679"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 544",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1838,
    "creation_timestamp": "2025-11-01T15:51:03.913681"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 162",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1839,
    "creation_timestamp": "2025-11-01T15:51:03.913682"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 637",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1840,
    "creation_timestamp": "2025-11-01T15:51:03.913684"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 195",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1841,
    "creation_timestamp": "2025-11-01T15:51:03.913685"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 183",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1842,
    "creation_timestamp": "2025-11-01T15:51:03.913687"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 775",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1843,
    "creation_timestamp": "2025-11-01T15:51:03.913708"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 341",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1844,
    "creation_timestamp": "2025-11-01T15:51:03.913709"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 597",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1845,
    "creation_timestamp": "2025-11-01T15:51:03.913711"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 306",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1846,
    "creation_timestamp": "2025-11-01T15:51:03.913712"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 172",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1847,
    "creation_timestamp": "2025-11-01T15:51:03.913713"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 647",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1848,
    "creation_timestamp": "2025-11-01T15:51:03.913715"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 156",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1849,
    "creation_timestamp": "2025-11-01T15:51:03.913716"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 272",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1850,
    "creation_timestamp": "2025-11-01T15:51:03.913717"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 278",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1851,
    "creation_timestamp": "2025-11-01T15:51:03.913719"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 122",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1852,
    "creation_timestamp": "2025-11-01T15:51:03.913720"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 40",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1853,
    "creation_timestamp": "2025-11-01T15:51:03.913722"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 636",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1854,
    "creation_timestamp": "2025-11-01T15:51:03.913723"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 471",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1855,
    "creation_timestamp": "2025-11-01T15:51:03.913725"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 673",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1856,
    "creation_timestamp": "2025-11-01T15:51:03.913726"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 227",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1857,
    "creation_timestamp": "2025-11-01T15:51:03.913728"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 7",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1858,
    "creation_timestamp": "2025-11-01T15:51:03.913729"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 325",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1859,
    "creation_timestamp": "2025-11-01T15:51:03.913731"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 60",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1860,
    "creation_timestamp": "2025-11-01T15:51:03.913732"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 78",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1861,
    "creation_timestamp": "2025-11-01T15:51:03.913733"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 600",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1862,
    "creation_timestamp": "2025-11-01T15:51:03.913736"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 206",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1863,
    "creation_timestamp": "2025-11-01T15:51:03.913738"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 550",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1864,
    "creation_timestamp": "2025-11-01T15:51:03.913739"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 58",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1865,
    "creation_timestamp": "2025-11-01T15:51:03.913741"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 144",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1866,
    "creation_timestamp": "2025-11-01T15:51:03.913742"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 288",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1867,
    "creation_timestamp": "2025-11-01T15:51:03.913743"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 318",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1868,
    "creation_timestamp": "2025-11-01T15:51:03.913745"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        assert(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 366",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1869,
    "creation_timestamp": "2025-11-01T15:51:03.913746"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 165",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1870,
    "creation_timestamp": "2025-11-01T15:51:03.913748"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 47",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1871,
    "creation_timestamp": "2025-11-01T15:51:03.913749"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 209",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1872,
    "creation_timestamp": "2025-11-01T15:51:03.913750"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 259",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1873,
    "creation_timestamp": "2025-11-01T15:51:03.913752"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 value = fundss[tx.origin];\n                        assert(value > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: value}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        fundss[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 416",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1874,
    "creation_timestamp": "2025-11-01T15:51:03.913753"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 409",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1875,
    "creation_timestamp": "2025-11-01T15:51:03.913755"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 149",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1876,
    "creation_timestamp": "2025-11-01T15:51:03.913756"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 65",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1877,
    "creation_timestamp": "2025-11-01T15:51:03.913758"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 178",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1878,
    "creation_timestamp": "2025-11-01T15:51:03.913759"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 595",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1879,
    "creation_timestamp": "2025-11-01T15:51:03.913760"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 324",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1880,
    "creation_timestamp": "2025-11-01T15:51:03.913762"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 293",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1881,
    "creation_timestamp": "2025-11-01T15:51:03.913763"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 379",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1882,
    "creation_timestamp": "2025-11-01T15:51:03.913765"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 35",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1883,
    "creation_timestamp": "2025-11-01T15:51:03.913766"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 132",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1884,
    "creation_timestamp": "2025-11-01T15:51:03.913767"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 400",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1885,
    "creation_timestamp": "2025-11-01T15:51:03.913769"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 498",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1886,
    "creation_timestamp": "2025-11-01T15:51:03.913770"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 106",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1887,
    "creation_timestamp": "2025-11-01T15:51:03.913772"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 23",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1888,
    "creation_timestamp": "2025-11-01T15:51:03.913773"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 83",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1889,
    "creation_timestamp": "2025-11-01T15:51:03.913774"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 156",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1890,
    "creation_timestamp": "2025-11-01T15:51:03.913776"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 509",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1891,
    "creation_timestamp": "2025-11-01T15:51:03.913777"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[tx.origin] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 38",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1892,
    "creation_timestamp": "2025-11-01T15:51:03.913778"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 8",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1893,
    "creation_timestamp": "2025-11-01T15:51:03.913780"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 51",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1894,
    "creation_timestamp": "2025-11-01T15:51:03.913781"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 277",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1895,
    "creation_timestamp": "2025-11-01T15:51:03.913783"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 574",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1896,
    "creation_timestamp": "2025-11-01T15:51:03.913784"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 22",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1897,
    "creation_timestamp": "2025-11-01T15:51:03.913785"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 402",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1898,
    "creation_timestamp": "2025-11-01T15:51:03.913787"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 305",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1899,
    "creation_timestamp": "2025-11-01T15:51:03.913788"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 418",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1900,
    "creation_timestamp": "2025-11-01T15:51:03.913790"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 121",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1901,
    "creation_timestamp": "2025-11-01T15:51:03.913791"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 357",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1902,
    "creation_timestamp": "2025-11-01T15:51:03.913792"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 23",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1903,
    "creation_timestamp": "2025-11-01T15:51:03.913794"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 353",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1904,
    "creation_timestamp": "2025-11-01T15:51:03.913795"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 459",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1905,
    "creation_timestamp": "2025-11-01T15:51:03.913797"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 630",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1906,
    "creation_timestamp": "2025-11-01T15:51:03.913798"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 189",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1907,
    "creation_timestamp": "2025-11-01T15:51:03.913800"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 614",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1908,
    "creation_timestamp": "2025-11-01T15:51:03.913801"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 435",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1909,
    "creation_timestamp": "2025-11-01T15:51:03.913802"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 168",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1910,
    "creation_timestamp": "2025-11-01T15:51:03.913804"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 159",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1911,
    "creation_timestamp": "2025-11-01T15:51:03.913805"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 410",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1912,
    "creation_timestamp": "2025-11-01T15:51:03.913807"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 495",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1913,
    "creation_timestamp": "2025-11-01T15:51:03.913808"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 102",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1914,
    "creation_timestamp": "2025-11-01T15:51:03.913811"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 640",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1915,
    "creation_timestamp": "2025-11-01T15:51:03.913812"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[tx.origin];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 376",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1916,
    "creation_timestamp": "2025-11-01T15:51:03.913814"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 394",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1917,
    "creation_timestamp": "2025-11-01T15:51:03.913815"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 6",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1918,
    "creation_timestamp": "2025-11-01T15:51:03.913816"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 192",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1919,
    "creation_timestamp": "2025-11-01T15:51:03.913818"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 424",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1920,
    "creation_timestamp": "2025-11-01T15:51:03.913819"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 92",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1921,
    "creation_timestamp": "2025-11-01T15:51:03.913821"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 12",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1922,
    "creation_timestamp": "2025-11-01T15:51:03.913822"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 197",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1923,
    "creation_timestamp": "2025-11-01T15:51:03.913823"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 403",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1924,
    "creation_timestamp": "2025-11-01T15:51:03.913825"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 37",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1925,
    "creation_timestamp": "2025-11-01T15:51:03.913826"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 181",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1926,
    "creation_timestamp": "2025-11-01T15:51:03.913828"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 8",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1927,
    "creation_timestamp": "2025-11-01T15:51:03.913829"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 112",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1928,
    "creation_timestamp": "2025-11-01T15:51:03.913830"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 168",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1929,
    "creation_timestamp": "2025-11-01T15:51:03.913832"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 173",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1930,
    "creation_timestamp": "2025-11-01T15:51:03.913833"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 458",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1931,
    "creation_timestamp": "2025-11-01T15:51:03.913835"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 9",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1932,
    "creation_timestamp": "2025-11-01T15:51:03.913836"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 142",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1933,
    "creation_timestamp": "2025-11-01T15:51:03.913838"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(value * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 239",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1934,
    "creation_timestamp": "2025-11-01T15:51:03.913839"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 194",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1935,
    "creation_timestamp": "2025-11-01T15:51:03.913840"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 553",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1936,
    "creation_timestamp": "2025-11-01T15:51:03.913842"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 634",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1937,
    "creation_timestamp": "2025-11-01T15:51:03.913843"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 499",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1938,
    "creation_timestamp": "2025-11-01T15:51:03.913845"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 343",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1939,
    "creation_timestamp": "2025-11-01T15:51:03.913846"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 150",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1940,
    "creation_timestamp": "2025-11-01T15:51:03.913848"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 314",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1941,
    "creation_timestamp": "2025-11-01T15:51:03.913849"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 43",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1942,
    "creation_timestamp": "2025-11-01T15:51:03.913850"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 38",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1943,
    "creation_timestamp": "2025-11-01T15:51:03.913852"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 112",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1944,
    "creation_timestamp": "2025-11-01T15:51:03.913853"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 249",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1945,
    "creation_timestamp": "2025-11-01T15:51:03.913855"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 71",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1946,
    "creation_timestamp": "2025-11-01T15:51:03.913856"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 161",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1947,
    "creation_timestamp": "2025-11-01T15:51:03.913857"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 509",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1948,
    "creation_timestamp": "2025-11-01T15:51:03.913859"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 389",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1949,
    "creation_timestamp": "2025-11-01T15:51:03.913860"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 42",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1950,
    "creation_timestamp": "2025-11-01T15:51:03.913862"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 671",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1951,
    "creation_timestamp": "2025-11-01T15:51:03.913863"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 506",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1952,
    "creation_timestamp": "2025-11-01T15:51:03.913864"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 212",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1953,
    "creation_timestamp": "2025-11-01T15:51:03.913866"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 94",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 1954,
    "creation_timestamp": "2025-11-01T15:51:03.913867"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 571",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1955,
    "creation_timestamp": "2025-11-01T15:51:03.913869"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 32",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1956,
    "creation_timestamp": "2025-11-01T15:51:03.913870"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 327",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1957,
    "creation_timestamp": "2025-11-01T15:51:03.913871"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 112",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1958,
    "creation_timestamp": "2025-11-01T15:51:03.913873"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 193",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1959,
    "creation_timestamp": "2025-11-01T15:51:03.913874"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 268",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1960,
    "creation_timestamp": "2025-11-01T15:51:03.913876"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 81",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1961,
    "creation_timestamp": "2025-11-01T15:51:03.913878"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 274",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1962,
    "creation_timestamp": "2025-11-01T15:51:03.913880"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 63",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1963,
    "creation_timestamp": "2025-11-01T15:51:03.913881"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 73",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1964,
    "creation_timestamp": "2025-11-01T15:51:03.913884"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 20",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1965,
    "creation_timestamp": "2025-11-01T15:51:03.913886"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 151",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1966,
    "creation_timestamp": "2025-11-01T15:51:03.913887"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 155",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 1967,
    "creation_timestamp": "2025-11-01T15:51:03.913888"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 189",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1968,
    "creation_timestamp": "2025-11-01T15:51:03.913890"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 242",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1969,
    "creation_timestamp": "2025-11-01T15:51:03.913891"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 487",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1970,
    "creation_timestamp": "2025-11-01T15:51:03.913893"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 61",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1971,
    "creation_timestamp": "2025-11-01T15:51:03.913894"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 53",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1972,
    "creation_timestamp": "2025-11-01T15:51:03.913895"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 493",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1973,
    "creation_timestamp": "2025-11-01T15:51:03.913897"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 327",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1974,
    "creation_timestamp": "2025-11-01T15:51:03.913898"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 508",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1975,
    "creation_timestamp": "2025-11-01T15:51:03.913900"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        assert(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 431",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1976,
    "creation_timestamp": "2025-11-01T15:51:03.913901"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 239",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1977,
    "creation_timestamp": "2025-11-01T15:51:03.913902"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 335",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1978,
    "creation_timestamp": "2025-11-01T15:51:03.913904"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 478",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1979,
    "creation_timestamp": "2025-11-01T15:51:03.913905"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if tx.origin == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 482",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 1980,
    "creation_timestamp": "2025-11-01T15:51:03.913907"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 336",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1981,
    "creation_timestamp": "2025-11-01T15:51:03.913908"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 796",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1982,
    "creation_timestamp": "2025-11-01T15:51:03.913909"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 658",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1983,
    "creation_timestamp": "2025-11-01T15:51:03.913911"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 415",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1984,
    "creation_timestamp": "2025-11-01T15:51:03.913912"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 266",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1985,
    "creation_timestamp": "2025-11-01T15:51:03.913914"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 2",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1986,
    "creation_timestamp": "2025-11-01T15:51:03.913915"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 652",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 1987,
    "creation_timestamp": "2025-11-01T15:51:03.913916"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 447",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1988,
    "creation_timestamp": "2025-11-01T15:51:03.913918"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 547",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1989,
    "creation_timestamp": "2025-11-01T15:51:03.913919"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 44",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1990,
    "creation_timestamp": "2025-11-01T15:51:03.913920"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 218",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 1991,
    "creation_timestamp": "2025-11-01T15:51:03.913922"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 707",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1992,
    "creation_timestamp": "2025-11-01T15:51:03.913923"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 203",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 1993,
    "creation_timestamp": "2025-11-01T15:51:03.913925"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 234",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1994,
    "creation_timestamp": "2025-11-01T15:51:03.913926"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 679",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 1995,
    "creation_timestamp": "2025-11-01T15:51:03.913927"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 177",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 1996,
    "creation_timestamp": "2025-11-01T15:51:03.913929"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 645",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 1997,
    "creation_timestamp": "2025-11-01T15:51:03.913930"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 306",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 1998,
    "creation_timestamp": "2025-11-01T15:51:03.913932"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 466",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 1999,
    "creation_timestamp": "2025-11-01T15:51:03.913933"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 563",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 2000,
    "creation_timestamp": "2025-11-01T15:51:03.913935"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 444",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 2001,
    "creation_timestamp": "2025-11-01T15:51:03.913936"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 159",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 2002,
    "creation_timestamp": "2025-11-01T15:51:03.913938"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 795",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 2003,
    "creation_timestamp": "2025-11-01T15:51:03.913939"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 797",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 2004,
    "creation_timestamp": "2025-11-01T15:51:03.913940"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 144",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 2005,
    "creation_timestamp": "2025-11-01T15:51:03.913942"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 705",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 2006,
    "creation_timestamp": "2025-11-01T15:51:03.913943"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 62",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 2007,
    "creation_timestamp": "2025-11-01T15:51:03.913945"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 348",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2008,
    "creation_timestamp": "2025-11-01T15:51:03.913946"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 555",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 2009,
    "creation_timestamp": "2025-11-01T15:51:03.913947"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 337",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 2010,
    "creation_timestamp": "2025-11-01T15:51:03.913949"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 110",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 2011,
    "creation_timestamp": "2025-11-01T15:51:03.913950"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 66",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 2012,
    "creation_timestamp": "2025-11-01T15:51:03.913952"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 224",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2013,
    "creation_timestamp": "2025-11-01T15:51:03.913953"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 58",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2014,
    "creation_timestamp": "2025-11-01T15:51:03.913954"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 565",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2015,
    "creation_timestamp": "2025-11-01T15:51:03.913957"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 184",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 2016,
    "creation_timestamp": "2025-11-01T15:51:03.913959"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 93",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 2017,
    "creation_timestamp": "2025-11-01T15:51:03.913960"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 642",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 2018,
    "creation_timestamp": "2025-11-01T15:51:03.913962"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 94",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 2019,
    "creation_timestamp": "2025-11-01T15:51:03.913963"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 12",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2020,
    "creation_timestamp": "2025-11-01T15:51:03.913965"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 324",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 2021,
    "creation_timestamp": "2025-11-01T15:51:03.913966"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 125",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 2022,
    "creation_timestamp": "2025-11-01T15:51:03.913967"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[msg.sender];\n                        assert(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        assert(success, \"Transfer failed\");\n\n                        fundss[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 21",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 2023,
    "creation_timestamp": "2025-11-01T15:51:03.913969"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 533",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 2024,
    "creation_timestamp": "2025-11-01T15:51:03.913970"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 159",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 2025,
    "creation_timestamp": "2025-11-01T15:51:03.913972"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 656",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 2026,
    "creation_timestamp": "2025-11-01T15:51:03.913973"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 340",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2027,
    "creation_timestamp": "2025-11-01T15:51:03.913974"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 47",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 2028,
    "creation_timestamp": "2025-11-01T15:51:03.913976"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 85",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 2029,
    "creation_timestamp": "2025-11-01T15:51:03.913977"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 173",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 2030,
    "creation_timestamp": "2025-11-01T15:51:03.913979"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 60",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 2031,
    "creation_timestamp": "2025-11-01T15:51:03.913980"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 644",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 2032,
    "creation_timestamp": "2025-11-01T15:51:03.913981"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 354",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 2033,
    "creation_timestamp": "2025-11-01T15:51:03.913983"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 453",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 2034,
    "creation_timestamp": "2025-11-01T15:51:03.913984"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 167",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2035,
    "creation_timestamp": "2025-11-01T15:51:03.913986"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 202",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2036,
    "creation_timestamp": "2025-11-01T15:51:03.913987"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 443",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 2037,
    "creation_timestamp": "2025-11-01T15:51:03.913989"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 237",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 2038,
    "creation_timestamp": "2025-11-01T15:51:03.913990"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 470",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 2039,
    "creation_timestamp": "2025-11-01T15:51:03.913992"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 143",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 2040,
    "creation_timestamp": "2025-11-01T15:51:03.913993"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 34",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 2041,
    "creation_timestamp": "2025-11-01T15:51:03.913994"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 391",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2042,
    "creation_timestamp": "2025-11-01T15:51:03.913996"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 254",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 2043,
    "creation_timestamp": "2025-11-01T15:51:03.913997"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[tx.origin];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 421",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 2044,
    "creation_timestamp": "2025-11-01T15:51:03.913999"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 454",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 2045,
    "creation_timestamp": "2025-11-01T15:51:03.914000"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        assert(commits[tx.origin] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 290",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.14285714285714288,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 2046,
    "creation_timestamp": "2025-11-01T15:51:03.914002"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 659",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 2047,
    "creation_timestamp": "2025-11-01T15:51:03.914003"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 342",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 2048,
    "creation_timestamp": "2025-11-01T15:51:03.914004"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 522",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 2049,
    "creation_timestamp": "2025-11-01T15:51:03.914006"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 779",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 2050,
    "creation_timestamp": "2025-11-01T15:51:03.914007"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 439",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2051,
    "creation_timestamp": "2025-11-01T15:51:03.914008"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 18",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 2052,
    "creation_timestamp": "2025-11-01T15:51:03.914010"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 552",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2053,
    "creation_timestamp": "2025-11-01T15:51:03.914011"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 512",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 2054,
    "creation_timestamp": "2025-11-01T15:51:03.914013"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 406",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 2055,
    "creation_timestamp": "2025-11-01T15:51:03.914014"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 534",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 2056,
    "creation_timestamp": "2025-11-01T15:51:03.914016"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 68",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 2057,
    "creation_timestamp": "2025-11-01T15:51:03.914017"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 720",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 2058,
    "creation_timestamp": "2025-11-01T15:51:03.914019"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 356",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 2059,
    "creation_timestamp": "2025-11-01T15:51:03.914020"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 264",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 2060,
    "creation_timestamp": "2025-11-01T15:51:03.914021"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 247",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2061,
    "creation_timestamp": "2025-11-01T15:51:03.914023"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 446",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 2062,
    "creation_timestamp": "2025-11-01T15:51:03.914024"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 85",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 2063,
    "creation_timestamp": "2025-11-01T15:51:03.914026"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 373",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2064,
    "creation_timestamp": "2025-11-01T15:51:03.914027"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 value = balances[msg.sender];\n                        require(value > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: value}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 31",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 2065,
    "creation_timestamp": "2025-11-01T15:51:03.914028"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 amount) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = amount * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += amount;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 458",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 2066,
    "creation_timestamp": "2025-11-01T15:51:03.914031"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 611",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 2067,
    "creation_timestamp": "2025-11-01T15:51:03.914033"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 86",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 2068,
    "creation_timestamp": "2025-11-01T15:51:03.914034"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        assert(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 8",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.07692307692307693,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 2069,
    "creation_timestamp": "2025-11-01T15:51:03.914036"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 303",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2070,
    "creation_timestamp": "2025-11-01T15:51:03.914037"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 145",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 2071,
    "creation_timestamp": "2025-11-01T15:51:03.914038"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 351",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2072,
    "creation_timestamp": "2025-11-01T15:51:03.914040"
  },
  {
    "code": "\n                contract CommitReveal {\n                    mapping(address => bytes32) public commits;\n                    mapping(address => bool) public revealed;\n\n                    // VULNERABLE: Reveal phase can be front-run\n                    function reveal(uint256 value, uint256 nonce) external {\n                        bytes32 hash = keccak256(abi.encodePacked(value, nonce));\n                        require(commits[msg.sender] == hash, \"Invalid reveal\");\n\n                        // Winner determination based on value\n                        // Front-runners can see reveal and submit higher value\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "front_running",
    "severity": "Medium",
    "confidence": 0.8,
    "source": "code4rena_style",
    "title": "Front Running Vulnerability 370",
    "description": "Real-world front_running vulnerability pattern",
    "lines_of_code": 14,
    "complexity_score": 0.17857142857142858,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "attack_vector": "mempool_observation",
    "mitigation_pattern": "commit_reveal_scheme",
    "real_world_example": true,
    "sample_id": 2073,
    "creation_timestamp": "2025-11-01T15:51:03.914041"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 167",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 2074,
    "creation_timestamp": "2025-11-01T15:51:03.914043"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(amount * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 119",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 2075,
    "creation_timestamp": "2025-11-01T15:51:03.914044"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 amount) external {\n                        totalSupply += amount;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 307",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 2076,
    "creation_timestamp": "2025-11-01T15:51:03.914045"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public fundss;\n\n                    function withdraw() external {\n                        uint256 amount = fundss[tx.origin];\n                        require(amount > 0, \"No funds\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = tx.origin.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        fundss[tx.origin] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 206",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 2077,
    "creation_timestamp": "2025-11-01T15:51:03.914047"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 466",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 2078,
    "creation_timestamp": "2025-11-01T15:51:03.914048"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 15",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2079,
    "creation_timestamp": "2025-11-01T15:51:03.914050"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 550",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2080,
    "creation_timestamp": "2025-11-01T15:51:03.914051"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 222",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 2081,
    "creation_timestamp": "2025-11-01T15:51:03.914053"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 225",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2082,
    "creation_timestamp": "2025-11-01T15:51:03.914054"
  },
  {
    "code": "\n                contract GovernanceToken {\n                    address public admin;\n                    uint256 public totalSupply;\n\n                    // VULNERABLE: No access control\n                    function mint(address to, uint256 value) external {\n                        totalSupply += value;\n                        // Should check if msg.sender == admin\n                    }\n\n                    function setAdmin(address newAdmin) external {\n                        // VULNERABLE: Anyone can become admin\n                        admin = newAdmin;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "access_control",
    "severity": "Critical",
    "confidence": 0.98,
    "source": "code4rena_style",
    "title": "Access Control Vulnerability 277",
    "description": "Real-world access_control vulnerability pattern",
    "lines_of_code": 16,
    "complexity_score": 0.0625,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "privilege_escalation",
    "mitigation_pattern": "role_based_access",
    "real_world_example": true,
    "sample_id": 2083,
    "creation_timestamp": "2025-11-01T15:51:03.914056"
  },
  {
    "code": "\n                contract TimeLock {\n                    uint256 public unlockTime;\n\n                    function setUnlockTime() external {\n                        // VULNERABLE: Miner manipulation\n                        unlockTime = block.timestamp + 1 days;\n                    }\n\n                    function withdraw() external {\n                        require(block.timestamp >= unlockTime, \"Still locked\");\n                        // VULNERABLE: 15-second miner manipulation window\n                        payable(msg.sender).transfer(address(this).balance);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "timestamp_dependence",
    "severity": "Low",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Timestamp Dependence Pattern 146",
    "description": "Advanced timestamp_dependence vulnerability",
    "lines_of_code": 15,
    "complexity_score": 0.03333333333333333,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "miner_manipulation",
    "mitigation_pattern": "block_hash_randomness",
    "real_world_example": false,
    "sample_id": 2084,
    "creation_timestamp": "2025-11-01T15:51:03.914057"
  },
  {
    "code": "\n                contract TokenSale {\n                    uint256 public tokenPrice = 1 ether;\n                    mapping(address => uint256) public purchased;\n\n                    function buyTokens(uint256 value) external payable {\n                        // VULNERABLE: Integer overflow in multiplication\n                        uint256 cost = value * tokenPrice;\n                        require(msg.value >= cost, \"Insufficient payment\");\n\n                        purchased[msg.sender] += value;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "integer_overflow",
    "severity": "High",
    "confidence": 0.9,
    "source": "code4rena_style",
    "title": "Integer Overflow Vulnerability 358",
    "description": "Real-world integer_overflow vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.11538461538461539,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.1,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "arithmetic_manipulation",
    "mitigation_pattern": "safe_math_library",
    "real_world_example": true,
    "sample_id": 2085,
    "creation_timestamp": "2025-11-01T15:51:03.914058"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 587",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 2086,
    "creation_timestamp": "2025-11-01T15:51:03.914060"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 amount) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        assert(amount * price <= address(this).balance);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 44",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.0,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 2087,
    "creation_timestamp": "2025-11-01T15:51:03.914061"
  },
  {
    "code": "\n            contract AccessControlledContract {\n                mapping(bytes32 => mapping(address => bool)) private roles;\n                bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n                bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n                modifier onlyRole(bytes32 role) {\n                    require(hasRole(role, msg.sender), \"Access denied\");\n                    _;\n                }\n\n                function hasRole(bytes32 role, address account) public view returns (bool) {\n                    return roles[role][account];\n                }\n\n                function grantRole(bytes32 role, address account) external onlyRole(ADMIN_ROLE) {\n                    roles[role][account] = true;\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 3",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 19,
    "complexity_score": 0.2631578947368421,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2088,
    "creation_timestamp": "2025-11-01T15:51:03.914063"
  },
  {
    "code": "\n            contract SafeMathContract {\n                using SafeMath for uint256;\n                mapping(address => uint256) public balances;\n\n                function deposit() external payable {\n                    balances[msg.sender] = balances[msg.sender].add(msg.value);\n                }\n\n                function transfer(address to, uint256 amount) external {\n                    require(to != address(0), \"Invalid address\");\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    balances[msg.sender] = balances[msg.sender].sub(amount);\n                    balances[to] = balances[to].add(amount);\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 419",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 17,
    "complexity_score": 0.23529411764705885,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2089,
    "creation_timestamp": "2025-11-01T15:51:03.914065"
  },
  {
    "code": "\n                contract AuctionHouse {\n                    address[] public bidders;\n                    mapping(address => uint256) public bids;\n\n                    function placeBid() external payable {\n                        bidders.push(msg.sender);  // VULNERABLE: Unbounded array\n                        bids[msg.sender] = msg.value;\n                    }\n\n                    function refundAll() external {\n                        // VULNERABLE: Gas limit DoS\n                        for (uint i = 0; i < bidders.length; i++) {\n                            payable(bidders[i]).transfer(bids[bidders[i]]);\n                        }\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "dos",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Dos Pattern 49",
    "description": "Advanced dos vulnerability",
    "lines_of_code": 17,
    "complexity_score": 0.17647058823529416,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.30000000000000004,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "attack_vector": "resource_exhaustion",
    "mitigation_pattern": "gas_limit_patterns",
    "real_world_example": false,
    "sample_id": 2090,
    "creation_timestamp": "2025-11-01T15:51:03.914067"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 776",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 2091,
    "creation_timestamp": "2025-11-01T15:51:03.914068"
  },
  {
    "code": "\n                contract DEXArbitrage {\n                    IPriceOracle public oracle;\n\n                    function executeTrade(uint256 value) external {\n                        // VULNERABLE: Single oracle price manipulation\n                        uint256 price = oracle.getPrice();\n\n                        // Trade execution based on manipulable price\n                        require(value * price <= address(this).funds);\n                        // Execute trade...\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "price_manipulation",
    "severity": "Medium",
    "confidence": 0.85,
    "source": "code4rena_style",
    "title": "Price Manipulation Vulnerability 349",
    "description": "Real-world price_manipulation vulnerability pattern",
    "lines_of_code": 13,
    "complexity_score": 0.038461538461538464,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "attack_vector": "oracle_attack",
    "mitigation_pattern": "multiple_oracle_feeds",
    "real_world_example": true,
    "sample_id": 2092,
    "creation_timestamp": "2025-11-01T15:51:03.914070"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 104",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 2093,
    "creation_timestamp": "2025-11-01T15:51:03.914071"
  },
  {
    "code": "\n                contract ComplexReentrancy {\n                    mapping(address => uint256) public balances;\n                    mapping(address => bool) public claimed;\n\n                    function claimAndWithdraw() external {\n                        require(!claimed[msg.sender], \"Already claimed\");\n\n                        uint256 amount = calculateReward(msg.sender);\n                        balances[msg.sender] += amount;\n\n                        // Complex reentrancy through reward calculation\n                        if (amount > 0) {\n                            this.withdraw();  // Vulnerable callback\n                        }\n\n                        claimed[msg.sender] = true;\n                    }\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success);\n\n                        balances[msg.sender] = 0;\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "Critical",
    "confidence": 0.8,
    "source": "edge_cases",
    "title": "Edge Case Reentrancy 159",
    "description": "Complex edge case for reentrancy",
    "lines_of_code": 29,
    "complexity_score": 0.9,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.8,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "complex_reentrancy",
    "mitigation_pattern": "advanced_guards",
    "real_world_example": false,
    "sample_id": 2094,
    "creation_timestamp": "2025-11-01T15:51:03.914073"
  },
  {
    "code": "\n                contract VulnerableDAO {\n                    mapping(address => uint256) public balances;\n\n                    function withdraw() external {\n                        uint256 amount = balances[msg.sender];\n                        require(amount > 0, \"No balance\");\n\n                        // VULNERABLE: External call before state update\n                        (bool success, ) = msg.sender.call{value: amount}(\"\");\n                        require(success, \"Transfer failed\");\n\n                        balances[msg.sender] = 0;  // Too late!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "reentrancy",
    "severity": "High",
    "confidence": 0.95,
    "source": "code4rena_style",
    "title": "Reentrancy Vulnerability 401",
    "description": "Real-world reentrancy vulnerability pattern",
    "lines_of_code": 15,
    "complexity_score": 0.6666666666666666,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.9,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "external_call_manipulation",
    "mitigation_pattern": "checks_effects_interactions",
    "real_world_example": true,
    "sample_id": 2095,
    "creation_timestamp": "2025-11-01T15:51:03.914074"
  },
  {
    "code": "\n            contract SecureBank {\n                mapping(address => uint256) public balances;\n                address public owner;\n                bool private locked;\n\n                modifier onlyOwner() {\n                    require(msg.sender == owner, \"Not owner\");\n                    _;\n                }\n\n                modifier noReentrancy() {\n                    require(!locked, \"Reentrancy guard\");\n                    locked = true;\n                    _;\n                    locked = false;\n                }\n\n                function withdraw(uint256 amount) external noReentrancy {\n                    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n\n                    // Checks-Effects-Interactions pattern\n                    balances[msg.sender] -= amount;\n\n                    (bool success, ) = msg.sender.call{value: amount}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            }",
    "vulnerability_label": 0,
    "vulnerability_type": "none",
    "severity": "Safe",
    "confidence": 0.95,
    "source": "safe_patterns",
    "title": "Safe Contract Pattern 280",
    "description": "Secure contract with proper safety patterns",
    "lines_of_code": 28,
    "complexity_score": 0.39285714285714285,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.4,
    "proof_required": false,
    "formal_verification_target": false,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "none",
    "mitigation_pattern": "built_in_security",
    "real_world_example": true,
    "sample_id": 2096,
    "creation_timestamp": "2025-11-01T15:51:03.914076"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 619",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 2097,
    "creation_timestamp": "2025-11-01T15:51:03.914077"
  },
  {
    "code": "\n                contract Voting {\n                    mapping(address => bool) public hasVoted;\n                    mapping(uint256 => uint256) public votes;\n\n                    function vote(uint256 proposal) external {\n                        require(!hasVoted[msg.sender], \"Already voted\");\n\n                        votes[proposal]++;\n                        // VULNERABLE: Missing hasVoted update\n                        // hasVoted[msg.sender] = true;  // This line is missing!\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "logic_error",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Logic Error Pattern 304",
    "description": "Advanced logic_error vulnerability",
    "lines_of_code": 13,
    "complexity_score": 0.1923076923076923,
    "has_external_calls": false,
    "has_state_changes": true,
    "gas_complexity": 0.2,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "attack_vector": "business_logic_bypass",
    "mitigation_pattern": "formal_verification",
    "real_world_example": false,
    "sample_id": 2098,
    "creation_timestamp": "2025-11-01T15:51:03.914079"
  },
  {
    "code": "\n                contract Wallet {\n                    address public owner;\n\n                    modifier onlyOwner() {\n                        // VULNERABLE: tx.origin instead of msg.sender\n                        require(tx.origin == owner, \"Not owner\");\n                        _;\n                    }\n\n                    function transfer(address to, uint256 amount) external onlyOwner {\n                        payable(to).transfer(amount);\n                    }\n                }",
    "vulnerability_label": 1,
    "vulnerability_type": "tx_origin",
    "severity": "High",
    "confidence": 0.85,
    "source": "enhanced_synthetic",
    "title": "Enhanced Tx Origin Pattern 203",
    "description": "Advanced tx_origin vulnerability",
    "lines_of_code": 14,
    "complexity_score": 0.21428571428571433,
    "has_external_calls": true,
    "has_state_changes": true,
    "gas_complexity": 0.0,
    "proof_required": true,
    "formal_verification_target": true,
    "vulnerability_types": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "attack_vector": "phishing_attack",
    "mitigation_pattern": "msg_sender_validation",
    "real_world_example": false,
    "sample_id": 2099,
    "creation_timestamp": "2025-11-01T15:51:03.914080"
  }
]