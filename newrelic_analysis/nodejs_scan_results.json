{
  "scan_date": "2025-10-06T20:11:09.814918",
  "agent_name": "nodejs",
  "repository": "node-newrelic",
  "total_vulnerabilities": 96,
  "default_config_vulnerabilities": 1,
  "statistics": {
    "files_scanned": 838,
    "lines_scanned": 99168,
    "excluded_files": 582,
    "vulnerabilities_found": 96,
    "low_confidence_excluded": 5
  },
  "by_category": {
    "Command Injection": [
      {
        "file": "index.js",
        "line_number": 213,
        "line_content": "const nodeMajor = /^v?(\\d+)/.exec(process.version)",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          " * TODO: As new versions come out, make sure to update Angler metrics.",
          " *",
          " * @param {Agent} agent active NR agent",
          " */",
          "function recordNodeVersionMetric(agent) {",
          "  const nodeMajor = /^v?(\\d+)/.exec(process.version)",
          "  const version = (nodeMajor && nodeMajor[1]) || 'unknown'",
          "  agent.recordSupportability(`Nodejs/Version/${version}`)",
          "}",
          "",
          "/**"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "stub_api.js",
        "line_number": 14,
        "line_content": "return eval(",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "const RealAPI = require('./api.js')",
          "const TransactionHandle = require('./lib/transaction/handle')",
          "",
          "function stubFunction(name) {",
          "  // eslint-disable-next-line sonarjs/code-eval, no-eval",
          "  return eval(",
          "    '(function () {return function ' +",
          "      name +",
          "      '() {' +",
          "      \"logger.debug('Not calling \" +",
          "      name +"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/prisma/setup.js",
        "line_number": 26,
        "line_content": "await exec(`npm install -g prisma@${version}`)",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "async function initPrismaApp() {",
          "  process.env.DATABASE_URL = getPostgresUrl()",
          "  const { version } = require('@prisma/client/package.json')",
          "  // install CLI globally with proper version so the client package can be generated and setup accordingly",
          "  // If this was locally installed, it would get stomped on.",
          "  await exec(`npm install -g prisma@${version}`)",
          "  await exec('prisma generate')",
          "  await exec('prisma migrate reset --force')",
          "  delete process.env.DATABASE_URL",
          "}",
          ""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/prisma/setup.js",
        "line_number": 27,
        "line_content": "await exec('prisma generate')",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "  process.env.DATABASE_URL = getPostgresUrl()",
          "  const { version } = require('@prisma/client/package.json')",
          "  // install CLI globally with proper version so the client package can be generated and setup accordingly",
          "  // If this was locally installed, it would get stomped on.",
          "  await exec(`npm install -g prisma@${version}`)",
          "  await exec('prisma generate')",
          "  await exec('prisma migrate reset --force')",
          "  delete process.env.DATABASE_URL",
          "}",
          "",
          "module.exports = {"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/prisma/setup.js",
        "line_number": 28,
        "line_content": "await exec('prisma migrate reset --force')",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "  const { version } = require('@prisma/client/package.json')",
          "  // install CLI globally with proper version so the client package can be generated and setup accordingly",
          "  // If this was locally installed, it would get stomped on.",
          "  await exec(`npm install -g prisma@${version}`)",
          "  await exec('prisma generate')",
          "  await exec('prisma migrate reset --force')",
          "  delete process.env.DATABASE_URL",
          "}",
          "",
          "module.exports = {",
          "  initPrismaApp,"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/nextjs/helpers.js",
        "line_number": 31,
        "line_content": "exec(",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          " * @returns {Promise}",
          " *",
          " */",
          "helpers.build = function build(dir, path = 'app') {",
          "  return new Promise((resolve, reject) => {",
          "    exec(",
          "      `./node_modules/.bin/next build ${path}`,",
          "      {",
          "        cwd: dir",
          "      },",
          "      function cb(err, data) {"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/nestjs/setup.js",
        "line_number": 35,
        "line_content": "await exec('npx nest build', { cwd: APP_DIR })",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "  for (const fname of ['main.ts', 'app.controller.ts']) {",
          "    await fsPromises.copyFile(`${PATCH_DIR}/${fname}`, `${APP_DIR}/src/${fname}`)",
          "  }",
          "  // Turn the typescript into commmonjs, so we can instrument it with",
          "  // the mocked agent.",
          "  await exec('npx nest build', { cwd: APP_DIR })",
          "}",
          "",
          "async function deleteNestApp() {",
          "  await fsPromises.rm(APP_DIR, { recursive: true })",
          "}"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/lib/aws-server-stubs/ai-server/index.js",
        "line_number": 78,
        "line_content": "const [, model] = /model\\/(.+)\\/invoke/.exec(req.url)",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "      return",
          "    }",
          "",
          "    // Available  model identifiers are listed at:",
          "    // https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids-arns.html",
          "    const [, model] = /model\\/(.+)\\/invoke/.exec(req.url)",
          "    let response",
          "    switch (decodeURIComponent(model)) {",
          "      case 'amazon.titan-text-express-v1':",
          "      case 'amazon.titan-embed-text-v1': {",
          "        response = responses.amazon.get(payload.inputText)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "bin/create-github-release.js",
        "line_number": 57,
        "line_content": "if (!options.force && !TAG_VALID_REGEX.exec(tagName)) {",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "    logStep('Validation')",
          "    if (options.force) {",
          "      console.log('--force set. Skipping validation logic')",
          "    }",
          "",
          "    if (!options.force && !TAG_VALID_REGEX.exec(tagName)) {",
          "      console.log('Tag arg invalid (%s). Valid tags in form: v#.#.# (e.g. v7.2.1)', tagName)",
          "      stopOnError()",
          "    }",
          "",
          "    logStep('Get Release Notes from File')"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "bin/create-docs-pr.js",
        "line_number": 119,
        "line_content": "if (!TAG_VALID_REGEX.exec(version)) {",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "  if (force) {",
          "    console.log('--force set. Skipping validation logic')",
          "    return",
          "  }",
          "",
          "  if (!TAG_VALID_REGEX.exec(version)) {",
          "    console.log('Tag arg invalid (%s). Valid tags in form: v#.#.# (e.g. v7.2.1)', version)",
          "    stopOnError()",
          "  }",
          "}",
          ""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "bin/create-docs-pr.js",
        "line_number": 142,
        "line_content": "const [, releaseDate] = headingRegex.exec(versionChangeLog)",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "  // Iterate over all past releases to find the version we want",
          "  const versionChangeLog = sections.find((section) => section.startsWith(version))",
          "  // e.g. v7.1.2 (2021-02-24)\\n\\n",
          "  const headingRegex = /^v\\d+\\.\\d+\\.\\d+ \\((\\d{4}-\\d{2}-\\d{2})\\)\\s+/",
          "  const body = versionChangeLog.replace(headingRegex, '') + SUPPORT_STATEMENT",
          "  const [, releaseDate] = headingRegex.exec(versionChangeLog)",
          "",
          "  return { body, releaseDate }",
          "}",
          "",
          "/**"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "bin/git-commands.js",
        "line_number": 128,
        "line_content": "exec(command, (err, stdout) => {",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "function execAsPromise(command) {",
          "  return new Promise((resolve, reject) => {",
          "    console.log(`Executing: '${command}'`)",
          "",
          "    // eslint-disable-next-line sonarjs/os-command",
          "    exec(command, (err, stdout) => {",
          "      if (err) {",
          "        reject(err)",
          "      }",
          "",
          "      resolve(stdout)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "bin/npm-commands.js",
        "line_number": 23,
        "line_content": "exec(command, (err, stdout) => {",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "function execAsPromise(command) {",
          "  return new Promise((resolve, reject) => {",
          "    console.log(`Executing: '${command}'`)",
          "",
          "    // eslint-disable-next-line sonarjs/os-command",
          "    exec(command, (err, stdout) => {",
          "      if (err) {",
          "        return reject(err)",
          "      }",
          "",
          "      return resolve(stdout)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "lib/collector/key-parser.js",
        "line_number": 9,
        "line_content": "const regionMatch = /^(.+?)x/.exec(licenseKey)",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          " */",
          "",
          "'use strict'",
          "",
          "module.exports.parseKey = function parseKey(licenseKey) {",
          "  const regionMatch = /^(.+?)x/.exec(licenseKey)",
          "  return regionMatch && regionMatch[1]",
          "}"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "lib/otel/trace-propagator.js",
        "line_number": 37,
        "line_content": "const match = TRACE_PARENT_REGEX.exec(traceParent)",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          " *     (01 = sampled, 00 = not sampled).",
          " *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'",
          " *     For more information see {@link https://www.w3.org/TR/trace-context/}",
          " */",
          "function parseTraceParent(traceParent) {",
          "  const match = TRACE_PARENT_REGEX.exec(traceParent)",
          "  if (!match) return null",
          "",
          "  // According to the specification the implementation should be compatible",
          "  // with future versions. If there are more parts, we only reject it if it's using version 00",
          "  // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "lib/instrumentation/core/child_process.js",
        "line_number": 20,
        "line_content": "shim.record(childProcess, methods, function recordExec(shim, fn, name) {",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "    return false",
          "  }",
          "",
          "  const methods = ['exec', 'execFile']",
          "",
          "  shim.record(childProcess, methods, function recordExec(shim, fn, name) {",
          "    return new RecorderSpec({ name: 'child_process.' + name, callback: shim.LAST })",
          "  })",
          "",
          "  if (childProcess.ChildProcess) {",
          "    wrapChildProcessClass(shim, childProcess.ChildProcess)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "lib/instrumentation/aws-sdk/v3/sqs.js",
        "line_number": 66,
        "line_content": "const matches = urlReg.exec(queueUrl)",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "  })",
          "}",
          "",
          "const urlReg = /\\/\\/sqs\\.(?<region>[\\w-]+)\\.amazonaws\\.com(:\\d+)?\\/(?<accountId>\\d+)\\/(?<queue>.+)$/",
          "function urlComponents(queueUrl) {",
          "  const matches = urlReg.exec(queueUrl)",
          "  if (matches?.groups) {",
          "    return matches.groups",
          "  }",
          "  return { region: undefined, accountId: undefined, queue: undefined }",
          "}"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "lib/utilization/docker-info.js",
        "line_number": 157,
        "line_content": "const line = containerLine.exec(data)",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          " * @param {Function} callback function to call when done",
          " * @param {object} [logger] internal logger instance",
          " */",
          "function parseCGroupsV2(data, callback, logger = log) {",
          "  const containerLine = /\\/docker\\/containers\\/([0-9a-f]{64})\\//",
          "  const line = containerLine.exec(data)",
          "  if (line) {",
          "    logger.debug({ utilization: 'docker' }, `Found docker id from cgroups v2: ${line[1]}`)",
          "    callback(null, { id: line[1] })",
          "  } else {",
          "    logger.debug({ utilization: 'docker' }, `Found ${CGROUPS_V2_PATH} but failed to parse Docker container id.`)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "lib/utilization/docker-info.js",
        "line_number": 183,
        "line_content": "const match = /(?:^|[^0-9a-f])([0-9a-f]{64})(?:[^0-9a-f]|$)/.exec(cpuGroup)",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "      return callback(null)",
          "    }",
          "",
          "    let id = null",
          "    parseCGroupsV1(data, 'cpu', function forEachCpuGroup(cpuGroup) {",
          "      const match = /(?:^|[^0-9a-f])([0-9a-f]{64})(?:[^0-9a-f]|$)/.exec(cpuGroup)",
          "      if (match) {",
          "        id = match[1]",
          "        return false",
          "      }",
          ""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "lib/db/statement-matcher.js",
        "line_number": 24,
        "line_content": "const queryMatch = this.operationPattern.exec(sql)",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "  this.operationPattern.lastIndex = 0",
          "  this.matcher.lastIndex = 0",
          "  CLEANER.lastIndex = 0",
          "",
          "  if (this.matcher.test(sql)) {",
          "    const queryMatch = this.operationPattern.exec(sql)",
          "    let collection = queryMatch ? queryMatch[1] : 'unknown'",
          "    let database = null",
          "",
          "    // If the cleaner can match this collection, pull out the cleaned up names",
          "    // from there. The spec doesn't want the database names in the collection"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "lib/db/statement-matcher.js",
        "line_number": 33,
        "line_content": "const cleanerMatch = CLEANER.exec(collection)",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "    // If the cleaner can match this collection, pull out the cleaned up names",
          "    // from there. The spec doesn't want the database names in the collection",
          "    // name, but for legacy reasons we keep it.",
          "    // TODO: Either update the spec (and CATs) to accept database name in the",
          "    // collection name or remove it here.",
          "    const cleanerMatch = CLEANER.exec(collection)",
          "    if (cleanerMatch && cleanerMatch[4]) {",
          "      collection = cleanerMatch[4]",
          "      if (cleanerMatch[2]) {",
          "        database = cleanerMatch[2]",
          "        collection = database + '.' + collection"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "lib/db/utils.js",
        "line_number": 17,
        "line_content": "const match = /^\\s*use[^\\w`]+([\\w$\\u0080-\\uFFFF]+|`[^`]+`)[\\s;]*$/i.exec(sql)",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "  // http://dev.mysql.com/doc/refman/5.7/en/identifiers.html",
          "",
          "  // The lint rule being suppressed here has been evaluated, and it has been",
          "  // determined that the regular expression is sufficient for our use case.",
          "  // eslint-disable-next-line sonarjs/slow-regex",
          "  const match = /^\\s*use[^\\w`]+([\\w$\\u0080-\\uFFFF]+|`[^`]+`)[\\s;]*$/i.exec(sql)",
          "  return (match && match[1]) || null",
          "}"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "lib/shim/webframework-shim/middleware.js",
        "line_number": 180,
        "line_content": "after: function afterExec({ shim, error }) {",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "      name: segmentName,",
          "      callback: nextWrapper,",
          "      parent: txInfo.segmentStack[txInfo.segmentStack.length - 1],",
          "      recorder,",
          "      parameters: params,",
          "      after: function afterExec({ shim, error }) {",
          "        const errIsError = isError(shim, error)",
          "        if (errIsError) {",
          "          assignError(txInfo, error)",
          "        } else if (!nextWrapper && !isErrorWare && spec.appendPath) {",
          "          txInfo.transaction.nameState.popPath(route)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "lib/shim/webframework-shim/middleware.js",
        "line_number": 247,
        "line_content": "after: function afterExec({ shim, error, result }) {",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "      parent: txInfo.segmentStack[txInfo.segmentStack.length - 1],",
          "      promise: spec.promise,",
          "      callback: nextWrapper,",
          "      recorder,",
          "      parameters: params,",
          "      after: function afterExec({ shim, error, result }) {",
          "        if (shim._responsePredicate(args, result)) {",
          "          txInfo.transaction.nameState.freeze()",
          "        }",
          "        if (isError(shim, error)) {",
          "          assignError(txInfo, error)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      }
    ],
    "Insecure Data Transmission": [
      {
        "file": "package.json",
        "line_number": 10,
        "line_content": "\"web\": \"http://newrelic.com\"",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "  \"license\": \"Apache-2.0\",",
          "  \"contributors\": [",
          "    {",
          "      \"name\": \"Saxon D'Aubin\",",
          "      \"email\": \"saxon@newrelic.com\",",
          "      \"web\": \"http://newrelic.com\"",
          "    },",
          "    {",
          "      \"name\": \"Forrest L Norvell\",",
          "      \"email\": \"forrest@newrelic.com\",",
          "      \"web\": \"http://newrelic.com/\""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "package.json",
        "line_number": 15,
        "line_content": "\"web\": \"http://newrelic.com/\"",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "      \"web\": \"http://newrelic.com\"",
          "    },",
          "    {",
          "      \"name\": \"Forrest L Norvell\",",
          "      \"email\": \"forrest@newrelic.com\",",
          "      \"web\": \"http://newrelic.com/\"",
          "    },",
          "    {",
          "      \"name\": \"Jacob Groundwater\",",
          "      \"email\": \"jacob@newrelic.com\",",
          "      \"web\": \"https://newrelic.com\""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      }
    ],
    "SQL Injection": [
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 97,
        "line_content": "expected['Datastore/statement/Postgres/' + selectTable + '/select'] = 1",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "      'Datastore/operation/Postgres/insert': 1,",
          "      'Datastore/operation/Postgres/select': 1",
          "    }",
          "",
          "    expected['Datastore/statement/Postgres/' + TABLE + '/insert'] = 1",
          "    expected['Datastore/statement/Postgres/' + selectTable + '/select'] = 1",
          "",
          "    const metricHostName = getMetricHostName(agent, params.postgres_host)",
          "    const hostId = metricHostName + '/' + params.postgres_port",
          "    expected['Datastore/instance/Postgres/' + hostId] = 2",
          ""
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 140,
        "line_content": "'Datastore/statement/Postgres/' + selectTable + '/select'",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    )",
          "",
          "    const getSegment = findSegment(",
          "      trace,",
          "      trace.root,",
          "      'Datastore/statement/Postgres/' + selectTable + '/select'",
          "    )",
          "",
          "    expect.ok(setSegment, 'trace segment for insert should exist')",
          "    expect.ok(getSegment, 'trace segment for select should exist')",
          ""
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 152,
        "line_content": "'Datastore/statement/Postgres/' + selectTable + '/select',",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "      return",
          "    }",
          "",
          "    expect.equal(",
          "      getSegment.name,",
          "      'Datastore/statement/Postgres/' + selectTable + '/select',",
          "      'should register the query call'",
          "    )",
          "",
          "    expect.ok(getSegment.timer.hrDuration, 'trace segment should have ended')",
          "  }"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 261,
        "line_content": "let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "            assert.ifError(error)",
          "",
          "            assert.ok(agent.getTransaction(), 'transaction should still be visible')",
          "            assert.ok(ok, 'everything should be peachy after setting')",
          "",
          "            let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
          "            selQuery += PK + '=' + pkVal + ';'",
          "",
          "            client.query(selQuery, function (error, value) {",
          "              assert.ifError(error)",
          ""
        ],
        "confidence": 0.7,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 261,
        "line_content": "let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "            assert.ifError(error)",
          "",
          "            assert.ok(agent.getTransaction(), 'transaction should still be visible')",
          "            assert.ok(ok, 'everything should be peachy after setting')",
          "",
          "            let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
          "            selQuery += PK + '=' + pkVal + ';'",
          "",
          "            client.query(selQuery, function (error, value) {",
          "              assert.ifError(error)",
          ""
        ],
        "confidence": 0.7,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 262,
        "line_content": "selQuery += PK + '=' + pkVal + ';'",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "",
          "            assert.ok(agent.getTransaction(), 'transaction should still be visible')",
          "            assert.ok(ok, 'everything should be peachy after setting')",
          "",
          "            let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
          "            selQuery += PK + '=' + pkVal + ';'",
          "",
          "            client.query(selQuery, function (error, value) {",
          "              assert.ifError(error)",
          "",
          "              assert.ok(agent.getTransaction(), 'transaction should still still be visible')"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 292,
        "line_content": "let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        assert.ok(transaction, 'transaction should be visible')",
          "        assert.equal(tx, transaction, 'We got the same transaction')",
          "",
          "        const colVal = 'Hello'",
          "        const pkVal = 111",
          "        let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
          "        insQuery += ') VALUES($1, $2);'",
          "",
          "        try {",
          "          await client.connect()",
          "        } catch (err) {"
        ],
        "confidence": 0.7,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 292,
        "line_content": "let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        assert.ok(transaction, 'transaction should be visible')",
          "        assert.equal(tx, transaction, 'We got the same transaction')",
          "",
          "        const colVal = 'Hello'",
          "        const pkVal = 111",
          "        let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
          "        insQuery += ') VALUES($1, $2);'",
          "",
          "        try {",
          "          await client.connect()",
          "        } catch (err) {"
        ],
        "confidence": 0.7,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 293,
        "line_content": "insQuery += ') VALUES($1, $2);'",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        assert.equal(tx, transaction, 'We got the same transaction')",
          "",
          "        const colVal = 'Hello'",
          "        const pkVal = 111",
          "        let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
          "        insQuery += ') VALUES($1, $2);'",
          "",
          "        try {",
          "          await client.connect()",
          "        } catch (err) {",
          "          assert.ifError(err)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 489,
        "line_content": "let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        plan.ok(transaction, 'transaction should be visible')",
          "        plan.equal(tx, transaction, 'We got the same transaction')",
          "",
          "        const colVal = 'World!'",
          "        const pkVal = 222",
          "        let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
          "        insQuery += ') VALUES(' + pkVal + \",'\" + colVal + \"');\"",
          "",
          "        const pool = new pg.Pool(CON_OBJ)",
          "",
          "        pool.connect(function (error, client, done) {"
        ],
        "confidence": 0.7,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 489,
        "line_content": "let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        plan.ok(transaction, 'transaction should be visible')",
          "        plan.equal(tx, transaction, 'We got the same transaction')",
          "",
          "        const colVal = 'World!'",
          "        const pkVal = 222",
          "        let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
          "        insQuery += ') VALUES(' + pkVal + \",'\" + colVal + \"');\"",
          "",
          "        const pool = new pg.Pool(CON_OBJ)",
          "",
          "        pool.connect(function (error, client, done) {"
        ],
        "confidence": 0.7,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 490,
        "line_content": "insQuery += ') VALUES(' + pkVal + \",'\" + colVal + \"');\"",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        plan.equal(tx, transaction, 'We got the same transaction')",
          "",
          "        const colVal = 'World!'",
          "        const pkVal = 222",
          "        let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
          "        insQuery += ') VALUES(' + pkVal + \",'\" + colVal + \"');\"",
          "",
          "        const pool = new pg.Pool(CON_OBJ)",
          "",
          "        pool.connect(function (error, client, done) {",
          "          plan.ifError(error)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 503,
        "line_content": "let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "            plan.ifError(error)",
          "",
          "            plan.ok(agent.getTransaction(), 'transaction should still be visible')",
          "            plan.ok(ok, 'everything should be peachy after setting')",
          "",
          "            let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
          "            selQuery += PK + '=' + pkVal + ';'",
          "",
          "            client.query(selQuery, function (error, value) {",
          "              plan.ifError(error)",
          ""
        ],
        "confidence": 0.7,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 503,
        "line_content": "let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "            plan.ifError(error)",
          "",
          "            plan.ok(agent.getTransaction(), 'transaction should still be visible')",
          "            plan.ok(ok, 'everything should be peachy after setting')",
          "",
          "            let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
          "            selQuery += PK + '=' + pkVal + ';'",
          "",
          "            client.query(selQuery, function (error, value) {",
          "              plan.ifError(error)",
          ""
        ],
        "confidence": 0.7,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 504,
        "line_content": "selQuery += PK + '=' + pkVal + ';'",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "",
          "            plan.ok(agent.getTransaction(), 'transaction should still be visible')",
          "            plan.ok(ok, 'everything should be peachy after setting')",
          "",
          "            let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
          "            selQuery += PK + '=' + pkVal + ';'",
          "",
          "            client.query(selQuery, function (error, value) {",
          "              plan.ifError(error)",
          "",
          "              plan.ok(agent.getTransaction(), 'transaction should still still be visible')"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/pg/pg.common.js",
        "line_number": 607,
        "line_content": "'should not add datastore instance parameters to slow query traces when' + ' disabled',",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "",
          "      await plan.completed",
          "    })",
          "",
          "    await t.test(",
          "      'should not add datastore instance parameters to slow query traces when' + ' disabled',",
          "      async (t) => {",
          "        const plan = tspl(t, { plan: 5 })",
          "        const { agent, pg } = t.nr",
          "",
          "        // enable slow queries"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 112,
        "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    // make sure a connection exists in the pool before any tests are run",
          "    // we want to make sure connections are allocated outside any transaction",
          "    // this is to avoid tests that 'happen' to work because of how CLS works",
          "    await t.test('primer', function (t, end) {",
          "      const { agent, pool } = t.nr",
          "      pool.query('SELECT 1 + 1 AS solution', function (err) {",
          "        assert.ok(!err, 'are you sure mysql is running?')",
          "        assert.ok(!agent.getTransaction(), 'transaction should not exist')",
          "        end()",
          "      })",
          "    })"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 112,
        "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    // make sure a connection exists in the pool before any tests are run",
          "    // we want to make sure connections are allocated outside any transaction",
          "    // this is to avoid tests that 'happen' to work because of how CLS works",
          "    await t.test('primer', function (t, end) {",
          "      const { agent, pool } = t.nr",
          "      pool.query('SELECT 1 + 1 AS solution', function (err) {",
          "        assert.ok(!err, 'are you sure mysql is running?')",
          "        assert.ok(!agent.getTransaction(), 'transaction should not exist')",
          "        end()",
          "      })",
          "    })"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 122,
        "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    })",
          "",
          "    await t.test('ensure host and port are set on segment', function (t, end) {",
          "      const { agent, pool } = t.nr",
          "      helper.runInTransaction(agent, function transactionInScope(txn) {",
          "        pool.query('SELECT 1 + 1 AS solution', function (err) {",
          "          const [firstChild] = txn.trace.getChildren(txn.trace.root.id)",
          "          const children = txn.trace.getChildren(firstChild.id)",
          "",
          "          const [seg] = children.filter(function (trace) {",
          "            return /Datastore\\/statement\\/MySQL/.test(trace.name)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 122,
        "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    })",
          "",
          "    await t.test('ensure host and port are set on segment', function (t, end) {",
          "      const { agent, pool } = t.nr",
          "      helper.runInTransaction(agent, function transactionInScope(txn) {",
          "        pool.query('SELECT 1 + 1 AS solution', function (err) {",
          "          const [firstChild] = txn.trace.getChildren(txn.trace.root.id)",
          "          const children = txn.trace.getChildren(firstChild.id)",
          "",
          "          const [seg] = children.filter(function (trace) {",
          "            return /Datastore\\/statement\\/MySQL/.test(trace.name)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 151,
        "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "",
          "    await t.test('respects `datastore_tracer.instance_reporting`', function (t, end) {",
          "      const { agent, pool } = t.nr",
          "      helper.runInTransaction(agent, function transactionInScope(txn) {",
          "        agent.config.datastore_tracer.instance_reporting.enabled = false",
          "        pool.query('SELECT 1 + 1 AS solution', function (err) {",
          "          const seg = getDatastoreSegment({ trace: txn.trace, segment: agent.tracer.getSegment() })",
          "          assert.ok(!err, 'should not error making query')",
          "          assert.ok(seg, 'should have a segment')",
          "",
          "          const attributes = seg.getAttributes()"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 151,
        "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "",
          "    await t.test('respects `datastore_tracer.instance_reporting`', function (t, end) {",
          "      const { agent, pool } = t.nr",
          "      helper.runInTransaction(agent, function transactionInScope(txn) {",
          "        agent.config.datastore_tracer.instance_reporting.enabled = false",
          "        pool.query('SELECT 1 + 1 AS solution', function (err) {",
          "          const seg = getDatastoreSegment({ trace: txn.trace, segment: agent.tracer.getSegment() })",
          "          assert.ok(!err, 'should not error making query')",
          "          assert.ok(seg, 'should have a segment')",
          "",
          "          const attributes = seg.getAttributes()"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 172,
        "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "",
          "    await t.test('respects `datastore_tracer.database_name_reporting`', function (t, end) {",
          "      const { agent, pool } = t.nr",
          "      helper.runInTransaction(agent, function transactionInScope(txn) {",
          "        agent.config.datastore_tracer.database_name_reporting.enabled = false",
          "        pool.query('SELECT 1 + 1 AS solution', function (err) {",
          "          const seg = getDatastoreSegment({ trace: txn.trace, segment: agent.tracer.getSegment() })",
          "          const attributes = seg.getAttributes()",
          "          assert.ok(!err, 'no errors')",
          "          assert.ok(seg, 'there is a segment')",
          "          assert.equal("
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 172,
        "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "",
          "    await t.test('respects `datastore_tracer.database_name_reporting`', function (t, end) {",
          "      const { agent, pool } = t.nr",
          "      helper.runInTransaction(agent, function transactionInScope(txn) {",
          "        agent.config.datastore_tracer.database_name_reporting.enabled = false",
          "        pool.query('SELECT 1 + 1 AS solution', function (err) {",
          "          const seg = getDatastoreSegment({ trace: txn.trace, segment: agent.tracer.getSegment() })",
          "          const attributes = seg.getAttributes()",
          "          assert.ok(!err, 'no errors')",
          "          assert.ok(seg, 'there is a segment')",
          "          assert.equal("
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 199,
        "line_content": "defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "      const defaultConfig = getConfig({",
          "        host: null",
          "      })",
          "      const defaultPool = mysql.createPool(defaultConfig)",
          "      helper.runInTransaction(agent, function transactionInScope(txn) {",
          "        defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
          "          assert.ok(!err, 'should not fail to execute query')",
          "",
          "          // In the case where you don't have a server running on",
          "          // localhost the data will still be correctly associated",
          "          // with the query."
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 199,
        "line_content": "defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "      const defaultConfig = getConfig({",
          "        host: null",
          "      })",
          "      const defaultPool = mysql.createPool(defaultConfig)",
          "      helper.runInTransaction(agent, function transactionInScope(txn) {",
          "        defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
          "          assert.ok(!err, 'should not fail to execute query')",
          "",
          "          // In the case where you don't have a server running on",
          "          // localhost the data will still be correctly associated",
          "          // with the query."
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 225,
        "line_content": "defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "      const defaultConfig = getConfig({",
          "        host: null",
          "      })",
          "      const defaultPool = mysql.createPool(defaultConfig)",
          "      helper.runInTransaction(agent, function transactionInScope(txn) {",
          "        defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
          "          const seg = getDatastoreSegment({ trace: txn.trace, segment: agent.tracer.getSegment() })",
          "          const attributes = seg.getAttributes()",
          "",
          "          assert.ok(!err, 'should not error making query')",
          "          assert.ok(seg, 'should have a segment')"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 225,
        "line_content": "defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "      const defaultConfig = getConfig({",
          "        host: null",
          "      })",
          "      const defaultPool = mysql.createPool(defaultConfig)",
          "      helper.runInTransaction(agent, function transactionInScope(txn) {",
          "        defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
          "          const seg = getDatastoreSegment({ trace: txn.trace, segment: agent.tracer.getSegment() })",
          "          const attributes = seg.getAttributes()",
          "",
          "          assert.ok(!err, 'should not error making query')",
          "          assert.ok(seg, 'should have a segment')"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 271,
        "line_content": "pool.query('SELECT 1 + 1 AS solution123123123123', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    })",
          "",
          "    await t.test('pool.query', function (t, end) {",
          "      const { agent, pool } = t.nr",
          "      helper.runInTransaction(agent, function transactionInScope(txn) {",
          "        pool.query('SELECT 1 + 1 AS solution123123123123', function (err) {",
          "          const transaction = agent.getTransaction()",
          "          const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)",
          "",
          "          assert.ok(!err, 'no error occurred')",
          "          assert.ok(transaction, 'transaction should exist')"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 271,
        "line_content": "pool.query('SELECT 1 + 1 AS solution123123123123', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    })",
          "",
          "    await t.test('pool.query', function (t, end) {",
          "      const { agent, pool } = t.nr",
          "      helper.runInTransaction(agent, function transactionInScope(txn) {",
          "        pool.query('SELECT 1 + 1 AS solution123123123123', function (err) {",
          "          const transaction = agent.getTransaction()",
          "          const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)",
          "",
          "          assert.ok(!err, 'no error occurred')",
          "          assert.ok(transaction, 'transaction should exist')"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 290,
        "line_content": "pool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    })",
          "",
          "    await t.test('pool.query with values', function (t, end) {",
          "      const { agent, pool } = t.nr",
          "      helper.runInTransaction(agent, function transactionInScope(txn) {",
          "        pool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "          const transaction = agent.getTransaction()",
          "          assert.ok(!err)",
          "          assert.ok(transaction, 'should not lose transaction')",
          "          if (transaction) {",
          "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 290,
        "line_content": "pool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    })",
          "",
          "    await t.test('pool.query with values', function (t, end) {",
          "      const { agent, pool } = t.nr",
          "      helper.runInTransaction(agent, function transactionInScope(txn) {",
          "        pool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "          const transaction = agent.getTransaction()",
          "          assert.ok(!err)",
          "          assert.ok(transaction, 'should not lose transaction')",
          "          if (transaction) {",
          "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 318,
        "line_content": "connection.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "          assert.ok(agent.getTransaction(), 'transaction should exit')",
          "          t.after(function () {",
          "            connection.release()",
          "          })",
          "",
          "          connection.query('SELECT 1 + 1 AS solution', function (err) {",
          "            const transaction = agent.getTransaction()",
          "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)",
          "",
          "            assert.ok(!err, 'no error occurred')",
          "            assert.ok(transaction, 'transaction should exist')"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 318,
        "line_content": "connection.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "          assert.ok(agent.getTransaction(), 'transaction should exit')",
          "          t.after(function () {",
          "            connection.release()",
          "          })",
          "",
          "          connection.query('SELECT 1 + 1 AS solution', function (err) {",
          "            const transaction = agent.getTransaction()",
          "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)",
          "",
          "            assert.ok(!err, 'no error occurred')",
          "            assert.ok(transaction, 'transaction should exist')"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 345,
        "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "          assert.ok(agent.getTransaction(), 'transaction should exit')",
          "          t.after(function () {",
          "            connection.release()",
          "          })",
          "",
          "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "            const transaction = agent.getTransaction()",
          "            assert.ok(!err)",
          "            assert.ok(transaction, 'should not lose transaction')",
          "            if (transaction) {",
          "              const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 345,
        "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "          assert.ok(agent.getTransaction(), 'transaction should exit')",
          "          t.after(function () {",
          "            connection.release()",
          "          })",
          "",
          "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "            const transaction = agent.getTransaction()",
          "            assert.ok(!err)",
          "            assert.ok(transaction, 'should not lose transaction')",
          "            if (transaction) {",
          "              const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 375,
        "line_content": "socketPool.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        const socketConfig = getConfig({",
          "          socketPath",
          "        })",
          "        const socketPool = mysql.createPool(socketConfig)",
          "        helper.runInTransaction(agent, function transactionInScope(txn) {",
          "          socketPool.query('SELECT 1 + 1 AS solution', function (err) {",
          "            assert.ok(!err, 'should not error making query')",
          "",
          "            const seg = getDatastoreSegment({",
          "              trace: txn.trace,",
          "              segment: agent.tracer.getSegment()"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 375,
        "line_content": "socketPool.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        const socketConfig = getConfig({",
          "          socketPath",
          "        })",
          "        const socketPool = mysql.createPool(socketConfig)",
          "        helper.runInTransaction(agent, function transactionInScope(txn) {",
          "          socketPool.query('SELECT 1 + 1 AS solution', function (err) {",
          "            assert.ok(!err, 'should not error making query')",
          "",
          "            const seg = getDatastoreSegment({",
          "              trace: txn.trace,",
          "              segment: agent.tracer.getSegment()"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 428,
        "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "      const { agent, poolCluster } = t.nr",
          "      poolCluster.getConnection(function (err, connection) {",
          "        assert.ok(!err, 'should not be an error')",
          "        assert.ok(!agent.getTransaction(), 'transaction should not exist')",
          "",
          "        connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "          assert.ok(!err)",
          "          assert.ok(!agent.getTransaction(), 'transaction should not exist')",
          "",
          "          connection.release()",
          "          end()"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 428,
        "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "      const { agent, poolCluster } = t.nr",
          "      poolCluster.getConnection(function (err, connection) {",
          "        assert.ok(!err, 'should not be an error')",
          "        assert.ok(!agent.getTransaction(), 'transaction should not exist')",
          "",
          "        connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "          assert.ok(!err)",
          "          assert.ok(!agent.getTransaction(), 'transaction should not exist')",
          "",
          "          connection.release()",
          "          end()"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 459,
        "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "      const { agent, poolCluster } = t.nr",
          "      poolCluster.getConnection(function (err, connection) {",
          "        assert.ok(!err, 'should not have error')",
          "",
          "        helper.runInTransaction(agent, function (txn) {",
          "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "            assert.ok(!err, 'no error occurred')",
          "            const transaction = agent.getTransaction()",
          "            assert.ok(transaction, 'transaction should exist')",
          "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
          "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 459,
        "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "      const { agent, poolCluster } = t.nr",
          "      poolCluster.getConnection(function (err, connection) {",
          "        assert.ok(!err, 'should not have error')",
          "",
          "        helper.runInTransaction(agent, function (txn) {",
          "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "            assert.ok(!err, 'no error occurred')",
          "            const transaction = agent.getTransaction()",
          "            assert.ok(transaction, 'transaction should exist')",
          "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
          "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 498,
        "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    await t.test('get MASTER connection', function (t, end) {",
          "      const { agent, poolCluster } = t.nr",
          "      poolCluster.getConnection('MASTER', function (err, connection) {",
          "        assert.ifError(err)",
          "        helper.runInTransaction(agent, function (txn) {",
          "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "            assert.ok(!err, 'no error occurred')",
          "            const transaction = agent.getTransaction()",
          "            assert.ok(transaction, 'transaction should exist')",
          "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
          "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 498,
        "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    await t.test('get MASTER connection', function (t, end) {",
          "      const { agent, poolCluster } = t.nr",
          "      poolCluster.getConnection('MASTER', function (err, connection) {",
          "        assert.ifError(err)",
          "        helper.runInTransaction(agent, function (txn) {",
          "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "            assert.ok(!err, 'no error occurred')",
          "            const transaction = agent.getTransaction()",
          "            assert.ok(transaction, 'transaction should exist')",
          "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
          "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 537,
        "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    await t.test('get glob', function (t, end) {",
          "      const { agent, poolCluster } = t.nr",
          "      poolCluster.getConnection('REPLICA*', 'ORDER', function (err, connection) {",
          "        assert.ifError(err)",
          "        helper.runInTransaction(agent, function (txn) {",
          "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "            assert.ok(!err, 'no error occurred')",
          "            const transaction = agent.getTransaction()",
          "            assert.ok(transaction, 'transaction should exist')",
          "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
          "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 537,
        "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    await t.test('get glob', function (t, end) {",
          "      const { agent, poolCluster } = t.nr",
          "      poolCluster.getConnection('REPLICA*', 'ORDER', function (err, connection) {",
          "        assert.ifError(err)",
          "        helper.runInTransaction(agent, function (txn) {",
          "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "            assert.ok(!err, 'no error occurred')",
          "            const transaction = agent.getTransaction()",
          "            assert.ok(transaction, 'transaction should exist')",
          "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
          "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 575,
        "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    await t.test('get star', function (t, end) {",
          "      const { agent, poolCluster } = t.nr",
          "      poolCluster.of('*').getConnection(function (err, connection) {",
          "        assert.ifError(err)",
          "        helper.runInTransaction(agent, function (txn) {",
          "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "            assert.ok(!err, 'no error occurred')",
          "            const transaction = agent.getTransaction()",
          "            assert.ok(transaction, 'transaction should exist')",
          "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
          "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 575,
        "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    await t.test('get star', function (t, end) {",
          "      const { agent, poolCluster } = t.nr",
          "      poolCluster.of('*').getConnection(function (err, connection) {",
          "        assert.ifError(err)",
          "        helper.runInTransaction(agent, function (txn) {",
          "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "            assert.ok(!err, 'no error occurred')",
          "            const transaction = agent.getTransaction()",
          "            assert.ok(transaction, 'transaction should exist')",
          "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
          "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 615,
        "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "      const { agent, poolCluster } = t.nr",
          "      const pool = poolCluster.of('REPLICA*', 'RANDOM')",
          "      pool.getConnection(function (err, connection) {",
          "        assert.ifError(err)",
          "        helper.runInTransaction(agent, function (txn) {",
          "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "            assert.ok(!err, 'no error occurred')",
          "            const currentTransaction = agent.getTransaction()",
          "            assert.ok(currentTransaction, 'transaction should exist')",
          "            assert.equal(currentTransaction.id, txn.id, 'transaction must be same')",
          "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 615,
        "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "      const { agent, poolCluster } = t.nr",
          "      const pool = poolCluster.of('REPLICA*', 'RANDOM')",
          "      pool.getConnection(function (err, connection) {",
          "        assert.ifError(err)",
          "        helper.runInTransaction(agent, function (txn) {",
          "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "            assert.ok(!err, 'no error occurred')",
          "            const currentTransaction = agent.getTransaction()",
          "            assert.ok(currentTransaction, 'transaction should exist')",
          "            assert.equal(currentTransaction.id, txn.id, 'transaction must be same')",
          "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 642,
        "line_content": "replicaPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "      await t.test('poolCluster query', function (t, end) {",
          "        const { agent, poolCluster } = t.nr",
          "        const masterPool = poolCluster.of('MASTER', 'RANDOM')",
          "        const replicaPool = poolCluster.of('REPLICA', 'RANDOM')",
          "        helper.runInTransaction(agent, function (txn) {",
          "          replicaPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "            let transaction = agent.getTransaction()",
          "            assert.ok(transaction, 'transaction should exist')",
          "            assert.equal(transaction, txn, 'transaction must be same')",
          "",
          "            let segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 642,
        "line_content": "replicaPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "      await t.test('poolCluster query', function (t, end) {",
          "        const { agent, poolCluster } = t.nr",
          "        const masterPool = poolCluster.of('MASTER', 'RANDOM')",
          "        const replicaPool = poolCluster.of('REPLICA', 'RANDOM')",
          "        helper.runInTransaction(agent, function (txn) {",
          "          replicaPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "            let transaction = agent.getTransaction()",
          "            assert.ok(transaction, 'transaction should exist')",
          "            assert.equal(transaction, txn, 'transaction must be same')",
          "",
          "            let segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 662,
        "line_content": "masterPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "            assert.ok(segment, 'segment should exist')",
          "            assert.ok(segment.timer.start > 0, 'starts at a positive time')",
          "            assert.ok(segment.timer.start <= Date.now(), 'starts in past')",
          "            assert.equal(segment.name, 'Datastore/statement/MySQL/unknown/select', 'is named')",
          "",
          "            masterPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "              transaction = agent.getTransaction()",
          "              assert.ok(transaction, 'transaction should exist')",
          "              assert.equal(transaction, txn, 'transaction must be same')",
          "",
          "              segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic-pool.js",
        "line_number": 662,
        "line_content": "masterPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "            assert.ok(segment, 'segment should exist')",
          "            assert.ok(segment.timer.start > 0, 'starts at a positive time')",
          "            assert.ok(segment.timer.start <= Date.now(), 'starts in past')",
          "            assert.equal(segment.name, 'Datastore/statement/MySQL/unknown/select', 'is named')",
          "",
          "            masterPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
          "              transaction = agent.getTransaction()",
          "              assert.ok(transaction, 'transaction should exist')",
          "              assert.equal(transaction, txn, 'transaction must be same')",
          "",
          "              segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic.js",
        "line_number": 156,
        "line_content": "client.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "            assert.ok(!err, 'should not fail to create database')",
          "",
          "            client.query('use test_db;', function (err) {",
          "              assert.ok(!err, 'should not fail to set database')",
          "",
          "              client.query('SELECT 1 + 1 AS solution', function (err) {",
          "                const seg = tx.trace.getParent(agent.tracer.getSegment().parentId)",
          "                const attributes = seg.getAttributes()",
          "",
          "                assert.ok(!err, 'no errors')",
          "                assert.ok(seg, 'there is a segment')"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic.js",
        "line_number": 156,
        "line_content": "client.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "            assert.ok(!err, 'should not fail to create database')",
          "",
          "            client.query('use test_db;', function (err) {",
          "              assert.ok(!err, 'should not fail to set database')",
          "",
          "              client.query('SELECT 1 + 1 AS solution', function (err) {",
          "                const seg = tx.trace.getParent(agent.tracer.getSegment().parentId)",
          "                const attributes = seg.getAttributes()",
          "",
          "                assert.ok(!err, 'no errors')",
          "                assert.ok(seg, 'there is a segment')"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic.js",
        "line_number": 375,
        "line_content": "client.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "          assert.ok(!err)",
          "          client.query('create database if not exists test_db;', function (err) {",
          "            assert.ok(!err)",
          "            client.query('use test_db;', function (err) {",
          "              assert.ok(!err)",
          "              client.query('SELECT 1 + 1 AS solution', function (err) {",
          "                const seg = txn.trace.getParent(agent.tracer.getSegment().parentId)",
          "                const attributes = seg.getAttributes()",
          "                assert.ok(!err)",
          "                assert.ok(seg, 'should have a segment')",
          "                assert.equal("
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/basic.js",
        "line_number": 375,
        "line_content": "client.query('SELECT 1 + 1 AS solution', function (err) {",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "          assert.ok(!err)",
          "          client.query('create database if not exists test_db;', function (err) {",
          "            assert.ok(!err)",
          "            client.query('use test_db;', function (err) {",
          "              assert.ok(!err)",
          "              client.query('SELECT 1 + 1 AS solution', function (err) {",
          "                const seg = txn.trace.getParent(agent.tracer.getSegment().parentId)",
          "                const attributes = seg.getAttributes()",
          "                assert.ok(!err)",
          "                assert.ok(seg, 'should have a segment')",
          "                assert.equal("
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/utils.js",
        "line_number": 34,
        "line_content": "const query = 'SELECT *' + '  FROM ' + database + '.' + table + ' WHERE id = ?'",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "  getClient(pool, (err, client) => {",
          "    if (err) {",
          "      return callback(err)",
          "    }",
          "",
          "    const query = 'SELECT *' + '  FROM ' + database + '.' + table + ' WHERE id = ?'",
          "    client.query(query, [params.id], function (err, results) {",
          "      pool.release(client) // always release back to the pool",
          "",
          "      if (err) {",
          "        return callback(err)"
        ],
        "confidence": 0.7,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/versioned/mysql/utils.js",
        "line_number": 34,
        "line_content": "const query = 'SELECT *' + '  FROM ' + database + '.' + table + ' WHERE id = ?'",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "  getClient(pool, (err, client) => {",
          "    if (err) {",
          "      return callback(err)",
          "    }",
          "",
          "    const query = 'SELECT *' + '  FROM ' + database + '.' + table + ' WHERE id = ?'",
          "    client.query(query, [params.id], function (err, results) {",
          "      pool.release(client) // always release back to the pool",
          "",
          "      if (err) {",
          "        return callback(err)"
        ],
        "confidence": 0.7,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/lib/test-collector.js",
        "line_number": 52,
        "line_content": "const qs = querystring.decode(req.url.slice(req.url.indexOf('?') + 1))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    this.#server = https.createServer({",
          "      key: this.#cert.privateKey,",
          "      cert: this.#cert.certificate",
          "    })",
          "    this.#server.on('request', (req, res) => {",
          "      const qs = querystring.decode(req.url.slice(req.url.indexOf('?') + 1))",
          "      const handler = this.#handlers.get(qs.method)",
          "      if (typeof handler !== 'function') {",
          "        res.writeHead(500)",
          "        return res.end('handler not found: ' + req.url)",
          "      }"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/lib/test-collector.js",
        "line_number": 245,
        "line_content": "const qs = querystring.decode(endpoint.slice(endpoint.indexOf('?') + 1))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "   * method for easily sending JSON responses. Also, `req` is extended with",
          "   * a `body()` method that returns a promise which resolves to the string",
          "   * data supplied via POST-like requests.",
          "   */",
          "  addHandler(endpoint, handler) {",
          "    const qs = querystring.decode(endpoint.slice(endpoint.indexOf('?') + 1))",
          "    this.#handlers.set(qs.method, handler)",
          "  }",
          "",
          "  /**",
          "   * Shutdown the server and forcefully close all current connections."
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/lib/cross_agent_tests/sql_obfuscation/sql_obfuscation.json",
        "line_number": 163,
        "line_content": "\"sql\": \"INSERT INTO X VALUES(1, 23456, 123.456, 99+100)\",",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    ],",
          "    \"sql\": \"SELECT c11.col1, c22.col2 FROM table c11, table c22 WHERE value='nothing'\"",
          "  },",
          "  {",
          "    \"name\": \"numeric_literals\",",
          "    \"sql\": \"INSERT INTO X VALUES(1, 23456, 123.456, 99+100)\",",
          "    \"obfuscated\": [",
          "      \"INSERT INTO X VALUES(?, ?, ?, ?+?)\",",
          "      \"INSERT INTO X VALUES(?, ?, ?.?, ?+?)\"",
          "    ],",
          "    \"dialects\": ["
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/lib/cross_agent_tests/sql_obfuscation/sql_obfuscation.json",
        "line_number": 165,
        "line_content": "\"INSERT INTO X VALUES(?, ?, ?, ?+?)\",",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "  },",
          "  {",
          "    \"name\": \"numeric_literals\",",
          "    \"sql\": \"INSERT INTO X VALUES(1, 23456, 123.456, 99+100)\",",
          "    \"obfuscated\": [",
          "      \"INSERT INTO X VALUES(?, ?, ?, ?+?)\",",
          "      \"INSERT INTO X VALUES(?, ?, ?.?, ?+?)\"",
          "    ],",
          "    \"dialects\": [",
          "      \"mssql\",",
          "      \"mysql\","
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "test/lib/cross_agent_tests/sql_obfuscation/sql_obfuscation.json",
        "line_number": 166,
        "line_content": "\"INSERT INTO X VALUES(?, ?, ?.?, ?+?)\"",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "  {",
          "    \"name\": \"numeric_literals\",",
          "    \"sql\": \"INSERT INTO X VALUES(1, 23456, 123.456, 99+100)\",",
          "    \"obfuscated\": [",
          "      \"INSERT INTO X VALUES(?, ?, ?, ?+?)\",",
          "      \"INSERT INTO X VALUES(?, ?, ?.?, ?+?)\"",
          "    ],",
          "    \"dialects\": [",
          "      \"mssql\",",
          "      \"mysql\",",
          "      \"postgres\","
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "lib/transaction/index.js",
        "line_number": 67,
        "line_content": "'insertDistributedTraceHeaders called on headers object that already contains ' +",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "const TRACE_CONTEXT_PARENT_HEADER = 'traceparent'",
          "const TRACE_CONTEXT_STATE_HEADER = 'tracestate'",
          "const NEWRELIC_TRACE_HEADER = 'newrelic'",
          "",
          "const MULTIPLE_INSERT_MESSAGE =",
          "  'insertDistributedTraceHeaders called on headers object that already contains ' +",
          "  \"distributed trace data. These may be overwritten. traceparent? '%s', newrelic? '%s'.\"",
          "",
          "/**",
          " * Bundle together the metrics and the trace segment for a single agent",
          " * transaction."
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "lib/db/query-parsers/sql.js",
        "line_number": 16,
        "line_content": "/^[^\\S]*?select\\b[\\s\\S]+?\\bfrom[\\s\\n\\r\\[\\(]+([^\\]\\s\\n\\r,)(;]*)/gim",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "",
          "/* eslint-disable no-useless-escape, sonarjs/slow-regex, sonarjs/duplicates-in-character-class */",
          "const OPERATIONS = [",
          "  new StatementMatcher(",
          "    'select',",
          "    /^[^\\S]*?select\\b[\\s\\S]+?\\bfrom[\\s\\n\\r\\[\\(]+([^\\]\\s\\n\\r,)(;]*)/gim",
          "  ),",
          "  new StatementMatcher('update', /^[^\\S]*?update[^\\S]+?([^\\s\\n\\r,;]+)/gim),",
          "  new StatementMatcher(",
          "    'insert',",
          "    /^[^\\S]*?insert(?:[^\\S]+ignore)?[^\\S]+into[^\\S]+([^\\s\\n\\r(,;]+)/gim"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "lib/db/query-parsers/sql.js",
        "line_number": 21,
        "line_content": "/^[^\\S]*?insert(?:[^\\S]+ignore)?[^\\S]+into[^\\S]+([^\\s\\n\\r(,;]+)/gim",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    /^[^\\S]*?select\\b[\\s\\S]+?\\bfrom[\\s\\n\\r\\[\\(]+([^\\]\\s\\n\\r,)(;]*)/gim",
          "  ),",
          "  new StatementMatcher('update', /^[^\\S]*?update[^\\S]+?([^\\s\\n\\r,;]+)/gim),",
          "  new StatementMatcher(",
          "    'insert',",
          "    /^[^\\S]*?insert(?:[^\\S]+ignore)?[^\\S]+into[^\\S]+([^\\s\\n\\r(,;]+)/gim",
          "  ),",
          "  new StatementMatcher('delete', /^[^\\S]*?delete[^\\S]+?from[^\\S]+([^\\s\\n\\r,(;]+)/gim)",
          "]",
          "const COMMENT_PATTERN = /\\/\\\\*.*?\\\\*\\//g",
          "/* eslint-enable no-useless-escape, sonarjs/slow-regex, sonarjs/duplicates-in-character-class */"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      }
    ],
    "Hardcoded Credentials": [
      {
        "file": "test/lib/cross_agent_tests/sql_obfuscation/sql_obfuscation.json",
        "line_number": 492,
        "line_content": "\"sql\": \"select * from users where user = 'user1\\\\' password = 'hunter 2' -- ->don't count this quote\",",
        "category": "Hardcoded Credentials",
        "severity": "CRITICAL",
        "cwe": "CWE-798",
        "description": "Hardcoded API key or credential in agent code",
        "context": [
          "      \"sqlite\"",
          "    ]",
          "  },",
          "  {",
          "    \"name\": \"end_of_string_backslash_and_line_comment_with_quite\",",
          "    \"sql\": \"select * from users where user = 'user1\\\\' password = 'hunter 2' -- ->don't count this quote\",",
          "    \"obfuscated\": [",
          "      \"select * from users where user = ?\"",
          "    ],",
          "    \"dialects\": [",
          "      \"mysql\","
        ],
        "confidence": 0.9,
        "agent_specific": true,
        "default_config_impact": true
      }
    ],
    "Weak Cryptography": [
      {
        "file": "lib/util/hashes.js",
        "line_number": 50,
        "line_content": "const md5sum = crypto.createHash('md5')",
        "category": "Weak Cryptography",
        "severity": "MEDIUM",
        "cwe": "CWE-327",
        "description": "Weak cryptographic algorithm detected",
        "context": [
          "  return str.substring(str.length - 8)",
          "}",
          "",
          "function getHash(appName, txName) {",
          "  // eslint-disable-next-line sonarjs/hashing",
          "  const md5sum = crypto.createHash('md5')",
          "  md5sum.update(appName + ';' + txName, 'utf8')",
          "  let buf = md5sum.digest()",
          "  if (!(buf instanceof Buffer)) {",
          "    buf = Buffer.from(buf)",
          "  }"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      }
    ]
  },
  "by_severity": {
    "CRITICAL": 25,
    "HIGH": 70,
    "MEDIUM": 1
  },
  "all_vulnerabilities": [
    {
      "file": "index.js",
      "line_number": 213,
      "line_content": "const nodeMajor = /^v?(\\d+)/.exec(process.version)",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        " * TODO: As new versions come out, make sure to update Angler metrics.",
        " *",
        " * @param {Agent} agent active NR agent",
        " */",
        "function recordNodeVersionMetric(agent) {",
        "  const nodeMajor = /^v?(\\d+)/.exec(process.version)",
        "  const version = (nodeMajor && nodeMajor[1]) || 'unknown'",
        "  agent.recordSupportability(`Nodejs/Version/${version}`)",
        "}",
        "",
        "/**"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "stub_api.js",
      "line_number": 14,
      "line_content": "return eval(",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "const RealAPI = require('./api.js')",
        "const TransactionHandle = require('./lib/transaction/handle')",
        "",
        "function stubFunction(name) {",
        "  // eslint-disable-next-line sonarjs/code-eval, no-eval",
        "  return eval(",
        "    '(function () {return function ' +",
        "      name +",
        "      '() {' +",
        "      \"logger.debug('Not calling \" +",
        "      name +"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "package.json",
      "line_number": 10,
      "line_content": "\"web\": \"http://newrelic.com\"",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "  \"license\": \"Apache-2.0\",",
        "  \"contributors\": [",
        "    {",
        "      \"name\": \"Saxon D'Aubin\",",
        "      \"email\": \"saxon@newrelic.com\",",
        "      \"web\": \"http://newrelic.com\"",
        "    },",
        "    {",
        "      \"name\": \"Forrest L Norvell\",",
        "      \"email\": \"forrest@newrelic.com\",",
        "      \"web\": \"http://newrelic.com/\""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "package.json",
      "line_number": 15,
      "line_content": "\"web\": \"http://newrelic.com/\"",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "      \"web\": \"http://newrelic.com\"",
        "    },",
        "    {",
        "      \"name\": \"Forrest L Norvell\",",
        "      \"email\": \"forrest@newrelic.com\",",
        "      \"web\": \"http://newrelic.com/\"",
        "    },",
        "    {",
        "      \"name\": \"Jacob Groundwater\",",
        "      \"email\": \"jacob@newrelic.com\",",
        "      \"web\": \"https://newrelic.com\""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/prisma/setup.js",
      "line_number": 26,
      "line_content": "await exec(`npm install -g prisma@${version}`)",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "async function initPrismaApp() {",
        "  process.env.DATABASE_URL = getPostgresUrl()",
        "  const { version } = require('@prisma/client/package.json')",
        "  // install CLI globally with proper version so the client package can be generated and setup accordingly",
        "  // If this was locally installed, it would get stomped on.",
        "  await exec(`npm install -g prisma@${version}`)",
        "  await exec('prisma generate')",
        "  await exec('prisma migrate reset --force')",
        "  delete process.env.DATABASE_URL",
        "}",
        ""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/prisma/setup.js",
      "line_number": 27,
      "line_content": "await exec('prisma generate')",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "  process.env.DATABASE_URL = getPostgresUrl()",
        "  const { version } = require('@prisma/client/package.json')",
        "  // install CLI globally with proper version so the client package can be generated and setup accordingly",
        "  // If this was locally installed, it would get stomped on.",
        "  await exec(`npm install -g prisma@${version}`)",
        "  await exec('prisma generate')",
        "  await exec('prisma migrate reset --force')",
        "  delete process.env.DATABASE_URL",
        "}",
        "",
        "module.exports = {"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/prisma/setup.js",
      "line_number": 28,
      "line_content": "await exec('prisma migrate reset --force')",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "  const { version } = require('@prisma/client/package.json')",
        "  // install CLI globally with proper version so the client package can be generated and setup accordingly",
        "  // If this was locally installed, it would get stomped on.",
        "  await exec(`npm install -g prisma@${version}`)",
        "  await exec('prisma generate')",
        "  await exec('prisma migrate reset --force')",
        "  delete process.env.DATABASE_URL",
        "}",
        "",
        "module.exports = {",
        "  initPrismaApp,"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 97,
      "line_content": "expected['Datastore/statement/Postgres/' + selectTable + '/select'] = 1",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "      'Datastore/operation/Postgres/insert': 1,",
        "      'Datastore/operation/Postgres/select': 1",
        "    }",
        "",
        "    expected['Datastore/statement/Postgres/' + TABLE + '/insert'] = 1",
        "    expected['Datastore/statement/Postgres/' + selectTable + '/select'] = 1",
        "",
        "    const metricHostName = getMetricHostName(agent, params.postgres_host)",
        "    const hostId = metricHostName + '/' + params.postgres_port",
        "    expected['Datastore/instance/Postgres/' + hostId] = 2",
        ""
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 140,
      "line_content": "'Datastore/statement/Postgres/' + selectTable + '/select'",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    )",
        "",
        "    const getSegment = findSegment(",
        "      trace,",
        "      trace.root,",
        "      'Datastore/statement/Postgres/' + selectTable + '/select'",
        "    )",
        "",
        "    expect.ok(setSegment, 'trace segment for insert should exist')",
        "    expect.ok(getSegment, 'trace segment for select should exist')",
        ""
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 152,
      "line_content": "'Datastore/statement/Postgres/' + selectTable + '/select',",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "      return",
        "    }",
        "",
        "    expect.equal(",
        "      getSegment.name,",
        "      'Datastore/statement/Postgres/' + selectTable + '/select',",
        "      'should register the query call'",
        "    )",
        "",
        "    expect.ok(getSegment.timer.hrDuration, 'trace segment should have ended')",
        "  }"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 261,
      "line_content": "let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "            assert.ifError(error)",
        "",
        "            assert.ok(agent.getTransaction(), 'transaction should still be visible')",
        "            assert.ok(ok, 'everything should be peachy after setting')",
        "",
        "            let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
        "            selQuery += PK + '=' + pkVal + ';'",
        "",
        "            client.query(selQuery, function (error, value) {",
        "              assert.ifError(error)",
        ""
      ],
      "confidence": 0.7,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 261,
      "line_content": "let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "            assert.ifError(error)",
        "",
        "            assert.ok(agent.getTransaction(), 'transaction should still be visible')",
        "            assert.ok(ok, 'everything should be peachy after setting')",
        "",
        "            let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
        "            selQuery += PK + '=' + pkVal + ';'",
        "",
        "            client.query(selQuery, function (error, value) {",
        "              assert.ifError(error)",
        ""
      ],
      "confidence": 0.7,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 262,
      "line_content": "selQuery += PK + '=' + pkVal + ';'",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "",
        "            assert.ok(agent.getTransaction(), 'transaction should still be visible')",
        "            assert.ok(ok, 'everything should be peachy after setting')",
        "",
        "            let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
        "            selQuery += PK + '=' + pkVal + ';'",
        "",
        "            client.query(selQuery, function (error, value) {",
        "              assert.ifError(error)",
        "",
        "              assert.ok(agent.getTransaction(), 'transaction should still still be visible')"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 292,
      "line_content": "let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        assert.ok(transaction, 'transaction should be visible')",
        "        assert.equal(tx, transaction, 'We got the same transaction')",
        "",
        "        const colVal = 'Hello'",
        "        const pkVal = 111",
        "        let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
        "        insQuery += ') VALUES($1, $2);'",
        "",
        "        try {",
        "          await client.connect()",
        "        } catch (err) {"
      ],
      "confidence": 0.7,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 292,
      "line_content": "let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        assert.ok(transaction, 'transaction should be visible')",
        "        assert.equal(tx, transaction, 'We got the same transaction')",
        "",
        "        const colVal = 'Hello'",
        "        const pkVal = 111",
        "        let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
        "        insQuery += ') VALUES($1, $2);'",
        "",
        "        try {",
        "          await client.connect()",
        "        } catch (err) {"
      ],
      "confidence": 0.7,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 293,
      "line_content": "insQuery += ') VALUES($1, $2);'",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        assert.equal(tx, transaction, 'We got the same transaction')",
        "",
        "        const colVal = 'Hello'",
        "        const pkVal = 111",
        "        let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
        "        insQuery += ') VALUES($1, $2);'",
        "",
        "        try {",
        "          await client.connect()",
        "        } catch (err) {",
        "          assert.ifError(err)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 489,
      "line_content": "let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        plan.ok(transaction, 'transaction should be visible')",
        "        plan.equal(tx, transaction, 'We got the same transaction')",
        "",
        "        const colVal = 'World!'",
        "        const pkVal = 222",
        "        let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
        "        insQuery += ') VALUES(' + pkVal + \",'\" + colVal + \"');\"",
        "",
        "        const pool = new pg.Pool(CON_OBJ)",
        "",
        "        pool.connect(function (error, client, done) {"
      ],
      "confidence": 0.7,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 489,
      "line_content": "let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        plan.ok(transaction, 'transaction should be visible')",
        "        plan.equal(tx, transaction, 'We got the same transaction')",
        "",
        "        const colVal = 'World!'",
        "        const pkVal = 222",
        "        let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
        "        insQuery += ') VALUES(' + pkVal + \",'\" + colVal + \"');\"",
        "",
        "        const pool = new pg.Pool(CON_OBJ)",
        "",
        "        pool.connect(function (error, client, done) {"
      ],
      "confidence": 0.7,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 490,
      "line_content": "insQuery += ') VALUES(' + pkVal + \",'\" + colVal + \"');\"",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        plan.equal(tx, transaction, 'We got the same transaction')",
        "",
        "        const colVal = 'World!'",
        "        const pkVal = 222",
        "        let insQuery = 'INSERT INTO ' + TABLE_PREPARED + ' (' + PK + ',' + COL",
        "        insQuery += ') VALUES(' + pkVal + \",'\" + colVal + \"');\"",
        "",
        "        const pool = new pg.Pool(CON_OBJ)",
        "",
        "        pool.connect(function (error, client, done) {",
        "          plan.ifError(error)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 503,
      "line_content": "let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "            plan.ifError(error)",
        "",
        "            plan.ok(agent.getTransaction(), 'transaction should still be visible')",
        "            plan.ok(ok, 'everything should be peachy after setting')",
        "",
        "            let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
        "            selQuery += PK + '=' + pkVal + ';'",
        "",
        "            client.query(selQuery, function (error, value) {",
        "              plan.ifError(error)",
        ""
      ],
      "confidence": 0.7,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 503,
      "line_content": "let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "            plan.ifError(error)",
        "",
        "            plan.ok(agent.getTransaction(), 'transaction should still be visible')",
        "            plan.ok(ok, 'everything should be peachy after setting')",
        "",
        "            let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
        "            selQuery += PK + '=' + pkVal + ';'",
        "",
        "            client.query(selQuery, function (error, value) {",
        "              plan.ifError(error)",
        ""
      ],
      "confidence": 0.7,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 504,
      "line_content": "selQuery += PK + '=' + pkVal + ';'",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "",
        "            plan.ok(agent.getTransaction(), 'transaction should still be visible')",
        "            plan.ok(ok, 'everything should be peachy after setting')",
        "",
        "            let selQuery = 'SELECT * FROM ' + TABLE_PREPARED + ' WHERE '",
        "            selQuery += PK + '=' + pkVal + ';'",
        "",
        "            client.query(selQuery, function (error, value) {",
        "              plan.ifError(error)",
        "",
        "              plan.ok(agent.getTransaction(), 'transaction should still still be visible')"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/pg/pg.common.js",
      "line_number": 607,
      "line_content": "'should not add datastore instance parameters to slow query traces when' + ' disabled',",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "",
        "      await plan.completed",
        "    })",
        "",
        "    await t.test(",
        "      'should not add datastore instance parameters to slow query traces when' + ' disabled',",
        "      async (t) => {",
        "        const plan = tspl(t, { plan: 5 })",
        "        const { agent, pg } = t.nr",
        "",
        "        // enable slow queries"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 112,
      "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    // make sure a connection exists in the pool before any tests are run",
        "    // we want to make sure connections are allocated outside any transaction",
        "    // this is to avoid tests that 'happen' to work because of how CLS works",
        "    await t.test('primer', function (t, end) {",
        "      const { agent, pool } = t.nr",
        "      pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "        assert.ok(!err, 'are you sure mysql is running?')",
        "        assert.ok(!agent.getTransaction(), 'transaction should not exist')",
        "        end()",
        "      })",
        "    })"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 112,
      "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    // make sure a connection exists in the pool before any tests are run",
        "    // we want to make sure connections are allocated outside any transaction",
        "    // this is to avoid tests that 'happen' to work because of how CLS works",
        "    await t.test('primer', function (t, end) {",
        "      const { agent, pool } = t.nr",
        "      pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "        assert.ok(!err, 'are you sure mysql is running?')",
        "        assert.ok(!agent.getTransaction(), 'transaction should not exist')",
        "        end()",
        "      })",
        "    })"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 122,
      "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    })",
        "",
        "    await t.test('ensure host and port are set on segment', function (t, end) {",
        "      const { agent, pool } = t.nr",
        "      helper.runInTransaction(agent, function transactionInScope(txn) {",
        "        pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "          const [firstChild] = txn.trace.getChildren(txn.trace.root.id)",
        "          const children = txn.trace.getChildren(firstChild.id)",
        "",
        "          const [seg] = children.filter(function (trace) {",
        "            return /Datastore\\/statement\\/MySQL/.test(trace.name)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 122,
      "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    })",
        "",
        "    await t.test('ensure host and port are set on segment', function (t, end) {",
        "      const { agent, pool } = t.nr",
        "      helper.runInTransaction(agent, function transactionInScope(txn) {",
        "        pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "          const [firstChild] = txn.trace.getChildren(txn.trace.root.id)",
        "          const children = txn.trace.getChildren(firstChild.id)",
        "",
        "          const [seg] = children.filter(function (trace) {",
        "            return /Datastore\\/statement\\/MySQL/.test(trace.name)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 151,
      "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "",
        "    await t.test('respects `datastore_tracer.instance_reporting`', function (t, end) {",
        "      const { agent, pool } = t.nr",
        "      helper.runInTransaction(agent, function transactionInScope(txn) {",
        "        agent.config.datastore_tracer.instance_reporting.enabled = false",
        "        pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "          const seg = getDatastoreSegment({ trace: txn.trace, segment: agent.tracer.getSegment() })",
        "          assert.ok(!err, 'should not error making query')",
        "          assert.ok(seg, 'should have a segment')",
        "",
        "          const attributes = seg.getAttributes()"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 151,
      "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "",
        "    await t.test('respects `datastore_tracer.instance_reporting`', function (t, end) {",
        "      const { agent, pool } = t.nr",
        "      helper.runInTransaction(agent, function transactionInScope(txn) {",
        "        agent.config.datastore_tracer.instance_reporting.enabled = false",
        "        pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "          const seg = getDatastoreSegment({ trace: txn.trace, segment: agent.tracer.getSegment() })",
        "          assert.ok(!err, 'should not error making query')",
        "          assert.ok(seg, 'should have a segment')",
        "",
        "          const attributes = seg.getAttributes()"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 172,
      "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "",
        "    await t.test('respects `datastore_tracer.database_name_reporting`', function (t, end) {",
        "      const { agent, pool } = t.nr",
        "      helper.runInTransaction(agent, function transactionInScope(txn) {",
        "        agent.config.datastore_tracer.database_name_reporting.enabled = false",
        "        pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "          const seg = getDatastoreSegment({ trace: txn.trace, segment: agent.tracer.getSegment() })",
        "          const attributes = seg.getAttributes()",
        "          assert.ok(!err, 'no errors')",
        "          assert.ok(seg, 'there is a segment')",
        "          assert.equal("
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 172,
      "line_content": "pool.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "",
        "    await t.test('respects `datastore_tracer.database_name_reporting`', function (t, end) {",
        "      const { agent, pool } = t.nr",
        "      helper.runInTransaction(agent, function transactionInScope(txn) {",
        "        agent.config.datastore_tracer.database_name_reporting.enabled = false",
        "        pool.query('SELECT 1 + 1 AS solution', function (err) {",
        "          const seg = getDatastoreSegment({ trace: txn.trace, segment: agent.tracer.getSegment() })",
        "          const attributes = seg.getAttributes()",
        "          assert.ok(!err, 'no errors')",
        "          assert.ok(seg, 'there is a segment')",
        "          assert.equal("
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 199,
      "line_content": "defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "      const defaultConfig = getConfig({",
        "        host: null",
        "      })",
        "      const defaultPool = mysql.createPool(defaultConfig)",
        "      helper.runInTransaction(agent, function transactionInScope(txn) {",
        "        defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
        "          assert.ok(!err, 'should not fail to execute query')",
        "",
        "          // In the case where you don't have a server running on",
        "          // localhost the data will still be correctly associated",
        "          // with the query."
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 199,
      "line_content": "defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "      const defaultConfig = getConfig({",
        "        host: null",
        "      })",
        "      const defaultPool = mysql.createPool(defaultConfig)",
        "      helper.runInTransaction(agent, function transactionInScope(txn) {",
        "        defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
        "          assert.ok(!err, 'should not fail to execute query')",
        "",
        "          // In the case where you don't have a server running on",
        "          // localhost the data will still be correctly associated",
        "          // with the query."
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 225,
      "line_content": "defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "      const defaultConfig = getConfig({",
        "        host: null",
        "      })",
        "      const defaultPool = mysql.createPool(defaultConfig)",
        "      helper.runInTransaction(agent, function transactionInScope(txn) {",
        "        defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
        "          const seg = getDatastoreSegment({ trace: txn.trace, segment: agent.tracer.getSegment() })",
        "          const attributes = seg.getAttributes()",
        "",
        "          assert.ok(!err, 'should not error making query')",
        "          assert.ok(seg, 'should have a segment')"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 225,
      "line_content": "defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "      const defaultConfig = getConfig({",
        "        host: null",
        "      })",
        "      const defaultPool = mysql.createPool(defaultConfig)",
        "      helper.runInTransaction(agent, function transactionInScope(txn) {",
        "        defaultPool.query('SELECT 1 + 1 AS solution', function (err) {",
        "          const seg = getDatastoreSegment({ trace: txn.trace, segment: agent.tracer.getSegment() })",
        "          const attributes = seg.getAttributes()",
        "",
        "          assert.ok(!err, 'should not error making query')",
        "          assert.ok(seg, 'should have a segment')"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 271,
      "line_content": "pool.query('SELECT 1 + 1 AS solution123123123123', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    })",
        "",
        "    await t.test('pool.query', function (t, end) {",
        "      const { agent, pool } = t.nr",
        "      helper.runInTransaction(agent, function transactionInScope(txn) {",
        "        pool.query('SELECT 1 + 1 AS solution123123123123', function (err) {",
        "          const transaction = agent.getTransaction()",
        "          const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)",
        "",
        "          assert.ok(!err, 'no error occurred')",
        "          assert.ok(transaction, 'transaction should exist')"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 271,
      "line_content": "pool.query('SELECT 1 + 1 AS solution123123123123', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    })",
        "",
        "    await t.test('pool.query', function (t, end) {",
        "      const { agent, pool } = t.nr",
        "      helper.runInTransaction(agent, function transactionInScope(txn) {",
        "        pool.query('SELECT 1 + 1 AS solution123123123123', function (err) {",
        "          const transaction = agent.getTransaction()",
        "          const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)",
        "",
        "          assert.ok(!err, 'no error occurred')",
        "          assert.ok(transaction, 'transaction should exist')"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 290,
      "line_content": "pool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    })",
        "",
        "    await t.test('pool.query with values', function (t, end) {",
        "      const { agent, pool } = t.nr",
        "      helper.runInTransaction(agent, function transactionInScope(txn) {",
        "        pool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "          const transaction = agent.getTransaction()",
        "          assert.ok(!err)",
        "          assert.ok(transaction, 'should not lose transaction')",
        "          if (transaction) {",
        "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 290,
      "line_content": "pool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    })",
        "",
        "    await t.test('pool.query with values', function (t, end) {",
        "      const { agent, pool } = t.nr",
        "      helper.runInTransaction(agent, function transactionInScope(txn) {",
        "        pool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "          const transaction = agent.getTransaction()",
        "          assert.ok(!err)",
        "          assert.ok(transaction, 'should not lose transaction')",
        "          if (transaction) {",
        "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 318,
      "line_content": "connection.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "          assert.ok(agent.getTransaction(), 'transaction should exit')",
        "          t.after(function () {",
        "            connection.release()",
        "          })",
        "",
        "          connection.query('SELECT 1 + 1 AS solution', function (err) {",
        "            const transaction = agent.getTransaction()",
        "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)",
        "",
        "            assert.ok(!err, 'no error occurred')",
        "            assert.ok(transaction, 'transaction should exist')"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 318,
      "line_content": "connection.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "          assert.ok(agent.getTransaction(), 'transaction should exit')",
        "          t.after(function () {",
        "            connection.release()",
        "          })",
        "",
        "          connection.query('SELECT 1 + 1 AS solution', function (err) {",
        "            const transaction = agent.getTransaction()",
        "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)",
        "",
        "            assert.ok(!err, 'no error occurred')",
        "            assert.ok(transaction, 'transaction should exist')"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 345,
      "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "          assert.ok(agent.getTransaction(), 'transaction should exit')",
        "          t.after(function () {",
        "            connection.release()",
        "          })",
        "",
        "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "            const transaction = agent.getTransaction()",
        "            assert.ok(!err)",
        "            assert.ok(transaction, 'should not lose transaction')",
        "            if (transaction) {",
        "              const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 345,
      "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "          assert.ok(agent.getTransaction(), 'transaction should exit')",
        "          t.after(function () {",
        "            connection.release()",
        "          })",
        "",
        "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "            const transaction = agent.getTransaction()",
        "            assert.ok(!err)",
        "            assert.ok(transaction, 'should not lose transaction')",
        "            if (transaction) {",
        "              const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 375,
      "line_content": "socketPool.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        const socketConfig = getConfig({",
        "          socketPath",
        "        })",
        "        const socketPool = mysql.createPool(socketConfig)",
        "        helper.runInTransaction(agent, function transactionInScope(txn) {",
        "          socketPool.query('SELECT 1 + 1 AS solution', function (err) {",
        "            assert.ok(!err, 'should not error making query')",
        "",
        "            const seg = getDatastoreSegment({",
        "              trace: txn.trace,",
        "              segment: agent.tracer.getSegment()"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 375,
      "line_content": "socketPool.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        const socketConfig = getConfig({",
        "          socketPath",
        "        })",
        "        const socketPool = mysql.createPool(socketConfig)",
        "        helper.runInTransaction(agent, function transactionInScope(txn) {",
        "          socketPool.query('SELECT 1 + 1 AS solution', function (err) {",
        "            assert.ok(!err, 'should not error making query')",
        "",
        "            const seg = getDatastoreSegment({",
        "              trace: txn.trace,",
        "              segment: agent.tracer.getSegment()"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 428,
      "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "      const { agent, poolCluster } = t.nr",
        "      poolCluster.getConnection(function (err, connection) {",
        "        assert.ok(!err, 'should not be an error')",
        "        assert.ok(!agent.getTransaction(), 'transaction should not exist')",
        "",
        "        connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "          assert.ok(!err)",
        "          assert.ok(!agent.getTransaction(), 'transaction should not exist')",
        "",
        "          connection.release()",
        "          end()"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 428,
      "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "      const { agent, poolCluster } = t.nr",
        "      poolCluster.getConnection(function (err, connection) {",
        "        assert.ok(!err, 'should not be an error')",
        "        assert.ok(!agent.getTransaction(), 'transaction should not exist')",
        "",
        "        connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "          assert.ok(!err)",
        "          assert.ok(!agent.getTransaction(), 'transaction should not exist')",
        "",
        "          connection.release()",
        "          end()"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 459,
      "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "      const { agent, poolCluster } = t.nr",
        "      poolCluster.getConnection(function (err, connection) {",
        "        assert.ok(!err, 'should not have error')",
        "",
        "        helper.runInTransaction(agent, function (txn) {",
        "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "            assert.ok(!err, 'no error occurred')",
        "            const transaction = agent.getTransaction()",
        "            assert.ok(transaction, 'transaction should exist')",
        "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
        "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 459,
      "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "      const { agent, poolCluster } = t.nr",
        "      poolCluster.getConnection(function (err, connection) {",
        "        assert.ok(!err, 'should not have error')",
        "",
        "        helper.runInTransaction(agent, function (txn) {",
        "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "            assert.ok(!err, 'no error occurred')",
        "            const transaction = agent.getTransaction()",
        "            assert.ok(transaction, 'transaction should exist')",
        "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
        "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 498,
      "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    await t.test('get MASTER connection', function (t, end) {",
        "      const { agent, poolCluster } = t.nr",
        "      poolCluster.getConnection('MASTER', function (err, connection) {",
        "        assert.ifError(err)",
        "        helper.runInTransaction(agent, function (txn) {",
        "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "            assert.ok(!err, 'no error occurred')",
        "            const transaction = agent.getTransaction()",
        "            assert.ok(transaction, 'transaction should exist')",
        "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
        "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 498,
      "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    await t.test('get MASTER connection', function (t, end) {",
        "      const { agent, poolCluster } = t.nr",
        "      poolCluster.getConnection('MASTER', function (err, connection) {",
        "        assert.ifError(err)",
        "        helper.runInTransaction(agent, function (txn) {",
        "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "            assert.ok(!err, 'no error occurred')",
        "            const transaction = agent.getTransaction()",
        "            assert.ok(transaction, 'transaction should exist')",
        "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
        "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 537,
      "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    await t.test('get glob', function (t, end) {",
        "      const { agent, poolCluster } = t.nr",
        "      poolCluster.getConnection('REPLICA*', 'ORDER', function (err, connection) {",
        "        assert.ifError(err)",
        "        helper.runInTransaction(agent, function (txn) {",
        "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "            assert.ok(!err, 'no error occurred')",
        "            const transaction = agent.getTransaction()",
        "            assert.ok(transaction, 'transaction should exist')",
        "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
        "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 537,
      "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    await t.test('get glob', function (t, end) {",
        "      const { agent, poolCluster } = t.nr",
        "      poolCluster.getConnection('REPLICA*', 'ORDER', function (err, connection) {",
        "        assert.ifError(err)",
        "        helper.runInTransaction(agent, function (txn) {",
        "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "            assert.ok(!err, 'no error occurred')",
        "            const transaction = agent.getTransaction()",
        "            assert.ok(transaction, 'transaction should exist')",
        "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
        "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 575,
      "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    await t.test('get star', function (t, end) {",
        "      const { agent, poolCluster } = t.nr",
        "      poolCluster.of('*').getConnection(function (err, connection) {",
        "        assert.ifError(err)",
        "        helper.runInTransaction(agent, function (txn) {",
        "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "            assert.ok(!err, 'no error occurred')",
        "            const transaction = agent.getTransaction()",
        "            assert.ok(transaction, 'transaction should exist')",
        "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
        "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 575,
      "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    await t.test('get star', function (t, end) {",
        "      const { agent, poolCluster } = t.nr",
        "      poolCluster.of('*').getConnection(function (err, connection) {",
        "        assert.ifError(err)",
        "        helper.runInTransaction(agent, function (txn) {",
        "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "            assert.ok(!err, 'no error occurred')",
        "            const transaction = agent.getTransaction()",
        "            assert.ok(transaction, 'transaction should exist')",
        "            assert.equal(transaction.id, txn.id, 'transaction must be same')",
        "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 615,
      "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "      const { agent, poolCluster } = t.nr",
        "      const pool = poolCluster.of('REPLICA*', 'RANDOM')",
        "      pool.getConnection(function (err, connection) {",
        "        assert.ifError(err)",
        "        helper.runInTransaction(agent, function (txn) {",
        "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "            assert.ok(!err, 'no error occurred')",
        "            const currentTransaction = agent.getTransaction()",
        "            assert.ok(currentTransaction, 'transaction should exist')",
        "            assert.equal(currentTransaction.id, txn.id, 'transaction must be same')",
        "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 615,
      "line_content": "connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "      const { agent, poolCluster } = t.nr",
        "      const pool = poolCluster.of('REPLICA*', 'RANDOM')",
        "      pool.getConnection(function (err, connection) {",
        "        assert.ifError(err)",
        "        helper.runInTransaction(agent, function (txn) {",
        "          connection.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "            assert.ok(!err, 'no error occurred')",
        "            const currentTransaction = agent.getTransaction()",
        "            assert.ok(currentTransaction, 'transaction should exist')",
        "            assert.equal(currentTransaction.id, txn.id, 'transaction must be same')",
        "            const segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 642,
      "line_content": "replicaPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "      await t.test('poolCluster query', function (t, end) {",
        "        const { agent, poolCluster } = t.nr",
        "        const masterPool = poolCluster.of('MASTER', 'RANDOM')",
        "        const replicaPool = poolCluster.of('REPLICA', 'RANDOM')",
        "        helper.runInTransaction(agent, function (txn) {",
        "          replicaPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "            let transaction = agent.getTransaction()",
        "            assert.ok(transaction, 'transaction should exist')",
        "            assert.equal(transaction, txn, 'transaction must be same')",
        "",
        "            let segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 642,
      "line_content": "replicaPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "      await t.test('poolCluster query', function (t, end) {",
        "        const { agent, poolCluster } = t.nr",
        "        const masterPool = poolCluster.of('MASTER', 'RANDOM')",
        "        const replicaPool = poolCluster.of('REPLICA', 'RANDOM')",
        "        helper.runInTransaction(agent, function (txn) {",
        "          replicaPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "            let transaction = agent.getTransaction()",
        "            assert.ok(transaction, 'transaction should exist')",
        "            assert.equal(transaction, txn, 'transaction must be same')",
        "",
        "            let segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 662,
      "line_content": "masterPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "            assert.ok(segment, 'segment should exist')",
        "            assert.ok(segment.timer.start > 0, 'starts at a positive time')",
        "            assert.ok(segment.timer.start <= Date.now(), 'starts in past')",
        "            assert.equal(segment.name, 'Datastore/statement/MySQL/unknown/select', 'is named')",
        "",
        "            masterPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "              transaction = agent.getTransaction()",
        "              assert.ok(transaction, 'transaction should exist')",
        "              assert.equal(transaction, txn, 'transaction must be same')",
        "",
        "              segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic-pool.js",
      "line_number": 662,
      "line_content": "masterPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "            assert.ok(segment, 'segment should exist')",
        "            assert.ok(segment.timer.start > 0, 'starts at a positive time')",
        "            assert.ok(segment.timer.start <= Date.now(), 'starts in past')",
        "            assert.equal(segment.name, 'Datastore/statement/MySQL/unknown/select', 'is named')",
        "",
        "            masterPool.query('SELECT ? + ? AS solution', [1, 1], function (err) {",
        "              transaction = agent.getTransaction()",
        "              assert.ok(transaction, 'transaction should exist')",
        "              assert.equal(transaction, txn, 'transaction must be same')",
        "",
        "              segment = txn.trace.getParent(agent.tracer.getSegment().parentId)"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic.js",
      "line_number": 156,
      "line_content": "client.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "            assert.ok(!err, 'should not fail to create database')",
        "",
        "            client.query('use test_db;', function (err) {",
        "              assert.ok(!err, 'should not fail to set database')",
        "",
        "              client.query('SELECT 1 + 1 AS solution', function (err) {",
        "                const seg = tx.trace.getParent(agent.tracer.getSegment().parentId)",
        "                const attributes = seg.getAttributes()",
        "",
        "                assert.ok(!err, 'no errors')",
        "                assert.ok(seg, 'there is a segment')"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic.js",
      "line_number": 156,
      "line_content": "client.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "            assert.ok(!err, 'should not fail to create database')",
        "",
        "            client.query('use test_db;', function (err) {",
        "              assert.ok(!err, 'should not fail to set database')",
        "",
        "              client.query('SELECT 1 + 1 AS solution', function (err) {",
        "                const seg = tx.trace.getParent(agent.tracer.getSegment().parentId)",
        "                const attributes = seg.getAttributes()",
        "",
        "                assert.ok(!err, 'no errors')",
        "                assert.ok(seg, 'there is a segment')"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic.js",
      "line_number": 375,
      "line_content": "client.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "          assert.ok(!err)",
        "          client.query('create database if not exists test_db;', function (err) {",
        "            assert.ok(!err)",
        "            client.query('use test_db;', function (err) {",
        "              assert.ok(!err)",
        "              client.query('SELECT 1 + 1 AS solution', function (err) {",
        "                const seg = txn.trace.getParent(agent.tracer.getSegment().parentId)",
        "                const attributes = seg.getAttributes()",
        "                assert.ok(!err)",
        "                assert.ok(seg, 'should have a segment')",
        "                assert.equal("
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/basic.js",
      "line_number": 375,
      "line_content": "client.query('SELECT 1 + 1 AS solution', function (err) {",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "          assert.ok(!err)",
        "          client.query('create database if not exists test_db;', function (err) {",
        "            assert.ok(!err)",
        "            client.query('use test_db;', function (err) {",
        "              assert.ok(!err)",
        "              client.query('SELECT 1 + 1 AS solution', function (err) {",
        "                const seg = txn.trace.getParent(agent.tracer.getSegment().parentId)",
        "                const attributes = seg.getAttributes()",
        "                assert.ok(!err)",
        "                assert.ok(seg, 'should have a segment')",
        "                assert.equal("
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/utils.js",
      "line_number": 34,
      "line_content": "const query = 'SELECT *' + '  FROM ' + database + '.' + table + ' WHERE id = ?'",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "  getClient(pool, (err, client) => {",
        "    if (err) {",
        "      return callback(err)",
        "    }",
        "",
        "    const query = 'SELECT *' + '  FROM ' + database + '.' + table + ' WHERE id = ?'",
        "    client.query(query, [params.id], function (err, results) {",
        "      pool.release(client) // always release back to the pool",
        "",
        "      if (err) {",
        "        return callback(err)"
      ],
      "confidence": 0.7,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/mysql/utils.js",
      "line_number": 34,
      "line_content": "const query = 'SELECT *' + '  FROM ' + database + '.' + table + ' WHERE id = ?'",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "  getClient(pool, (err, client) => {",
        "    if (err) {",
        "      return callback(err)",
        "    }",
        "",
        "    const query = 'SELECT *' + '  FROM ' + database + '.' + table + ' WHERE id = ?'",
        "    client.query(query, [params.id], function (err, results) {",
        "      pool.release(client) // always release back to the pool",
        "",
        "      if (err) {",
        "        return callback(err)"
      ],
      "confidence": 0.7,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/nextjs/helpers.js",
      "line_number": 31,
      "line_content": "exec(",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        " * @returns {Promise}",
        " *",
        " */",
        "helpers.build = function build(dir, path = 'app') {",
        "  return new Promise((resolve, reject) => {",
        "    exec(",
        "      `./node_modules/.bin/next build ${path}`,",
        "      {",
        "        cwd: dir",
        "      },",
        "      function cb(err, data) {"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/versioned/nestjs/setup.js",
      "line_number": 35,
      "line_content": "await exec('npx nest build', { cwd: APP_DIR })",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "  for (const fname of ['main.ts', 'app.controller.ts']) {",
        "    await fsPromises.copyFile(`${PATCH_DIR}/${fname}`, `${APP_DIR}/src/${fname}`)",
        "  }",
        "  // Turn the typescript into commmonjs, so we can instrument it with",
        "  // the mocked agent.",
        "  await exec('npx nest build', { cwd: APP_DIR })",
        "}",
        "",
        "async function deleteNestApp() {",
        "  await fsPromises.rm(APP_DIR, { recursive: true })",
        "}"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/lib/test-collector.js",
      "line_number": 52,
      "line_content": "const qs = querystring.decode(req.url.slice(req.url.indexOf('?') + 1))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    this.#server = https.createServer({",
        "      key: this.#cert.privateKey,",
        "      cert: this.#cert.certificate",
        "    })",
        "    this.#server.on('request', (req, res) => {",
        "      const qs = querystring.decode(req.url.slice(req.url.indexOf('?') + 1))",
        "      const handler = this.#handlers.get(qs.method)",
        "      if (typeof handler !== 'function') {",
        "        res.writeHead(500)",
        "        return res.end('handler not found: ' + req.url)",
        "      }"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/lib/test-collector.js",
      "line_number": 245,
      "line_content": "const qs = querystring.decode(endpoint.slice(endpoint.indexOf('?') + 1))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "   * method for easily sending JSON responses. Also, `req` is extended with",
        "   * a `body()` method that returns a promise which resolves to the string",
        "   * data supplied via POST-like requests.",
        "   */",
        "  addHandler(endpoint, handler) {",
        "    const qs = querystring.decode(endpoint.slice(endpoint.indexOf('?') + 1))",
        "    this.#handlers.set(qs.method, handler)",
        "  }",
        "",
        "  /**",
        "   * Shutdown the server and forcefully close all current connections."
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/lib/aws-server-stubs/ai-server/index.js",
      "line_number": 78,
      "line_content": "const [, model] = /model\\/(.+)\\/invoke/.exec(req.url)",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "      return",
        "    }",
        "",
        "    // Available  model identifiers are listed at:",
        "    // https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids-arns.html",
        "    const [, model] = /model\\/(.+)\\/invoke/.exec(req.url)",
        "    let response",
        "    switch (decodeURIComponent(model)) {",
        "      case 'amazon.titan-text-express-v1':",
        "      case 'amazon.titan-embed-text-v1': {",
        "        response = responses.amazon.get(payload.inputText)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/lib/cross_agent_tests/sql_obfuscation/sql_obfuscation.json",
      "line_number": 163,
      "line_content": "\"sql\": \"INSERT INTO X VALUES(1, 23456, 123.456, 99+100)\",",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    ],",
        "    \"sql\": \"SELECT c11.col1, c22.col2 FROM table c11, table c22 WHERE value='nothing'\"",
        "  },",
        "  {",
        "    \"name\": \"numeric_literals\",",
        "    \"sql\": \"INSERT INTO X VALUES(1, 23456, 123.456, 99+100)\",",
        "    \"obfuscated\": [",
        "      \"INSERT INTO X VALUES(?, ?, ?, ?+?)\",",
        "      \"INSERT INTO X VALUES(?, ?, ?.?, ?+?)\"",
        "    ],",
        "    \"dialects\": ["
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/lib/cross_agent_tests/sql_obfuscation/sql_obfuscation.json",
      "line_number": 165,
      "line_content": "\"INSERT INTO X VALUES(?, ?, ?, ?+?)\",",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "  },",
        "  {",
        "    \"name\": \"numeric_literals\",",
        "    \"sql\": \"INSERT INTO X VALUES(1, 23456, 123.456, 99+100)\",",
        "    \"obfuscated\": [",
        "      \"INSERT INTO X VALUES(?, ?, ?, ?+?)\",",
        "      \"INSERT INTO X VALUES(?, ?, ?.?, ?+?)\"",
        "    ],",
        "    \"dialects\": [",
        "      \"mssql\",",
        "      \"mysql\","
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/lib/cross_agent_tests/sql_obfuscation/sql_obfuscation.json",
      "line_number": 166,
      "line_content": "\"INSERT INTO X VALUES(?, ?, ?.?, ?+?)\"",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "  {",
        "    \"name\": \"numeric_literals\",",
        "    \"sql\": \"INSERT INTO X VALUES(1, 23456, 123.456, 99+100)\",",
        "    \"obfuscated\": [",
        "      \"INSERT INTO X VALUES(?, ?, ?, ?+?)\",",
        "      \"INSERT INTO X VALUES(?, ?, ?.?, ?+?)\"",
        "    ],",
        "    \"dialects\": [",
        "      \"mssql\",",
        "      \"mysql\",",
        "      \"postgres\","
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "test/lib/cross_agent_tests/sql_obfuscation/sql_obfuscation.json",
      "line_number": 492,
      "line_content": "\"sql\": \"select * from users where user = 'user1\\\\' password = 'hunter 2' -- ->don't count this quote\",",
      "category": "Hardcoded Credentials",
      "severity": "CRITICAL",
      "cwe": "CWE-798",
      "description": "Hardcoded API key or credential in agent code",
      "context": [
        "      \"sqlite\"",
        "    ]",
        "  },",
        "  {",
        "    \"name\": \"end_of_string_backslash_and_line_comment_with_quite\",",
        "    \"sql\": \"select * from users where user = 'user1\\\\' password = 'hunter 2' -- ->don't count this quote\",",
        "    \"obfuscated\": [",
        "      \"select * from users where user = ?\"",
        "    ],",
        "    \"dialects\": [",
        "      \"mysql\","
      ],
      "confidence": 0.9,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "bin/create-github-release.js",
      "line_number": 57,
      "line_content": "if (!options.force && !TAG_VALID_REGEX.exec(tagName)) {",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "    logStep('Validation')",
        "    if (options.force) {",
        "      console.log('--force set. Skipping validation logic')",
        "    }",
        "",
        "    if (!options.force && !TAG_VALID_REGEX.exec(tagName)) {",
        "      console.log('Tag arg invalid (%s). Valid tags in form: v#.#.# (e.g. v7.2.1)', tagName)",
        "      stopOnError()",
        "    }",
        "",
        "    logStep('Get Release Notes from File')"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "bin/create-docs-pr.js",
      "line_number": 119,
      "line_content": "if (!TAG_VALID_REGEX.exec(version)) {",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "  if (force) {",
        "    console.log('--force set. Skipping validation logic')",
        "    return",
        "  }",
        "",
        "  if (!TAG_VALID_REGEX.exec(version)) {",
        "    console.log('Tag arg invalid (%s). Valid tags in form: v#.#.# (e.g. v7.2.1)', version)",
        "    stopOnError()",
        "  }",
        "}",
        ""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "bin/create-docs-pr.js",
      "line_number": 142,
      "line_content": "const [, releaseDate] = headingRegex.exec(versionChangeLog)",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "  // Iterate over all past releases to find the version we want",
        "  const versionChangeLog = sections.find((section) => section.startsWith(version))",
        "  // e.g. v7.1.2 (2021-02-24)\\n\\n",
        "  const headingRegex = /^v\\d+\\.\\d+\\.\\d+ \\((\\d{4}-\\d{2}-\\d{2})\\)\\s+/",
        "  const body = versionChangeLog.replace(headingRegex, '') + SUPPORT_STATEMENT",
        "  const [, releaseDate] = headingRegex.exec(versionChangeLog)",
        "",
        "  return { body, releaseDate }",
        "}",
        "",
        "/**"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "bin/git-commands.js",
      "line_number": 128,
      "line_content": "exec(command, (err, stdout) => {",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "function execAsPromise(command) {",
        "  return new Promise((resolve, reject) => {",
        "    console.log(`Executing: '${command}'`)",
        "",
        "    // eslint-disable-next-line sonarjs/os-command",
        "    exec(command, (err, stdout) => {",
        "      if (err) {",
        "        reject(err)",
        "      }",
        "",
        "      resolve(stdout)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "bin/npm-commands.js",
      "line_number": 23,
      "line_content": "exec(command, (err, stdout) => {",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "function execAsPromise(command) {",
        "  return new Promise((resolve, reject) => {",
        "    console.log(`Executing: '${command}'`)",
        "",
        "    // eslint-disable-next-line sonarjs/os-command",
        "    exec(command, (err, stdout) => {",
        "      if (err) {",
        "        return reject(err)",
        "      }",
        "",
        "      return resolve(stdout)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/transaction/index.js",
      "line_number": 67,
      "line_content": "'insertDistributedTraceHeaders called on headers object that already contains ' +",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "const TRACE_CONTEXT_PARENT_HEADER = 'traceparent'",
        "const TRACE_CONTEXT_STATE_HEADER = 'tracestate'",
        "const NEWRELIC_TRACE_HEADER = 'newrelic'",
        "",
        "const MULTIPLE_INSERT_MESSAGE =",
        "  'insertDistributedTraceHeaders called on headers object that already contains ' +",
        "  \"distributed trace data. These may be overwritten. traceparent? '%s', newrelic? '%s'.\"",
        "",
        "/**",
        " * Bundle together the metrics and the trace segment for a single agent",
        " * transaction."
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/util/hashes.js",
      "line_number": 50,
      "line_content": "const md5sum = crypto.createHash('md5')",
      "category": "Weak Cryptography",
      "severity": "MEDIUM",
      "cwe": "CWE-327",
      "description": "Weak cryptographic algorithm detected",
      "context": [
        "  return str.substring(str.length - 8)",
        "}",
        "",
        "function getHash(appName, txName) {",
        "  // eslint-disable-next-line sonarjs/hashing",
        "  const md5sum = crypto.createHash('md5')",
        "  md5sum.update(appName + ';' + txName, 'utf8')",
        "  let buf = md5sum.digest()",
        "  if (!(buf instanceof Buffer)) {",
        "    buf = Buffer.from(buf)",
        "  }"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/collector/key-parser.js",
      "line_number": 9,
      "line_content": "const regionMatch = /^(.+?)x/.exec(licenseKey)",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        " */",
        "",
        "'use strict'",
        "",
        "module.exports.parseKey = function parseKey(licenseKey) {",
        "  const regionMatch = /^(.+?)x/.exec(licenseKey)",
        "  return regionMatch && regionMatch[1]",
        "}"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/otel/trace-propagator.js",
      "line_number": 37,
      "line_content": "const match = TRACE_PARENT_REGEX.exec(traceParent)",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        " *     (01 = sampled, 00 = not sampled).",
        " *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'",
        " *     For more information see {@link https://www.w3.org/TR/trace-context/}",
        " */",
        "function parseTraceParent(traceParent) {",
        "  const match = TRACE_PARENT_REGEX.exec(traceParent)",
        "  if (!match) return null",
        "",
        "  // According to the specification the implementation should be compatible",
        "  // with future versions. If there are more parts, we only reject it if it's using version 00",
        "  // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/instrumentation/core/child_process.js",
      "line_number": 20,
      "line_content": "shim.record(childProcess, methods, function recordExec(shim, fn, name) {",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "    return false",
        "  }",
        "",
        "  const methods = ['exec', 'execFile']",
        "",
        "  shim.record(childProcess, methods, function recordExec(shim, fn, name) {",
        "    return new RecorderSpec({ name: 'child_process.' + name, callback: shim.LAST })",
        "  })",
        "",
        "  if (childProcess.ChildProcess) {",
        "    wrapChildProcessClass(shim, childProcess.ChildProcess)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/instrumentation/aws-sdk/v3/sqs.js",
      "line_number": 66,
      "line_content": "const matches = urlReg.exec(queueUrl)",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "  })",
        "}",
        "",
        "const urlReg = /\\/\\/sqs\\.(?<region>[\\w-]+)\\.amazonaws\\.com(:\\d+)?\\/(?<accountId>\\d+)\\/(?<queue>.+)$/",
        "function urlComponents(queueUrl) {",
        "  const matches = urlReg.exec(queueUrl)",
        "  if (matches?.groups) {",
        "    return matches.groups",
        "  }",
        "  return { region: undefined, accountId: undefined, queue: undefined }",
        "}"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/utilization/docker-info.js",
      "line_number": 157,
      "line_content": "const line = containerLine.exec(data)",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        " * @param {Function} callback function to call when done",
        " * @param {object} [logger] internal logger instance",
        " */",
        "function parseCGroupsV2(data, callback, logger = log) {",
        "  const containerLine = /\\/docker\\/containers\\/([0-9a-f]{64})\\//",
        "  const line = containerLine.exec(data)",
        "  if (line) {",
        "    logger.debug({ utilization: 'docker' }, `Found docker id from cgroups v2: ${line[1]}`)",
        "    callback(null, { id: line[1] })",
        "  } else {",
        "    logger.debug({ utilization: 'docker' }, `Found ${CGROUPS_V2_PATH} but failed to parse Docker container id.`)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/utilization/docker-info.js",
      "line_number": 183,
      "line_content": "const match = /(?:^|[^0-9a-f])([0-9a-f]{64})(?:[^0-9a-f]|$)/.exec(cpuGroup)",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "      return callback(null)",
        "    }",
        "",
        "    let id = null",
        "    parseCGroupsV1(data, 'cpu', function forEachCpuGroup(cpuGroup) {",
        "      const match = /(?:^|[^0-9a-f])([0-9a-f]{64})(?:[^0-9a-f]|$)/.exec(cpuGroup)",
        "      if (match) {",
        "        id = match[1]",
        "        return false",
        "      }",
        ""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/db/statement-matcher.js",
      "line_number": 24,
      "line_content": "const queryMatch = this.operationPattern.exec(sql)",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "  this.operationPattern.lastIndex = 0",
        "  this.matcher.lastIndex = 0",
        "  CLEANER.lastIndex = 0",
        "",
        "  if (this.matcher.test(sql)) {",
        "    const queryMatch = this.operationPattern.exec(sql)",
        "    let collection = queryMatch ? queryMatch[1] : 'unknown'",
        "    let database = null",
        "",
        "    // If the cleaner can match this collection, pull out the cleaned up names",
        "    // from there. The spec doesn't want the database names in the collection"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/db/statement-matcher.js",
      "line_number": 33,
      "line_content": "const cleanerMatch = CLEANER.exec(collection)",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "    // If the cleaner can match this collection, pull out the cleaned up names",
        "    // from there. The spec doesn't want the database names in the collection",
        "    // name, but for legacy reasons we keep it.",
        "    // TODO: Either update the spec (and CATs) to accept database name in the",
        "    // collection name or remove it here.",
        "    const cleanerMatch = CLEANER.exec(collection)",
        "    if (cleanerMatch && cleanerMatch[4]) {",
        "      collection = cleanerMatch[4]",
        "      if (cleanerMatch[2]) {",
        "        database = cleanerMatch[2]",
        "        collection = database + '.' + collection"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/db/utils.js",
      "line_number": 17,
      "line_content": "const match = /^\\s*use[^\\w`]+([\\w$\\u0080-\\uFFFF]+|`[^`]+`)[\\s;]*$/i.exec(sql)",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "  // http://dev.mysql.com/doc/refman/5.7/en/identifiers.html",
        "",
        "  // The lint rule being suppressed here has been evaluated, and it has been",
        "  // determined that the regular expression is sufficient for our use case.",
        "  // eslint-disable-next-line sonarjs/slow-regex",
        "  const match = /^\\s*use[^\\w`]+([\\w$\\u0080-\\uFFFF]+|`[^`]+`)[\\s;]*$/i.exec(sql)",
        "  return (match && match[1]) || null",
        "}"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/db/query-parsers/sql.js",
      "line_number": 16,
      "line_content": "/^[^\\S]*?select\\b[\\s\\S]+?\\bfrom[\\s\\n\\r\\[\\(]+([^\\]\\s\\n\\r,)(;]*)/gim",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "",
        "/* eslint-disable no-useless-escape, sonarjs/slow-regex, sonarjs/duplicates-in-character-class */",
        "const OPERATIONS = [",
        "  new StatementMatcher(",
        "    'select',",
        "    /^[^\\S]*?select\\b[\\s\\S]+?\\bfrom[\\s\\n\\r\\[\\(]+([^\\]\\s\\n\\r,)(;]*)/gim",
        "  ),",
        "  new StatementMatcher('update', /^[^\\S]*?update[^\\S]+?([^\\s\\n\\r,;]+)/gim),",
        "  new StatementMatcher(",
        "    'insert',",
        "    /^[^\\S]*?insert(?:[^\\S]+ignore)?[^\\S]+into[^\\S]+([^\\s\\n\\r(,;]+)/gim"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/db/query-parsers/sql.js",
      "line_number": 21,
      "line_content": "/^[^\\S]*?insert(?:[^\\S]+ignore)?[^\\S]+into[^\\S]+([^\\s\\n\\r(,;]+)/gim",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    /^[^\\S]*?select\\b[\\s\\S]+?\\bfrom[\\s\\n\\r\\[\\(]+([^\\]\\s\\n\\r,)(;]*)/gim",
        "  ),",
        "  new StatementMatcher('update', /^[^\\S]*?update[^\\S]+?([^\\s\\n\\r,;]+)/gim),",
        "  new StatementMatcher(",
        "    'insert',",
        "    /^[^\\S]*?insert(?:[^\\S]+ignore)?[^\\S]+into[^\\S]+([^\\s\\n\\r(,;]+)/gim",
        "  ),",
        "  new StatementMatcher('delete', /^[^\\S]*?delete[^\\S]+?from[^\\S]+([^\\s\\n\\r,(;]+)/gim)",
        "]",
        "const COMMENT_PATTERN = /\\/\\\\*.*?\\\\*\\//g",
        "/* eslint-enable no-useless-escape, sonarjs/slow-regex, sonarjs/duplicates-in-character-class */"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/shim/webframework-shim/middleware.js",
      "line_number": 180,
      "line_content": "after: function afterExec({ shim, error }) {",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "      name: segmentName,",
        "      callback: nextWrapper,",
        "      parent: txInfo.segmentStack[txInfo.segmentStack.length - 1],",
        "      recorder,",
        "      parameters: params,",
        "      after: function afterExec({ shim, error }) {",
        "        const errIsError = isError(shim, error)",
        "        if (errIsError) {",
        "          assignError(txInfo, error)",
        "        } else if (!nextWrapper && !isErrorWare && spec.appendPath) {",
        "          txInfo.transaction.nameState.popPath(route)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "lib/shim/webframework-shim/middleware.js",
      "line_number": 247,
      "line_content": "after: function afterExec({ shim, error, result }) {",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "      parent: txInfo.segmentStack[txInfo.segmentStack.length - 1],",
        "      promise: spec.promise,",
        "      callback: nextWrapper,",
        "      recorder,",
        "      parameters: params,",
        "      after: function afterExec({ shim, error, result }) {",
        "        if (shim._responsePredicate(args, result)) {",
        "          txInfo.transaction.nameState.freeze()",
        "        }",
        "        if (isError(shim, error)) {",
        "          assignError(txInfo, error)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    }
  ]
}