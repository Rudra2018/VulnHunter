{
  "scan_date": "2025-10-06T20:10:58.957547",
  "agent_name": "python",
  "repository": "newrelic-python-agent",
  "total_vulnerabilities": 100,
  "default_config_vulnerabilities": 15,
  "statistics": {
    "files_scanned": 1016,
    "lines_scanned": 184113,
    "vulnerabilities_found": 100,
    "excluded_files": 303,
    "low_confidence_excluded": 6
  },
  "by_category": {
    "SQL Injection": [
      {
        "file": "tests/datastore_psycopg2/test_multiple_dbs.py",
        "line_number": 91,
        "line_content": "cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        host=postgresql1[\"host\"],",
          "        port=postgresql1[\"port\"],",
          "    )",
          "    try:",
          "        cursor = connection.cursor()",
          "        cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
          "        connection.commit()",
          "    finally:",
          "        connection.close()",
          "",
          "    connection = psycopg2.connect("
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_psycopg2/test_async.py",
        "line_number": 102,
        "line_content": "async_cur.execute(f\"insert into {DB_SETTINGS['table_name']} values (%s, %s, %s)\", (1, 1.0, \"1.0\"))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    wait(async_cur.connection)",
          "",
          "    async_cur.execute(f\"create table {DB_SETTINGS['table_name']} (a integer, b real, c text)\")",
          "    wait(async_cur.connection)",
          "",
          "    async_cur.execute(f\"insert into {DB_SETTINGS['table_name']} values (%s, %s, %s)\", (1, 1.0, \"1.0\"))",
          "    wait(async_cur.connection)",
          "",
          "    async_cur.execute(f\"\"\"select * from {DB_SETTINGS[\"table_name\"]}\"\"\")",
          "    wait(async_cur.connection)",
          ""
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_psycopg2/test_trace_node.py",
        "line_number": 63,
        "line_content": "cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        port=DB_SETTINGS[\"port\"],",
          "    )",
          "",
          "    try:",
          "        cursor = connection.cursor()",
          "        cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
          "    finally:",
          "        connection.close()",
          "",
          "",
          "# Tests"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_psycopg2/test_explain_plans.py",
        "line_number": 76,
        "line_content": "cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    try:",
          "        cursor = connection.cursor(**cursor_kwargs)",
          "        if hasattr(cursor, \"ready\"):",
          "            cursor.ready = True",
          "",
          "        cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
          "    finally:",
          "        connection.close()",
          "",
          "",
          "# Tests"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_psycopg2/test_slow_sql.py",
        "line_number": 73,
        "line_content": "cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        port=DB_SETTINGS[\"port\"],",
          "    )",
          "",
          "    try:",
          "        cursor = connection.cursor()",
          "        cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
          "    finally:",
          "        connection.close()",
          "",
          "",
          "# Tests"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_psycopg2/test_span_event.py",
        "line_number": 52,
        "line_content": "cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        port=DB_SETTINGS[\"port\"],",
          "    )",
          "",
          "    try:",
          "        cursor = connection.cursor()",
          "        cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
          "",
          "        # No target",
          "        cursor.execute(\"SELECT 1\")",
          "    finally:",
          "        connection.close()"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_mysqldb/test_cursor.py",
        "line_number": 100,
        "line_content": "cursor.execute(f\"update `{table_name}` set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "            cursor.execute(f\"\"\"select * from {table_name}\"\"\")",
          "",
          "            for _ in cursor:",
          "                pass",
          "",
          "            cursor.execute(f\"update `{table_name}` set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
          "",
          "            cursor.execute(f\"\"\"delete from `{table_name}` where a=2\"\"\")",
          "",
          "            cursor.execute(\"\"\"show grants\"\"\")",
          ""
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_mysqldb/test_alias.py",
        "line_number": 100,
        "line_content": "cursor.execute(f\"update `{table_name}` set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "            cursor.execute(f\"\"\"select * from {table_name}\"\"\")",
          "",
          "            for _ in cursor:",
          "                pass",
          "",
          "            cursor.execute(f\"update `{table_name}` set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
          "",
          "            cursor.execute(f\"\"\"delete from `{table_name}` where a=2\"\"\")",
          "",
          "            cursor.execute(\"\"\"show grants\"\"\")",
          ""
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_pymssql/test_database.py",
        "line_number": 41,
        "line_content": "cursor.execute(f\"update {TABLE_NAME} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    cursor.execute(f\"\"\"select * from {TABLE_NAME}\"\"\")",
          "",
          "    for _row in cursor:",
          "        pass",
          "",
          "    cursor.execute(f\"update {TABLE_NAME} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
          "",
          "    cursor.execute(f\"\"\"delete from {TABLE_NAME} where a=2\"\"\")",
          "    cursor.execute(f\"\"\"drop procedure if exists {PROCEDURE_NAME}\"\"\")",
          "    cursor.execute(",
          "        f\"\"\"CREATE PROCEDURE {PROCEDURE_NAME} AS"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_postgresql/test_database.py",
        "line_number": 103,
        "line_content": "cursor.execute(f\"update {DB_SETTINGS['table_name']} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "",
          "        cursor.execute(",
          "            f\"with temporaryTable (averageValue) as (select avg(b) from {DB_SETTINGS['table_name']}) select * from {DB_SETTINGS['table_name']},temporaryTable where {DB_SETTINGS['table_name']}.b > temporaryTable.averageValue\"",
          "        )",
          "",
          "        cursor.execute(f\"update {DB_SETTINGS['table_name']} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
          "",
          "        cursor.execute(f\"\"\"delete from {DB_SETTINGS[\"table_name\"]} where a=2\"\"\")",
          "",
          "        connection.commit()",
          ""
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_psycopg2cffi/test_database.py",
        "line_number": 107,
        "line_content": "cursor.execute(f\"update {DB_SETTINGS['table_name']} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        cursor.execute(f\"\"\"select * from {DB_SETTINGS[\"table_name\"]}\"\"\")",
          "",
          "        for _row in cursor:",
          "            pass",
          "",
          "        cursor.execute(f\"update {DB_SETTINGS['table_name']} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
          "",
          "        cursor.execute(f\"\"\"delete from {DB_SETTINGS[\"table_name\"]} where a=2\"\"\")",
          "",
          "        connection.commit()",
          ""
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_psycopg2cffi/test_database.py",
        "line_number": 220,
        "line_content": "async_cur.execute(f\"insert into {DB_SETTINGS['table_name']} values (%s, %s, %s)\", (1, 1.0, \"1.0\"))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    wait(async_cur.connection)",
          "",
          "    async_cur.execute(f\"create table {DB_SETTINGS['table_name']} (a integer, b real, c text)\")",
          "    wait(async_cur.connection)",
          "",
          "    async_cur.execute(f\"insert into {DB_SETTINGS['table_name']} values (%s, %s, %s)\", (1, 1.0, \"1.0\"))",
          "    wait(async_cur.connection)",
          "",
          "    async_cur.execute(f\"\"\"select * from {DB_SETTINGS[\"table_name\"]}\"\"\")",
          "    wait(async_cur.connection)",
          ""
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_psycopg2cffi/test_explain_plans.py",
        "line_number": 44,
        "line_content": "cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    )",
          "",
          "    try:",
          "        cursor = connection.cursor(**cursor_kwargs)",
          "",
          "        cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
          "    finally:",
          "        connection.close()",
          "",
          "",
          "# Tests"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_pymysql/test_database.py",
        "line_number": 45,
        "line_content": "cursor.execute(f\"update {TABLE_NAME} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    cursor.execute(f\"\"\"select * from {TABLE_NAME}\"\"\")",
          "",
          "    for _row in cursor:",
          "        pass",
          "",
          "    cursor.execute(f\"update {TABLE_NAME} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
          "",
          "    cursor.execute(f\"\"\"delete from {TABLE_NAME} where a=2\"\"\")",
          "    cursor.execute(f\"\"\"drop procedure if exists {PROCEDURE_NAME}\"\"\")",
          "    cursor.execute(",
          "        f\"\"\"CREATE PROCEDURE {PROCEDURE_NAME}()"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_psycopg/test_multiple_dbs.py",
        "line_number": 77,
        "line_content": "await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "",
          "async def _exercise_db(multiple_connections):",
          "    connection = multiple_connections[0]",
          "    try:",
          "        cursor = connection.cursor()",
          "        await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
          "        await maybe_await(connection.commit())",
          "    finally:",
          "        await maybe_await(connection.close())",
          "",
          "    connection = multiple_connections[1]"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_psycopg/test_trace_node.py",
        "line_number": 68,
        "line_content": "await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        )",
          "    )",
          "",
          "    try:",
          "        cursor = connection.cursor()",
          "        await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
          "    finally:",
          "        await maybe_await(connection.close())",
          "",
          "",
          "# Tests"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_psycopg/test_explain_plans.py",
        "line_number": 74,
        "line_content": "await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    cursor_kwargs = cursor_kwargs or {}",
          "",
          "    try:",
          "        cursor = connection.cursor(**cursor_kwargs)",
          "",
          "        await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
          "    finally:",
          "        await maybe_await(connection.close())",
          "",
          "",
          "# Tests"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_psycopg/test_slow_sql.py",
        "line_number": 64,
        "line_content": "await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "",
          "",
          "async def _exercise_db(connection):",
          "    try:",
          "        cursor = connection.cursor()",
          "        await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
          "    finally:",
          "        await maybe_await(connection.close())",
          "",
          "",
          "# Tests"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_psycopg/test_span_event.py",
        "line_number": 43,
        "line_content": "await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "",
          "",
          "async def _exercise_db(connection):",
          "    try:",
          "        cursor = connection.cursor()",
          "        await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
          "",
          "        # No target",
          "        await maybe_await(cursor.execute(\"SELECT 1\"))",
          "    finally:",
          "        await maybe_await(connection.close())"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/component_graphqlserver/test_graphql.py",
        "line_number": 81,
        "line_content": "\"query/<anonymous>/hello\", \"GraphQL\", rollup_metrics=_graphql_base_rollup_metrics + FRAMEWORK_METRICS",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "        (f\"Python/Framework/GraphQLServer/{graphql_server_version}\", 1),",
          "        (f\"Python/Framework/{framework}/{version}\", 1),",
          "    ]",
          "",
          "    @validate_transaction_metrics(",
          "        \"query/<anonymous>/hello\", \"GraphQL\", rollup_metrics=_graphql_base_rollup_metrics + FRAMEWORK_METRICS",
          "    )",
          "    def _test():",
          "        response = target_application(\"{ hello }\")",
          "",
          "    _test()"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_aiomysql/test_database.py",
        "line_number": 45,
        "line_content": "await cursor.execute(f\"update {TABLE_NAME} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
        "category": "SQL Injection",
        "severity": "HIGH",
        "cwe": "CWE-89",
        "description": "SQL injection vulnerability in agent database queries",
        "context": [
          "    await cursor.execute(f\"\"\"select * from {TABLE_NAME}\"\"\")",
          "",
          "    async for _ in cursor:",
          "        pass",
          "",
          "    await cursor.execute(f\"update {TABLE_NAME} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
          "",
          "    await cursor.execute(f\"\"\"delete from {TABLE_NAME} where a=2\"\"\")",
          "    await cursor.execute(f\"\"\"drop procedure if exists {PROCEDURE_NAME}\"\"\")",
          "    await cursor.execute(",
          "        f\"\"\"CREATE PROCEDURE {PROCEDURE_NAME}()"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      }
    ],
    "Insecure Data Transmission": [
      {
        "file": "tests/agent_unittests/test_http_client.py",
        "line_number": 332,
        "line_content": "cert_file = None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    if system_certs_available:",
          "        cert_file = \"foo\"",
          "        ca_path = \"/usr/certs\"",
          "        system_certs = [{\"issuer\": \"Test CA\"}]  # Poorly faked certs",
          "    else:",
          "        cert_file = None",
          "        ca_path = None",
          "        system_certs = []",
          "",
          "    class DefaultVerifyPaths:",
          "        cafile = cert_file"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/agent_unittests/test_http_client.py",
        "line_number": 343,
        "line_content": "def get_ca_certs(purpose=None):",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        capath = ca_path",
          "",
          "        def __init__(self, *args, **kwargs):",
          "            pass",
          "",
          "    def get_ca_certs(purpose=None):",
          "        return system_certs",
          "",
          "    monkeypatch.setattr(ssl, \"DefaultVerifyPaths\", DefaultVerifyPaths)  # Bypass OpenSSL default certs",
          "    if sys.platform == \"win32\":",
          "        monkeypatch.setattr(ssl.SSLContext, \"get_ca_certs\", get_ca_certs)  # Bypass Windows default certs"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/agent_unittests/test_agent_protocol.py",
        "line_number": 550,
        "line_content": "def get_ca_certs(purpose=None):",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        capath = None",
          "",
          "        def __init__(self, *args, **kwargs):",
          "            pass",
          "",
          "    def get_ca_certs(purpose=None):",
          "        return []",
          "",
          "    monkeypatch.setattr(ssl, \"DefaultVerifyPaths\", DefaultVerifyPaths)  # Bypass OpenSSL default certs",
          "    if sys.platform == \"win32\":",
          "        monkeypatch.setattr(ssl.SSLContext, \"get_ca_certs\", get_ca_certs)  # Bypass Windows default certs"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/testing_support/http_23_testing.py",
        "line_number": 39,
        "line_content": "session.verify = False  # Disable SSL verification",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        # HTTP/1.1 must remain enabled to allow the session to open",
          "        session_kwargs[\"disable_http2\"] = True",
          "",
          "    # Create session",
          "    with niquests.Session(**session_kwargs) as session:",
          "        session.verify = False  # Disable SSL verification",
          "        if http_version == 3:",
          "            # Preset quic cache to enable HTTP/3 connections",
          "            session.quic_cache_layer[(host, port)] = (\"\", port)",
          "",
          "        # Send Request"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      },
      {
        "file": "tests/testing_support/http_23_testing.py",
        "line_number": 39,
        "line_content": "session.verify = False  # Disable SSL verification",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        # HTTP/1.1 must remain enabled to allow the session to open",
          "        session_kwargs[\"disable_http2\"] = True",
          "",
          "    # Create session",
          "    with niquests.Session(**session_kwargs) as session:",
          "        session.verify = False  # Disable SSL verification",
          "        if http_version == 3:",
          "            # Preset quic cache to enable HTTP/3 connections",
          "            session.quic_cache_layer[(host, port)] = (\"\", port)",
          "",
          "        # Send Request"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      },
      {
        "file": "tests/external_httpx/test_client.py",
        "line_number": 182,
        "line_content": "response = sync_client.get(f\"http://localhost:{mock_server.port}\", headers={\"newrelic\": \"1234\"})",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    CAT_RESPONSE_CODE = 200",
          "",
          "    transaction = current_transaction()",
          "",
          "    with sync_client:",
          "        response = sync_client.get(f\"http://localhost:{mock_server.port}\", headers={\"newrelic\": \"1234\"})",
          "",
          "    transaction._test_request_headers = response.request.headers",
          "",
          "    assert response.status_code == 200",
          "    assert response.request.headers[\"newrelic\"] == \"1234\""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/external_httpx/test_client.py",
        "line_number": 199,
        "line_content": "response = await async_client.get(f\"http://localhost:{mock_server.port}\", headers={\"newrelic\": \"1234\"})",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    global CAT_RESPONSE_CODE",
          "    CAT_RESPONSE_CODE = 200",
          "",
          "    async def _test():",
          "        async with async_client:",
          "            response = await async_client.get(f\"http://localhost:{mock_server.port}\", headers={\"newrelic\": \"1234\"})",
          "",
          "        return response",
          "",
          "    response = loop.run_until_complete(_test())",
          ""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/external_httpx/test_client.py",
        "line_number": 453,
        "line_content": "client = httpx.Client(http1=False, http2=True, verify=False)",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "@background_task(name=\"test_sync_client_http2\")",
          "def test_sync_client_http2(httpx, real_server):",
          "    global CAT_RESPONSE_CODE",
          "    CAT_RESPONSE_CODE = 200",
          "",
          "    client = httpx.Client(http1=False, http2=True, verify=False)",
          "    response = exercise_sync_client(real_server, client, \"get\", protocol=\"https\")",
          "",
          "    assert response.status_code == 200",
          "    assert response.http_version in {\"HTTP/2\", \"HTTP/2.0\"}",
          ""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/external_httpx/test_client.py",
        "line_number": 468,
        "line_content": "client = httpx.AsyncClient(http1=False, http2=True, verify=False)",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "@background_task(name=\"test_async_client_http2\")",
          "def test_async_client_http2(httpx, real_server, loop):",
          "    global CAT_RESPONSE_CODE",
          "    CAT_RESPONSE_CODE = 200",
          "",
          "    client = httpx.AsyncClient(http1=False, http2=True, verify=False)",
          "",
          "    responses = loop.run_until_complete(exercise_async_client(real_server, client, \"get\", protocol=\"https\"))",
          "    assert all(response.status_code == 200 for response in responses)",
          "    assert all(response.http_version in {\"HTTP/2\", \"HTTP/2.0\"} for response in responses)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/external_requests/test_requests.py",
        "line_number": 78,
        "line_content": "requests.get(f\"https://localhost:{server.port}/\", verify=False)",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        background_task=True,",
          "    )",
          "    @background_task(name=\"test_requests:test_https_request_get\")",
          "    def _test():",
          "        try:",
          "            requests.get(f\"https://localhost:{server.port}/\", verify=False)",
          "        except Exception:",
          "            pass",
          "",
          "    _test()",
          ""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_valkey/test_instance_info.py",
        "line_number": 41,
        "line_content": "class DisabledSSLConnection(valkey.SSLConnection, DisabledConnection):",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "",
          "class DisabledUnixConnection(valkey.UnixDomainSocketConnection, DisabledConnection):",
          "    pass",
          "",
          "",
          "class DisabledSSLConnection(valkey.SSLConnection, DisabledConnection):",
          "    pass",
          "",
          "",
          "@pytest.mark.parametrize(\"args,kwargs,expected\", _instance_info_tests)",
          "def test_valkey_client_instance_info(args, kwargs, expected):"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_valkey/test_instance_info.py",
        "line_number": 132,
        "line_content": "r.connection_pool.connection_class = DisabledSSLConnection",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    if r.connection_pool.connection_class is valkey.Connection:",
          "        r.connection_pool.connection_class = DisabledConnection",
          "    elif r.connection_pool.connection_class is valkey.UnixDomainSocketConnection:",
          "        r.connection_pool.connection_class = DisabledUnixConnection",
          "    elif r.connection_pool.connection_class is valkey.SSLConnection:",
          "        r.connection_pool.connection_class = DisabledSSLConnection",
          "    else:",
          "        raise AssertionError(r.connection_pool.connection_class)",
          "    connection = r.connection_pool.get_connection(\"SELECT\")",
          "    try:",
          "        conn_kwargs = _conn_attrs_to_dict(connection)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_valkey/test_instance_info.py",
        "line_number": 151,
        "line_content": "r.connection_pool.connection_class = DisabledSSLConnection",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    if r.connection_pool.connection_class is valkey.Connection:",
          "        r.connection_pool.connection_class = DisabledConnection",
          "    elif r.connection_pool.connection_class is valkey.UnixDomainSocketConnection:",
          "        r.connection_pool.connection_class = DisabledUnixConnection",
          "    elif r.connection_pool.connection_class is valkey.SSLConnection:",
          "        r.connection_pool.connection_class = DisabledSSLConnection",
          "    else:",
          "        raise AssertionError(r.connection_pool.connection_class)",
          "    connection = r.connection_pool.get_connection(\"SELECT\")",
          "    try:",
          "        conn_kwargs = _conn_attrs_to_dict(connection)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_redis/test_instance_info.py",
        "line_number": 51,
        "line_content": "class DisabledSSLConnection(redis.SSLConnection, DisabledConnection):",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "",
          "class DisabledUnixConnection(redis.UnixDomainSocketConnection, DisabledConnection):",
          "    pass",
          "",
          "",
          "class DisabledSSLConnection(redis.SSLConnection, DisabledConnection):",
          "    pass",
          "",
          "",
          "@pytest.mark.parametrize(\"args,kwargs,expected\", _instance_info_tests)",
          "def test_redis_client_instance_info(args, kwargs, expected):"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_redis/test_instance_info.py",
        "line_number": 139,
        "line_content": "r.connection_pool.connection_class = DisabledSSLConnection",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    if r.connection_pool.connection_class is redis.Connection:",
          "        r.connection_pool.connection_class = DisabledConnection",
          "    elif r.connection_pool.connection_class is redis.UnixDomainSocketConnection:",
          "        r.connection_pool.connection_class = DisabledUnixConnection",
          "    elif r.connection_pool.connection_class is redis.SSLConnection:",
          "        r.connection_pool.connection_class = DisabledSSLConnection",
          "    else:",
          "        raise AssertionError(r.connection_pool.connection_class)",
          "    connection = r.connection_pool.get_connection(command_name)",
          "    try:",
          "        conn_kwargs = _conn_attrs_to_dict(connection)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "tests/datastore_redis/test_instance_info.py",
        "line_number": 159,
        "line_content": "r.connection_pool.connection_class = DisabledSSLConnection",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    if r.connection_pool.connection_class is redis.Connection:",
          "        r.connection_pool.connection_class = DisabledConnection",
          "    elif r.connection_pool.connection_class is redis.UnixDomainSocketConnection:",
          "        r.connection_pool.connection_class = DisabledUnixConnection",
          "    elif r.connection_pool.connection_class is redis.SSLConnection:",
          "        r.connection_pool.connection_class = DisabledSSLConnection",
          "    else:",
          "        raise AssertionError(r.connection_pool.connection_class)",
          "    connection = r.connection_pool.get_connection(command_name)",
          "    try:",
          "        conn_kwargs = _conn_attrs_to_dict(connection)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/config.py",
        "line_number": 452,
        "line_content": "_process_setting(section, \"debug.disable_certificate_validation\", \"getboolean\", None)",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    _process_setting(section, \"debug.log_autorum_middleware\", \"getboolean\", None)",
          "    _process_setting(section, \"debug.log_untrusted_distributed_trace_keys\", \"getboolean\", None)",
          "    _process_setting(section, \"debug.enable_coroutine_profiling\", \"getboolean\", None)",
          "    _process_setting(section, \"debug.record_transaction_failure\", \"getboolean\", None)",
          "    _process_setting(section, \"debug.explain_plan_obfuscation\", \"get\", None)",
          "    _process_setting(section, \"debug.disable_certificate_validation\", \"getboolean\", None)",
          "    _process_setting(section, \"debug.disable_harvest_until_shutdown\", \"getboolean\", None)",
          "    _process_setting(section, \"debug.connect_span_stream_in_developer_mode\", \"getboolean\", None)",
          "    _process_setting(section, \"debug.otlp_content_encoding\", \"get\", None)",
          "    _process_setting(section, \"cross_application_tracer.enabled\", \"getboolean\", None)",
          "    _process_setting(section, \"message_tracer.segment_parameters_enabled\", \"getboolean\", None)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      },
      {
        "file": "newrelic/common/agent_http.py",
        "line_number": 275,
        "line_content": "system_certs = None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "                        try:",
          "                            _context = ssl.SSLContext()",
          "                            _context.load_default_certs()",
          "                            system_certs = _context.get_ca_certs()",
          "                        except Exception:",
          "                            system_certs = None",
          "",
          "                        # If we still can't find any certs after loading the default ones,",
          "                        # then assume the bundled certs are required. If we do find them,",
          "                        # we don't have to do anything. We let urllib3 handle loading the",
          "                        # default certs from Windows."
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/common/agent_http.py",
        "line_number": 292,
        "line_content": "connection_kwargs[\"cert_reqs\"] = \"NONE\"",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "                    connection_kwargs[\"ca_cert_dir\"] = ca_bundle_path",
          "                else:",
          "                    connection_kwargs[\"ca_certs\"] = ca_bundle_path",
          "",
          "            if disable_certificate_validation:",
          "                connection_kwargs[\"cert_reqs\"] = \"NONE\"",
          "",
          "        proxy = self._parse_proxy(proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass)",
          "        proxy_headers = proxy and proxy.auth and urllib3.make_headers(proxy_basic_auth=proxy.auth)",
          "",
          "        if proxy:"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/common/agent_http.py",
        "line_number": 462,
        "line_content": "disable_certificate_validation = None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "            # HTTPS must be used to connect to the proxy",
          "            self.CONNECTION_CLS = urllib3.HTTPSConnectionPool",
          "        else:",
          "            # Disable any HTTPS specific options",
          "            ca_bundle_path = None",
          "            disable_certificate_validation = None",
          "",
          "        super().__init__(",
          "            host,",
          "            port,",
          "            proxy_scheme,"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connection.py",
        "line_number": 294,
        "line_content": "cert_reqs = None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    socket by means of :py:func:`urllib3.util.ssl_wrap_socket`.",
          "    \"\"\"",
          "",
          "    default_port = port_by_scheme[\"https\"]",
          "",
          "    cert_reqs = None",
          "    ca_certs = None",
          "    ca_cert_dir = None",
          "    ca_cert_data = None",
          "    ssl_version = None",
          "    assert_fingerprint = None"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connection.py",
        "line_number": 295,
        "line_content": "ca_certs = None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    \"\"\"",
          "",
          "    default_port = port_by_scheme[\"https\"]",
          "",
          "    cert_reqs = None",
          "    ca_certs = None",
          "    ca_cert_dir = None",
          "    ca_cert_data = None",
          "    ssl_version = None",
          "    assert_fingerprint = None",
          "    tls_in_tls_required = False"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connection.py",
        "line_number": 296,
        "line_content": "ca_cert_dir = None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "",
          "    default_port = port_by_scheme[\"https\"]",
          "",
          "    cert_reqs = None",
          "    ca_certs = None",
          "    ca_cert_dir = None",
          "    ca_cert_data = None",
          "    ssl_version = None",
          "    assert_fingerprint = None",
          "    tls_in_tls_required = False",
          ""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connection.py",
        "line_number": 297,
        "line_content": "ca_cert_data = None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    default_port = port_by_scheme[\"https\"]",
          "",
          "    cert_reqs = None",
          "    ca_certs = None",
          "    ca_cert_dir = None",
          "    ca_cert_data = None",
          "    ssl_version = None",
          "    assert_fingerprint = None",
          "    tls_in_tls_required = False",
          "",
          "    def __init__("
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connection.py",
        "line_number": 307,
        "line_content": "cert_file=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    def __init__(",
          "        self,",
          "        host,",
          "        port=None,",
          "        key_file=None,",
          "        cert_file=None,",
          "        key_password=None,",
          "        strict=None,",
          "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,",
          "        ssl_context=None,",
          "        server_hostname=None,"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connection.py",
        "line_number": 331,
        "line_content": "cert_file=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        self._protocol = \"https\"",
          "",
          "    def set_cert(",
          "        self,",
          "        key_file=None,",
          "        cert_file=None,",
          "        cert_reqs=None,",
          "        key_password=None,",
          "        ca_certs=None,",
          "        assert_hostname=None,",
          "        assert_fingerprint=None,"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connection.py",
        "line_number": 332,
        "line_content": "cert_reqs=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "",
          "    def set_cert(",
          "        self,",
          "        key_file=None,",
          "        cert_file=None,",
          "        cert_reqs=None,",
          "        key_password=None,",
          "        ca_certs=None,",
          "        assert_hostname=None,",
          "        assert_fingerprint=None,",
          "        ca_cert_dir=None,"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connection.py",
        "line_number": 334,
        "line_content": "ca_certs=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        self,",
          "        key_file=None,",
          "        cert_file=None,",
          "        cert_reqs=None,",
          "        key_password=None,",
          "        ca_certs=None,",
          "        assert_hostname=None,",
          "        assert_fingerprint=None,",
          "        ca_cert_dir=None,",
          "        ca_cert_data=None,",
          "    ):"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connection.py",
        "line_number": 337,
        "line_content": "ca_cert_dir=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        cert_reqs=None,",
          "        key_password=None,",
          "        ca_certs=None,",
          "        assert_hostname=None,",
          "        assert_fingerprint=None,",
          "        ca_cert_dir=None,",
          "        ca_cert_data=None,",
          "    ):",
          "        \"\"\"",
          "        This method should only be called once, before the connection is used.",
          "        \"\"\""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connection.py",
        "line_number": 338,
        "line_content": "ca_cert_data=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        key_password=None,",
          "        ca_certs=None,",
          "        assert_hostname=None,",
          "        assert_fingerprint=None,",
          "        ca_cert_dir=None,",
          "        ca_cert_data=None,",
          "    ):",
          "        \"\"\"",
          "        This method should only be called once, before the connection is used.",
          "        \"\"\"",
          "        # If cert_reqs is not provided we'll assume CERT_REQUIRED unless we also"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connection.py",
        "line_number": 345,
        "line_content": "if cert_reqs is None:",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        \"\"\"",
          "        This method should only be called once, before the connection is used.",
          "        \"\"\"",
          "        # If cert_reqs is not provided we'll assume CERT_REQUIRED unless we also",
          "        # have an SSLContext object in which case we'll use its verify_mode.",
          "        if cert_reqs is None:",
          "            if self.ssl_context is not None:",
          "                cert_reqs = self.ssl_context.verify_mode",
          "            else:",
          "                cert_reqs = resolve_cert_reqs(None)",
          ""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connection.py",
        "line_number": 349,
        "line_content": "cert_reqs = resolve_cert_reqs(None)",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        # have an SSLContext object in which case we'll use its verify_mode.",
          "        if cert_reqs is None:",
          "            if self.ssl_context is not None:",
          "                cert_reqs = self.ssl_context.verify_mode",
          "            else:",
          "                cert_reqs = resolve_cert_reqs(None)",
          "",
          "        self.key_file = key_file",
          "        self.cert_file = cert_file",
          "        self.cert_reqs = cert_reqs",
          "        self.key_password = key_password"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connection.py",
        "line_number": 454,
        "line_content": "context.verify_mode != ssl.CERT_NONE",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        if self.assert_fingerprint:",
          "            assert_fingerprint(",
          "                self.sock.getpeercert(binary_form=True), self.assert_fingerprint",
          "            )",
          "        elif (",
          "            context.verify_mode != ssl.CERT_NONE",
          "            and not getattr(context, \"check_hostname\", False)",
          "            and self.assert_hostname is not False",
          "        ):",
          "            # While urllib3 attempts to always turn off hostname matching from",
          "            # the TLS library, this cannot always be done. So we check whether"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connection.py",
        "line_number": 513,
        "line_content": "if ssl_context.verify_mode != ssl.CERT_NONE and not getattr(",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "            ca_cert_data=self.ca_cert_data,",
          "            server_hostname=hostname,",
          "            ssl_context=ssl_context,",
          "        )",
          "",
          "        if ssl_context.verify_mode != ssl.CERT_NONE and not getattr(",
          "            ssl_context, \"check_hostname\", False",
          "        ):",
          "            # While urllib3 attempts to always turn off hostname matching from",
          "            # the TLS library, this cannot always be done. So we check whether",
          "            # the TLS Library still thinks it's matching hostnames."
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connectionpool.py",
        "line_number": 945,
        "line_content": "cert_file=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        headers=None,",
          "        retries=None,",
          "        _proxy=None,",
          "        _proxy_headers=None,",
          "        key_file=None,",
          "        cert_file=None,",
          "        cert_reqs=None,",
          "        key_password=None,",
          "        ca_certs=None,",
          "        ssl_version=None,",
          "        assert_hostname=None,"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connectionpool.py",
        "line_number": 946,
        "line_content": "cert_reqs=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        retries=None,",
          "        _proxy=None,",
          "        _proxy_headers=None,",
          "        key_file=None,",
          "        cert_file=None,",
          "        cert_reqs=None,",
          "        key_password=None,",
          "        ca_certs=None,",
          "        ssl_version=None,",
          "        assert_hostname=None,",
          "        assert_fingerprint=None,"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connectionpool.py",
        "line_number": 948,
        "line_content": "ca_certs=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        _proxy_headers=None,",
          "        key_file=None,",
          "        cert_file=None,",
          "        cert_reqs=None,",
          "        key_password=None,",
          "        ca_certs=None,",
          "        ssl_version=None,",
          "        assert_hostname=None,",
          "        assert_fingerprint=None,",
          "        ca_cert_dir=None,",
          "        **conn_kw"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/connectionpool.py",
        "line_number": 952,
        "line_content": "ca_cert_dir=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        key_password=None,",
          "        ca_certs=None,",
          "        ssl_version=None,",
          "        assert_hostname=None,",
          "        assert_fingerprint=None,",
          "        ca_cert_dir=None,",
          "        **conn_kw",
          "    ):",
          "",
          "        HTTPConnectionPool.__init__(",
          "            self,"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/util/proxy.py",
        "line_number": 38,
        "line_content": "ssl_version, cert_reqs, ca_certs=None, ca_cert_dir=None, ca_cert_data=None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    # Otherwise always use a tunnel.",
          "    return True",
          "",
          "",
          "def create_proxy_ssl_context(",
          "    ssl_version, cert_reqs, ca_certs=None, ca_cert_dir=None, ca_cert_data=None",
          "):",
          "    \"\"\"",
          "    Generates a default proxy ssl context if one hasn't been provided by the",
          "    user.",
          "    \"\"\""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/util/ssl_.py",
        "line_number": 138,
        "line_content": "self.verify_mode = ssl.CERT_NONE",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    class SSLContext(object):  # Platform-specific: Python 2",
          "        def __init__(self, protocol_version):",
          "            self.protocol = protocol_version",
          "            # Use default values from a real SSLContext",
          "            self.check_hostname = False",
          "            self.verify_mode = ssl.CERT_NONE",
          "            self.ca_certs = None",
          "            self.options = 0",
          "            self.certfile = None",
          "            self.keyfile = None",
          "            self.ciphers = None"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/util/ssl_.py",
        "line_number": 139,
        "line_content": "self.ca_certs = None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        def __init__(self, protocol_version):",
          "            self.protocol = protocol_version",
          "            # Use default values from a real SSLContext",
          "            self.check_hostname = False",
          "            self.verify_mode = ssl.CERT_NONE",
          "            self.ca_certs = None",
          "            self.options = 0",
          "            self.certfile = None",
          "            self.keyfile = None",
          "            self.ciphers = None",
          ""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/util/ssl_.py",
        "line_number": 141,
        "line_content": "self.certfile = None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "            # Use default values from a real SSLContext",
          "            self.check_hostname = False",
          "            self.verify_mode = ssl.CERT_NONE",
          "            self.ca_certs = None",
          "            self.options = 0",
          "            self.certfile = None",
          "            self.keyfile = None",
          "            self.ciphers = None",
          "",
          "        def load_cert_chain(self, certfile, keyfile):",
          "            self.certfile = certfile"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/util/ssl_.py",
        "line_number": 251,
        "line_content": "ssl_version=None, cert_reqs=None, options=None, ciphers=None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "",
          "    return candidate",
          "",
          "",
          "def create_urllib3_context(",
          "    ssl_version=None, cert_reqs=None, options=None, ciphers=None",
          "):",
          "    \"\"\"All arguments have the same meaning as ``ssl_wrap_socket``.",
          "",
          "    By default, this function does a lot of the same work that",
          "    ``ssl.create_default_context`` does on Python 3.4+. It:"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/util/ssl_.py",
        "line_number": 258,
        "line_content": "- Disables SSLv2, SSLv3, and compression",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    \"\"\"All arguments have the same meaning as ``ssl_wrap_socket``.",
          "",
          "    By default, this function does a lot of the same work that",
          "    ``ssl.create_default_context`` does on Python 3.4+. It:",
          "",
          "    - Disables SSLv2, SSLv3, and compression",
          "    - Sets a restricted set of server ciphers",
          "",
          "    If you wish to enable SSLv3, you can do::",
          "",
          "        from urllib3.util import ssl_"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/util/ssl_.py",
        "line_number": 295,
        "line_content": "cert_reqs = ssl.CERT_REQUIRED if cert_reqs is None else cert_reqs",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    context = SSLContext(ssl_version)",
          "",
          "    context.set_ciphers(ciphers or DEFAULT_CIPHERS)",
          "",
          "    # Setting the default here, as we may have no ssl module on import",
          "    cert_reqs = ssl.CERT_REQUIRED if cert_reqs is None else cert_reqs",
          "",
          "    if options is None:",
          "        options = 0",
          "        # SSLv2 is easily broken and is considered harmful and dangerous",
          "        options |= OP_NO_SSLv2"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/util/ssl_.py",
        "line_number": 358,
        "line_content": "certfile=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "",
          "",
          "def ssl_wrap_socket(",
          "    sock,",
          "    keyfile=None,",
          "    certfile=None,",
          "    cert_reqs=None,",
          "    ca_certs=None,",
          "    server_hostname=None,",
          "    ssl_version=None,",
          "    ciphers=None,"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/util/ssl_.py",
        "line_number": 359,
        "line_content": "cert_reqs=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "",
          "def ssl_wrap_socket(",
          "    sock,",
          "    keyfile=None,",
          "    certfile=None,",
          "    cert_reqs=None,",
          "    ca_certs=None,",
          "    server_hostname=None,",
          "    ssl_version=None,",
          "    ciphers=None,",
          "    ssl_context=None,"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/util/ssl_.py",
        "line_number": 360,
        "line_content": "ca_certs=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "def ssl_wrap_socket(",
          "    sock,",
          "    keyfile=None,",
          "    certfile=None,",
          "    cert_reqs=None,",
          "    ca_certs=None,",
          "    server_hostname=None,",
          "    ssl_version=None,",
          "    ciphers=None,",
          "    ssl_context=None,",
          "    ca_cert_dir=None,"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/util/ssl_.py",
        "line_number": 365,
        "line_content": "ca_cert_dir=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    ca_certs=None,",
          "    server_hostname=None,",
          "    ssl_version=None,",
          "    ciphers=None,",
          "    ssl_context=None,",
          "    ca_cert_dir=None,",
          "    key_password=None,",
          "    ca_cert_data=None,",
          "    tls_in_tls=False,",
          "):",
          "    \"\"\""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/util/ssl_.py",
        "line_number": 367,
        "line_content": "ca_cert_data=None,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    ssl_version=None,",
          "    ciphers=None,",
          "    ssl_context=None,",
          "    ca_cert_dir=None,",
          "    key_password=None,",
          "    ca_cert_data=None,",
          "    tls_in_tls=False,",
          "):",
          "    \"\"\"",
          "    All arguments except for server_hostname, ssl_context, and ca_cert_dir have",
          "    the same meaning as they do when using :func:`ssl.wrap_socket`."
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/contrib/securetransport.py",
        "line_number": 341,
        "line_content": "self._client_cert_chain = None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        self._makefile_refs = 0",
          "        self._closed = False",
          "        self._exception = None",
          "        self._keychain = None",
          "        self._keychain_dir = None",
          "        self._client_cert_chain = None",
          "",
          "        # We save off the previously-configured timeout and then set it to",
          "        # zero. This is done because we use select and friends to handle the",
          "        # timeouts, but if we leave the timeout set on the lower socket then",
          "        # Python will \"kindly\" call select on that socket again for us. Avoid"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/contrib/securetransport.py",
        "line_number": 439,
        "line_content": "cert_array = None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        # We want data in memory, so load it up.",
          "        if os.path.isfile(trust_bundle):",
          "            with open(trust_bundle, \"rb\") as f:",
          "                trust_bundle = f.read()",
          "",
          "        cert_array = None",
          "        trust = Security.SecTrustRef()",
          "",
          "        try:",
          "            # Get a CFArray that contains the certs we want.",
          "            cert_array = _cert_array_from_pem(trust_bundle)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/contrib/securetransport.py",
        "line_number": 468,
        "line_content": "if cert_array is not None:",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "            _assert_no_error(result)",
          "        finally:",
          "            if trust:",
          "                CoreFoundation.CFRelease(trust)",
          "",
          "            if cert_array is not None:",
          "                CoreFoundation.CFRelease(cert_array)",
          "",
          "        return trust_result.value",
          "",
          "    def handshake("
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/contrib/securetransport.py",
        "line_number": 667,
        "line_content": "self._client_cert_chain = None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "            if self.context:",
          "                CoreFoundation.CFRelease(self.context)",
          "                self.context = None",
          "            if self._client_cert_chain:",
          "                CoreFoundation.CFRelease(self._client_cert_chain)",
          "                self._client_cert_chain = None",
          "            if self._keychain:",
          "                Security.SecKeychainDelete(self._keychain)",
          "                CoreFoundation.CFRelease(self._keychain)",
          "                shutil.rmtree(self._keychain_dir)",
          "                self._keychain = self._keychain_dir = None"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/contrib/securetransport.py",
        "line_number": 700,
        "line_content": "certdata = None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        # instead to just flag to urllib3 that it shouldn't do its own hostname",
          "        # validation when using SecureTransport.",
          "        if not binary_form:",
          "            raise ValueError(\"SecureTransport only supports dumping binary certs\")",
          "        trust = Security.SecTrustRef()",
          "        certdata = None",
          "        der_bytes = None",
          "",
          "        try:",
          "            # Grab the trust store.",
          "            result = Security.SSLCopyPeerTrust(self.context, ctypes.byref(trust))"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/contrib/securetransport.py",
        "line_number": 794,
        "line_content": "self._verify = False",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    \"\"\"",
          "",
          "    def __init__(self, protocol):",
          "        self._min_version, self._max_version = _protocol_to_min_max[protocol]",
          "        self._options = 0",
          "        self._verify = False",
          "        self._trust_bundle = None",
          "        self._client_cert = None",
          "        self._client_key = None",
          "        self._client_key_passphrase = None",
          "        self._alpn_protocols = None"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      },
      {
        "file": "newrelic/packages/urllib3/contrib/securetransport.py",
        "line_number": 796,
        "line_content": "self._client_cert = None",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "    def __init__(self, protocol):",
          "        self._min_version, self._max_version = _protocol_to_min_max[protocol]",
          "        self._options = 0",
          "        self._verify = False",
          "        self._trust_bundle = None",
          "        self._client_cert = None",
          "        self._client_key = None",
          "        self._client_key_passphrase = None",
          "        self._alpn_protocols = None",
          "",
          "    @property"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/contrib/securetransport.py",
        "line_number": 834,
        "line_content": "return ssl.CERT_REQUIRED if self._verify else ssl.CERT_NONE",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "        # TODO: Update in line with above.",
          "        self._options = value",
          "",
          "    @property",
          "    def verify_mode(self):",
          "        return ssl.CERT_REQUIRED if self._verify else ssl.CERT_NONE",
          "",
          "    @verify_mode.setter",
          "    def verify_mode(self, value):",
          "        self._verify = True if value == ssl.CERT_REQUIRED else False",
          ""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/contrib/securetransport.py",
        "line_number": 872,
        "line_content": "def load_cert_chain(self, certfile, keyfile=None, password=None):",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "            with open(cafile):",
          "                pass",
          "",
          "        self._trust_bundle = cafile or cadata",
          "",
          "    def load_cert_chain(self, certfile, keyfile=None, password=None):",
          "        self._client_cert = certfile",
          "        self._client_key = keyfile",
          "        self._client_cert_passphrase = password",
          "",
          "    def set_alpn_protocols(self, protocols):"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/contrib/pyopenssl.py",
        "line_number": 113,
        "line_content": "ssl.CERT_NONE: OpenSSL.SSL.VERIFY_NONE,",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "if hasattr(ssl, \"PROTOCOL_TLSv1_2\") and hasattr(OpenSSL.SSL, \"TLSv1_2_METHOD\"):",
          "    _openssl_versions[ssl.PROTOCOL_TLSv1_2] = OpenSSL.SSL.TLSv1_2_METHOD",
          "",
          "",
          "_stdlib_to_openssl_verify = {",
          "    ssl.CERT_NONE: OpenSSL.SSL.VERIFY_NONE,",
          "    ssl.CERT_OPTIONAL: OpenSSL.SSL.VERIFY_PEER,",
          "    ssl.CERT_REQUIRED: OpenSSL.SSL.VERIFY_PEER",
          "    + OpenSSL.SSL.VERIFY_FAIL_IF_NO_PEER_CERT,",
          "}",
          "_openssl_to_stdlib_verify = dict((v, k) for k, v in _stdlib_to_openssl_verify.items())"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/contrib/pyopenssl.py",
        "line_number": 473,
        "line_content": "def load_cert_chain(self, certfile, keyfile=None, password=None):",
        "category": "Insecure Data Transmission",
        "severity": "HIGH",
        "cwe": "CWE-319",
        "description": "Insecure or disabled TLS/SSL verification",
        "context": [
          "            if cadata is not None:",
          "                self._ctx.load_verify_locations(BytesIO(cadata))",
          "        except OpenSSL.SSL.Error as e:",
          "            raise ssl.SSLError(\"unable to load trusted certificates: %r\" % e)",
          "",
          "    def load_cert_chain(self, certfile, keyfile=None, password=None):",
          "        self._ctx.use_certificate_chain_file(certfile)",
          "        if password is not None:",
          "            if not isinstance(password, six.binary_type):",
          "                password = password.encode(\"utf-8\")",
          "            self._ctx.set_passwd_cb(lambda *_: password)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      }
    ],
    "Command Injection": [
      {
        "file": "tests/datastore_aioredis/test_transactions.py",
        "line_number": 64,
        "line_content": "pipe = client.multi_exec()",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "",
          "@SKIPIF_AIOREDIS_V2",
          "@background_task()",
          "def test_multi_exec_no_harm(client, loop, key):",
          "    async def exercise():",
          "        pipe = client.multi_exec()",
          "        pipe.set(key, \"value\")",
          "        status = await pipe.execute()",
          "        assert status == [True]",
          "",
          "    loop.run_until_complete(exercise())"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/config.py",
        "line_number": 1318,
        "line_content": "name = eval(name, callable_vars)  # noqa: S307",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "            if _config_object.has_option(section, \"group\"):",
          "                group = _config_object.get(section, \"group\")",
          "",
          "            if name and name.startswith(\"lambda \"):",
          "                callable_vars = {\"callable_name\": callable_name}",
          "                name = eval(name, callable_vars)  # noqa: S307",
          "",
          "            _logger.debug(\"register background-task %s\", ((module, object_path, application, name, group),))",
          "",
          "            hook = _background_task_import_hook(object_path, application, name, group)",
          "            newrelic.api.import_hook.register_import_hook(module, hook)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      },
      {
        "file": "newrelic/config.py",
        "line_number": 1368,
        "line_content": "sql = eval(sql, callable_vars)  # noqa: S307",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "",
          "            sql = _config_object.get(section, \"sql\")",
          "",
          "            if sql.startswith(\"lambda \"):",
          "                callable_vars = {\"callable_name\": callable_name}",
          "                sql = eval(sql, callable_vars)  # noqa: S307",
          "",
          "            _logger.debug(\"register database-trace %s\", ((module, object_path, sql),))",
          "",
          "            hook = _database_trace_import_hook(object_path, sql)",
          "            newrelic.api.import_hook.register_import_hook(module, hook)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      },
      {
        "file": "newrelic/config.py",
        "line_number": 1423,
        "line_content": "url = eval(url, callable_vars)  # noqa: S307",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "            if _config_object.has_option(section, \"method\"):",
          "                method = _config_object.get(section, \"method\")",
          "",
          "            if url.startswith(\"lambda \"):",
          "                callable_vars = {\"callable_name\": callable_name}",
          "                url = eval(url, callable_vars)  # noqa: S307",
          "",
          "            if method and method.startswith(\"lambda \"):",
          "                callable_vars = {\"callable_name\": callable_name}",
          "                method = eval(method, callable_vars)  # noqa: S307",
          ""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      },
      {
        "file": "newrelic/config.py",
        "line_number": 1427,
        "line_content": "method = eval(method, callable_vars)  # noqa: S307",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "                callable_vars = {\"callable_name\": callable_name}",
          "                url = eval(url, callable_vars)  # noqa: S307",
          "",
          "            if method and method.startswith(\"lambda \"):",
          "                callable_vars = {\"callable_name\": callable_name}",
          "                method = eval(method, callable_vars)  # noqa: S307",
          "",
          "            _logger.debug(\"register external-trace %s\", ((module, object_path, library, url, method),))",
          "",
          "            hook = _external_trace_import_hook(object_path, library, url, method)",
          "            newrelic.api.import_hook.register_import_hook(module, hook)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      },
      {
        "file": "newrelic/config.py",
        "line_number": 1495,
        "line_content": "name = eval(name, callable_vars)  # noqa: S307",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "            if _config_object.has_option(section, \"rollup\"):",
          "                rollup = _config_object.get(section, \"rollup\")",
          "",
          "            if name and name.startswith(\"lambda \"):",
          "                callable_vars = {\"callable_name\": callable_name}",
          "                name = eval(name, callable_vars)  # noqa: S307",
          "",
          "            _logger.debug(",
          "                \"register function-trace %s\", ((module, object_path, name, group, label, params, terminal, rollup),)",
          "            )",
          ""
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      },
      {
        "file": "newrelic/config.py",
        "line_number": 1553,
        "line_content": "name = eval(name, callable_vars)  # noqa: S307",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "            if _config_object.has_option(section, \"group\"):",
          "                group = _config_object.get(section, \"group\")",
          "",
          "            if name and name.startswith(\"lambda \"):",
          "                callable_vars = {\"callable_name\": callable_name}",
          "                name = eval(name, callable_vars)  # noqa: S307",
          "",
          "            _logger.debug(\"register generator-trace %s\", ((module, object_path, name, group),))",
          "",
          "            hook = _generator_trace_import_hook(object_path, name, group)",
          "            newrelic.api.import_hook.register_import_hook(module, hook)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      },
      {
        "file": "newrelic/config.py",
        "line_number": 1612,
        "line_content": "name = eval(name, callable_vars)  # noqa: S307",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "            if _config_object.has_option(section, \"depth\"):",
          "                depth = _config_object.get(section, \"depth\")",
          "",
          "            if name and name.startswith(\"lambda \"):",
          "                callable_vars = {\"callable_name\": callable_name}",
          "                name = eval(name, callable_vars)  # noqa: S307",
          "",
          "            _logger.debug(\"register profile-trace %s\", ((module, object_path, name, group, depth),))",
          "",
          "            hook = _profile_trace_import_hook(object_path, name, group, depth=depth)",
          "            newrelic.api.import_hook.register_import_hook(module, hook)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      },
      {
        "file": "newrelic/config.py",
        "line_number": 1662,
        "line_content": "command = eval(command, callable_vars)  # noqa: S307",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "",
          "            command = _config_object.get(section, \"command\")",
          "",
          "            if command.startswith(\"lambda \"):",
          "                callable_vars = {\"callable_name\": callable_name}",
          "                command = eval(command, callable_vars)  # noqa: S307",
          "",
          "            _logger.debug(\"register memcache-trace %s\", (module, object_path, command))",
          "",
          "            hook = _memcache_trace_import_hook(object_path, command)",
          "            newrelic.api.import_hook.register_import_hook(module, hook)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      },
      {
        "file": "newrelic/config.py",
        "line_number": 1722,
        "line_content": "name = eval(name, callable_vars)  # noqa: S307",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "            if _config_object.has_option(section, \"priority\"):",
          "                priority = _config_object.getint(section, \"priority\")",
          "",
          "            if name and name.startswith(\"lambda \"):",
          "                callable_vars = {\"callable_name\": callable_name}",
          "                name = eval(name, callable_vars)  # noqa: S307",
          "",
          "            _logger.debug(\"register transaction-name %s\", ((module, object_path, name, group, priority),))",
          "",
          "            hook = _transaction_name_import_hook(object_path, name, group, priority)",
          "            newrelic.api.import_hook.register_import_hook(module, hook)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      },
      {
        "file": "newrelic/core/database_utils.py",
        "line_number": 364,
        "line_content": "def _parse_exec(sql):",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "",
          "_parse_exec_p = r\"\\s*EXEC\\s+(?!\\()(\\w+)\"",
          "_parse_exec_re = re.compile(_parse_exec_p, re.IGNORECASE)",
          "",
          "",
          "def _parse_exec(sql):",
          "    return _parse_default(sql, _parse_exec_re)",
          "",
          "",
          "_parse_execute_p = r\"\\s*EXECUTE\\s+(?!\\()(\\w+)\"",
          "_parse_execute_re = re.compile(_parse_execute_p, re.IGNORECASE)"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/wrapt/decorators.py",
        "line_number": 23,
        "line_content": "exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "            if _locs_ is None:",
          "                _locs_ = frame.f_locals",
          "            del frame",
          "        elif _locs_ is None:",
          "            _locs_ = _globs_",
          "        exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
          "",
          "else:",
          "    string_types = str,",
          "",
          "    import builtins"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/packages/urllib3/packages/six.py",
        "line_number": 787,
        "line_content": "exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
        "category": "Command Injection",
        "severity": "CRITICAL",
        "cwe": "CWE-78",
        "description": "Potential command injection in agent code",
        "context": [
          "            if _locs_ is None:",
          "                _locs_ = frame.f_locals",
          "            del frame",
          "        elif _locs_ is None:",
          "            _locs_ = _globs_",
          "        exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
          "",
          "    exec_(",
          "        \"\"\"def reraise(tp, value, tb=None):",
          "    try:",
          "        raise tp, value, tb"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": false
      }
    ],
    "Hardcoded Credentials": [
      {
        "file": "tests/agent_features/test_synthetics.py",
        "line_number": 175,
        "line_content": "\"X-NewRelic-Synthetics-Info\": _make_synthetics_headers(encoding_key=encoding_key)[\"X-NewRelic-Synthetics-Info\"],",
        "category": "Hardcoded Credentials",
        "severity": "CRITICAL",
        "cwe": "CWE-798",
        "description": "Hardcoded API key or credential in agent code",
        "context": [
          "@override_application_settings(_override_settings)",
          "def test_synthetics_event_mismatched_info_encoding_key():",
          "    encoding_key = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
          "    headers = {",
          "        \"X-NewRelic-Synthetics\": _make_synthetics_headers(type_=None)[\"X-NewRelic-Synthetics\"],",
          "        \"X-NewRelic-Synthetics-Info\": _make_synthetics_headers(encoding_key=encoding_key)[\"X-NewRelic-Synthetics-Info\"],",
          "    }",
          "    response = target_application.get(\"/\", headers=headers)",
          "",
          "",
          "_test_valid_synthetics_tt_required = {"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      },
      {
        "file": "newrelic/packages/opentelemetry_proto/metrics_pb2.py",
        "line_number": 26,
        "line_content": "DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\\n3newrelic/packages/opentelemetry_proto/metrics.proto\\x12%newrelic.packages.opentelemetry_proto\\x1a\\x32newrelic/packages/opentelemetry_proto/common.proto\\x1a\\x34newrelic/packages/opentelemetry_proto/resource.proto\\\"_\\n\\x0bMetricsData\\x12P\\n\\x10resource_metrics\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.ResourceMetrics\\\"\\xbc\\x01\\n\\x0fResourceMetrics\\x12\\x41\\n\\x08resource\\x18\\x01 \\x01(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Resource\\x12J\\n\\rscope_metrics\\x18\\x02 \\x03(\\x0b\\x32\\x33.newrelic.packages.opentelemetry_proto.ScopeMetrics\\x12\\x12\\n\\nschema_url\\x18\\x03 \\x01(\\tJ\\x06\\x08\\xe8\\x07\\x10\\xe9\\x07\\\"\\xae\\x01\\n\\x0cScopeMetrics\\x12J\\n\\x05scope\\x18\\x01 \\x01(\\x0b\\x32;.newrelic.packages.opentelemetry_proto.InstrumentationScope\\x12>\\n\\x07metrics\\x18\\x02 \\x03(\\x0b\\x32-.newrelic.packages.opentelemetry_proto.Metric\\x12\\x12\\n\\nschema_url\\x18\\x03 \\x01(\\t\\\"\\xf8\\x03\\n\\x06Metric\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x13\\n\\x0b\\x64\\x65scription\\x18\\x02 \\x01(\\t\\x12\\x0c\\n\\x04unit\\x18\\x03 \\x01(\\t\\x12=\\n\\x05gauge\\x18\\x05 \\x01(\\x0b\\x32,.newrelic.packages.opentelemetry_proto.GaugeH\\x00\\x12\\x39\\n\\x03sum\\x18\\x07 \\x01(\\x0b\\x32*.newrelic.packages.opentelemetry_proto.SumH\\x00\\x12\\x45\\n\\thistogram\\x18\\t \\x01(\\x0b\\x32\\x30.newrelic.packages.opentelemetry_proto.HistogramH\\x00\\x12\\\\\\n\\x15\\x65xponential_histogram\\x18\\n \\x01(\\x0b\\x32;.newrelic.packages.opentelemetry_proto.ExponentialHistogramH\\x00\\x12\\x41\\n\\x07summary\\x18\\x0b \\x01(\\x0b\\x32..newrelic.packages.opentelemetry_proto.SummaryH\\x00\\x12\\x41\\n\\x08metadata\\x18\\x0c \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValueB\\x06\\n\\x04\\x64\\x61taJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"T\\n\\x05Gauge\\x12K\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\\\"\\xc8\\x01\\n\\x03Sum\\x12K\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\x12\\x14\\n\\x0cis_monotonic\\x18\\x03 \\x01(\\x08\\\"\\xbb\\x01\\n\\tHistogram\\x12N\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x39.newrelic.packages.opentelemetry_proto.HistogramDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\\"\\xd1\\x01\\n\\x14\\x45xponentialHistogram\\x12Y\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x44.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\\"W\\n\\x07Summary\\x12L\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x37.newrelic.packages.opentelemetry_proto.SummaryDataPoint\\\"\\x95\\x02\\n\\x0fNumberDataPoint\\x12\\x43\\n\\nattributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\x13\\n\\tas_double\\x18\\x04 \\x01(\\x01H\\x00\\x12\\x10\\n\\x06\\x61s_int\\x18\\x06 \\x01(\\x10H\\x00\\x12\\x42\\n\\texemplars\\x18\\x05 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\r\\n\\x05\\x66lags\\x18\\x08 \\x01(\\rB\\x07\\n\\x05valueJ\\x04\\x08\\x01\\x10\\x02\\\"\\xf5\\x02\\n\\x12HistogramDataPoint\\x12\\x43\\n\\nattributes\\x18\\t \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x10\\n\\x03sum\\x18\\x05 \\x01(\\x01H\\x00\\x88\\x01\\x01\\x12\\x15\\n\\rbucket_counts\\x18\\x06 \\x03(\\x06\\x12\\x17\\n\\x0f\\x65xplicit_bounds\\x18\\x07 \\x03(\\x01\\x12\\x42\\n\\texemplars\\x18\\x08 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\r\\n\\x05\\x66lags\\x18\\n \\x01(\\r\\x12\\x10\\n\\x03min\\x18\\x0b \\x01(\\x01H\\x01\\x88\\x01\\x01\\x12\\x10\\n\\x03max\\x18\\x0c \\x01(\\x01H\\x02\\x88\\x01\\x01\\x42\\x06\\n\\x04_sumB\\x06\\n\\x04_minB\\x06\\n\\x04_maxJ\\x04\\x08\\x01\\x10\\x02\\\"\\xf7\\x04\\n\\x1d\\x45xponentialHistogramDataPoint\\x12\\x43\\n\\nattributes\\x18\\x01 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x10\\n\\x03sum\\x18\\x05 \\x01(\\x01H\\x00\\x88\\x01\\x01\\x12\\r\\n\\x05scale\\x18\\x06 \\x01(\\x11\\x12\\x12\\n\\nzero_count\\x18\\x07 \\x01(\\x06\\x12^\\n\\x08positive\\x18\\x08 \\x01(\\x0b\\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\\x12^\\n\\x08negative\\x18\\t \\x01(\\x0b\\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\\x12\\r\\n\\x05\\x66lags\\x18\\n \\x01(\\r\\x12\\x42\\n\\texemplars\\x18\\x0b \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\x10\\n\\x03min\\x18\\x0c \\x01(\\x01H\\x01\\x88\\x01\\x01\\x12\\x10\\n\\x03max\\x18\\r \\x01(\\x01H\\x02\\x88\\x01\\x01\\x12\\x16\\n\\x0ezero_threshold\\x18\\x0e \\x01(\\x01\\x1a\\x30\\n\\x07\\x42uckets\\x12\\x0e\\n\\x06offset\\x18\\x01 \\x01(\\x11\\x12\\x15\\n\\rbucket_counts\\x18\\x02 \\x03(\\x04\\x42\\x06\\n\\x04_sumB\\x06\\n\\x04_minB\\x06\\n\\x04_max\\\"\\xd4\\x02\\n\\x10SummaryDataPoint\\x12\\x43\\n\\nattributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x0b\\n\\x03sum\\x18\\x05 \\x01(\\x01\\x12`\\n\\x0fquantile_values\\x18\\x06 \\x03(\\x0b\\x32G.newrelic.packages.opentelemetry_proto.SummaryDataPoint.ValueAtQuantile\\x12\\r\\n\\x05\\x66lags\\x18\\x08 \\x01(\\r\\x1a\\x32\\n\\x0fValueAtQuantile\\x12\\x10\\n\\x08quantile\\x18\\x01 \\x01(\\x01\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\x01J\\x04\\x08\\x01\\x10\\x02\\\"\\xc9\\x01\\n\\x08\\x45xemplar\\x12L\\n\\x13\\x66iltered_attributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x13\\n\\tas_double\\x18\\x03 \\x01(\\x01H\\x00\\x12\\x10\\n\\x06\\x61s_int\\x18\\x06 \\x01(\\x10H\\x00\\x12\\x0f\\n\\x07span_id\\x18\\x04 \\x01(\\x0c\\x12\\x10\\n\\x08trace_id\\x18\\x05 \\x01(\\x0c\\x42\\x07\\n\\x05valueJ\\x04\\x08\\x01\\x10\\x02*\\x8c\\x01\\n\\x16\\x41ggregationTemporality\\x12\\'\\n#AGGREGATION_TEMPORALITY_UNSPECIFIED\\x10\\x00\\x12!\\n\\x1d\\x41GGREGATION_TEMPORALITY_DELTA\\x10\\x01\\x12&\\n\\\"AGGREGATION_TEMPORALITY_CUMULATIVE\\x10\\x02*^\\n\\x0e\\x44\\x61taPointFlags\\x12\\x1f\\n\\x1b\\x44\\x41TA_POINT_FLAGS_DO_NOT_USE\\x10\\x00\\x12+\\n\\'DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK\\x10\\x01\\x42\\x7f\\n!io.opentelemetry.proto.metrics.v1B\\x0cMetricsProtoP\\x01Z)go.opentelemetry.io/proto/otlp/metrics/v1\\xaa\\x02\\x1eOpenTelemetry.Proto.Metrics.V1b\\x06proto3')",
        "category": "Hardcoded Credentials",
        "severity": "CRITICAL",
        "cwe": "CWE-798",
        "description": "Hardcoded API key or credential in agent code",
        "context": [
          "",
          "from newrelic.packages.opentelemetry_proto import common_pb2 as newrelic_dot_packages_dot_opentelemetry__proto_dot_common__pb2",
          "from newrelic.packages.opentelemetry_proto import resource_pb2 as newrelic_dot_packages_dot_opentelemetry__proto_dot_resource__pb2",
          "",
          "",
          "DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\\n3newrelic/packages/opentelemetry_proto/metrics.proto\\x12%newrelic.packages.opentelemetry_proto\\x1a\\x32newrelic/packages/opentelemetry_proto/common.proto\\x1a\\x34newrelic/packages/opentelemetry_proto/resource.proto\\\"_\\n\\x0bMetricsData\\x12P\\n\\x10resource_metrics\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.ResourceMetrics\\\"\\xbc\\x01\\n\\x0fResourceMetrics\\x12\\x41\\n\\x08resource\\x18\\x01 \\x01(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Resource\\x12J\\n\\rscope_metrics\\x18\\x02 \\x03(\\x0b\\x32\\x33.newrelic.packages.opentelemetry_proto.ScopeMetrics\\x12\\x12\\n\\nschema_url\\x18\\x03 \\x01(\\tJ\\x06\\x08\\xe8\\x07\\x10\\xe9\\x07\\\"\\xae\\x01\\n\\x0cScopeMetrics\\x12J\\n\\x05scope\\x18\\x01 \\x01(\\x0b\\x32;.newrelic.packages.opentelemetry_proto.InstrumentationScope\\x12>\\n\\x07metrics\\x18\\x02 \\x03(\\x0b\\x32-.newrelic.packages.opentelemetry_proto.Metric\\x12\\x12\\n\\nschema_url\\x18\\x03 \\x01(\\t\\\"\\xf8\\x03\\n\\x06Metric\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x13\\n\\x0b\\x64\\x65scription\\x18\\x02 \\x01(\\t\\x12\\x0c\\n\\x04unit\\x18\\x03 \\x01(\\t\\x12=\\n\\x05gauge\\x18\\x05 \\x01(\\x0b\\x32,.newrelic.packages.opentelemetry_proto.GaugeH\\x00\\x12\\x39\\n\\x03sum\\x18\\x07 \\x01(\\x0b\\x32*.newrelic.packages.opentelemetry_proto.SumH\\x00\\x12\\x45\\n\\thistogram\\x18\\t \\x01(\\x0b\\x32\\x30.newrelic.packages.opentelemetry_proto.HistogramH\\x00\\x12\\\\\\n\\x15\\x65xponential_histogram\\x18\\n \\x01(\\x0b\\x32;.newrelic.packages.opentelemetry_proto.ExponentialHistogramH\\x00\\x12\\x41\\n\\x07summary\\x18\\x0b \\x01(\\x0b\\x32..newrelic.packages.opentelemetry_proto.SummaryH\\x00\\x12\\x41\\n\\x08metadata\\x18\\x0c \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValueB\\x06\\n\\x04\\x64\\x61taJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"T\\n\\x05Gauge\\x12K\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\\\"\\xc8\\x01\\n\\x03Sum\\x12K\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\x12\\x14\\n\\x0cis_monotonic\\x18\\x03 \\x01(\\x08\\\"\\xbb\\x01\\n\\tHistogram\\x12N\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x39.newrelic.packages.opentelemetry_proto.HistogramDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\\"\\xd1\\x01\\n\\x14\\x45xponentialHistogram\\x12Y\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x44.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\\"W\\n\\x07Summary\\x12L\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x37.newrelic.packages.opentelemetry_proto.SummaryDataPoint\\\"\\x95\\x02\\n\\x0fNumberDataPoint\\x12\\x43\\n\\nattributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\x13\\n\\tas_double\\x18\\x04 \\x01(\\x01H\\x00\\x12\\x10\\n\\x06\\x61s_int\\x18\\x06 \\x01(\\x10H\\x00\\x12\\x42\\n\\texemplars\\x18\\x05 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\r\\n\\x05\\x66lags\\x18\\x08 \\x01(\\rB\\x07\\n\\x05valueJ\\x04\\x08\\x01\\x10\\x02\\\"\\xf5\\x02\\n\\x12HistogramDataPoint\\x12\\x43\\n\\nattributes\\x18\\t \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x10\\n\\x03sum\\x18\\x05 \\x01(\\x01H\\x00\\x88\\x01\\x01\\x12\\x15\\n\\rbucket_counts\\x18\\x06 \\x03(\\x06\\x12\\x17\\n\\x0f\\x65xplicit_bounds\\x18\\x07 \\x03(\\x01\\x12\\x42\\n\\texemplars\\x18\\x08 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\r\\n\\x05\\x66lags\\x18\\n \\x01(\\r\\x12\\x10\\n\\x03min\\x18\\x0b \\x01(\\x01H\\x01\\x88\\x01\\x01\\x12\\x10\\n\\x03max\\x18\\x0c \\x01(\\x01H\\x02\\x88\\x01\\x01\\x42\\x06\\n\\x04_sumB\\x06\\n\\x04_minB\\x06\\n\\x04_maxJ\\x04\\x08\\x01\\x10\\x02\\\"\\xf7\\x04\\n\\x1d\\x45xponentialHistogramDataPoint\\x12\\x43\\n\\nattributes\\x18\\x01 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x10\\n\\x03sum\\x18\\x05 \\x01(\\x01H\\x00\\x88\\x01\\x01\\x12\\r\\n\\x05scale\\x18\\x06 \\x01(\\x11\\x12\\x12\\n\\nzero_count\\x18\\x07 \\x01(\\x06\\x12^\\n\\x08positive\\x18\\x08 \\x01(\\x0b\\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\\x12^\\n\\x08negative\\x18\\t \\x01(\\x0b\\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\\x12\\r\\n\\x05\\x66lags\\x18\\n \\x01(\\r\\x12\\x42\\n\\texemplars\\x18\\x0b \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\x10\\n\\x03min\\x18\\x0c \\x01(\\x01H\\x01\\x88\\x01\\x01\\x12\\x10\\n\\x03max\\x18\\r \\x01(\\x01H\\x02\\x88\\x01\\x01\\x12\\x16\\n\\x0ezero_threshold\\x18\\x0e \\x01(\\x01\\x1a\\x30\\n\\x07\\x42uckets\\x12\\x0e\\n\\x06offset\\x18\\x01 \\x01(\\x11\\x12\\x15\\n\\rbucket_counts\\x18\\x02 \\x03(\\x04\\x42\\x06\\n\\x04_sumB\\x06\\n\\x04_minB\\x06\\n\\x04_max\\\"\\xd4\\x02\\n\\x10SummaryDataPoint\\x12\\x43\\n\\nattributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x0b\\n\\x03sum\\x18\\x05 \\x01(\\x01\\x12`\\n\\x0fquantile_values\\x18\\x06 \\x03(\\x0b\\x32G.newrelic.packages.opentelemetry_proto.SummaryDataPoint.ValueAtQuantile\\x12\\r\\n\\x05\\x66lags\\x18\\x08 \\x01(\\r\\x1a\\x32\\n\\x0fValueAtQuantile\\x12\\x10\\n\\x08quantile\\x18\\x01 \\x01(\\x01\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\x01J\\x04\\x08\\x01\\x10\\x02\\\"\\xc9\\x01\\n\\x08\\x45xemplar\\x12L\\n\\x13\\x66iltered_attributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x13\\n\\tas_double\\x18\\x03 \\x01(\\x01H\\x00\\x12\\x10\\n\\x06\\x61s_int\\x18\\x06 \\x01(\\x10H\\x00\\x12\\x0f\\n\\x07span_id\\x18\\x04 \\x01(\\x0c\\x12\\x10\\n\\x08trace_id\\x18\\x05 \\x01(\\x0c\\x42\\x07\\n\\x05valueJ\\x04\\x08\\x01\\x10\\x02*\\x8c\\x01\\n\\x16\\x41ggregationTemporality\\x12\\'\\n#AGGREGATION_TEMPORALITY_UNSPECIFIED\\x10\\x00\\x12!\\n\\x1d\\x41GGREGATION_TEMPORALITY_DELTA\\x10\\x01\\x12&\\n\\\"AGGREGATION_TEMPORALITY_CUMULATIVE\\x10\\x02*^\\n\\x0e\\x44\\x61taPointFlags\\x12\\x1f\\n\\x1b\\x44\\x41TA_POINT_FLAGS_DO_NOT_USE\\x10\\x00\\x12+\\n\\'DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK\\x10\\x01\\x42\\x7f\\n!io.opentelemetry.proto.metrics.v1B\\x0cMetricsProtoP\\x01Z)go.opentelemetry.io/proto/otlp/metrics/v1\\xaa\\x02\\x1eOpenTelemetry.Proto.Metrics.V1b\\x06proto3')",
          "",
          "_globals = globals()",
          "_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)",
          "_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'newrelic.packages.opentelemetry_proto.metrics_pb2', _globals)",
          "if not _descriptor._USE_C_DESCRIPTORS:"
        ],
        "confidence": 0.8,
        "agent_specific": true,
        "default_config_impact": true
      }
    ],
    "Weak Cryptography": [
      {
        "file": "newrelic/common/encoding_utils.py",
        "line_number": 248,
        "line_content": "path_hash = rotated ^ int(hashlib.md5(name).hexdigest()[-8:], base=16)  # noqa: S324",
        "category": "Weak Cryptography",
        "severity": "MEDIUM",
        "cwe": "CWE-327",
        "description": "Weak cryptographic algorithm detected",
        "context": [
          "    rotated = ((seed << 1) | (seed >> 31)) & 0xFFFFFFFF",
          "",
          "    if not isinstance(name, bytes):",
          "        name = name.encode(\"UTF-8\")",
          "",
          "    path_hash = rotated ^ int(hashlib.md5(name).hexdigest()[-8:], base=16)  # noqa: S324",
          "    return f\"{path_hash:08x}\"",
          "",
          "",
          "def base64_encode(text):",
          "    \"\"\"Base 64 encodes the UTF-8 encoded representation of the text. In Python"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/common/encoding_utils.py",
        "line_number": 248,
        "line_content": "path_hash = rotated ^ int(hashlib.md5(name).hexdigest()[-8:], base=16)  # noqa: S324",
        "category": "Weak Cryptography",
        "severity": "MEDIUM",
        "cwe": "CWE-327",
        "description": "Weak cryptographic algorithm detected",
        "context": [
          "    rotated = ((seed << 1) | (seed >> 31)) & 0xFFFFFFFF",
          "",
          "    if not isinstance(name, bytes):",
          "        name = name.encode(\"UTF-8\")",
          "",
          "    path_hash = rotated ^ int(hashlib.md5(name).hexdigest()[-8:], base=16)  # noqa: S324",
          "    return f\"{path_hash:08x}\"",
          "",
          "",
          "def base64_encode(text):",
          "    \"\"\"Base 64 encodes the UTF-8 encoded representation of the text. In Python"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      },
      {
        "file": "newrelic/common/encoding_utils.py",
        "line_number": 248,
        "line_content": "path_hash = rotated ^ int(hashlib.md5(name).hexdigest()[-8:], base=16)  # noqa: S324",
        "category": "Weak Cryptography",
        "severity": "MEDIUM",
        "cwe": "CWE-327",
        "description": "Weak cryptographic algorithm detected",
        "context": [
          "    rotated = ((seed << 1) | (seed >> 31)) & 0xFFFFFFFF",
          "",
          "    if not isinstance(name, bytes):",
          "        name = name.encode(\"UTF-8\")",
          "",
          "    path_hash = rotated ^ int(hashlib.md5(name).hexdigest()[-8:], base=16)  # noqa: S324",
          "    return f\"{path_hash:08x}\"",
          "",
          "",
          "def base64_encode(text):",
          "    \"\"\"Base 64 encodes the UTF-8 encoded representation of the text. In Python"
        ],
        "confidence": 0.6,
        "agent_specific": true,
        "default_config_impact": false
      }
    ]
  },
  "by_severity": {
    "CRITICAL": 15,
    "HIGH": 82,
    "MEDIUM": 3
  },
  "all_vulnerabilities": [
    {
      "file": "tests/datastore_psycopg2/test_multiple_dbs.py",
      "line_number": 91,
      "line_content": "cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        host=postgresql1[\"host\"],",
        "        port=postgresql1[\"port\"],",
        "    )",
        "    try:",
        "        cursor = connection.cursor()",
        "        cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
        "        connection.commit()",
        "    finally:",
        "        connection.close()",
        "",
        "    connection = psycopg2.connect("
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_psycopg2/test_async.py",
      "line_number": 102,
      "line_content": "async_cur.execute(f\"insert into {DB_SETTINGS['table_name']} values (%s, %s, %s)\", (1, 1.0, \"1.0\"))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    wait(async_cur.connection)",
        "",
        "    async_cur.execute(f\"create table {DB_SETTINGS['table_name']} (a integer, b real, c text)\")",
        "    wait(async_cur.connection)",
        "",
        "    async_cur.execute(f\"insert into {DB_SETTINGS['table_name']} values (%s, %s, %s)\", (1, 1.0, \"1.0\"))",
        "    wait(async_cur.connection)",
        "",
        "    async_cur.execute(f\"\"\"select * from {DB_SETTINGS[\"table_name\"]}\"\"\")",
        "    wait(async_cur.connection)",
        ""
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_psycopg2/test_trace_node.py",
      "line_number": 63,
      "line_content": "cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        port=DB_SETTINGS[\"port\"],",
        "    )",
        "",
        "    try:",
        "        cursor = connection.cursor()",
        "        cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
        "    finally:",
        "        connection.close()",
        "",
        "",
        "# Tests"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_psycopg2/test_explain_plans.py",
      "line_number": 76,
      "line_content": "cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    try:",
        "        cursor = connection.cursor(**cursor_kwargs)",
        "        if hasattr(cursor, \"ready\"):",
        "            cursor.ready = True",
        "",
        "        cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
        "    finally:",
        "        connection.close()",
        "",
        "",
        "# Tests"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_psycopg2/test_slow_sql.py",
      "line_number": 73,
      "line_content": "cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        port=DB_SETTINGS[\"port\"],",
        "    )",
        "",
        "    try:",
        "        cursor = connection.cursor()",
        "        cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
        "    finally:",
        "        connection.close()",
        "",
        "",
        "# Tests"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_psycopg2/test_span_event.py",
      "line_number": 52,
      "line_content": "cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        port=DB_SETTINGS[\"port\"],",
        "    )",
        "",
        "    try:",
        "        cursor = connection.cursor()",
        "        cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
        "",
        "        # No target",
        "        cursor.execute(\"SELECT 1\")",
        "    finally:",
        "        connection.close()"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_mysqldb/test_cursor.py",
      "line_number": 100,
      "line_content": "cursor.execute(f\"update `{table_name}` set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "            cursor.execute(f\"\"\"select * from {table_name}\"\"\")",
        "",
        "            for _ in cursor:",
        "                pass",
        "",
        "            cursor.execute(f\"update `{table_name}` set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
        "",
        "            cursor.execute(f\"\"\"delete from `{table_name}` where a=2\"\"\")",
        "",
        "            cursor.execute(\"\"\"show grants\"\"\")",
        ""
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_mysqldb/test_alias.py",
      "line_number": 100,
      "line_content": "cursor.execute(f\"update `{table_name}` set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "            cursor.execute(f\"\"\"select * from {table_name}\"\"\")",
        "",
        "            for _ in cursor:",
        "                pass",
        "",
        "            cursor.execute(f\"update `{table_name}` set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
        "",
        "            cursor.execute(f\"\"\"delete from `{table_name}` where a=2\"\"\")",
        "",
        "            cursor.execute(\"\"\"show grants\"\"\")",
        ""
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_pymssql/test_database.py",
      "line_number": 41,
      "line_content": "cursor.execute(f\"update {TABLE_NAME} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    cursor.execute(f\"\"\"select * from {TABLE_NAME}\"\"\")",
        "",
        "    for _row in cursor:",
        "        pass",
        "",
        "    cursor.execute(f\"update {TABLE_NAME} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
        "",
        "    cursor.execute(f\"\"\"delete from {TABLE_NAME} where a=2\"\"\")",
        "    cursor.execute(f\"\"\"drop procedure if exists {PROCEDURE_NAME}\"\"\")",
        "    cursor.execute(",
        "        f\"\"\"CREATE PROCEDURE {PROCEDURE_NAME} AS"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_postgresql/test_database.py",
      "line_number": 103,
      "line_content": "cursor.execute(f\"update {DB_SETTINGS['table_name']} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "",
        "        cursor.execute(",
        "            f\"with temporaryTable (averageValue) as (select avg(b) from {DB_SETTINGS['table_name']}) select * from {DB_SETTINGS['table_name']},temporaryTable where {DB_SETTINGS['table_name']}.b > temporaryTable.averageValue\"",
        "        )",
        "",
        "        cursor.execute(f\"update {DB_SETTINGS['table_name']} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
        "",
        "        cursor.execute(f\"\"\"delete from {DB_SETTINGS[\"table_name\"]} where a=2\"\"\")",
        "",
        "        connection.commit()",
        ""
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/agent_unittests/test_http_client.py",
      "line_number": 332,
      "line_content": "cert_file = None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    if system_certs_available:",
        "        cert_file = \"foo\"",
        "        ca_path = \"/usr/certs\"",
        "        system_certs = [{\"issuer\": \"Test CA\"}]  # Poorly faked certs",
        "    else:",
        "        cert_file = None",
        "        ca_path = None",
        "        system_certs = []",
        "",
        "    class DefaultVerifyPaths:",
        "        cafile = cert_file"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/agent_unittests/test_http_client.py",
      "line_number": 343,
      "line_content": "def get_ca_certs(purpose=None):",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        capath = ca_path",
        "",
        "        def __init__(self, *args, **kwargs):",
        "            pass",
        "",
        "    def get_ca_certs(purpose=None):",
        "        return system_certs",
        "",
        "    monkeypatch.setattr(ssl, \"DefaultVerifyPaths\", DefaultVerifyPaths)  # Bypass OpenSSL default certs",
        "    if sys.platform == \"win32\":",
        "        monkeypatch.setattr(ssl.SSLContext, \"get_ca_certs\", get_ca_certs)  # Bypass Windows default certs"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/agent_unittests/test_agent_protocol.py",
      "line_number": 550,
      "line_content": "def get_ca_certs(purpose=None):",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        capath = None",
        "",
        "        def __init__(self, *args, **kwargs):",
        "            pass",
        "",
        "    def get_ca_certs(purpose=None):",
        "        return []",
        "",
        "    monkeypatch.setattr(ssl, \"DefaultVerifyPaths\", DefaultVerifyPaths)  # Bypass OpenSSL default certs",
        "    if sys.platform == \"win32\":",
        "        monkeypatch.setattr(ssl.SSLContext, \"get_ca_certs\", get_ca_certs)  # Bypass Windows default certs"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_psycopg2cffi/test_database.py",
      "line_number": 107,
      "line_content": "cursor.execute(f\"update {DB_SETTINGS['table_name']} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        cursor.execute(f\"\"\"select * from {DB_SETTINGS[\"table_name\"]}\"\"\")",
        "",
        "        for _row in cursor:",
        "            pass",
        "",
        "        cursor.execute(f\"update {DB_SETTINGS['table_name']} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
        "",
        "        cursor.execute(f\"\"\"delete from {DB_SETTINGS[\"table_name\"]} where a=2\"\"\")",
        "",
        "        connection.commit()",
        ""
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_psycopg2cffi/test_database.py",
      "line_number": 220,
      "line_content": "async_cur.execute(f\"insert into {DB_SETTINGS['table_name']} values (%s, %s, %s)\", (1, 1.0, \"1.0\"))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    wait(async_cur.connection)",
        "",
        "    async_cur.execute(f\"create table {DB_SETTINGS['table_name']} (a integer, b real, c text)\")",
        "    wait(async_cur.connection)",
        "",
        "    async_cur.execute(f\"insert into {DB_SETTINGS['table_name']} values (%s, %s, %s)\", (1, 1.0, \"1.0\"))",
        "    wait(async_cur.connection)",
        "",
        "    async_cur.execute(f\"\"\"select * from {DB_SETTINGS[\"table_name\"]}\"\"\")",
        "    wait(async_cur.connection)",
        ""
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_psycopg2cffi/test_explain_plans.py",
      "line_number": 44,
      "line_content": "cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    )",
        "",
        "    try:",
        "        cursor = connection.cursor(**cursor_kwargs)",
        "",
        "        cursor.execute(\"\"\"SELECT setting from pg_settings where name=%s\"\"\", (\"server_version\",))",
        "    finally:",
        "        connection.close()",
        "",
        "",
        "# Tests"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/testing_support/http_23_testing.py",
      "line_number": 39,
      "line_content": "session.verify = False  # Disable SSL verification",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        # HTTP/1.1 must remain enabled to allow the session to open",
        "        session_kwargs[\"disable_http2\"] = True",
        "",
        "    # Create session",
        "    with niquests.Session(**session_kwargs) as session:",
        "        session.verify = False  # Disable SSL verification",
        "        if http_version == 3:",
        "            # Preset quic cache to enable HTTP/3 connections",
        "            session.quic_cache_layer[(host, port)] = (\"\", port)",
        "",
        "        # Send Request"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "tests/testing_support/http_23_testing.py",
      "line_number": 39,
      "line_content": "session.verify = False  # Disable SSL verification",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        # HTTP/1.1 must remain enabled to allow the session to open",
        "        session_kwargs[\"disable_http2\"] = True",
        "",
        "    # Create session",
        "    with niquests.Session(**session_kwargs) as session:",
        "        session.verify = False  # Disable SSL verification",
        "        if http_version == 3:",
        "            # Preset quic cache to enable HTTP/3 connections",
        "            session.quic_cache_layer[(host, port)] = (\"\", port)",
        "",
        "        # Send Request"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "tests/datastore_pymysql/test_database.py",
      "line_number": 45,
      "line_content": "cursor.execute(f\"update {TABLE_NAME} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    cursor.execute(f\"\"\"select * from {TABLE_NAME}\"\"\")",
        "",
        "    for _row in cursor:",
        "        pass",
        "",
        "    cursor.execute(f\"update {TABLE_NAME} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
        "",
        "    cursor.execute(f\"\"\"delete from {TABLE_NAME} where a=2\"\"\")",
        "    cursor.execute(f\"\"\"drop procedure if exists {PROCEDURE_NAME}\"\"\")",
        "    cursor.execute(",
        "        f\"\"\"CREATE PROCEDURE {PROCEDURE_NAME}()"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/external_httpx/test_client.py",
      "line_number": 182,
      "line_content": "response = sync_client.get(f\"http://localhost:{mock_server.port}\", headers={\"newrelic\": \"1234\"})",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    CAT_RESPONSE_CODE = 200",
        "",
        "    transaction = current_transaction()",
        "",
        "    with sync_client:",
        "        response = sync_client.get(f\"http://localhost:{mock_server.port}\", headers={\"newrelic\": \"1234\"})",
        "",
        "    transaction._test_request_headers = response.request.headers",
        "",
        "    assert response.status_code == 200",
        "    assert response.request.headers[\"newrelic\"] == \"1234\""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/external_httpx/test_client.py",
      "line_number": 199,
      "line_content": "response = await async_client.get(f\"http://localhost:{mock_server.port}\", headers={\"newrelic\": \"1234\"})",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    global CAT_RESPONSE_CODE",
        "    CAT_RESPONSE_CODE = 200",
        "",
        "    async def _test():",
        "        async with async_client:",
        "            response = await async_client.get(f\"http://localhost:{mock_server.port}\", headers={\"newrelic\": \"1234\"})",
        "",
        "        return response",
        "",
        "    response = loop.run_until_complete(_test())",
        ""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/external_httpx/test_client.py",
      "line_number": 453,
      "line_content": "client = httpx.Client(http1=False, http2=True, verify=False)",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "@background_task(name=\"test_sync_client_http2\")",
        "def test_sync_client_http2(httpx, real_server):",
        "    global CAT_RESPONSE_CODE",
        "    CAT_RESPONSE_CODE = 200",
        "",
        "    client = httpx.Client(http1=False, http2=True, verify=False)",
        "    response = exercise_sync_client(real_server, client, \"get\", protocol=\"https\")",
        "",
        "    assert response.status_code == 200",
        "    assert response.http_version in {\"HTTP/2\", \"HTTP/2.0\"}",
        ""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/external_httpx/test_client.py",
      "line_number": 468,
      "line_content": "client = httpx.AsyncClient(http1=False, http2=True, verify=False)",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "@background_task(name=\"test_async_client_http2\")",
        "def test_async_client_http2(httpx, real_server, loop):",
        "    global CAT_RESPONSE_CODE",
        "    CAT_RESPONSE_CODE = 200",
        "",
        "    client = httpx.AsyncClient(http1=False, http2=True, verify=False)",
        "",
        "    responses = loop.run_until_complete(exercise_async_client(real_server, client, \"get\", protocol=\"https\"))",
        "    assert all(response.status_code == 200 for response in responses)",
        "    assert all(response.http_version in {\"HTTP/2\", \"HTTP/2.0\"} for response in responses)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_aioredis/test_transactions.py",
      "line_number": 64,
      "line_content": "pipe = client.multi_exec()",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "",
        "@SKIPIF_AIOREDIS_V2",
        "@background_task()",
        "def test_multi_exec_no_harm(client, loop, key):",
        "    async def exercise():",
        "        pipe = client.multi_exec()",
        "        pipe.set(key, \"value\")",
        "        status = await pipe.execute()",
        "        assert status == [True]",
        "",
        "    loop.run_until_complete(exercise())"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_psycopg/test_multiple_dbs.py",
      "line_number": 77,
      "line_content": "await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "",
        "async def _exercise_db(multiple_connections):",
        "    connection = multiple_connections[0]",
        "    try:",
        "        cursor = connection.cursor()",
        "        await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
        "        await maybe_await(connection.commit())",
        "    finally:",
        "        await maybe_await(connection.close())",
        "",
        "    connection = multiple_connections[1]"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_psycopg/test_trace_node.py",
      "line_number": 68,
      "line_content": "await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        )",
        "    )",
        "",
        "    try:",
        "        cursor = connection.cursor()",
        "        await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
        "    finally:",
        "        await maybe_await(connection.close())",
        "",
        "",
        "# Tests"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_psycopg/test_explain_plans.py",
      "line_number": 74,
      "line_content": "await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    cursor_kwargs = cursor_kwargs or {}",
        "",
        "    try:",
        "        cursor = connection.cursor(**cursor_kwargs)",
        "",
        "        await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
        "    finally:",
        "        await maybe_await(connection.close())",
        "",
        "",
        "# Tests"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_psycopg/test_slow_sql.py",
      "line_number": 64,
      "line_content": "await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "",
        "",
        "async def _exercise_db(connection):",
        "    try:",
        "        cursor = connection.cursor()",
        "        await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
        "    finally:",
        "        await maybe_await(connection.close())",
        "",
        "",
        "# Tests"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_psycopg/test_span_event.py",
      "line_number": 43,
      "line_content": "await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "",
        "",
        "async def _exercise_db(connection):",
        "    try:",
        "        cursor = connection.cursor()",
        "        await maybe_await(cursor.execute(\"SELECT setting from pg_settings where name=%s\", (\"server_version\",)))",
        "",
        "        # No target",
        "        await maybe_await(cursor.execute(\"SELECT 1\"))",
        "    finally:",
        "        await maybe_await(connection.close())"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/external_requests/test_requests.py",
      "line_number": 78,
      "line_content": "requests.get(f\"https://localhost:{server.port}/\", verify=False)",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        background_task=True,",
        "    )",
        "    @background_task(name=\"test_requests:test_https_request_get\")",
        "    def _test():",
        "        try:",
        "            requests.get(f\"https://localhost:{server.port}/\", verify=False)",
        "        except Exception:",
        "            pass",
        "",
        "    _test()",
        ""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_valkey/test_instance_info.py",
      "line_number": 41,
      "line_content": "class DisabledSSLConnection(valkey.SSLConnection, DisabledConnection):",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "",
        "class DisabledUnixConnection(valkey.UnixDomainSocketConnection, DisabledConnection):",
        "    pass",
        "",
        "",
        "class DisabledSSLConnection(valkey.SSLConnection, DisabledConnection):",
        "    pass",
        "",
        "",
        "@pytest.mark.parametrize(\"args,kwargs,expected\", _instance_info_tests)",
        "def test_valkey_client_instance_info(args, kwargs, expected):"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_valkey/test_instance_info.py",
      "line_number": 132,
      "line_content": "r.connection_pool.connection_class = DisabledSSLConnection",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    if r.connection_pool.connection_class is valkey.Connection:",
        "        r.connection_pool.connection_class = DisabledConnection",
        "    elif r.connection_pool.connection_class is valkey.UnixDomainSocketConnection:",
        "        r.connection_pool.connection_class = DisabledUnixConnection",
        "    elif r.connection_pool.connection_class is valkey.SSLConnection:",
        "        r.connection_pool.connection_class = DisabledSSLConnection",
        "    else:",
        "        raise AssertionError(r.connection_pool.connection_class)",
        "    connection = r.connection_pool.get_connection(\"SELECT\")",
        "    try:",
        "        conn_kwargs = _conn_attrs_to_dict(connection)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_valkey/test_instance_info.py",
      "line_number": 151,
      "line_content": "r.connection_pool.connection_class = DisabledSSLConnection",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    if r.connection_pool.connection_class is valkey.Connection:",
        "        r.connection_pool.connection_class = DisabledConnection",
        "    elif r.connection_pool.connection_class is valkey.UnixDomainSocketConnection:",
        "        r.connection_pool.connection_class = DisabledUnixConnection",
        "    elif r.connection_pool.connection_class is valkey.SSLConnection:",
        "        r.connection_pool.connection_class = DisabledSSLConnection",
        "    else:",
        "        raise AssertionError(r.connection_pool.connection_class)",
        "    connection = r.connection_pool.get_connection(\"SELECT\")",
        "    try:",
        "        conn_kwargs = _conn_attrs_to_dict(connection)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_redis/test_instance_info.py",
      "line_number": 51,
      "line_content": "class DisabledSSLConnection(redis.SSLConnection, DisabledConnection):",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "",
        "class DisabledUnixConnection(redis.UnixDomainSocketConnection, DisabledConnection):",
        "    pass",
        "",
        "",
        "class DisabledSSLConnection(redis.SSLConnection, DisabledConnection):",
        "    pass",
        "",
        "",
        "@pytest.mark.parametrize(\"args,kwargs,expected\", _instance_info_tests)",
        "def test_redis_client_instance_info(args, kwargs, expected):"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_redis/test_instance_info.py",
      "line_number": 139,
      "line_content": "r.connection_pool.connection_class = DisabledSSLConnection",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    if r.connection_pool.connection_class is redis.Connection:",
        "        r.connection_pool.connection_class = DisabledConnection",
        "    elif r.connection_pool.connection_class is redis.UnixDomainSocketConnection:",
        "        r.connection_pool.connection_class = DisabledUnixConnection",
        "    elif r.connection_pool.connection_class is redis.SSLConnection:",
        "        r.connection_pool.connection_class = DisabledSSLConnection",
        "    else:",
        "        raise AssertionError(r.connection_pool.connection_class)",
        "    connection = r.connection_pool.get_connection(command_name)",
        "    try:",
        "        conn_kwargs = _conn_attrs_to_dict(connection)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_redis/test_instance_info.py",
      "line_number": 159,
      "line_content": "r.connection_pool.connection_class = DisabledSSLConnection",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    if r.connection_pool.connection_class is redis.Connection:",
        "        r.connection_pool.connection_class = DisabledConnection",
        "    elif r.connection_pool.connection_class is redis.UnixDomainSocketConnection:",
        "        r.connection_pool.connection_class = DisabledUnixConnection",
        "    elif r.connection_pool.connection_class is redis.SSLConnection:",
        "        r.connection_pool.connection_class = DisabledSSLConnection",
        "    else:",
        "        raise AssertionError(r.connection_pool.connection_class)",
        "    connection = r.connection_pool.get_connection(command_name)",
        "    try:",
        "        conn_kwargs = _conn_attrs_to_dict(connection)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/component_graphqlserver/test_graphql.py",
      "line_number": 81,
      "line_content": "\"query/<anonymous>/hello\", \"GraphQL\", rollup_metrics=_graphql_base_rollup_metrics + FRAMEWORK_METRICS",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "        (f\"Python/Framework/GraphQLServer/{graphql_server_version}\", 1),",
        "        (f\"Python/Framework/{framework}/{version}\", 1),",
        "    ]",
        "",
        "    @validate_transaction_metrics(",
        "        \"query/<anonymous>/hello\", \"GraphQL\", rollup_metrics=_graphql_base_rollup_metrics + FRAMEWORK_METRICS",
        "    )",
        "    def _test():",
        "        response = target_application(\"{ hello }\")",
        "",
        "    _test()"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/datastore_aiomysql/test_database.py",
      "line_number": 45,
      "line_content": "await cursor.execute(f\"update {TABLE_NAME} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
      "category": "SQL Injection",
      "severity": "HIGH",
      "cwe": "CWE-89",
      "description": "SQL injection vulnerability in agent database queries",
      "context": [
        "    await cursor.execute(f\"\"\"select * from {TABLE_NAME}\"\"\")",
        "",
        "    async for _ in cursor:",
        "        pass",
        "",
        "    await cursor.execute(f\"update {TABLE_NAME} set a=%s, b=%s, c=%s where a=%s\", (4, 4.0, \"4.0\", 1))",
        "",
        "    await cursor.execute(f\"\"\"delete from {TABLE_NAME} where a=2\"\"\")",
        "    await cursor.execute(f\"\"\"drop procedure if exists {PROCEDURE_NAME}\"\"\")",
        "    await cursor.execute(",
        "        f\"\"\"CREATE PROCEDURE {PROCEDURE_NAME}()"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "tests/agent_features/test_synthetics.py",
      "line_number": 175,
      "line_content": "\"X-NewRelic-Synthetics-Info\": _make_synthetics_headers(encoding_key=encoding_key)[\"X-NewRelic-Synthetics-Info\"],",
      "category": "Hardcoded Credentials",
      "severity": "CRITICAL",
      "cwe": "CWE-798",
      "description": "Hardcoded API key or credential in agent code",
      "context": [
        "@override_application_settings(_override_settings)",
        "def test_synthetics_event_mismatched_info_encoding_key():",
        "    encoding_key = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "    headers = {",
        "        \"X-NewRelic-Synthetics\": _make_synthetics_headers(type_=None)[\"X-NewRelic-Synthetics\"],",
        "        \"X-NewRelic-Synthetics-Info\": _make_synthetics_headers(encoding_key=encoding_key)[\"X-NewRelic-Synthetics-Info\"],",
        "    }",
        "    response = target_application.get(\"/\", headers=headers)",
        "",
        "",
        "_test_valid_synthetics_tt_required = {"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "newrelic/config.py",
      "line_number": 452,
      "line_content": "_process_setting(section, \"debug.disable_certificate_validation\", \"getboolean\", None)",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    _process_setting(section, \"debug.log_autorum_middleware\", \"getboolean\", None)",
        "    _process_setting(section, \"debug.log_untrusted_distributed_trace_keys\", \"getboolean\", None)",
        "    _process_setting(section, \"debug.enable_coroutine_profiling\", \"getboolean\", None)",
        "    _process_setting(section, \"debug.record_transaction_failure\", \"getboolean\", None)",
        "    _process_setting(section, \"debug.explain_plan_obfuscation\", \"get\", None)",
        "    _process_setting(section, \"debug.disable_certificate_validation\", \"getboolean\", None)",
        "    _process_setting(section, \"debug.disable_harvest_until_shutdown\", \"getboolean\", None)",
        "    _process_setting(section, \"debug.connect_span_stream_in_developer_mode\", \"getboolean\", None)",
        "    _process_setting(section, \"debug.otlp_content_encoding\", \"get\", None)",
        "    _process_setting(section, \"cross_application_tracer.enabled\", \"getboolean\", None)",
        "    _process_setting(section, \"message_tracer.segment_parameters_enabled\", \"getboolean\", None)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "newrelic/config.py",
      "line_number": 1318,
      "line_content": "name = eval(name, callable_vars)  # noqa: S307",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "            if _config_object.has_option(section, \"group\"):",
        "                group = _config_object.get(section, \"group\")",
        "",
        "            if name and name.startswith(\"lambda \"):",
        "                callable_vars = {\"callable_name\": callable_name}",
        "                name = eval(name, callable_vars)  # noqa: S307",
        "",
        "            _logger.debug(\"register background-task %s\", ((module, object_path, application, name, group),))",
        "",
        "            hook = _background_task_import_hook(object_path, application, name, group)",
        "            newrelic.api.import_hook.register_import_hook(module, hook)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "newrelic/config.py",
      "line_number": 1368,
      "line_content": "sql = eval(sql, callable_vars)  # noqa: S307",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "",
        "            sql = _config_object.get(section, \"sql\")",
        "",
        "            if sql.startswith(\"lambda \"):",
        "                callable_vars = {\"callable_name\": callable_name}",
        "                sql = eval(sql, callable_vars)  # noqa: S307",
        "",
        "            _logger.debug(\"register database-trace %s\", ((module, object_path, sql),))",
        "",
        "            hook = _database_trace_import_hook(object_path, sql)",
        "            newrelic.api.import_hook.register_import_hook(module, hook)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "newrelic/config.py",
      "line_number": 1423,
      "line_content": "url = eval(url, callable_vars)  # noqa: S307",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "            if _config_object.has_option(section, \"method\"):",
        "                method = _config_object.get(section, \"method\")",
        "",
        "            if url.startswith(\"lambda \"):",
        "                callable_vars = {\"callable_name\": callable_name}",
        "                url = eval(url, callable_vars)  # noqa: S307",
        "",
        "            if method and method.startswith(\"lambda \"):",
        "                callable_vars = {\"callable_name\": callable_name}",
        "                method = eval(method, callable_vars)  # noqa: S307",
        ""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "newrelic/config.py",
      "line_number": 1427,
      "line_content": "method = eval(method, callable_vars)  # noqa: S307",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "                callable_vars = {\"callable_name\": callable_name}",
        "                url = eval(url, callable_vars)  # noqa: S307",
        "",
        "            if method and method.startswith(\"lambda \"):",
        "                callable_vars = {\"callable_name\": callable_name}",
        "                method = eval(method, callable_vars)  # noqa: S307",
        "",
        "            _logger.debug(\"register external-trace %s\", ((module, object_path, library, url, method),))",
        "",
        "            hook = _external_trace_import_hook(object_path, library, url, method)",
        "            newrelic.api.import_hook.register_import_hook(module, hook)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "newrelic/config.py",
      "line_number": 1495,
      "line_content": "name = eval(name, callable_vars)  # noqa: S307",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "            if _config_object.has_option(section, \"rollup\"):",
        "                rollup = _config_object.get(section, \"rollup\")",
        "",
        "            if name and name.startswith(\"lambda \"):",
        "                callable_vars = {\"callable_name\": callable_name}",
        "                name = eval(name, callable_vars)  # noqa: S307",
        "",
        "            _logger.debug(",
        "                \"register function-trace %s\", ((module, object_path, name, group, label, params, terminal, rollup),)",
        "            )",
        ""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "newrelic/config.py",
      "line_number": 1553,
      "line_content": "name = eval(name, callable_vars)  # noqa: S307",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "            if _config_object.has_option(section, \"group\"):",
        "                group = _config_object.get(section, \"group\")",
        "",
        "            if name and name.startswith(\"lambda \"):",
        "                callable_vars = {\"callable_name\": callable_name}",
        "                name = eval(name, callable_vars)  # noqa: S307",
        "",
        "            _logger.debug(\"register generator-trace %s\", ((module, object_path, name, group),))",
        "",
        "            hook = _generator_trace_import_hook(object_path, name, group)",
        "            newrelic.api.import_hook.register_import_hook(module, hook)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "newrelic/config.py",
      "line_number": 1612,
      "line_content": "name = eval(name, callable_vars)  # noqa: S307",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "            if _config_object.has_option(section, \"depth\"):",
        "                depth = _config_object.get(section, \"depth\")",
        "",
        "            if name and name.startswith(\"lambda \"):",
        "                callable_vars = {\"callable_name\": callable_name}",
        "                name = eval(name, callable_vars)  # noqa: S307",
        "",
        "            _logger.debug(\"register profile-trace %s\", ((module, object_path, name, group, depth),))",
        "",
        "            hook = _profile_trace_import_hook(object_path, name, group, depth=depth)",
        "            newrelic.api.import_hook.register_import_hook(module, hook)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "newrelic/config.py",
      "line_number": 1662,
      "line_content": "command = eval(command, callable_vars)  # noqa: S307",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "",
        "            command = _config_object.get(section, \"command\")",
        "",
        "            if command.startswith(\"lambda \"):",
        "                callable_vars = {\"callable_name\": callable_name}",
        "                command = eval(command, callable_vars)  # noqa: S307",
        "",
        "            _logger.debug(\"register memcache-trace %s\", (module, object_path, command))",
        "",
        "            hook = _memcache_trace_import_hook(object_path, command)",
        "            newrelic.api.import_hook.register_import_hook(module, hook)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "newrelic/config.py",
      "line_number": 1722,
      "line_content": "name = eval(name, callable_vars)  # noqa: S307",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "            if _config_object.has_option(section, \"priority\"):",
        "                priority = _config_object.getint(section, \"priority\")",
        "",
        "            if name and name.startswith(\"lambda \"):",
        "                callable_vars = {\"callable_name\": callable_name}",
        "                name = eval(name, callable_vars)  # noqa: S307",
        "",
        "            _logger.debug(\"register transaction-name %s\", ((module, object_path, name, group, priority),))",
        "",
        "            hook = _transaction_name_import_hook(object_path, name, group, priority)",
        "            newrelic.api.import_hook.register_import_hook(module, hook)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "newrelic/core/database_utils.py",
      "line_number": 364,
      "line_content": "def _parse_exec(sql):",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "",
        "_parse_exec_p = r\"\\s*EXEC\\s+(?!\\()(\\w+)\"",
        "_parse_exec_re = re.compile(_parse_exec_p, re.IGNORECASE)",
        "",
        "",
        "def _parse_exec(sql):",
        "    return _parse_default(sql, _parse_exec_re)",
        "",
        "",
        "_parse_execute_p = r\"\\s*EXECUTE\\s+(?!\\()(\\w+)\"",
        "_parse_execute_re = re.compile(_parse_execute_p, re.IGNORECASE)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/common/agent_http.py",
      "line_number": 275,
      "line_content": "system_certs = None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "                        try:",
        "                            _context = ssl.SSLContext()",
        "                            _context.load_default_certs()",
        "                            system_certs = _context.get_ca_certs()",
        "                        except Exception:",
        "                            system_certs = None",
        "",
        "                        # If we still can't find any certs after loading the default ones,",
        "                        # then assume the bundled certs are required. If we do find them,",
        "                        # we don't have to do anything. We let urllib3 handle loading the",
        "                        # default certs from Windows."
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/common/agent_http.py",
      "line_number": 292,
      "line_content": "connection_kwargs[\"cert_reqs\"] = \"NONE\"",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "                    connection_kwargs[\"ca_cert_dir\"] = ca_bundle_path",
        "                else:",
        "                    connection_kwargs[\"ca_certs\"] = ca_bundle_path",
        "",
        "            if disable_certificate_validation:",
        "                connection_kwargs[\"cert_reqs\"] = \"NONE\"",
        "",
        "        proxy = self._parse_proxy(proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass)",
        "        proxy_headers = proxy and proxy.auth and urllib3.make_headers(proxy_basic_auth=proxy.auth)",
        "",
        "        if proxy:"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/common/agent_http.py",
      "line_number": 462,
      "line_content": "disable_certificate_validation = None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "            # HTTPS must be used to connect to the proxy",
        "            self.CONNECTION_CLS = urllib3.HTTPSConnectionPool",
        "        else:",
        "            # Disable any HTTPS specific options",
        "            ca_bundle_path = None",
        "            disable_certificate_validation = None",
        "",
        "        super().__init__(",
        "            host,",
        "            port,",
        "            proxy_scheme,"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/common/encoding_utils.py",
      "line_number": 248,
      "line_content": "path_hash = rotated ^ int(hashlib.md5(name).hexdigest()[-8:], base=16)  # noqa: S324",
      "category": "Weak Cryptography",
      "severity": "MEDIUM",
      "cwe": "CWE-327",
      "description": "Weak cryptographic algorithm detected",
      "context": [
        "    rotated = ((seed << 1) | (seed >> 31)) & 0xFFFFFFFF",
        "",
        "    if not isinstance(name, bytes):",
        "        name = name.encode(\"UTF-8\")",
        "",
        "    path_hash = rotated ^ int(hashlib.md5(name).hexdigest()[-8:], base=16)  # noqa: S324",
        "    return f\"{path_hash:08x}\"",
        "",
        "",
        "def base64_encode(text):",
        "    \"\"\"Base 64 encodes the UTF-8 encoded representation of the text. In Python"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/common/encoding_utils.py",
      "line_number": 248,
      "line_content": "path_hash = rotated ^ int(hashlib.md5(name).hexdigest()[-8:], base=16)  # noqa: S324",
      "category": "Weak Cryptography",
      "severity": "MEDIUM",
      "cwe": "CWE-327",
      "description": "Weak cryptographic algorithm detected",
      "context": [
        "    rotated = ((seed << 1) | (seed >> 31)) & 0xFFFFFFFF",
        "",
        "    if not isinstance(name, bytes):",
        "        name = name.encode(\"UTF-8\")",
        "",
        "    path_hash = rotated ^ int(hashlib.md5(name).hexdigest()[-8:], base=16)  # noqa: S324",
        "    return f\"{path_hash:08x}\"",
        "",
        "",
        "def base64_encode(text):",
        "    \"\"\"Base 64 encodes the UTF-8 encoded representation of the text. In Python"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/common/encoding_utils.py",
      "line_number": 248,
      "line_content": "path_hash = rotated ^ int(hashlib.md5(name).hexdigest()[-8:], base=16)  # noqa: S324",
      "category": "Weak Cryptography",
      "severity": "MEDIUM",
      "cwe": "CWE-327",
      "description": "Weak cryptographic algorithm detected",
      "context": [
        "    rotated = ((seed << 1) | (seed >> 31)) & 0xFFFFFFFF",
        "",
        "    if not isinstance(name, bytes):",
        "        name = name.encode(\"UTF-8\")",
        "",
        "    path_hash = rotated ^ int(hashlib.md5(name).hexdigest()[-8:], base=16)  # noqa: S324",
        "    return f\"{path_hash:08x}\"",
        "",
        "",
        "def base64_encode(text):",
        "    \"\"\"Base 64 encodes the UTF-8 encoded representation of the text. In Python"
      ],
      "confidence": 0.6,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/wrapt/decorators.py",
      "line_number": 23,
      "line_content": "exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "            if _locs_ is None:",
        "                _locs_ = frame.f_locals",
        "            del frame",
        "        elif _locs_ is None:",
        "            _locs_ = _globs_",
        "        exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
        "",
        "else:",
        "    string_types = str,",
        "",
        "    import builtins"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/opentelemetry_proto/metrics_pb2.py",
      "line_number": 26,
      "line_content": "DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\\n3newrelic/packages/opentelemetry_proto/metrics.proto\\x12%newrelic.packages.opentelemetry_proto\\x1a\\x32newrelic/packages/opentelemetry_proto/common.proto\\x1a\\x34newrelic/packages/opentelemetry_proto/resource.proto\\\"_\\n\\x0bMetricsData\\x12P\\n\\x10resource_metrics\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.ResourceMetrics\\\"\\xbc\\x01\\n\\x0fResourceMetrics\\x12\\x41\\n\\x08resource\\x18\\x01 \\x01(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Resource\\x12J\\n\\rscope_metrics\\x18\\x02 \\x03(\\x0b\\x32\\x33.newrelic.packages.opentelemetry_proto.ScopeMetrics\\x12\\x12\\n\\nschema_url\\x18\\x03 \\x01(\\tJ\\x06\\x08\\xe8\\x07\\x10\\xe9\\x07\\\"\\xae\\x01\\n\\x0cScopeMetrics\\x12J\\n\\x05scope\\x18\\x01 \\x01(\\x0b\\x32;.newrelic.packages.opentelemetry_proto.InstrumentationScope\\x12>\\n\\x07metrics\\x18\\x02 \\x03(\\x0b\\x32-.newrelic.packages.opentelemetry_proto.Metric\\x12\\x12\\n\\nschema_url\\x18\\x03 \\x01(\\t\\\"\\xf8\\x03\\n\\x06Metric\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x13\\n\\x0b\\x64\\x65scription\\x18\\x02 \\x01(\\t\\x12\\x0c\\n\\x04unit\\x18\\x03 \\x01(\\t\\x12=\\n\\x05gauge\\x18\\x05 \\x01(\\x0b\\x32,.newrelic.packages.opentelemetry_proto.GaugeH\\x00\\x12\\x39\\n\\x03sum\\x18\\x07 \\x01(\\x0b\\x32*.newrelic.packages.opentelemetry_proto.SumH\\x00\\x12\\x45\\n\\thistogram\\x18\\t \\x01(\\x0b\\x32\\x30.newrelic.packages.opentelemetry_proto.HistogramH\\x00\\x12\\\\\\n\\x15\\x65xponential_histogram\\x18\\n \\x01(\\x0b\\x32;.newrelic.packages.opentelemetry_proto.ExponentialHistogramH\\x00\\x12\\x41\\n\\x07summary\\x18\\x0b \\x01(\\x0b\\x32..newrelic.packages.opentelemetry_proto.SummaryH\\x00\\x12\\x41\\n\\x08metadata\\x18\\x0c \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValueB\\x06\\n\\x04\\x64\\x61taJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"T\\n\\x05Gauge\\x12K\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\\\"\\xc8\\x01\\n\\x03Sum\\x12K\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\x12\\x14\\n\\x0cis_monotonic\\x18\\x03 \\x01(\\x08\\\"\\xbb\\x01\\n\\tHistogram\\x12N\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x39.newrelic.packages.opentelemetry_proto.HistogramDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\\"\\xd1\\x01\\n\\x14\\x45xponentialHistogram\\x12Y\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x44.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\\"W\\n\\x07Summary\\x12L\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x37.newrelic.packages.opentelemetry_proto.SummaryDataPoint\\\"\\x95\\x02\\n\\x0fNumberDataPoint\\x12\\x43\\n\\nattributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\x13\\n\\tas_double\\x18\\x04 \\x01(\\x01H\\x00\\x12\\x10\\n\\x06\\x61s_int\\x18\\x06 \\x01(\\x10H\\x00\\x12\\x42\\n\\texemplars\\x18\\x05 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\r\\n\\x05\\x66lags\\x18\\x08 \\x01(\\rB\\x07\\n\\x05valueJ\\x04\\x08\\x01\\x10\\x02\\\"\\xf5\\x02\\n\\x12HistogramDataPoint\\x12\\x43\\n\\nattributes\\x18\\t \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x10\\n\\x03sum\\x18\\x05 \\x01(\\x01H\\x00\\x88\\x01\\x01\\x12\\x15\\n\\rbucket_counts\\x18\\x06 \\x03(\\x06\\x12\\x17\\n\\x0f\\x65xplicit_bounds\\x18\\x07 \\x03(\\x01\\x12\\x42\\n\\texemplars\\x18\\x08 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\r\\n\\x05\\x66lags\\x18\\n \\x01(\\r\\x12\\x10\\n\\x03min\\x18\\x0b \\x01(\\x01H\\x01\\x88\\x01\\x01\\x12\\x10\\n\\x03max\\x18\\x0c \\x01(\\x01H\\x02\\x88\\x01\\x01\\x42\\x06\\n\\x04_sumB\\x06\\n\\x04_minB\\x06\\n\\x04_maxJ\\x04\\x08\\x01\\x10\\x02\\\"\\xf7\\x04\\n\\x1d\\x45xponentialHistogramDataPoint\\x12\\x43\\n\\nattributes\\x18\\x01 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x10\\n\\x03sum\\x18\\x05 \\x01(\\x01H\\x00\\x88\\x01\\x01\\x12\\r\\n\\x05scale\\x18\\x06 \\x01(\\x11\\x12\\x12\\n\\nzero_count\\x18\\x07 \\x01(\\x06\\x12^\\n\\x08positive\\x18\\x08 \\x01(\\x0b\\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\\x12^\\n\\x08negative\\x18\\t \\x01(\\x0b\\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\\x12\\r\\n\\x05\\x66lags\\x18\\n \\x01(\\r\\x12\\x42\\n\\texemplars\\x18\\x0b \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\x10\\n\\x03min\\x18\\x0c \\x01(\\x01H\\x01\\x88\\x01\\x01\\x12\\x10\\n\\x03max\\x18\\r \\x01(\\x01H\\x02\\x88\\x01\\x01\\x12\\x16\\n\\x0ezero_threshold\\x18\\x0e \\x01(\\x01\\x1a\\x30\\n\\x07\\x42uckets\\x12\\x0e\\n\\x06offset\\x18\\x01 \\x01(\\x11\\x12\\x15\\n\\rbucket_counts\\x18\\x02 \\x03(\\x04\\x42\\x06\\n\\x04_sumB\\x06\\n\\x04_minB\\x06\\n\\x04_max\\\"\\xd4\\x02\\n\\x10SummaryDataPoint\\x12\\x43\\n\\nattributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x0b\\n\\x03sum\\x18\\x05 \\x01(\\x01\\x12`\\n\\x0fquantile_values\\x18\\x06 \\x03(\\x0b\\x32G.newrelic.packages.opentelemetry_proto.SummaryDataPoint.ValueAtQuantile\\x12\\r\\n\\x05\\x66lags\\x18\\x08 \\x01(\\r\\x1a\\x32\\n\\x0fValueAtQuantile\\x12\\x10\\n\\x08quantile\\x18\\x01 \\x01(\\x01\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\x01J\\x04\\x08\\x01\\x10\\x02\\\"\\xc9\\x01\\n\\x08\\x45xemplar\\x12L\\n\\x13\\x66iltered_attributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x13\\n\\tas_double\\x18\\x03 \\x01(\\x01H\\x00\\x12\\x10\\n\\x06\\x61s_int\\x18\\x06 \\x01(\\x10H\\x00\\x12\\x0f\\n\\x07span_id\\x18\\x04 \\x01(\\x0c\\x12\\x10\\n\\x08trace_id\\x18\\x05 \\x01(\\x0c\\x42\\x07\\n\\x05valueJ\\x04\\x08\\x01\\x10\\x02*\\x8c\\x01\\n\\x16\\x41ggregationTemporality\\x12\\'\\n#AGGREGATION_TEMPORALITY_UNSPECIFIED\\x10\\x00\\x12!\\n\\x1d\\x41GGREGATION_TEMPORALITY_DELTA\\x10\\x01\\x12&\\n\\\"AGGREGATION_TEMPORALITY_CUMULATIVE\\x10\\x02*^\\n\\x0e\\x44\\x61taPointFlags\\x12\\x1f\\n\\x1b\\x44\\x41TA_POINT_FLAGS_DO_NOT_USE\\x10\\x00\\x12+\\n\\'DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK\\x10\\x01\\x42\\x7f\\n!io.opentelemetry.proto.metrics.v1B\\x0cMetricsProtoP\\x01Z)go.opentelemetry.io/proto/otlp/metrics/v1\\xaa\\x02\\x1eOpenTelemetry.Proto.Metrics.V1b\\x06proto3')",
      "category": "Hardcoded Credentials",
      "severity": "CRITICAL",
      "cwe": "CWE-798",
      "description": "Hardcoded API key or credential in agent code",
      "context": [
        "",
        "from newrelic.packages.opentelemetry_proto import common_pb2 as newrelic_dot_packages_dot_opentelemetry__proto_dot_common__pb2",
        "from newrelic.packages.opentelemetry_proto import resource_pb2 as newrelic_dot_packages_dot_opentelemetry__proto_dot_resource__pb2",
        "",
        "",
        "DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\\n3newrelic/packages/opentelemetry_proto/metrics.proto\\x12%newrelic.packages.opentelemetry_proto\\x1a\\x32newrelic/packages/opentelemetry_proto/common.proto\\x1a\\x34newrelic/packages/opentelemetry_proto/resource.proto\\\"_\\n\\x0bMetricsData\\x12P\\n\\x10resource_metrics\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.ResourceMetrics\\\"\\xbc\\x01\\n\\x0fResourceMetrics\\x12\\x41\\n\\x08resource\\x18\\x01 \\x01(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Resource\\x12J\\n\\rscope_metrics\\x18\\x02 \\x03(\\x0b\\x32\\x33.newrelic.packages.opentelemetry_proto.ScopeMetrics\\x12\\x12\\n\\nschema_url\\x18\\x03 \\x01(\\tJ\\x06\\x08\\xe8\\x07\\x10\\xe9\\x07\\\"\\xae\\x01\\n\\x0cScopeMetrics\\x12J\\n\\x05scope\\x18\\x01 \\x01(\\x0b\\x32;.newrelic.packages.opentelemetry_proto.InstrumentationScope\\x12>\\n\\x07metrics\\x18\\x02 \\x03(\\x0b\\x32-.newrelic.packages.opentelemetry_proto.Metric\\x12\\x12\\n\\nschema_url\\x18\\x03 \\x01(\\t\\\"\\xf8\\x03\\n\\x06Metric\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x13\\n\\x0b\\x64\\x65scription\\x18\\x02 \\x01(\\t\\x12\\x0c\\n\\x04unit\\x18\\x03 \\x01(\\t\\x12=\\n\\x05gauge\\x18\\x05 \\x01(\\x0b\\x32,.newrelic.packages.opentelemetry_proto.GaugeH\\x00\\x12\\x39\\n\\x03sum\\x18\\x07 \\x01(\\x0b\\x32*.newrelic.packages.opentelemetry_proto.SumH\\x00\\x12\\x45\\n\\thistogram\\x18\\t \\x01(\\x0b\\x32\\x30.newrelic.packages.opentelemetry_proto.HistogramH\\x00\\x12\\\\\\n\\x15\\x65xponential_histogram\\x18\\n \\x01(\\x0b\\x32;.newrelic.packages.opentelemetry_proto.ExponentialHistogramH\\x00\\x12\\x41\\n\\x07summary\\x18\\x0b \\x01(\\x0b\\x32..newrelic.packages.opentelemetry_proto.SummaryH\\x00\\x12\\x41\\n\\x08metadata\\x18\\x0c \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValueB\\x06\\n\\x04\\x64\\x61taJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"T\\n\\x05Gauge\\x12K\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\\\"\\xc8\\x01\\n\\x03Sum\\x12K\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\x12\\x14\\n\\x0cis_monotonic\\x18\\x03 \\x01(\\x08\\\"\\xbb\\x01\\n\\tHistogram\\x12N\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x39.newrelic.packages.opentelemetry_proto.HistogramDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\\"\\xd1\\x01\\n\\x14\\x45xponentialHistogram\\x12Y\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x44.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\\"W\\n\\x07Summary\\x12L\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x37.newrelic.packages.opentelemetry_proto.SummaryDataPoint\\\"\\x95\\x02\\n\\x0fNumberDataPoint\\x12\\x43\\n\\nattributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\x13\\n\\tas_double\\x18\\x04 \\x01(\\x01H\\x00\\x12\\x10\\n\\x06\\x61s_int\\x18\\x06 \\x01(\\x10H\\x00\\x12\\x42\\n\\texemplars\\x18\\x05 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\r\\n\\x05\\x66lags\\x18\\x08 \\x01(\\rB\\x07\\n\\x05valueJ\\x04\\x08\\x01\\x10\\x02\\\"\\xf5\\x02\\n\\x12HistogramDataPoint\\x12\\x43\\n\\nattributes\\x18\\t \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x10\\n\\x03sum\\x18\\x05 \\x01(\\x01H\\x00\\x88\\x01\\x01\\x12\\x15\\n\\rbucket_counts\\x18\\x06 \\x03(\\x06\\x12\\x17\\n\\x0f\\x65xplicit_bounds\\x18\\x07 \\x03(\\x01\\x12\\x42\\n\\texemplars\\x18\\x08 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\r\\n\\x05\\x66lags\\x18\\n \\x01(\\r\\x12\\x10\\n\\x03min\\x18\\x0b \\x01(\\x01H\\x01\\x88\\x01\\x01\\x12\\x10\\n\\x03max\\x18\\x0c \\x01(\\x01H\\x02\\x88\\x01\\x01\\x42\\x06\\n\\x04_sumB\\x06\\n\\x04_minB\\x06\\n\\x04_maxJ\\x04\\x08\\x01\\x10\\x02\\\"\\xf7\\x04\\n\\x1d\\x45xponentialHistogramDataPoint\\x12\\x43\\n\\nattributes\\x18\\x01 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x10\\n\\x03sum\\x18\\x05 \\x01(\\x01H\\x00\\x88\\x01\\x01\\x12\\r\\n\\x05scale\\x18\\x06 \\x01(\\x11\\x12\\x12\\n\\nzero_count\\x18\\x07 \\x01(\\x06\\x12^\\n\\x08positive\\x18\\x08 \\x01(\\x0b\\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\\x12^\\n\\x08negative\\x18\\t \\x01(\\x0b\\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\\x12\\r\\n\\x05\\x66lags\\x18\\n \\x01(\\r\\x12\\x42\\n\\texemplars\\x18\\x0b \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\x10\\n\\x03min\\x18\\x0c \\x01(\\x01H\\x01\\x88\\x01\\x01\\x12\\x10\\n\\x03max\\x18\\r \\x01(\\x01H\\x02\\x88\\x01\\x01\\x12\\x16\\n\\x0ezero_threshold\\x18\\x0e \\x01(\\x01\\x1a\\x30\\n\\x07\\x42uckets\\x12\\x0e\\n\\x06offset\\x18\\x01 \\x01(\\x11\\x12\\x15\\n\\rbucket_counts\\x18\\x02 \\x03(\\x04\\x42\\x06\\n\\x04_sumB\\x06\\n\\x04_minB\\x06\\n\\x04_max\\\"\\xd4\\x02\\n\\x10SummaryDataPoint\\x12\\x43\\n\\nattributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x0b\\n\\x03sum\\x18\\x05 \\x01(\\x01\\x12`\\n\\x0fquantile_values\\x18\\x06 \\x03(\\x0b\\x32G.newrelic.packages.opentelemetry_proto.SummaryDataPoint.ValueAtQuantile\\x12\\r\\n\\x05\\x66lags\\x18\\x08 \\x01(\\r\\x1a\\x32\\n\\x0fValueAtQuantile\\x12\\x10\\n\\x08quantile\\x18\\x01 \\x01(\\x01\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\x01J\\x04\\x08\\x01\\x10\\x02\\\"\\xc9\\x01\\n\\x08\\x45xemplar\\x12L\\n\\x13\\x66iltered_attributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x13\\n\\tas_double\\x18\\x03 \\x01(\\x01H\\x00\\x12\\x10\\n\\x06\\x61s_int\\x18\\x06 \\x01(\\x10H\\x00\\x12\\x0f\\n\\x07span_id\\x18\\x04 \\x01(\\x0c\\x12\\x10\\n\\x08trace_id\\x18\\x05 \\x01(\\x0c\\x42\\x07\\n\\x05valueJ\\x04\\x08\\x01\\x10\\x02*\\x8c\\x01\\n\\x16\\x41ggregationTemporality\\x12\\'\\n#AGGREGATION_TEMPORALITY_UNSPECIFIED\\x10\\x00\\x12!\\n\\x1d\\x41GGREGATION_TEMPORALITY_DELTA\\x10\\x01\\x12&\\n\\\"AGGREGATION_TEMPORALITY_CUMULATIVE\\x10\\x02*^\\n\\x0e\\x44\\x61taPointFlags\\x12\\x1f\\n\\x1b\\x44\\x41TA_POINT_FLAGS_DO_NOT_USE\\x10\\x00\\x12+\\n\\'DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK\\x10\\x01\\x42\\x7f\\n!io.opentelemetry.proto.metrics.v1B\\x0cMetricsProtoP\\x01Z)go.opentelemetry.io/proto/otlp/metrics/v1\\xaa\\x02\\x1eOpenTelemetry.Proto.Metrics.V1b\\x06proto3')",
        "",
        "_globals = globals()",
        "_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)",
        "_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'newrelic.packages.opentelemetry_proto.metrics_pb2', _globals)",
        "if not _descriptor._USE_C_DESCRIPTORS:"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "newrelic/packages/urllib3/connection.py",
      "line_number": 294,
      "line_content": "cert_reqs = None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    socket by means of :py:func:`urllib3.util.ssl_wrap_socket`.",
        "    \"\"\"",
        "",
        "    default_port = port_by_scheme[\"https\"]",
        "",
        "    cert_reqs = None",
        "    ca_certs = None",
        "    ca_cert_dir = None",
        "    ca_cert_data = None",
        "    ssl_version = None",
        "    assert_fingerprint = None"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connection.py",
      "line_number": 295,
      "line_content": "ca_certs = None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    \"\"\"",
        "",
        "    default_port = port_by_scheme[\"https\"]",
        "",
        "    cert_reqs = None",
        "    ca_certs = None",
        "    ca_cert_dir = None",
        "    ca_cert_data = None",
        "    ssl_version = None",
        "    assert_fingerprint = None",
        "    tls_in_tls_required = False"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connection.py",
      "line_number": 296,
      "line_content": "ca_cert_dir = None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "",
        "    default_port = port_by_scheme[\"https\"]",
        "",
        "    cert_reqs = None",
        "    ca_certs = None",
        "    ca_cert_dir = None",
        "    ca_cert_data = None",
        "    ssl_version = None",
        "    assert_fingerprint = None",
        "    tls_in_tls_required = False",
        ""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connection.py",
      "line_number": 297,
      "line_content": "ca_cert_data = None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    default_port = port_by_scheme[\"https\"]",
        "",
        "    cert_reqs = None",
        "    ca_certs = None",
        "    ca_cert_dir = None",
        "    ca_cert_data = None",
        "    ssl_version = None",
        "    assert_fingerprint = None",
        "    tls_in_tls_required = False",
        "",
        "    def __init__("
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connection.py",
      "line_number": 307,
      "line_content": "cert_file=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    def __init__(",
        "        self,",
        "        host,",
        "        port=None,",
        "        key_file=None,",
        "        cert_file=None,",
        "        key_password=None,",
        "        strict=None,",
        "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,",
        "        ssl_context=None,",
        "        server_hostname=None,"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connection.py",
      "line_number": 331,
      "line_content": "cert_file=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        self._protocol = \"https\"",
        "",
        "    def set_cert(",
        "        self,",
        "        key_file=None,",
        "        cert_file=None,",
        "        cert_reqs=None,",
        "        key_password=None,",
        "        ca_certs=None,",
        "        assert_hostname=None,",
        "        assert_fingerprint=None,"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connection.py",
      "line_number": 332,
      "line_content": "cert_reqs=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "",
        "    def set_cert(",
        "        self,",
        "        key_file=None,",
        "        cert_file=None,",
        "        cert_reqs=None,",
        "        key_password=None,",
        "        ca_certs=None,",
        "        assert_hostname=None,",
        "        assert_fingerprint=None,",
        "        ca_cert_dir=None,"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connection.py",
      "line_number": 334,
      "line_content": "ca_certs=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        self,",
        "        key_file=None,",
        "        cert_file=None,",
        "        cert_reqs=None,",
        "        key_password=None,",
        "        ca_certs=None,",
        "        assert_hostname=None,",
        "        assert_fingerprint=None,",
        "        ca_cert_dir=None,",
        "        ca_cert_data=None,",
        "    ):"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connection.py",
      "line_number": 337,
      "line_content": "ca_cert_dir=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        cert_reqs=None,",
        "        key_password=None,",
        "        ca_certs=None,",
        "        assert_hostname=None,",
        "        assert_fingerprint=None,",
        "        ca_cert_dir=None,",
        "        ca_cert_data=None,",
        "    ):",
        "        \"\"\"",
        "        This method should only be called once, before the connection is used.",
        "        \"\"\""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connection.py",
      "line_number": 338,
      "line_content": "ca_cert_data=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        key_password=None,",
        "        ca_certs=None,",
        "        assert_hostname=None,",
        "        assert_fingerprint=None,",
        "        ca_cert_dir=None,",
        "        ca_cert_data=None,",
        "    ):",
        "        \"\"\"",
        "        This method should only be called once, before the connection is used.",
        "        \"\"\"",
        "        # If cert_reqs is not provided we'll assume CERT_REQUIRED unless we also"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connection.py",
      "line_number": 345,
      "line_content": "if cert_reqs is None:",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        \"\"\"",
        "        This method should only be called once, before the connection is used.",
        "        \"\"\"",
        "        # If cert_reqs is not provided we'll assume CERT_REQUIRED unless we also",
        "        # have an SSLContext object in which case we'll use its verify_mode.",
        "        if cert_reqs is None:",
        "            if self.ssl_context is not None:",
        "                cert_reqs = self.ssl_context.verify_mode",
        "            else:",
        "                cert_reqs = resolve_cert_reqs(None)",
        ""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connection.py",
      "line_number": 349,
      "line_content": "cert_reqs = resolve_cert_reqs(None)",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        # have an SSLContext object in which case we'll use its verify_mode.",
        "        if cert_reqs is None:",
        "            if self.ssl_context is not None:",
        "                cert_reqs = self.ssl_context.verify_mode",
        "            else:",
        "                cert_reqs = resolve_cert_reqs(None)",
        "",
        "        self.key_file = key_file",
        "        self.cert_file = cert_file",
        "        self.cert_reqs = cert_reqs",
        "        self.key_password = key_password"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connection.py",
      "line_number": 454,
      "line_content": "context.verify_mode != ssl.CERT_NONE",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        if self.assert_fingerprint:",
        "            assert_fingerprint(",
        "                self.sock.getpeercert(binary_form=True), self.assert_fingerprint",
        "            )",
        "        elif (",
        "            context.verify_mode != ssl.CERT_NONE",
        "            and not getattr(context, \"check_hostname\", False)",
        "            and self.assert_hostname is not False",
        "        ):",
        "            # While urllib3 attempts to always turn off hostname matching from",
        "            # the TLS library, this cannot always be done. So we check whether"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connection.py",
      "line_number": 513,
      "line_content": "if ssl_context.verify_mode != ssl.CERT_NONE and not getattr(",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "            ca_cert_data=self.ca_cert_data,",
        "            server_hostname=hostname,",
        "            ssl_context=ssl_context,",
        "        )",
        "",
        "        if ssl_context.verify_mode != ssl.CERT_NONE and not getattr(",
        "            ssl_context, \"check_hostname\", False",
        "        ):",
        "            # While urllib3 attempts to always turn off hostname matching from",
        "            # the TLS library, this cannot always be done. So we check whether",
        "            # the TLS Library still thinks it's matching hostnames."
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connectionpool.py",
      "line_number": 945,
      "line_content": "cert_file=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        headers=None,",
        "        retries=None,",
        "        _proxy=None,",
        "        _proxy_headers=None,",
        "        key_file=None,",
        "        cert_file=None,",
        "        cert_reqs=None,",
        "        key_password=None,",
        "        ca_certs=None,",
        "        ssl_version=None,",
        "        assert_hostname=None,"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connectionpool.py",
      "line_number": 946,
      "line_content": "cert_reqs=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        retries=None,",
        "        _proxy=None,",
        "        _proxy_headers=None,",
        "        key_file=None,",
        "        cert_file=None,",
        "        cert_reqs=None,",
        "        key_password=None,",
        "        ca_certs=None,",
        "        ssl_version=None,",
        "        assert_hostname=None,",
        "        assert_fingerprint=None,"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connectionpool.py",
      "line_number": 948,
      "line_content": "ca_certs=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        _proxy_headers=None,",
        "        key_file=None,",
        "        cert_file=None,",
        "        cert_reqs=None,",
        "        key_password=None,",
        "        ca_certs=None,",
        "        ssl_version=None,",
        "        assert_hostname=None,",
        "        assert_fingerprint=None,",
        "        ca_cert_dir=None,",
        "        **conn_kw"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/connectionpool.py",
      "line_number": 952,
      "line_content": "ca_cert_dir=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        key_password=None,",
        "        ca_certs=None,",
        "        ssl_version=None,",
        "        assert_hostname=None,",
        "        assert_fingerprint=None,",
        "        ca_cert_dir=None,",
        "        **conn_kw",
        "    ):",
        "",
        "        HTTPConnectionPool.__init__(",
        "            self,"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/util/proxy.py",
      "line_number": 38,
      "line_content": "ssl_version, cert_reqs, ca_certs=None, ca_cert_dir=None, ca_cert_data=None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    # Otherwise always use a tunnel.",
        "    return True",
        "",
        "",
        "def create_proxy_ssl_context(",
        "    ssl_version, cert_reqs, ca_certs=None, ca_cert_dir=None, ca_cert_data=None",
        "):",
        "    \"\"\"",
        "    Generates a default proxy ssl context if one hasn't been provided by the",
        "    user.",
        "    \"\"\""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/util/ssl_.py",
      "line_number": 138,
      "line_content": "self.verify_mode = ssl.CERT_NONE",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    class SSLContext(object):  # Platform-specific: Python 2",
        "        def __init__(self, protocol_version):",
        "            self.protocol = protocol_version",
        "            # Use default values from a real SSLContext",
        "            self.check_hostname = False",
        "            self.verify_mode = ssl.CERT_NONE",
        "            self.ca_certs = None",
        "            self.options = 0",
        "            self.certfile = None",
        "            self.keyfile = None",
        "            self.ciphers = None"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/util/ssl_.py",
      "line_number": 139,
      "line_content": "self.ca_certs = None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        def __init__(self, protocol_version):",
        "            self.protocol = protocol_version",
        "            # Use default values from a real SSLContext",
        "            self.check_hostname = False",
        "            self.verify_mode = ssl.CERT_NONE",
        "            self.ca_certs = None",
        "            self.options = 0",
        "            self.certfile = None",
        "            self.keyfile = None",
        "            self.ciphers = None",
        ""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/util/ssl_.py",
      "line_number": 141,
      "line_content": "self.certfile = None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "            # Use default values from a real SSLContext",
        "            self.check_hostname = False",
        "            self.verify_mode = ssl.CERT_NONE",
        "            self.ca_certs = None",
        "            self.options = 0",
        "            self.certfile = None",
        "            self.keyfile = None",
        "            self.ciphers = None",
        "",
        "        def load_cert_chain(self, certfile, keyfile):",
        "            self.certfile = certfile"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/util/ssl_.py",
      "line_number": 251,
      "line_content": "ssl_version=None, cert_reqs=None, options=None, ciphers=None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "",
        "    return candidate",
        "",
        "",
        "def create_urllib3_context(",
        "    ssl_version=None, cert_reqs=None, options=None, ciphers=None",
        "):",
        "    \"\"\"All arguments have the same meaning as ``ssl_wrap_socket``.",
        "",
        "    By default, this function does a lot of the same work that",
        "    ``ssl.create_default_context`` does on Python 3.4+. It:"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/util/ssl_.py",
      "line_number": 258,
      "line_content": "- Disables SSLv2, SSLv3, and compression",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    \"\"\"All arguments have the same meaning as ``ssl_wrap_socket``.",
        "",
        "    By default, this function does a lot of the same work that",
        "    ``ssl.create_default_context`` does on Python 3.4+. It:",
        "",
        "    - Disables SSLv2, SSLv3, and compression",
        "    - Sets a restricted set of server ciphers",
        "",
        "    If you wish to enable SSLv3, you can do::",
        "",
        "        from urllib3.util import ssl_"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/util/ssl_.py",
      "line_number": 295,
      "line_content": "cert_reqs = ssl.CERT_REQUIRED if cert_reqs is None else cert_reqs",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    context = SSLContext(ssl_version)",
        "",
        "    context.set_ciphers(ciphers or DEFAULT_CIPHERS)",
        "",
        "    # Setting the default here, as we may have no ssl module on import",
        "    cert_reqs = ssl.CERT_REQUIRED if cert_reqs is None else cert_reqs",
        "",
        "    if options is None:",
        "        options = 0",
        "        # SSLv2 is easily broken and is considered harmful and dangerous",
        "        options |= OP_NO_SSLv2"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/util/ssl_.py",
      "line_number": 358,
      "line_content": "certfile=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "",
        "",
        "def ssl_wrap_socket(",
        "    sock,",
        "    keyfile=None,",
        "    certfile=None,",
        "    cert_reqs=None,",
        "    ca_certs=None,",
        "    server_hostname=None,",
        "    ssl_version=None,",
        "    ciphers=None,"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/util/ssl_.py",
      "line_number": 359,
      "line_content": "cert_reqs=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "",
        "def ssl_wrap_socket(",
        "    sock,",
        "    keyfile=None,",
        "    certfile=None,",
        "    cert_reqs=None,",
        "    ca_certs=None,",
        "    server_hostname=None,",
        "    ssl_version=None,",
        "    ciphers=None,",
        "    ssl_context=None,"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/util/ssl_.py",
      "line_number": 360,
      "line_content": "ca_certs=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "def ssl_wrap_socket(",
        "    sock,",
        "    keyfile=None,",
        "    certfile=None,",
        "    cert_reqs=None,",
        "    ca_certs=None,",
        "    server_hostname=None,",
        "    ssl_version=None,",
        "    ciphers=None,",
        "    ssl_context=None,",
        "    ca_cert_dir=None,"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/util/ssl_.py",
      "line_number": 365,
      "line_content": "ca_cert_dir=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    ca_certs=None,",
        "    server_hostname=None,",
        "    ssl_version=None,",
        "    ciphers=None,",
        "    ssl_context=None,",
        "    ca_cert_dir=None,",
        "    key_password=None,",
        "    ca_cert_data=None,",
        "    tls_in_tls=False,",
        "):",
        "    \"\"\""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/util/ssl_.py",
      "line_number": 367,
      "line_content": "ca_cert_data=None,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    ssl_version=None,",
        "    ciphers=None,",
        "    ssl_context=None,",
        "    ca_cert_dir=None,",
        "    key_password=None,",
        "    ca_cert_data=None,",
        "    tls_in_tls=False,",
        "):",
        "    \"\"\"",
        "    All arguments except for server_hostname, ssl_context, and ca_cert_dir have",
        "    the same meaning as they do when using :func:`ssl.wrap_socket`."
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/contrib/securetransport.py",
      "line_number": 341,
      "line_content": "self._client_cert_chain = None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        self._makefile_refs = 0",
        "        self._closed = False",
        "        self._exception = None",
        "        self._keychain = None",
        "        self._keychain_dir = None",
        "        self._client_cert_chain = None",
        "",
        "        # We save off the previously-configured timeout and then set it to",
        "        # zero. This is done because we use select and friends to handle the",
        "        # timeouts, but if we leave the timeout set on the lower socket then",
        "        # Python will \"kindly\" call select on that socket again for us. Avoid"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/contrib/securetransport.py",
      "line_number": 439,
      "line_content": "cert_array = None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        # We want data in memory, so load it up.",
        "        if os.path.isfile(trust_bundle):",
        "            with open(trust_bundle, \"rb\") as f:",
        "                trust_bundle = f.read()",
        "",
        "        cert_array = None",
        "        trust = Security.SecTrustRef()",
        "",
        "        try:",
        "            # Get a CFArray that contains the certs we want.",
        "            cert_array = _cert_array_from_pem(trust_bundle)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/contrib/securetransport.py",
      "line_number": 468,
      "line_content": "if cert_array is not None:",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "            _assert_no_error(result)",
        "        finally:",
        "            if trust:",
        "                CoreFoundation.CFRelease(trust)",
        "",
        "            if cert_array is not None:",
        "                CoreFoundation.CFRelease(cert_array)",
        "",
        "        return trust_result.value",
        "",
        "    def handshake("
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/contrib/securetransport.py",
      "line_number": 667,
      "line_content": "self._client_cert_chain = None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "            if self.context:",
        "                CoreFoundation.CFRelease(self.context)",
        "                self.context = None",
        "            if self._client_cert_chain:",
        "                CoreFoundation.CFRelease(self._client_cert_chain)",
        "                self._client_cert_chain = None",
        "            if self._keychain:",
        "                Security.SecKeychainDelete(self._keychain)",
        "                CoreFoundation.CFRelease(self._keychain)",
        "                shutil.rmtree(self._keychain_dir)",
        "                self._keychain = self._keychain_dir = None"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/contrib/securetransport.py",
      "line_number": 700,
      "line_content": "certdata = None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        # instead to just flag to urllib3 that it shouldn't do its own hostname",
        "        # validation when using SecureTransport.",
        "        if not binary_form:",
        "            raise ValueError(\"SecureTransport only supports dumping binary certs\")",
        "        trust = Security.SecTrustRef()",
        "        certdata = None",
        "        der_bytes = None",
        "",
        "        try:",
        "            # Grab the trust store.",
        "            result = Security.SSLCopyPeerTrust(self.context, ctypes.byref(trust))"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/contrib/securetransport.py",
      "line_number": 794,
      "line_content": "self._verify = False",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    \"\"\"",
        "",
        "    def __init__(self, protocol):",
        "        self._min_version, self._max_version = _protocol_to_min_max[protocol]",
        "        self._options = 0",
        "        self._verify = False",
        "        self._trust_bundle = None",
        "        self._client_cert = None",
        "        self._client_key = None",
        "        self._client_key_passphrase = None",
        "        self._alpn_protocols = None"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": true
    },
    {
      "file": "newrelic/packages/urllib3/contrib/securetransport.py",
      "line_number": 796,
      "line_content": "self._client_cert = None",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "    def __init__(self, protocol):",
        "        self._min_version, self._max_version = _protocol_to_min_max[protocol]",
        "        self._options = 0",
        "        self._verify = False",
        "        self._trust_bundle = None",
        "        self._client_cert = None",
        "        self._client_key = None",
        "        self._client_key_passphrase = None",
        "        self._alpn_protocols = None",
        "",
        "    @property"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/contrib/securetransport.py",
      "line_number": 834,
      "line_content": "return ssl.CERT_REQUIRED if self._verify else ssl.CERT_NONE",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "        # TODO: Update in line with above.",
        "        self._options = value",
        "",
        "    @property",
        "    def verify_mode(self):",
        "        return ssl.CERT_REQUIRED if self._verify else ssl.CERT_NONE",
        "",
        "    @verify_mode.setter",
        "    def verify_mode(self, value):",
        "        self._verify = True if value == ssl.CERT_REQUIRED else False",
        ""
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/contrib/securetransport.py",
      "line_number": 872,
      "line_content": "def load_cert_chain(self, certfile, keyfile=None, password=None):",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "            with open(cafile):",
        "                pass",
        "",
        "        self._trust_bundle = cafile or cadata",
        "",
        "    def load_cert_chain(self, certfile, keyfile=None, password=None):",
        "        self._client_cert = certfile",
        "        self._client_key = keyfile",
        "        self._client_cert_passphrase = password",
        "",
        "    def set_alpn_protocols(self, protocols):"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/contrib/pyopenssl.py",
      "line_number": 113,
      "line_content": "ssl.CERT_NONE: OpenSSL.SSL.VERIFY_NONE,",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "if hasattr(ssl, \"PROTOCOL_TLSv1_2\") and hasattr(OpenSSL.SSL, \"TLSv1_2_METHOD\"):",
        "    _openssl_versions[ssl.PROTOCOL_TLSv1_2] = OpenSSL.SSL.TLSv1_2_METHOD",
        "",
        "",
        "_stdlib_to_openssl_verify = {",
        "    ssl.CERT_NONE: OpenSSL.SSL.VERIFY_NONE,",
        "    ssl.CERT_OPTIONAL: OpenSSL.SSL.VERIFY_PEER,",
        "    ssl.CERT_REQUIRED: OpenSSL.SSL.VERIFY_PEER",
        "    + OpenSSL.SSL.VERIFY_FAIL_IF_NO_PEER_CERT,",
        "}",
        "_openssl_to_stdlib_verify = dict((v, k) for k, v in _stdlib_to_openssl_verify.items())"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/contrib/pyopenssl.py",
      "line_number": 473,
      "line_content": "def load_cert_chain(self, certfile, keyfile=None, password=None):",
      "category": "Insecure Data Transmission",
      "severity": "HIGH",
      "cwe": "CWE-319",
      "description": "Insecure or disabled TLS/SSL verification",
      "context": [
        "            if cadata is not None:",
        "                self._ctx.load_verify_locations(BytesIO(cadata))",
        "        except OpenSSL.SSL.Error as e:",
        "            raise ssl.SSLError(\"unable to load trusted certificates: %r\" % e)",
        "",
        "    def load_cert_chain(self, certfile, keyfile=None, password=None):",
        "        self._ctx.use_certificate_chain_file(certfile)",
        "        if password is not None:",
        "            if not isinstance(password, six.binary_type):",
        "                password = password.encode(\"utf-8\")",
        "            self._ctx.set_passwd_cb(lambda *_: password)"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    },
    {
      "file": "newrelic/packages/urllib3/packages/six.py",
      "line_number": 787,
      "line_content": "exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
      "category": "Command Injection",
      "severity": "CRITICAL",
      "cwe": "CWE-78",
      "description": "Potential command injection in agent code",
      "context": [
        "            if _locs_ is None:",
        "                _locs_ = frame.f_locals",
        "            del frame",
        "        elif _locs_ is None:",
        "            _locs_ = _globs_",
        "        exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
        "",
        "    exec_(",
        "        \"\"\"def reraise(tp, value, tb=None):",
        "    try:",
        "        raise tp, value, tb"
      ],
      "confidence": 0.8,
      "agent_specific": true,
      "default_config_impact": false
    }
  ]
}