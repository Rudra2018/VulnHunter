{
  "summary": {
    "initial_findings": 205,
    "after_verification": 161,
    "real_vulnerabilities": 55,
    "final_true_positive_rate": "26.8%"
  },
  "by_agent": {
    "python": {
      "total_verified": 66,
      "real_vulnerabilities": 43,
      "real_vulns_list": [
        {
          "original_finding": {
            "file": "newrelic/core/database_utils.py",
            "line_number": 364,
            "line_content": "def _parse_exec(sql):",
            "category": "Command Injection",
            "severity": "CRITICAL",
            "cwe": "CWE-78",
            "description": "Potential command injection in agent code",
            "context": [
              "",
              "_parse_exec_p = r\"\\s*EXEC\\s+(?!\\()(\\w+)\"",
              "_parse_exec_re = re.compile(_parse_exec_p, re.IGNORECASE)",
              "",
              "",
              "def _parse_exec(sql):",
              "    return _parse_default(sql, _parse_exec_re)",
              "",
              "",
              "_parse_execute_p = r\"\\s*EXECUTE\\s+(?!\\()(\\w+)\"",
              "_parse_execute_re = re.compile(_parse_execute_p, re.IGNORECASE)"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "def _parse_exec(sql):",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/common/agent_http.py",
            "line_number": 275,
            "line_content": "system_certs = None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "                        try:",
              "                            _context = ssl.SSLContext()",
              "                            _context.load_default_certs()",
              "                            system_certs = _context.get_ca_certs()",
              "                        except Exception:",
              "                            system_certs = None",
              "",
              "                        # If we still can't find any certs after loading the default ones,",
              "                        # then assume the bundled certs are required. If we do find them,",
              "                        # we don't have to do anything. We let urllib3 handle loading the",
              "                        # default certs from Windows."
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "system_certs = None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/common/agent_http.py",
            "line_number": 292,
            "line_content": "connection_kwargs[\"cert_reqs\"] = \"NONE\"",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "                    connection_kwargs[\"ca_cert_dir\"] = ca_bundle_path",
              "                else:",
              "                    connection_kwargs[\"ca_certs\"] = ca_bundle_path",
              "",
              "            if disable_certificate_validation:",
              "                connection_kwargs[\"cert_reqs\"] = \"NONE\"",
              "",
              "        proxy = self._parse_proxy(proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass)",
              "        proxy_headers = proxy and proxy.auth and urllib3.make_headers(proxy_basic_auth=proxy.auth)",
              "",
              "        if proxy:"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "connection_kwargs[\"cert_reqs\"] = \"NONE\"",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/common/agent_http.py",
            "line_number": 462,
            "line_content": "disable_certificate_validation = None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "            # HTTPS must be used to connect to the proxy",
              "            self.CONNECTION_CLS = urllib3.HTTPSConnectionPool",
              "        else:",
              "            # Disable any HTTPS specific options",
              "            ca_bundle_path = None",
              "            disable_certificate_validation = None",
              "",
              "        super().__init__(",
              "            host,",
              "            port,",
              "            proxy_scheme,"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "disable_certificate_validation = None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/opentelemetry_proto/metrics_pb2.py",
            "line_number": 26,
            "line_content": "DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\\n3newrelic/packages/opentelemetry_proto/metrics.proto\\x12%newrelic.packages.opentelemetry_proto\\x1a\\x32newrelic/packages/opentelemetry_proto/common.proto\\x1a\\x34newrelic/packages/opentelemetry_proto/resource.proto\\\"_\\n\\x0bMetricsData\\x12P\\n\\x10resource_metrics\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.ResourceMetrics\\\"\\xbc\\x01\\n\\x0fResourceMetrics\\x12\\x41\\n\\x08resource\\x18\\x01 \\x01(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Resource\\x12J\\n\\rscope_metrics\\x18\\x02 \\x03(\\x0b\\x32\\x33.newrelic.packages.opentelemetry_proto.ScopeMetrics\\x12\\x12\\n\\nschema_url\\x18\\x03 \\x01(\\tJ\\x06\\x08\\xe8\\x07\\x10\\xe9\\x07\\\"\\xae\\x01\\n\\x0cScopeMetrics\\x12J\\n\\x05scope\\x18\\x01 \\x01(\\x0b\\x32;.newrelic.packages.opentelemetry_proto.InstrumentationScope\\x12>\\n\\x07metrics\\x18\\x02 \\x03(\\x0b\\x32-.newrelic.packages.opentelemetry_proto.Metric\\x12\\x12\\n\\nschema_url\\x18\\x03 \\x01(\\t\\\"\\xf8\\x03\\n\\x06Metric\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x13\\n\\x0b\\x64\\x65scription\\x18\\x02 \\x01(\\t\\x12\\x0c\\n\\x04unit\\x18\\x03 \\x01(\\t\\x12=\\n\\x05gauge\\x18\\x05 \\x01(\\x0b\\x32,.newrelic.packages.opentelemetry_proto.GaugeH\\x00\\x12\\x39\\n\\x03sum\\x18\\x07 \\x01(\\x0b\\x32*.newrelic.packages.opentelemetry_proto.SumH\\x00\\x12\\x45\\n\\thistogram\\x18\\t \\x01(\\x0b\\x32\\x30.newrelic.packages.opentelemetry_proto.HistogramH\\x00\\x12\\\\\\n\\x15\\x65xponential_histogram\\x18\\n \\x01(\\x0b\\x32;.newrelic.packages.opentelemetry_proto.ExponentialHistogramH\\x00\\x12\\x41\\n\\x07summary\\x18\\x0b \\x01(\\x0b\\x32..newrelic.packages.opentelemetry_proto.SummaryH\\x00\\x12\\x41\\n\\x08metadata\\x18\\x0c \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValueB\\x06\\n\\x04\\x64\\x61taJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"T\\n\\x05Gauge\\x12K\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\\\"\\xc8\\x01\\n\\x03Sum\\x12K\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\x12\\x14\\n\\x0cis_monotonic\\x18\\x03 \\x01(\\x08\\\"\\xbb\\x01\\n\\tHistogram\\x12N\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x39.newrelic.packages.opentelemetry_proto.HistogramDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\\"\\xd1\\x01\\n\\x14\\x45xponentialHistogram\\x12Y\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x44.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\\"W\\n\\x07Summary\\x12L\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x37.newrelic.packages.opentelemetry_proto.SummaryDataPoint\\\"\\x95\\x02\\n\\x0fNumberDataPoint\\x12\\x43\\n\\nattributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\x13\\n\\tas_double\\x18\\x04 \\x01(\\x01H\\x00\\x12\\x10\\n\\x06\\x61s_int\\x18\\x06 \\x01(\\x10H\\x00\\x12\\x42\\n\\texemplars\\x18\\x05 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\r\\n\\x05\\x66lags\\x18\\x08 \\x01(\\rB\\x07\\n\\x05valueJ\\x04\\x08\\x01\\x10\\x02\\\"\\xf5\\x02\\n\\x12HistogramDataPoint\\x12\\x43\\n\\nattributes\\x18\\t \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x10\\n\\x03sum\\x18\\x05 \\x01(\\x01H\\x00\\x88\\x01\\x01\\x12\\x15\\n\\rbucket_counts\\x18\\x06 \\x03(\\x06\\x12\\x17\\n\\x0f\\x65xplicit_bounds\\x18\\x07 \\x03(\\x01\\x12\\x42\\n\\texemplars\\x18\\x08 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\r\\n\\x05\\x66lags\\x18\\n \\x01(\\r\\x12\\x10\\n\\x03min\\x18\\x0b \\x01(\\x01H\\x01\\x88\\x01\\x01\\x12\\x10\\n\\x03max\\x18\\x0c \\x01(\\x01H\\x02\\x88\\x01\\x01\\x42\\x06\\n\\x04_sumB\\x06\\n\\x04_minB\\x06\\n\\x04_maxJ\\x04\\x08\\x01\\x10\\x02\\\"\\xf7\\x04\\n\\x1d\\x45xponentialHistogramDataPoint\\x12\\x43\\n\\nattributes\\x18\\x01 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x10\\n\\x03sum\\x18\\x05 \\x01(\\x01H\\x00\\x88\\x01\\x01\\x12\\r\\n\\x05scale\\x18\\x06 \\x01(\\x11\\x12\\x12\\n\\nzero_count\\x18\\x07 \\x01(\\x06\\x12^\\n\\x08positive\\x18\\x08 \\x01(\\x0b\\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\\x12^\\n\\x08negative\\x18\\t \\x01(\\x0b\\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\\x12\\r\\n\\x05\\x66lags\\x18\\n \\x01(\\r\\x12\\x42\\n\\texemplars\\x18\\x0b \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\x10\\n\\x03min\\x18\\x0c \\x01(\\x01H\\x01\\x88\\x01\\x01\\x12\\x10\\n\\x03max\\x18\\r \\x01(\\x01H\\x02\\x88\\x01\\x01\\x12\\x16\\n\\x0ezero_threshold\\x18\\x0e \\x01(\\x01\\x1a\\x30\\n\\x07\\x42uckets\\x12\\x0e\\n\\x06offset\\x18\\x01 \\x01(\\x11\\x12\\x15\\n\\rbucket_counts\\x18\\x02 \\x03(\\x04\\x42\\x06\\n\\x04_sumB\\x06\\n\\x04_minB\\x06\\n\\x04_max\\\"\\xd4\\x02\\n\\x10SummaryDataPoint\\x12\\x43\\n\\nattributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x0b\\n\\x03sum\\x18\\x05 \\x01(\\x01\\x12`\\n\\x0fquantile_values\\x18\\x06 \\x03(\\x0b\\x32G.newrelic.packages.opentelemetry_proto.SummaryDataPoint.ValueAtQuantile\\x12\\r\\n\\x05\\x66lags\\x18\\x08 \\x01(\\r\\x1a\\x32\\n\\x0fValueAtQuantile\\x12\\x10\\n\\x08quantile\\x18\\x01 \\x01(\\x01\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\x01J\\x04\\x08\\x01\\x10\\x02\\\"\\xc9\\x01\\n\\x08\\x45xemplar\\x12L\\n\\x13\\x66iltered_attributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x13\\n\\tas_double\\x18\\x03 \\x01(\\x01H\\x00\\x12\\x10\\n\\x06\\x61s_int\\x18\\x06 \\x01(\\x10H\\x00\\x12\\x0f\\n\\x07span_id\\x18\\x04 \\x01(\\x0c\\x12\\x10\\n\\x08trace_id\\x18\\x05 \\x01(\\x0c\\x42\\x07\\n\\x05valueJ\\x04\\x08\\x01\\x10\\x02*\\x8c\\x01\\n\\x16\\x41ggregationTemporality\\x12\\'\\n#AGGREGATION_TEMPORALITY_UNSPECIFIED\\x10\\x00\\x12!\\n\\x1d\\x41GGREGATION_TEMPORALITY_DELTA\\x10\\x01\\x12&\\n\\\"AGGREGATION_TEMPORALITY_CUMULATIVE\\x10\\x02*^\\n\\x0e\\x44\\x61taPointFlags\\x12\\x1f\\n\\x1b\\x44\\x41TA_POINT_FLAGS_DO_NOT_USE\\x10\\x00\\x12+\\n\\'DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK\\x10\\x01\\x42\\x7f\\n!io.opentelemetry.proto.metrics.v1B\\x0cMetricsProtoP\\x01Z)go.opentelemetry.io/proto/otlp/metrics/v1\\xaa\\x02\\x1eOpenTelemetry.Proto.Metrics.V1b\\x06proto3')",
            "category": "Hardcoded Credentials",
            "severity": "CRITICAL",
            "cwe": "CWE-798",
            "description": "Hardcoded API key or credential in agent code",
            "context": [
              "",
              "from newrelic.packages.opentelemetry_proto import common_pb2 as newrelic_dot_packages_dot_opentelemetry__proto_dot_common__pb2",
              "from newrelic.packages.opentelemetry_proto import resource_pb2 as newrelic_dot_packages_dot_opentelemetry__proto_dot_resource__pb2",
              "",
              "",
              "DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\\n3newrelic/packages/opentelemetry_proto/metrics.proto\\x12%newrelic.packages.opentelemetry_proto\\x1a\\x32newrelic/packages/opentelemetry_proto/common.proto\\x1a\\x34newrelic/packages/opentelemetry_proto/resource.proto\\\"_\\n\\x0bMetricsData\\x12P\\n\\x10resource_metrics\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.ResourceMetrics\\\"\\xbc\\x01\\n\\x0fResourceMetrics\\x12\\x41\\n\\x08resource\\x18\\x01 \\x01(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Resource\\x12J\\n\\rscope_metrics\\x18\\x02 \\x03(\\x0b\\x32\\x33.newrelic.packages.opentelemetry_proto.ScopeMetrics\\x12\\x12\\n\\nschema_url\\x18\\x03 \\x01(\\tJ\\x06\\x08\\xe8\\x07\\x10\\xe9\\x07\\\"\\xae\\x01\\n\\x0cScopeMetrics\\x12J\\n\\x05scope\\x18\\x01 \\x01(\\x0b\\x32;.newrelic.packages.opentelemetry_proto.InstrumentationScope\\x12>\\n\\x07metrics\\x18\\x02 \\x03(\\x0b\\x32-.newrelic.packages.opentelemetry_proto.Metric\\x12\\x12\\n\\nschema_url\\x18\\x03 \\x01(\\t\\\"\\xf8\\x03\\n\\x06Metric\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x13\\n\\x0b\\x64\\x65scription\\x18\\x02 \\x01(\\t\\x12\\x0c\\n\\x04unit\\x18\\x03 \\x01(\\t\\x12=\\n\\x05gauge\\x18\\x05 \\x01(\\x0b\\x32,.newrelic.packages.opentelemetry_proto.GaugeH\\x00\\x12\\x39\\n\\x03sum\\x18\\x07 \\x01(\\x0b\\x32*.newrelic.packages.opentelemetry_proto.SumH\\x00\\x12\\x45\\n\\thistogram\\x18\\t \\x01(\\x0b\\x32\\x30.newrelic.packages.opentelemetry_proto.HistogramH\\x00\\x12\\\\\\n\\x15\\x65xponential_histogram\\x18\\n \\x01(\\x0b\\x32;.newrelic.packages.opentelemetry_proto.ExponentialHistogramH\\x00\\x12\\x41\\n\\x07summary\\x18\\x0b \\x01(\\x0b\\x32..newrelic.packages.opentelemetry_proto.SummaryH\\x00\\x12\\x41\\n\\x08metadata\\x18\\x0c \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValueB\\x06\\n\\x04\\x64\\x61taJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"T\\n\\x05Gauge\\x12K\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\\\"\\xc8\\x01\\n\\x03Sum\\x12K\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\x12\\x14\\n\\x0cis_monotonic\\x18\\x03 \\x01(\\x08\\\"\\xbb\\x01\\n\\tHistogram\\x12N\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x39.newrelic.packages.opentelemetry_proto.HistogramDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\\"\\xd1\\x01\\n\\x14\\x45xponentialHistogram\\x12Y\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x44.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\\"W\\n\\x07Summary\\x12L\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x37.newrelic.packages.opentelemetry_proto.SummaryDataPoint\\\"\\x95\\x02\\n\\x0fNumberDataPoint\\x12\\x43\\n\\nattributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\x13\\n\\tas_double\\x18\\x04 \\x01(\\x01H\\x00\\x12\\x10\\n\\x06\\x61s_int\\x18\\x06 \\x01(\\x10H\\x00\\x12\\x42\\n\\texemplars\\x18\\x05 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\r\\n\\x05\\x66lags\\x18\\x08 \\x01(\\rB\\x07\\n\\x05valueJ\\x04\\x08\\x01\\x10\\x02\\\"\\xf5\\x02\\n\\x12HistogramDataPoint\\x12\\x43\\n\\nattributes\\x18\\t \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x10\\n\\x03sum\\x18\\x05 \\x01(\\x01H\\x00\\x88\\x01\\x01\\x12\\x15\\n\\rbucket_counts\\x18\\x06 \\x03(\\x06\\x12\\x17\\n\\x0f\\x65xplicit_bounds\\x18\\x07 \\x03(\\x01\\x12\\x42\\n\\texemplars\\x18\\x08 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\r\\n\\x05\\x66lags\\x18\\n \\x01(\\r\\x12\\x10\\n\\x03min\\x18\\x0b \\x01(\\x01H\\x01\\x88\\x01\\x01\\x12\\x10\\n\\x03max\\x18\\x0c \\x01(\\x01H\\x02\\x88\\x01\\x01\\x42\\x06\\n\\x04_sumB\\x06\\n\\x04_minB\\x06\\n\\x04_maxJ\\x04\\x08\\x01\\x10\\x02\\\"\\xf7\\x04\\n\\x1d\\x45xponentialHistogramDataPoint\\x12\\x43\\n\\nattributes\\x18\\x01 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x10\\n\\x03sum\\x18\\x05 \\x01(\\x01H\\x00\\x88\\x01\\x01\\x12\\r\\n\\x05scale\\x18\\x06 \\x01(\\x11\\x12\\x12\\n\\nzero_count\\x18\\x07 \\x01(\\x06\\x12^\\n\\x08positive\\x18\\x08 \\x01(\\x0b\\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\\x12^\\n\\x08negative\\x18\\t \\x01(\\x0b\\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\\x12\\r\\n\\x05\\x66lags\\x18\\n \\x01(\\r\\x12\\x42\\n\\texemplars\\x18\\x0b \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\x10\\n\\x03min\\x18\\x0c \\x01(\\x01H\\x01\\x88\\x01\\x01\\x12\\x10\\n\\x03max\\x18\\r \\x01(\\x01H\\x02\\x88\\x01\\x01\\x12\\x16\\n\\x0ezero_threshold\\x18\\x0e \\x01(\\x01\\x1a\\x30\\n\\x07\\x42uckets\\x12\\x0e\\n\\x06offset\\x18\\x01 \\x01(\\x11\\x12\\x15\\n\\rbucket_counts\\x18\\x02 \\x03(\\x04\\x42\\x06\\n\\x04_sumB\\x06\\n\\x04_minB\\x06\\n\\x04_max\\\"\\xd4\\x02\\n\\x10SummaryDataPoint\\x12\\x43\\n\\nattributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x0b\\n\\x03sum\\x18\\x05 \\x01(\\x01\\x12`\\n\\x0fquantile_values\\x18\\x06 \\x03(\\x0b\\x32G.newrelic.packages.opentelemetry_proto.SummaryDataPoint.ValueAtQuantile\\x12\\r\\n\\x05\\x66lags\\x18\\x08 \\x01(\\r\\x1a\\x32\\n\\x0fValueAtQuantile\\x12\\x10\\n\\x08quantile\\x18\\x01 \\x01(\\x01\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\x01J\\x04\\x08\\x01\\x10\\x02\\\"\\xc9\\x01\\n\\x08\\x45xemplar\\x12L\\n\\x13\\x66iltered_attributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x13\\n\\tas_double\\x18\\x03 \\x01(\\x01H\\x00\\x12\\x10\\n\\x06\\x61s_int\\x18\\x06 \\x01(\\x10H\\x00\\x12\\x0f\\n\\x07span_id\\x18\\x04 \\x01(\\x0c\\x12\\x10\\n\\x08trace_id\\x18\\x05 \\x01(\\x0c\\x42\\x07\\n\\x05valueJ\\x04\\x08\\x01\\x10\\x02*\\x8c\\x01\\n\\x16\\x41ggregationTemporality\\x12\\'\\n#AGGREGATION_TEMPORALITY_UNSPECIFIED\\x10\\x00\\x12!\\n\\x1d\\x41GGREGATION_TEMPORALITY_DELTA\\x10\\x01\\x12&\\n\\\"AGGREGATION_TEMPORALITY_CUMULATIVE\\x10\\x02*^\\n\\x0e\\x44\\x61taPointFlags\\x12\\x1f\\n\\x1b\\x44\\x41TA_POINT_FLAGS_DO_NOT_USE\\x10\\x00\\x12+\\n\\'DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK\\x10\\x01\\x42\\x7f\\n!io.opentelemetry.proto.metrics.v1B\\x0cMetricsProtoP\\x01Z)go.opentelemetry.io/proto/otlp/metrics/v1\\xaa\\x02\\x1eOpenTelemetry.Proto.Metrics.V1b\\x06proto3')",
              "",
              "_globals = globals()",
              "_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)",
              "_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'newrelic.packages.opentelemetry_proto.metrics_pb2', _globals)",
              "if not _descriptor._USE_C_DESCRIPTORS:"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": true
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\\n3newrelic/packages/opentelemetry_proto/metrics.proto\\x12%newrelic.packages.opentelemetry_proto\\x1a\\x32newrelic/packages/opentelemetry_proto/common.proto\\x1a\\x34newrelic/packages/opentelemetry_proto/resource.proto\\\"_\\n\\x0bMetricsData\\x12P\\n\\x10resource_metrics\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.ResourceMetrics\\\"\\xbc\\x01\\n\\x0fResourceMetrics\\x12\\x41\\n\\x08resource\\x18\\x01 \\x01(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Resource\\x12J\\n\\rscope_metrics\\x18\\x02 \\x03(\\x0b\\x32\\x33.newrelic.packages.opentelemetry_proto.ScopeMetrics\\x12\\x12\\n\\nschema_url\\x18\\x03 \\x01(\\tJ\\x06\\x08\\xe8\\x07\\x10\\xe9\\x07\\\"\\xae\\x01\\n\\x0cScopeMetrics\\x12J\\n\\x05scope\\x18\\x01 \\x01(\\x0b\\x32;.newrelic.packages.opentelemetry_proto.InstrumentationScope\\x12>\\n\\x07metrics\\x18\\x02 \\x03(\\x0b\\x32-.newrelic.packages.opentelemetry_proto.Metric\\x12\\x12\\n\\nschema_url\\x18\\x03 \\x01(\\t\\\"\\xf8\\x03\\n\\x06Metric\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x13\\n\\x0b\\x64\\x65scription\\x18\\x02 \\x01(\\t\\x12\\x0c\\n\\x04unit\\x18\\x03 \\x01(\\t\\x12=\\n\\x05gauge\\x18\\x05 \\x01(\\x0b\\x32,.newrelic.packages.opentelemetry_proto.GaugeH\\x00\\x12\\x39\\n\\x03sum\\x18\\x07 \\x01(\\x0b\\x32*.newrelic.packages.opentelemetry_proto.SumH\\x00\\x12\\x45\\n\\thistogram\\x18\\t \\x01(\\x0b\\x32\\x30.newrelic.packages.opentelemetry_proto.HistogramH\\x00\\x12\\\\\\n\\x15\\x65xponential_histogram\\x18\\n \\x01(\\x0b\\x32;.newrelic.packages.opentelemetry_proto.ExponentialHistogramH\\x00\\x12\\x41\\n\\x07summary\\x18\\x0b \\x01(\\x0b\\x32..newrelic.packages.opentelemetry_proto.SummaryH\\x00\\x12\\x41\\n\\x08metadata\\x18\\x0c \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValueB\\x06\\n\\x04\\x64\\x61taJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"T\\n\\x05Gauge\\x12K\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\\\"\\xc8\\x01\\n\\x03Sum\\x12K\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\x12\\x14\\n\\x0cis_monotonic\\x18\\x03 \\x01(\\x08\\\"\\xbb\\x01\\n\\tHistogram\\x12N\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x39.newrelic.packages.opentelemetry_proto.HistogramDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\\"\\xd1\\x01\\n\\x14\\x45xponentialHistogram\\x12Y\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x44.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint\\x12^\\n\\x17\\x61ggregation_temporality\\x18\\x02 \\x01(\\x0e\\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\\\"W\\n\\x07Summary\\x12L\\n\\x0b\\x64\\x61ta_points\\x18\\x01 \\x03(\\x0b\\x32\\x37.newrelic.packages.opentelemetry_proto.SummaryDataPoint\\\"\\x95\\x02\\n\\x0fNumberDataPoint\\x12\\x43\\n\\nattributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\x13\\n\\tas_double\\x18\\x04 \\x01(\\x01H\\x00\\x12\\x10\\n\\x06\\x61s_int\\x18\\x06 \\x01(\\x10H\\x00\\x12\\x42\\n\\texemplars\\x18\\x05 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\r\\n\\x05\\x66lags\\x18\\x08 \\x01(\\rB\\x07\\n\\x05valueJ\\x04\\x08\\x01\\x10\\x02\\\"\\xf5\\x02\\n\\x12HistogramDataPoint\\x12\\x43\\n\\nattributes\\x18\\t \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x10\\n\\x03sum\\x18\\x05 \\x01(\\x01H\\x00\\x88\\x01\\x01\\x12\\x15\\n\\rbucket_counts\\x18\\x06 \\x03(\\x06\\x12\\x17\\n\\x0f\\x65xplicit_bounds\\x18\\x07 \\x03(\\x01\\x12\\x42\\n\\texemplars\\x18\\x08 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\r\\n\\x05\\x66lags\\x18\\n \\x01(\\r\\x12\\x10\\n\\x03min\\x18\\x0b \\x01(\\x01H\\x01\\x88\\x01\\x01\\x12\\x10\\n\\x03max\\x18\\x0c \\x01(\\x01H\\x02\\x88\\x01\\x01\\x42\\x06\\n\\x04_sumB\\x06\\n\\x04_minB\\x06\\n\\x04_maxJ\\x04\\x08\\x01\\x10\\x02\\\"\\xf7\\x04\\n\\x1d\\x45xponentialHistogramDataPoint\\x12\\x43\\n\\nattributes\\x18\\x01 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x10\\n\\x03sum\\x18\\x05 \\x01(\\x01H\\x00\\x88\\x01\\x01\\x12\\r\\n\\x05scale\\x18\\x06 \\x01(\\x11\\x12\\x12\\n\\nzero_count\\x18\\x07 \\x01(\\x06\\x12^\\n\\x08positive\\x18\\x08 \\x01(\\x0b\\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\\x12^\\n\\x08negative\\x18\\t \\x01(\\x0b\\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\\x12\\r\\n\\x05\\x66lags\\x18\\n \\x01(\\r\\x12\\x42\\n\\texemplars\\x18\\x0b \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.Exemplar\\x12\\x10\\n\\x03min\\x18\\x0c \\x01(\\x01H\\x01\\x88\\x01\\x01\\x12\\x10\\n\\x03max\\x18\\r \\x01(\\x01H\\x02\\x88\\x01\\x01\\x12\\x16\\n\\x0ezero_threshold\\x18\\x0e \\x01(\\x01\\x1a\\x30\\n\\x07\\x42uckets\\x12\\x0e\\n\\x06offset\\x18\\x01 \\x01(\\x11\\x12\\x15\\n\\rbucket_counts\\x18\\x02 \\x03(\\x04\\x42\\x06\\n\\x04_sumB\\x06\\n\\x04_minB\\x06\\n\\x04_max\\\"\\xd4\\x02\\n\\x10SummaryDataPoint\\x12\\x43\\n\\nattributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x1c\\n\\x14start_time_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x03 \\x01(\\x06\\x12\\r\\n\\x05\\x63ount\\x18\\x04 \\x01(\\x06\\x12\\x0b\\n\\x03sum\\x18\\x05 \\x01(\\x01\\x12`\\n\\x0fquantile_values\\x18\\x06 \\x03(\\x0b\\x32G.newrelic.packages.opentelemetry_proto.SummaryDataPoint.ValueAtQuantile\\x12\\r\\n\\x05\\x66lags\\x18\\x08 \\x01(\\r\\x1a\\x32\\n\\x0fValueAtQuantile\\x12\\x10\\n\\x08quantile\\x18\\x01 \\x01(\\x01\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\x01J\\x04\\x08\\x01\\x10\\x02\\\"\\xc9\\x01\\n\\x08\\x45xemplar\\x12L\\n\\x13\\x66iltered_attributes\\x18\\x07 \\x03(\\x0b\\x32/.newrelic.packages.opentelemetry_proto.KeyValue\\x12\\x16\\n\\x0etime_unix_nano\\x18\\x02 \\x01(\\x06\\x12\\x13\\n\\tas_double\\x18\\x03 \\x01(\\x01H\\x00\\x12\\x10\\n\\x06\\x61s_int\\x18\\x06 \\x01(\\x10H\\x00\\x12\\x0f\\n\\x07span_id\\x18\\x04 \\x01(\\x0c\\x12\\x10\\n\\x08trace_id\\x18\\x05 \\x01(\\x0c\\x42\\x07\\n\\x05valueJ\\x04\\x08\\x01\\x10\\x02*\\x8c\\x01\\n\\x16\\x41ggregationTemporality\\x12\\'\\n#AGGREGATION_TEMPORALITY_UNSPECIFIED\\x10\\x00\\x12!\\n\\x1d\\x41GGREGATION_TEMPORALITY_DELTA\\x10\\x01\\x12&\\n\\\"AGGREGATION_TEMPORALITY_CUMULATIVE\\x10\\x02*^\\n\\x0e\\x44\\x61taPointFlags\\x12\\x1f\\n\\x1b\\x44\\x41TA_POINT_FLAGS_DO_NOT_USE\\x10\\x00\\x12+\\n\\'DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK\\x10\\x01\\x42\\x7f\\n!io.opentelemetry.proto.metrics.v1B\\x0cMetricsProtoP\\x01Z)go.opentelemetry.io/proto/otlp/metrics/v1\\xaa\\x02\\x1eOpenTelemetry.Proto.Metrics.V1b\\x06proto3')",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connection.py",
            "line_number": 294,
            "line_content": "cert_reqs = None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "    socket by means of :py:func:`urllib3.util.ssl_wrap_socket`.",
              "    \"\"\"",
              "",
              "    default_port = port_by_scheme[\"https\"]",
              "",
              "    cert_reqs = None",
              "    ca_certs = None",
              "    ca_cert_dir = None",
              "    ca_cert_data = None",
              "    ssl_version = None",
              "    assert_fingerprint = None"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "cert_reqs = None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connection.py",
            "line_number": 295,
            "line_content": "ca_certs = None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "    \"\"\"",
              "",
              "    default_port = port_by_scheme[\"https\"]",
              "",
              "    cert_reqs = None",
              "    ca_certs = None",
              "    ca_cert_dir = None",
              "    ca_cert_data = None",
              "    ssl_version = None",
              "    assert_fingerprint = None",
              "    tls_in_tls_required = False"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "ca_certs = None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connection.py",
            "line_number": 296,
            "line_content": "ca_cert_dir = None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "",
              "    default_port = port_by_scheme[\"https\"]",
              "",
              "    cert_reqs = None",
              "    ca_certs = None",
              "    ca_cert_dir = None",
              "    ca_cert_data = None",
              "    ssl_version = None",
              "    assert_fingerprint = None",
              "    tls_in_tls_required = False",
              ""
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "ca_cert_dir = None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connection.py",
            "line_number": 297,
            "line_content": "ca_cert_data = None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "    default_port = port_by_scheme[\"https\"]",
              "",
              "    cert_reqs = None",
              "    ca_certs = None",
              "    ca_cert_dir = None",
              "    ca_cert_data = None",
              "    ssl_version = None",
              "    assert_fingerprint = None",
              "    tls_in_tls_required = False",
              "",
              "    def __init__("
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "ca_cert_data = None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connection.py",
            "line_number": 307,
            "line_content": "cert_file=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "    def __init__(",
              "        self,",
              "        host,",
              "        port=None,",
              "        key_file=None,",
              "        cert_file=None,",
              "        key_password=None,",
              "        strict=None,",
              "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,",
              "        ssl_context=None,",
              "        server_hostname=None,"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "cert_file=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connection.py",
            "line_number": 331,
            "line_content": "cert_file=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "        self._protocol = \"https\"",
              "",
              "    def set_cert(",
              "        self,",
              "        key_file=None,",
              "        cert_file=None,",
              "        cert_reqs=None,",
              "        key_password=None,",
              "        ca_certs=None,",
              "        assert_hostname=None,",
              "        assert_fingerprint=None,"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "cert_file=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connection.py",
            "line_number": 332,
            "line_content": "cert_reqs=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "",
              "    def set_cert(",
              "        self,",
              "        key_file=None,",
              "        cert_file=None,",
              "        cert_reqs=None,",
              "        key_password=None,",
              "        ca_certs=None,",
              "        assert_hostname=None,",
              "        assert_fingerprint=None,",
              "        ca_cert_dir=None,"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "cert_reqs=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connection.py",
            "line_number": 334,
            "line_content": "ca_certs=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "        self,",
              "        key_file=None,",
              "        cert_file=None,",
              "        cert_reqs=None,",
              "        key_password=None,",
              "        ca_certs=None,",
              "        assert_hostname=None,",
              "        assert_fingerprint=None,",
              "        ca_cert_dir=None,",
              "        ca_cert_data=None,",
              "    ):"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "ca_certs=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connection.py",
            "line_number": 337,
            "line_content": "ca_cert_dir=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "        cert_reqs=None,",
              "        key_password=None,",
              "        ca_certs=None,",
              "        assert_hostname=None,",
              "        assert_fingerprint=None,",
              "        ca_cert_dir=None,",
              "        ca_cert_data=None,",
              "    ):",
              "        \"\"\"",
              "        This method should only be called once, before the connection is used.",
              "        \"\"\""
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "ca_cert_dir=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connection.py",
            "line_number": 338,
            "line_content": "ca_cert_data=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "        key_password=None,",
              "        ca_certs=None,",
              "        assert_hostname=None,",
              "        assert_fingerprint=None,",
              "        ca_cert_dir=None,",
              "        ca_cert_data=None,",
              "    ):",
              "        \"\"\"",
              "        This method should only be called once, before the connection is used.",
              "        \"\"\"",
              "        # If cert_reqs is not provided we'll assume CERT_REQUIRED unless we also"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "ca_cert_data=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connection.py",
            "line_number": 345,
            "line_content": "if cert_reqs is None:",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "        \"\"\"",
              "        This method should only be called once, before the connection is used.",
              "        \"\"\"",
              "        # If cert_reqs is not provided we'll assume CERT_REQUIRED unless we also",
              "        # have an SSLContext object in which case we'll use its verify_mode.",
              "        if cert_reqs is None:",
              "            if self.ssl_context is not None:",
              "                cert_reqs = self.ssl_context.verify_mode",
              "            else:",
              "                cert_reqs = resolve_cert_reqs(None)",
              ""
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "if cert_reqs is None:",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connection.py",
            "line_number": 349,
            "line_content": "cert_reqs = resolve_cert_reqs(None)",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "        # have an SSLContext object in which case we'll use its verify_mode.",
              "        if cert_reqs is None:",
              "            if self.ssl_context is not None:",
              "                cert_reqs = self.ssl_context.verify_mode",
              "            else:",
              "                cert_reqs = resolve_cert_reqs(None)",
              "",
              "        self.key_file = key_file",
              "        self.cert_file = cert_file",
              "        self.cert_reqs = cert_reqs",
              "        self.key_password = key_password"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "cert_reqs = resolve_cert_reqs(None)",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connectionpool.py",
            "line_number": 945,
            "line_content": "cert_file=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "        headers=None,",
              "        retries=None,",
              "        _proxy=None,",
              "        _proxy_headers=None,",
              "        key_file=None,",
              "        cert_file=None,",
              "        cert_reqs=None,",
              "        key_password=None,",
              "        ca_certs=None,",
              "        ssl_version=None,",
              "        assert_hostname=None,"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "cert_file=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connectionpool.py",
            "line_number": 946,
            "line_content": "cert_reqs=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "        retries=None,",
              "        _proxy=None,",
              "        _proxy_headers=None,",
              "        key_file=None,",
              "        cert_file=None,",
              "        cert_reqs=None,",
              "        key_password=None,",
              "        ca_certs=None,",
              "        ssl_version=None,",
              "        assert_hostname=None,",
              "        assert_fingerprint=None,"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "cert_reqs=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connectionpool.py",
            "line_number": 948,
            "line_content": "ca_certs=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "        _proxy_headers=None,",
              "        key_file=None,",
              "        cert_file=None,",
              "        cert_reqs=None,",
              "        key_password=None,",
              "        ca_certs=None,",
              "        ssl_version=None,",
              "        assert_hostname=None,",
              "        assert_fingerprint=None,",
              "        ca_cert_dir=None,",
              "        **conn_kw"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "ca_certs=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/connectionpool.py",
            "line_number": 952,
            "line_content": "ca_cert_dir=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "        key_password=None,",
              "        ca_certs=None,",
              "        ssl_version=None,",
              "        assert_hostname=None,",
              "        assert_fingerprint=None,",
              "        ca_cert_dir=None,",
              "        **conn_kw",
              "    ):",
              "",
              "        HTTPConnectionPool.__init__(",
              "            self,"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "ca_cert_dir=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/util/proxy.py",
            "line_number": 38,
            "line_content": "ssl_version, cert_reqs, ca_certs=None, ca_cert_dir=None, ca_cert_data=None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "    # Otherwise always use a tunnel.",
              "    return True",
              "",
              "",
              "def create_proxy_ssl_context(",
              "    ssl_version, cert_reqs, ca_certs=None, ca_cert_dir=None, ca_cert_data=None",
              "):",
              "    \"\"\"",
              "    Generates a default proxy ssl context if one hasn't been provided by the",
              "    user.",
              "    \"\"\""
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "ssl_version, cert_reqs, ca_certs=None, ca_cert_dir=None, ca_cert_data=None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/util/ssl_.py",
            "line_number": 139,
            "line_content": "self.ca_certs = None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "        def __init__(self, protocol_version):",
              "            self.protocol = protocol_version",
              "            # Use default values from a real SSLContext",
              "            self.check_hostname = False",
              "            self.verify_mode = ssl.CERT_NONE",
              "            self.ca_certs = None",
              "            self.options = 0",
              "            self.certfile = None",
              "            self.keyfile = None",
              "            self.ciphers = None",
              ""
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "self.ca_certs = None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/util/ssl_.py",
            "line_number": 141,
            "line_content": "self.certfile = None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "            # Use default values from a real SSLContext",
              "            self.check_hostname = False",
              "            self.verify_mode = ssl.CERT_NONE",
              "            self.ca_certs = None",
              "            self.options = 0",
              "            self.certfile = None",
              "            self.keyfile = None",
              "            self.ciphers = None",
              "",
              "        def load_cert_chain(self, certfile, keyfile):",
              "            self.certfile = certfile"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "self.certfile = None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/util/ssl_.py",
            "line_number": 251,
            "line_content": "ssl_version=None, cert_reqs=None, options=None, ciphers=None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "",
              "    return candidate",
              "",
              "",
              "def create_urllib3_context(",
              "    ssl_version=None, cert_reqs=None, options=None, ciphers=None",
              "):",
              "    \"\"\"All arguments have the same meaning as ``ssl_wrap_socket``.",
              "",
              "    By default, this function does a lot of the same work that",
              "    ``ssl.create_default_context`` does on Python 3.4+. It:"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "ssl_version=None, cert_reqs=None, options=None, ciphers=None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/util/ssl_.py",
            "line_number": 258,
            "line_content": "- Disables SSLv2, SSLv3, and compression",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "    \"\"\"All arguments have the same meaning as ``ssl_wrap_socket``.",
              "",
              "    By default, this function does a lot of the same work that",
              "    ``ssl.create_default_context`` does on Python 3.4+. It:",
              "",
              "    - Disables SSLv2, SSLv3, and compression",
              "    - Sets a restricted set of server ciphers",
              "",
              "    If you wish to enable SSLv3, you can do::",
              "",
              "        from urllib3.util import ssl_"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "- Disables SSLv2, SSLv3, and compression",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/util/ssl_.py",
            "line_number": 295,
            "line_content": "cert_reqs = ssl.CERT_REQUIRED if cert_reqs is None else cert_reqs",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "    context = SSLContext(ssl_version)",
              "",
              "    context.set_ciphers(ciphers or DEFAULT_CIPHERS)",
              "",
              "    # Setting the default here, as we may have no ssl module on import",
              "    cert_reqs = ssl.CERT_REQUIRED if cert_reqs is None else cert_reqs",
              "",
              "    if options is None:",
              "        options = 0",
              "        # SSLv2 is easily broken and is considered harmful and dangerous",
              "        options |= OP_NO_SSLv2"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "cert_reqs = ssl.CERT_REQUIRED if cert_reqs is None else cert_reqs",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/util/ssl_.py",
            "line_number": 358,
            "line_content": "certfile=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "",
              "",
              "def ssl_wrap_socket(",
              "    sock,",
              "    keyfile=None,",
              "    certfile=None,",
              "    cert_reqs=None,",
              "    ca_certs=None,",
              "    server_hostname=None,",
              "    ssl_version=None,",
              "    ciphers=None,"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "certfile=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/util/ssl_.py",
            "line_number": 359,
            "line_content": "cert_reqs=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "",
              "def ssl_wrap_socket(",
              "    sock,",
              "    keyfile=None,",
              "    certfile=None,",
              "    cert_reqs=None,",
              "    ca_certs=None,",
              "    server_hostname=None,",
              "    ssl_version=None,",
              "    ciphers=None,",
              "    ssl_context=None,"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "cert_reqs=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/util/ssl_.py",
            "line_number": 360,
            "line_content": "ca_certs=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "def ssl_wrap_socket(",
              "    sock,",
              "    keyfile=None,",
              "    certfile=None,",
              "    cert_reqs=None,",
              "    ca_certs=None,",
              "    server_hostname=None,",
              "    ssl_version=None,",
              "    ciphers=None,",
              "    ssl_context=None,",
              "    ca_cert_dir=None,"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "ca_certs=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/util/ssl_.py",
            "line_number": 365,
            "line_content": "ca_cert_dir=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "    ca_certs=None,",
              "    server_hostname=None,",
              "    ssl_version=None,",
              "    ciphers=None,",
              "    ssl_context=None,",
              "    ca_cert_dir=None,",
              "    key_password=None,",
              "    ca_cert_data=None,",
              "    tls_in_tls=False,",
              "):",
              "    \"\"\""
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "ca_cert_dir=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/util/ssl_.py",
            "line_number": 367,
            "line_content": "ca_cert_data=None,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "    ssl_version=None,",
              "    ciphers=None,",
              "    ssl_context=None,",
              "    ca_cert_dir=None,",
              "    key_password=None,",
              "    ca_cert_data=None,",
              "    tls_in_tls=False,",
              "):",
              "    \"\"\"",
              "    All arguments except for server_hostname, ssl_context, and ca_cert_dir have",
              "    the same meaning as they do when using :func:`ssl.wrap_socket`."
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "ca_cert_data=None,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/contrib/securetransport.py",
            "line_number": 341,
            "line_content": "self._client_cert_chain = None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "        self._makefile_refs = 0",
              "        self._closed = False",
              "        self._exception = None",
              "        self._keychain = None",
              "        self._keychain_dir = None",
              "        self._client_cert_chain = None",
              "",
              "        # We save off the previously-configured timeout and then set it to",
              "        # zero. This is done because we use select and friends to handle the",
              "        # timeouts, but if we leave the timeout set on the lower socket then",
              "        # Python will \"kindly\" call select on that socket again for us. Avoid"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "self._client_cert_chain = None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/contrib/securetransport.py",
            "line_number": 439,
            "line_content": "cert_array = None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "        # We want data in memory, so load it up.",
              "        if os.path.isfile(trust_bundle):",
              "            with open(trust_bundle, \"rb\") as f:",
              "                trust_bundle = f.read()",
              "",
              "        cert_array = None",
              "        trust = Security.SecTrustRef()",
              "",
              "        try:",
              "            # Get a CFArray that contains the certs we want.",
              "            cert_array = _cert_array_from_pem(trust_bundle)"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "cert_array = None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/contrib/securetransport.py",
            "line_number": 468,
            "line_content": "if cert_array is not None:",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "            _assert_no_error(result)",
              "        finally:",
              "            if trust:",
              "                CoreFoundation.CFRelease(trust)",
              "",
              "            if cert_array is not None:",
              "                CoreFoundation.CFRelease(cert_array)",
              "",
              "        return trust_result.value",
              "",
              "    def handshake("
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "if cert_array is not None:",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/contrib/securetransport.py",
            "line_number": 667,
            "line_content": "self._client_cert_chain = None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "            if self.context:",
              "                CoreFoundation.CFRelease(self.context)",
              "                self.context = None",
              "            if self._client_cert_chain:",
              "                CoreFoundation.CFRelease(self._client_cert_chain)",
              "                self._client_cert_chain = None",
              "            if self._keychain:",
              "                Security.SecKeychainDelete(self._keychain)",
              "                CoreFoundation.CFRelease(self._keychain)",
              "                shutil.rmtree(self._keychain_dir)",
              "                self._keychain = self._keychain_dir = None"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "self._client_cert_chain = None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/contrib/securetransport.py",
            "line_number": 700,
            "line_content": "certdata = None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "        # instead to just flag to urllib3 that it shouldn't do its own hostname",
              "        # validation when using SecureTransport.",
              "        if not binary_form:",
              "            raise ValueError(\"SecureTransport only supports dumping binary certs\")",
              "        trust = Security.SecTrustRef()",
              "        certdata = None",
              "        der_bytes = None",
              "",
              "        try:",
              "            # Grab the trust store.",
              "            result = Security.SSLCopyPeerTrust(self.context, ctypes.byref(trust))"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "certdata = None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/contrib/securetransport.py",
            "line_number": 794,
            "line_content": "self._verify = False",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "    \"\"\"",
              "",
              "    def __init__(self, protocol):",
              "        self._min_version, self._max_version = _protocol_to_min_max[protocol]",
              "        self._options = 0",
              "        self._verify = False",
              "        self._trust_bundle = None",
              "        self._client_cert = None",
              "        self._client_key = None",
              "        self._client_key_passphrase = None",
              "        self._alpn_protocols = None"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": true
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "self._verify = False",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/contrib/securetransport.py",
            "line_number": 796,
            "line_content": "self._client_cert = None",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "    def __init__(self, protocol):",
              "        self._min_version, self._max_version = _protocol_to_min_max[protocol]",
              "        self._options = 0",
              "        self._verify = False",
              "        self._trust_bundle = None",
              "        self._client_cert = None",
              "        self._client_key = None",
              "        self._client_key_passphrase = None",
              "        self._alpn_protocols = None",
              "",
              "    @property"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "self._client_cert = None",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/contrib/securetransport.py",
            "line_number": 872,
            "line_content": "def load_cert_chain(self, certfile, keyfile=None, password=None):",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "            with open(cafile):",
              "                pass",
              "",
              "        self._trust_bundle = cafile or cadata",
              "",
              "    def load_cert_chain(self, certfile, keyfile=None, password=None):",
              "        self._client_cert = certfile",
              "        self._client_key = keyfile",
              "        self._client_cert_passphrase = password",
              "",
              "    def set_alpn_protocols(self, protocols):"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "def load_cert_chain(self, certfile, keyfile=None, password=None):",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/contrib/pyopenssl.py",
            "line_number": 113,
            "line_content": "ssl.CERT_NONE: OpenSSL.SSL.VERIFY_NONE,",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "if hasattr(ssl, \"PROTOCOL_TLSv1_2\") and hasattr(OpenSSL.SSL, \"TLSv1_2_METHOD\"):",
              "    _openssl_versions[ssl.PROTOCOL_TLSv1_2] = OpenSSL.SSL.TLSv1_2_METHOD",
              "",
              "",
              "_stdlib_to_openssl_verify = {",
              "    ssl.CERT_NONE: OpenSSL.SSL.VERIFY_NONE,",
              "    ssl.CERT_OPTIONAL: OpenSSL.SSL.VERIFY_PEER,",
              "    ssl.CERT_REQUIRED: OpenSSL.SSL.VERIFY_PEER",
              "    + OpenSSL.SSL.VERIFY_FAIL_IF_NO_PEER_CERT,",
              "}",
              "_openssl_to_stdlib_verify = dict((v, k) for k, v in _stdlib_to_openssl_verify.items())"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "ssl.CERT_NONE: OpenSSL.SSL.VERIFY_NONE,",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/contrib/pyopenssl.py",
            "line_number": 473,
            "line_content": "def load_cert_chain(self, certfile, keyfile=None, password=None):",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "            if cadata is not None:",
              "                self._ctx.load_verify_locations(BytesIO(cadata))",
              "        except OpenSSL.SSL.Error as e:",
              "            raise ssl.SSLError(\"unable to load trusted certificates: %r\" % e)",
              "",
              "    def load_cert_chain(self, certfile, keyfile=None, password=None):",
              "        self._ctx.use_certificate_chain_file(certfile)",
              "        if password is not None:",
              "            if not isinstance(password, six.binary_type):",
              "                password = password.encode(\"utf-8\")",
              "            self._ctx.set_passwd_cb(lambda *_: password)"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "def load_cert_chain(self, certfile, keyfile=None, password=None):",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "newrelic/packages/urllib3/packages/six.py",
            "line_number": 787,
            "line_content": "exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
            "category": "Command Injection",
            "severity": "CRITICAL",
            "cwe": "CWE-78",
            "description": "Potential command injection in agent code",
            "context": [
              "            if _locs_ is None:",
              "                _locs_ = frame.f_locals",
              "            del frame",
              "        elif _locs_ is None:",
              "            _locs_ = _globs_",
              "        exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
              "",
              "    exec_(",
              "        \"\"\"def reraise(tp, value, tb=None):",
              "    try:",
              "        raise tp, value, tb"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        }
      ]
    },
    "nodejs": {
      "total_verified": 87,
      "real_vulnerabilities": 6,
      "real_vulns_list": [
        {
          "original_finding": {
            "file": "package.json",
            "line_number": 10,
            "line_content": "\"web\": \"http://newrelic.com\"",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "  \"license\": \"Apache-2.0\",",
              "  \"contributors\": [",
              "    {",
              "      \"name\": \"Saxon D'Aubin\",",
              "      \"email\": \"saxon@newrelic.com\",",
              "      \"web\": \"http://newrelic.com\"",
              "    },",
              "    {",
              "      \"name\": \"Forrest L Norvell\",",
              "      \"email\": \"forrest@newrelic.com\",",
              "      \"web\": \"http://newrelic.com/\""
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "\"web\": \"http://newrelic.com\"",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "package.json",
            "line_number": 15,
            "line_content": "\"web\": \"http://newrelic.com/\"",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "      \"web\": \"http://newrelic.com\"",
              "    },",
              "    {",
              "      \"name\": \"Forrest L Norvell\",",
              "      \"email\": \"forrest@newrelic.com\",",
              "      \"web\": \"http://newrelic.com/\"",
              "    },",
              "    {",
              "      \"name\": \"Jacob Groundwater\",",
              "      \"email\": \"jacob@newrelic.com\",",
              "      \"web\": \"https://newrelic.com\""
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "\"web\": \"http://newrelic.com/\"",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "lib/transaction/index.js",
            "line_number": 67,
            "line_content": "'insertDistributedTraceHeaders called on headers object that already contains ' +",
            "category": "SQL Injection",
            "severity": "HIGH",
            "cwe": "CWE-89",
            "description": "SQL injection vulnerability in agent database queries",
            "context": [
              "const TRACE_CONTEXT_PARENT_HEADER = 'traceparent'",
              "const TRACE_CONTEXT_STATE_HEADER = 'tracestate'",
              "const NEWRELIC_TRACE_HEADER = 'newrelic'",
              "",
              "const MULTIPLE_INSERT_MESSAGE =",
              "  'insertDistributedTraceHeaders called on headers object that already contains ' +",
              "  \"distributed trace data. These may be overwritten. traceparent? '%s', newrelic? '%s'.\"",
              "",
              "/**",
              " * Bundle together the metrics and the trace segment for a single agent",
              " * transaction."
            ],
            "confidence": 0.6,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "'insertDistributedTraceHeaders called on headers object that already contains ' +",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.6
        },
        {
          "original_finding": {
            "file": "lib/instrumentation/core/child_process.js",
            "line_number": 20,
            "line_content": "shim.record(childProcess, methods, function recordExec(shim, fn, name) {",
            "category": "Command Injection",
            "severity": "CRITICAL",
            "cwe": "CWE-78",
            "description": "Potential command injection in agent code",
            "context": [
              "    return false",
              "  }",
              "",
              "  const methods = ['exec', 'execFile']",
              "",
              "  shim.record(childProcess, methods, function recordExec(shim, fn, name) {",
              "    return new RecorderSpec({ name: 'child_process.' + name, callback: shim.LAST })",
              "  })",
              "",
              "  if (childProcess.ChildProcess) {",
              "    wrapChildProcessClass(shim, childProcess.ChildProcess)"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "shim.record(childProcess, methods, function recordExec(shim, fn, name) {",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "lib/shim/webframework-shim/middleware.js",
            "line_number": 180,
            "line_content": "after: function afterExec({ shim, error }) {",
            "category": "Command Injection",
            "severity": "CRITICAL",
            "cwe": "CWE-78",
            "description": "Potential command injection in agent code",
            "context": [
              "      name: segmentName,",
              "      callback: nextWrapper,",
              "      parent: txInfo.segmentStack[txInfo.segmentStack.length - 1],",
              "      recorder,",
              "      parameters: params,",
              "      after: function afterExec({ shim, error }) {",
              "        const errIsError = isError(shim, error)",
              "        if (errIsError) {",
              "          assignError(txInfo, error)",
              "        } else if (!nextWrapper && !isErrorWare && spec.appendPath) {",
              "          txInfo.transaction.nameState.popPath(route)"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "after: function afterExec({ shim, error }) {",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "lib/shim/webframework-shim/middleware.js",
            "line_number": 247,
            "line_content": "after: function afterExec({ shim, error, result }) {",
            "category": "Command Injection",
            "severity": "CRITICAL",
            "cwe": "CWE-78",
            "description": "Potential command injection in agent code",
            "context": [
              "      parent: txInfo.segmentStack[txInfo.segmentStack.length - 1],",
              "      promise: spec.promise,",
              "      callback: nextWrapper,",
              "      recorder,",
              "      parameters: params,",
              "      after: function afterExec({ shim, error, result }) {",
              "        if (shim._responsePredicate(args, result)) {",
              "          txInfo.transaction.nameState.freeze()",
              "        }",
              "        if (isError(shim, error)) {",
              "          assignError(txInfo, error)"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "after: function afterExec({ shim, error, result }) {",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        }
      ]
    },
    "infrastructure": {
      "total_verified": 8,
      "real_vulnerabilities": 6,
      "real_vulns_list": [
        {
          "original_finding": {
            "file": "pkg/databind/internal/secrets/cyberarkcli_exec_unix.go",
            "line_number": 10,
            "line_content": "return cyberArkExecCommand(g.cfg.CLI, \"GetPassword\", \"-p\", \"AppDescs.AppID=\"+g.cfg.AppID, \"-p\", \"Query=Safe=\"+g.cfg.Safe+\";Folder=\"+g.cfg.Folder+\";Object=\"+g.cfg.Object, \"-o\", \"Password\")",
            "category": "SQL Injection",
            "severity": "HIGH",
            "cwe": "CWE-89",
            "description": "SQL injection vulnerability in agent database queries",
            "context": [
              "package secrets",
              "",
              "import \"os/exec\"",
              "",
              "func (g *cyberArkCLIGatherer) cyberArkExecCommand() *exec.Cmd {",
              "\treturn cyberArkExecCommand(g.cfg.CLI, \"GetPassword\", \"-p\", \"AppDescs.AppID=\"+g.cfg.AppID, \"-p\", \"Query=Safe=\"+g.cfg.Safe+\";Folder=\"+g.cfg.Folder+\";Object=\"+g.cfg.Object, \"-o\", \"Password\")",
              "}"
            ],
            "confidence": 0.7,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "return cyberArkExecCommand(g.cfg.CLI, \"GetPassword\", \"-p\", \"AppDescs.AppID=\"+g.cfg.AppID, \"-p\", \"Query=Safe=\"+g.cfg.Safe+\";Folder=\"+g.cfg.Folder+\";Object=\"+g.cfg.Object, \"-o\", \"Password\")",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.7
        },
        {
          "original_finding": {
            "file": "pkg/databind/internal/secrets/cyberarkcli_exec_windows.go",
            "line_number": 10,
            "line_content": "return cyberArkExecCommand(g.cfg.CLI, \"GetPassword\", \"/p\", \"AppDescs.AppID=\"+g.cfg.AppID, \"/p\", \"Query=Safe=\"+g.cfg.Safe+\";Folder=\"+g.cfg.Folder+\";Object=\"+g.cfg.Object, \"/o\", \"Password\")",
            "category": "SQL Injection",
            "severity": "HIGH",
            "cwe": "CWE-89",
            "description": "SQL injection vulnerability in agent database queries",
            "context": [
              "package secrets",
              "",
              "import \"os/exec\"",
              "",
              "func (g *cyberArkCLIGatherer) cyberArkExecCommand() *exec.Cmd {",
              "\treturn cyberArkExecCommand(g.cfg.CLI, \"GetPassword\", \"/p\", \"AppDescs.AppID=\"+g.cfg.AppID, \"/p\", \"Query=Safe=\"+g.cfg.Safe+\";Folder=\"+g.cfg.Folder+\";Object=\"+g.cfg.Object, \"/o\", \"Password\")",
              "}"
            ],
            "confidence": 0.7,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "return cyberArkExecCommand(g.cfg.CLI, \"GetPassword\", \"/p\", \"AppDescs.AppID=\"+g.cfg.AppID, \"/p\", \"Query=Safe=\"+g.cfg.Safe+\";Folder=\"+g.cfg.Folder+\";Object=\"+g.cfg.Object, \"/o\", \"Password\")",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.7
        },
        {
          "original_finding": {
            "file": "pkg/databind/internal/secrets/kms.go",
            "line_number": 37,
            "line_content": "DisableSSL     bool   `yaml:\"disableSSL\"`",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "\tHTTP           *http",
              "\tCredentialFile string `yaml:\"credential_file\"`",
              "\tConfigFile     string `yaml:\"config_file\"`",
              "\tRegion         string `yaml:\"region\"`",
              "\tEndpoint       string `yaml:\"endpoint\"`",
              "\tDisableSSL     bool   `yaml:\"disableSSL\"`",
              "\tType           string `yaml:\"type,omitempty\"` // can be 'json', 'equal' and 'plain' (default)",
              "}",
              "",
              "type kmsGatherer struct {",
              "\tcfg *KMS"
            ],
            "confidence": 0.9,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "DisableSSL     bool   `yaml:\"disableSSL\"`",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.9
        },
        {
          "original_finding": {
            "file": "pkg/databind/internal/secrets/kms.go",
            "line_number": 107,
            "line_content": "tlog.Debug(\"Adding credentials file.\")",
            "category": "Information Disclosure",
            "severity": "MEDIUM",
            "cwe": "CWE-200",
            "description": "Sensitive information logged or exposed",
            "context": [
              "",
              "\tvar err error",
              "\tvar configLoadOptions []func(*config.LoadOptions) error",
              "\tif secret.CredentialFile != \"\" {",
              "\t\ttlog := slog.WithField(\"CredentialFile\", secret.CredentialFile)",
              "\t\ttlog.Debug(\"Adding credentials file.\")",
              "\t\t_, err := os.Stat(secret.CredentialFile)",
              "\t\tif err != nil {",
              "\t\t\ttlog.WithError(err).Warn(\"could not find credentials file so ignoring it\")",
              "\t\t} else {",
              "\t\t\tconfigLoadOptions = append(configLoadOptions, config.WithSharedCredentialsFiles([]string{secret.CredentialFile}))"
            ],
            "confidence": 0.6,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "tlog.Debug(\"Adding credentials file.\")",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.6
        },
        {
          "original_finding": {
            "file": "pkg/databind/internal/secrets/kms.go",
            "line_number": 141,
            "line_content": "if g.cfg.DisableSSL {",
            "category": "Insecure Data Transmission",
            "severity": "HIGH",
            "cwe": "CWE-319",
            "description": "Insecure or disabled TLS/SSL verification",
            "context": [
              "",
              "\tkmsClient := kms.NewFromConfig(cfg, func(o *kms.Options) {",
              "\t\tif g.cfg.Endpoint != \"\" {",
              "\t\t\to.BaseEndpoint = aws.String(g.cfg.Endpoint)",
              "\t\t}",
              "\t\tif g.cfg.DisableSSL {",
              "\t\t\to.EndpointOptions.DisableHTTPS = true",
              "\t\t}",
              "\t})",
              "",
              "\tparams := &kms.DecryptInput{"
            ],
            "confidence": 0.8,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "if g.cfg.DisableSSL {",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.8
        },
        {
          "original_finding": {
            "file": "pkg/integrations/v4/logs/cfg.go",
            "line_number": 351,
            "line_content": "cfgLogger.WithField(\"filePath\", l.File).Warn(\"Error while reading file path.\" + err.Error())",
            "category": "Path Traversal",
            "severity": "HIGH",
            "cwe": "CWE-22",
            "description": "Path traversal vulnerability in file operations",
            "context": [
              "\tif l.File == \"\" {",
              "\t\treturn 0",
              "\t}",
              "\tfiles, err := filepath.Glob(l.File)",
              "\tif err != nil {",
              "\t\tcfgLogger.WithField(\"filePath\", l.File).Warn(\"Error while reading file path.\" + err.Error())",
              "\t\treturn 0",
              "\t}",
              "\treturn len(files)",
              "}",
              ""
            ],
            "confidence": 0.6,
            "agent_specific": true,
            "default_config_impact": false
          },
          "file_exists": true,
          "line_verified": true,
          "is_false_positive": false,
          "false_positive_reason": "",
          "actual_line": "cfgLogger.WithField(\"filePath\", l.File).Warn(\"Error while reading file path.\" + err.Error())",
          "verification_status": "VERIFIED",
          "confidence_adjusted": 0.6
        }
      ]
    }
  }
}